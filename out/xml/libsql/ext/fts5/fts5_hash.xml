<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/fts5/fts5_hash.c"><comment type="block">/*
** 2014 August 11
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
*/</comment>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>Fts5HashEntry</name></name></type> <name>Fts5HashEntry</name>;</typedef>

<comment type="block">/*
** This file contains the implementation of an in-memory hash table used
** to accumuluate "term -&gt; doclist" content before it is flused to a level-0
** segment.
*/</comment>


<struct>struct <name>Fts5Hash</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>eDetail</name></decl>;</decl_stmt>                    <comment type="block">/* Copy of Fts5Config.eDetail */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pnByte</name></decl>;</decl_stmt>                    <comment type="block">/* Pointer to bytes counter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nEntry</name></decl>;</decl_stmt>                     <comment type="block">/* Number of entries currently in hash */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSlot</name></decl>;</decl_stmt>                      <comment type="block">/* Size of aSlot[] array */</comment>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pScan</name></decl>;</decl_stmt>           <comment type="block">/* Current ordered scan item */</comment>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>aSlot</name></decl>;</decl_stmt>          <comment type="block">/* Array of hash slots */</comment>
}</block>;</struct>

<comment type="block">/*
** Each entry in the hash table is represented by an object of the 
** following type. Each object, its key (a nul-terminated string) and 
** its current data are stored in a single memory allocation. The 
** key immediately follows the object in memory. The position list
** data immediately follows the key data in memory.
**
** The data that follows the key is in a similar, but not identical format
** to the doclist data stored in the database. It is:
**
**   * Rowid, as a varint
**   * Position list, without 0x00 terminator.
**   * Size of previous position list and rowid, as a 4 byte
**     big-endian integer.
**
** iRowidOff:
**   Offset of last rowid written to data area. Relative to first byte of
**   structure.
**
** nData:
**   Bytes of data written since iRowidOff.
*/</comment>
<struct>struct <name>Fts5HashEntry</name> <block>{
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pHashNext</name></decl>;</decl_stmt>       <comment type="block">/* Next hash entry with same hash-key */</comment>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pScanNext</name></decl>;</decl_stmt>       <comment type="block">/* Next entry in sorted order */</comment>
  
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name></decl>;</decl_stmt>                     <comment type="block">/* Total size of allocation */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iSzPoslist</name></decl>;</decl_stmt>                 <comment type="block">/* Offset of space for 4-byte poslist size */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nData</name></decl>;</decl_stmt>                      <comment type="block">/* Total bytes of data (incl. structure) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>                       <comment type="block">/* Length of key in bytes */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>bDel</name></decl>;</decl_stmt>                        <comment type="block">/* Set delete-flag @ iSzPoslist */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>bContent</name></decl>;</decl_stmt>                    <comment type="block">/* Set content-flag (detail=none mode) */</comment>
  <decl_stmt><decl><type><name>i16</name></type> <name>iCol</name></decl>;</decl_stmt>                       <comment type="block">/* Column of last value written */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iPos</name></decl>;</decl_stmt>                       <comment type="block">/* Position of last value written */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>                     <comment type="block">/* Rowid of last value written */</comment>
}</block>;</struct>

<comment type="block">/*
** Eqivalent to:
**
**   char *fts5EntryKey(Fts5HashEntry *pEntry){ return zKey; }
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5EntryKey</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( ((char *)(&amp;(p)[1])) )</cpp:value></cpp:define>


<comment type="block">/*
** Allocate a new hash table.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5HashNew</name><parameter_list>(<parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, <parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppNew</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppNew</name> <operator>=</operator> <name>pNew</name> <operator>=</operator> <operator>(</operator><name>Fts5Hash</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Hash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pnByte</name></name> <operator>=</operator> <name>pnByte</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>eDetail</name></name> <operator>=</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nSlot</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pNew</name><operator>-&gt;</operator><name>nSlot</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aSlot</name></name> <operator>=</operator> <operator>(</operator><name>Fts5HashEntry</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>aSlot</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>ppNew</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>aSlot</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free a hash table object.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5HashFree</name><parameter_list>(<parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pHash</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5HashClear</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Empty (but do not delete) a hash table.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5HashClear</name><parameter_list>(<parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pSlot</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>pSlot</name><operator>=</operator><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>pSlot</name></expr>;</condition> <incr><expr><name>pSlot</name><operator>=</operator><name>pNext</name></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pSlot</name><operator>-&gt;</operator><name>pHashNext</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHash</name><operator>-&gt;</operator><name>nEntry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>fts5HashKey</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nSlot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>h</name> <operator>^</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>(</operator><name>h</name> <operator>%</operator> <name>nSlot</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>fts5HashKey2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nSlot</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>h</name> <operator>^</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <name>h</name> <operator>^</operator> <name>b</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>h</name> <operator>%</operator> <name>nSlot</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Resize the hash table by doubling the number of slots.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5HashResize</name><parameter_list>(<parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>apNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>apOld</name> <init>= <expr><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>apNew</name> <operator>=</operator> <operator>(</operator><name>Fts5HashEntry</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nNew</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>apNew</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>apNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nNew</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <while>while<condition>( <expr><name><name>apOld</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iHash</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>apOld</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>apOld</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pHashNext</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>iHash</name> <operator>=</operator> <call><name>fts5HashKey</name><argument_list>(<argument><expr><name>nNew</name></expr></argument>, <argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><call><name>fts5EntryKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><call><name>fts5EntryKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pHashNext</name></name> <operator>=</operator> <name><name>apNew</name><index>[<expr><name>iHash</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>apNew</name><index>[<expr><name>iHash</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>apOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name></name> <operator>=</operator> <name>apNew</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5HashAddPoslistSize</name><parameter_list>(
  <parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pPtr</name> <init>= <expr><ternary><condition><expr><name>p2</name></expr> ?</condition><then> <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>p2</name></expr> </then><else>: <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>p</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nData</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pHash</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nData</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bDel</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pPtr</name><index>[<expr><name>nData</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bContent</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pPtr</name><index>[<expr><name>nData</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nSz</name> <init>= <expr><operator>(</operator><name>nData</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>       <comment type="block">/* Size in bytes */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>nPos</name> <init>= <expr><name>nSz</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>bDel</name></name></expr></init></decl>;</decl_stmt>                     <comment type="block">/* Value of nPos field */</comment>

      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bDel</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>bDel</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nPos</name><operator>&lt;=</operator><literal type="number">127</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pPtr</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>nPos</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><call><name>sqlite3Fts5GetVarintLen</name><argument_list>(<argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name>nPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPtr</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name> <operator>+</operator> <name>nByte</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPtr</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPtr</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nData</name> <operator>+=</operator> <operator>(</operator><name>nByte</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>nRet</name> <operator>=</operator> <name>nData</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p2</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bDel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bContent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name>nData</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>nRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Add an entry to the in-memory hash table. The key is the concatenation
** of bByte and (pToken/nToken). The value is (iRowid/iCol/iPos).
**
**     (bByte || pToken) -&gt; (iRowid,iCol,iPos)
**
** Or, if iCol is negative, then the value is a delete marker.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5HashWrite</name><parameter_list>(
  <parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>,                     <comment type="block">/* Rowid for this entry */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>,                       <comment type="block">/* Column token appears in (-ve -&gt; delete) */</comment>
  <parameter><decl><type><name>int</name></type> <name>iPos</name></decl></parameter>,                       <comment type="block">/* Position of token within column */</comment>
  <parameter><decl><type><name>char</name></type> <name>bByte</name></decl></parameter>,                     <comment type="block">/* First byte of token */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>  <comment type="block">/* Token to add or remove to or from index */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iHash</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nIncr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Amount to increment (*pHash-&gt;pnByte) by */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bNew</name></decl>;</decl_stmt>                       <comment type="block">/* If non-delete entry should be written */</comment>
  
  <expr_stmt><expr><name>bNew</name> <operator>=</operator> <operator>(</operator><name><name>pHash</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_FULL</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Attempt to locate an existing hash entry */</comment>
  <expr_stmt><expr><name>iHash</name> <operator>=</operator> <call><name>fts5HashKey2</name><argument_list>(<argument><expr><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u8</name><operator>)</operator><name>bByte</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name><index>[<expr><name>iHash</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pHashNext</name></name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zKey</name> <init>= <expr><call><name>fts5EntryKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>zKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>bByte</name> 
     <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nKey</name></name><operator>==</operator><name>nToken</name>
     <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zKey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> 
    )</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* If an existing hash entry cannot be found, create a new one. */</comment>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Figure out how much space to allocate */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>nToken</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&lt;</operator><literal type="number">128</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nByte</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Grow the Fts5Hash.aSlot[] array if necessary. */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pHash</name><operator>-&gt;</operator><name>nEntry</name></name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;=</operator><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fts5HashResize</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>iHash</name> <operator>=</operator> <call><name>fts5HashKey2</name><argument_list>(<argument><expr><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u8</name><operator>)</operator><name>bByte</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Allocate new Fts5HashEntry and add it to the hash table. */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Fts5HashEntry</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nByte</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zKey</name> <operator>=</operator> <call><name>fts5EntryKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>bByte</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zKey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iHash</name><operator>==</operator><call><name>fts5HashKey</name><argument_list>(<argument><expr><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zKey</name></expr></argument>, <argument><expr><name>nToken</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nKey</name></name> <operator>=</operator> <name>nToken</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zKey</name><index>[<expr><name>nToken</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name>nToken</name><operator>+</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pHashNext</name></name> <operator>=</operator> <name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name><index>[<expr><name>iHash</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name><index>[<expr><name>iHash</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHash</name><operator>-&gt;</operator><name>nEntry</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* Add the first rowid field to the hash-entry */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr>]</index></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pHash</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>pHash</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if><else>else<block>{<block_content>

    <comment type="block">/* Appending to an existing hash-entry. Check that there is enough 
    ** space to append the largest possible new entry. Worst case scenario 
    ** is:
    **
    **     + 9 bytes for a new rowid,
    **     + 4 byte reserved for the "poslist size" varint.
    **     + 1 byte for a "new column" byte,
    **     + 3 bytes for a new column number (16-bit max) as a varint,
    **     + 5 bytes for the new position offset (32-bit max).
    */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nData</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nNew</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>Fts5HashEntry</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nNew</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name><index>[<expr><name>iHash</name></expr>]</index></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name><operator>!=</operator><name>p</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pHashNext</name></name></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nIncr</name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nData</name></name><operator>)</operator> <operator>&gt;=</operator> <operator>(</operator><literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pPtr</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>

  <comment type="block">/* If this is a new rowid, append the 4-byte size field for the previous
  ** entry, and the new rowid for this entry.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>iRowid</name><operator>!=</operator><name><name>p</name><operator>-&gt;</operator><name>iRowid</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u64</name></type> <name>iDiff</name> <init>= <expr><operator>(</operator><name>u64</name><operator>)</operator><name>iRowid</name> <operator>-</operator> <operator>(</operator><name>u64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>iRowid</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5HashAddPoslistSize</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPtr</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bNew</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSzPoslist</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pHash</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>pHash</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pHash</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bContent</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Append a new column value, if necessary */</comment>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>iCol</name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>!=</operator><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pHash</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pPtr</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPtr</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <operator>(</operator><name>i16</name><operator>)</operator><name>iCol</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>bNew</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <operator>(</operator><name>i16</name><operator>)</operator><operator>(</operator><name>iPos</name> <operator>=</operator> <name>iCol</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* Append the new position offset, if necessary */</comment>
      <if_stmt><if>if<condition>( <expr><name>bNew</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPtr</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iPos</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>iPos</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name> <operator>=</operator> <name>iPos</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* This is a delete. Set the delete flag. */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bDel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>nIncr</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>pHash</name><operator>-&gt;</operator><name>pnByte</name></name> <operator>+=</operator> <name>nIncr</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Arguments pLeft and pRight point to linked-lists of hash-entry objects,
** each sorted in key order. This function merges the two lists into a
** single list and returns a pointer to its first element.
*/</comment>
<function><type><specifier>static</specifier> <name>Fts5HashEntry</name> <modifier>*</modifier></type><name>fts5HashEntryMerge</name><parameter_list>(
  <parameter><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pLeft</name></decl></parameter>,
  <parameter><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pRight</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><name>pLeft</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><name>pRight</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name> <init>= <expr><operator>&amp;</operator><name>pRet</name></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><name>p1</name> <operator>||</operator> <name>p2</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>p1</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>p2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>p2</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>p1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zKey1</name> <init>= <expr><call><name>fts5EntryKey</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zKey2</name> <init>= <expr><call><name>fts5EntryKey</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while<condition>( <expr><name><name>zKey1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>zKey2</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

      <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name>u8</name><operator>)</operator><name><name>zKey1</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>&gt;</operator><operator>(</operator><operator>(</operator><name>u8</name><operator>)</operator><name><name>zKey2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> )</condition><block>{<block_content>
        <comment type="block">/* p2 is smaller */</comment>
        <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>p2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ppOut</name> <operator>=</operator> <operator>&amp;</operator><name><name>p2</name><operator>-&gt;</operator><name>pScanNext</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p2</name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>pScanNext</name></name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <comment type="block">/* p1 is smaller */</comment>
        <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ppOut</name> <operator>=</operator> <operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>pScanNext</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p1</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>pScanNext</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Extract all tokens from hash table iHash and link them into a list
** in sorted order. The hash table is cleared before returning. It is
** the responsibility of the caller to free the elements of the returned
** list.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5HashEntrySort</name><parameter_list>(
  <parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>,   <comment type="block">/* Query prefix, if any */</comment>
  <parameter><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppSorted</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nMergeSlot</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSlot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppSorted</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ap</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nMergeSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>ap</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nMergeSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>iSlot</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iSlot</name><operator>&lt;</operator><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name></expr>;</condition> <incr><expr><name>iSlot</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pIter</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>pIter</name><operator>=</operator><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name><index>[<expr><name>iSlot</name></expr>]</index></name></expr>;</init> <condition><expr><name>pIter</name></expr>;</condition> <incr><expr><name>pIter</name><operator>=</operator><name><name>pIter</name><operator>-&gt;</operator><name>pHashNext</name></name></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>pTerm</name><operator>==</operator><literal type="number">0</literal> 
       <operator>||</operator> <operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>nKey</name></name><operator>+</operator><literal type="number">1</literal><operator>&gt;=</operator><name>nTerm</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><call><name>fts5EntryKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
      )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pEntry</name> <init>= <expr><name>pIter</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>pScanNext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>fts5HashEntryMerge</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>, <argument><expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>pEntry</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name>pList</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nMergeSlot</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pList</name> <operator>=</operator> <call><name>fts5HashEntryMerge</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><name><name>ap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pHash</name><operator>-&gt;</operator><name>nEntry</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppSorted</name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Query the hash table for a doclist associated with term pTerm/nTerm.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5HashQuery</name><parameter_list>(
  <parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>,                <comment type="block">/* Hash table to query */</comment>
  <parameter><decl><type><name>int</name></type> <name>nPre</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>,   <comment type="block">/* Query term */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>,                   <comment type="block">/* OUT: Pointer to new object */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnDoclist</name></decl></parameter>                  <comment type="block">/* OUT: Size of doclist in bytes */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iHash</name> <init>= <expr><call><name>fts5HashKey</name><argument_list>(<argument><expr><name><name>pHash</name><operator>-&gt;</operator><name>nSlot</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name><name>pHash</name><operator>-&gt;</operator><name>aSlot</name><index>[<expr><name>iHash</name></expr>]</index></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pHashNext</name></name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>zKey</name> <operator>=</operator> <call><name>fts5EntryKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nKey</name></name><operator>+</operator><literal type="number">1</literal><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nTerm</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>nKey</name></name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nHashPre</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nTerm</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nList</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>-</operator> <name>nHashPre</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ppOut</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nPre</name> <operator>+</operator> <name>nList</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pRet</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>pFaux</name> <init>= <expr><operator>(</operator><name>Fts5HashEntry</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pRet</name><index>[<expr><name>nPre</name><operator>-</operator><name>nHashPre</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRet</name><index>[<expr><name>nPre</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><index>[<expr><name>nHashPre</name></expr>]</index></expr></argument>, <argument><expr><name>nList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nList</name> <operator>+=</operator> <call><name>fts5HashAddPoslistSize</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pFaux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pnDoclist</name> <operator>=</operator> <name>nList</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pnDoclist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnDoclist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5HashScanInit</name><parameter_list>(
  <parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                    <comment type="block">/* Hash table to query */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>    <comment type="block">/* Query prefix */</comment>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>fts5HashEntrySort</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pScan</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3Fts5HashScanNext</name><parameter_list>(<parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>sqlite3Fts5HashScanEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pScan</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pScan</name><operator>-&gt;</operator><name>pScanNext</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5HashScanEof</name><parameter_list>(<parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pScan</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3Fts5HashScanEntry</name><parameter_list>(
  <parameter><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzTerm</name></decl></parameter>,            <comment type="block">/* OUT: term (nul-terminated) */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDoclist</name></decl></parameter>,           <comment type="block">/* OUT: pointer to doclist */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnDoclist</name></decl></parameter>                  <comment type="block">/* OUT: size of doclist in bytes */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5HashEntry</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>p</name> <operator>=</operator> <name><name>pHash</name><operator>-&gt;</operator><name>pScan</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zKey</name> <init>= <expr><call><name>fts5EntryKey</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5HashAddPoslistSize</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pzTerm</name> <operator>=</operator> <name>zKey</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppDoclist</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>zKey</name><index>[<expr><name>nTerm</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnDoclist</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nData</name></name> <operator>-</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5HashEntry</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nTerm</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pzTerm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppDoclist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnDoclist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
