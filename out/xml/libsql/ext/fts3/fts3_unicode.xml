<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/fts3/fts3_unicode.c"><comment type="block">/*
** 2012 May 24
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** Implementation of the "unicode" full-text-search tokenizer.
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_DISABLE_FTS3_UNICODE</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts3Int.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts3_tokenizer.h"</cpp:file></cpp:include>

<comment type="block">/*
** The following two macros - READ_UTF8 and WRITE_UTF8 - have been copied
** from the sqlite3 source file utf.c. If this file is compiled as part
** of the amalgamation, they are not required.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_AMALGAMATION</name></cpp:ifndef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sqlite3Utf8Trans1</name><index>[]</index></name> <init>= <expr><block>{
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
  <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
  <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x17</literal></expr>,
  <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x1f</literal></expr>,
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
  <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x07</literal></expr>,
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_UTF8</name><parameter_list>(<parameter><type><name>zIn</name></type></parameter>, <parameter><type><name>zTerm</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>                           \
  <cpp:value>c = *(zIn++);                                            \
  if( c&gt;=0xc0 ){                                           \
    c = sqlite3Utf8Trans1[c-0xc0];                         \
    while( zIn!=zTerm &amp;&amp; (*zIn &amp; 0xc0)==0x80 ){            \
      c = (c&lt;&lt;6) + (0x3f &amp; *(zIn++));                      \
    }                                                      \
    if( c&lt;0x80                                             \
        || (c&amp;0xFFFFF800)==0xD800                          \
        || (c&amp;0xFFFFFFFE)==0xFFFE ){  c = 0xFFFD; }        \
  }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_UTF8</name><parameter_list>(<parameter><type><name>zOut</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{                          \
  if( c&lt;0x00080 ){                                     \
    *zOut++ = (u8)(c&amp;0xFF);                            \
  }                                                    \
  else if( c&lt;0x00800 ){                                \
    *zOut++ = 0xC0 + (u8)((c&gt;&gt;6)&amp;0x1F);                \
    *zOut++ = 0x80 + (u8)(c &amp; 0x3F);                   \
  }                                                    \
  else if( c&lt;0x10000 ){                                \
    *zOut++ = 0xE0 + (u8)((c&gt;&gt;12)&amp;0x0F);               \
    *zOut++ = 0x80 + (u8)((c&gt;&gt;6) &amp; 0x3F);              \
    *zOut++ = 0x80 + (u8)(c &amp; 0x3F);                   \
  }else{                                               \
    *zOut++ = 0xF0 + (u8)((c&gt;&gt;18) &amp; 0x07);             \
    *zOut++ = 0x80 + (u8)((c&gt;&gt;12) &amp; 0x3F);             \
    *zOut++ = 0x80 + (u8)((c&gt;&gt;6) &amp; 0x3F);              \
    *zOut++ = 0x80 + (u8)(c &amp; 0x3F);                   \
  }                                                    \
}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ifndef SQLITE_AMALGAMATION */</comment>

<typedef>typedef <type><name><name>struct</name> <name>unicode_tokenizer</name></name></type> <name>unicode_tokenizer</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>unicode_cursor</name></name></type> <name>unicode_cursor</name>;</typedef>

<struct>struct <name>unicode_tokenizer</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_tokenizer</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eRemoveDiacritic</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nException</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aiException</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>unicode_cursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_tokenizer_cursor</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aInput</name></decl>;</decl_stmt>    <comment type="block">/* Input text being tokenized */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInput</name></decl>;</decl_stmt>                     <comment type="block">/* Size of aInput[] in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>                       <comment type="block">/* Current offset within aInput[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iToken</name></decl>;</decl_stmt>                     <comment type="block">/* Index of next token to be returned */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zToken</name></decl>;</decl_stmt>                   <comment type="block">/* storage for current token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name></decl>;</decl_stmt>                     <comment type="block">/* space allocated at zToken */</comment>
}</block>;</struct>


<comment type="block">/*
** Destroy a tokenizer allocated by unicodeCreate().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unicodeDestroy</name><parameter_list>(<parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pTokenizer</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>unicode_tokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unicode_tokenizer</name> <operator>*</operator><operator>)</operator><name>pTokenizer</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aiException</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** As part of a tokenchars= or separators= option, the CREATE VIRTUAL TABLE
** statement has specified that the tokenizer for this table shall consider
** all characters in string zIn/nIn to be separators (if bAlnum==0) or
** token characters (if bAlnum==1).
**
** For each codepoint in the zIn/nIn string, this function checks if the
** sqlite3FtsUnicodeIsalnum() function already returns the desired result.
** If so, no action is taken. Otherwise, the codepoint is added to the 
** unicode_tokenizer.aiException[] array. For the purposes of tokenization,
** the return value of sqlite3FtsUnicodeIsalnum() is inverted for all
** codepoints in the aiException[] array.
**
** If a standalone diacritic mark (one that sqlite3FtsUnicodeIsdiacritic()
** identifies as a diacritic) occurs in the zIn/nIn string it is ignored.
** It is not possible to change the behavior of the tokenizer with respect
** to these codepoints.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unicodeAddExceptions</name><parameter_list>(
  <parameter><decl><type><name>unicode_tokenizer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,           <comment type="block">/* Tokenizer to add exceptions to */</comment>
  <parameter><decl><type><name>int</name></type> <name>bAlnum</name></decl></parameter>,                     <comment type="block">/* Replace Isalnum() return value with this */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl></parameter>,                <comment type="block">/* Array of characters to make exceptions */</comment>
  <parameter><decl><type><name>int</name></type> <name>nIn</name></decl></parameter>                         <comment type="block">/* Length of z in bytes */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>nIn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iCode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nEntry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>bAlnum</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bAlnum</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>( <expr><name>z</name><operator>&lt;</operator><name>zTerm</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>READ_UTF8</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><call><name>sqlite3FtsUnicodeIsalnum</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFFE</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3FtsUnicodeIsalnum</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr></argument>)</argument_list></call><operator>!=</operator><name>bAlnum</name> 
     <operator>&amp;&amp;</operator> <call><name>sqlite3FtsUnicodeIsdiacritic</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> 
    )</condition><block>{<block_content>
      <expr_stmt><expr><name>nEntry</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if<condition>( <expr><name>nEntry</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aNew</name></decl>;</decl_stmt>                    <comment type="block">/* New aiException[] array */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nNew</name></decl>;</decl_stmt>                     <comment type="block">/* Number of valid entries in array aNew[] */</comment>

    <expr_stmt><expr><name>aNew</name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aiException</name></name></expr></argument>,<argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nException</name></name><operator>+</operator><name>nEntry</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nNew</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nException</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zIn</name></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>z</name><operator>&lt;</operator><name>zTerm</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>READ_UTF8</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3FtsUnicodeIsalnum</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr></argument>)</argument_list></call><operator>!=</operator><name>bAlnum</name> 
       <operator>&amp;&amp;</operator> <call><name>sqlite3FtsUnicodeIsdiacritic</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>
      )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nNew</name> <operator>&amp;&amp;</operator> <name><name>aNew</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>nNew</name></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aNew</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>aNew</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name><name>aNew</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nNew</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aiException</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nException</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if the p-&gt;aiException[] array contains the value iCode.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unicodeIsException</name><parameter_list>(<parameter><decl><type><name>unicode_tokenizer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nException</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>aiException</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iLo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iHi</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nException</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>( <expr><name>iHi</name><operator>&gt;=</operator><name>iLo</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iTest</name> <init>= <expr><operator>(</operator><name>iHi</name> <operator>+</operator> <name>iLo</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>iCode</name><operator>==</operator><name><name>a</name><index>[<expr><name>iTest</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iCode</name><operator>&gt;</operator><name><name>a</name><index>[<expr><name>iTest</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iLo</name> <operator>=</operator> <name>iTest</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iHi</name> <operator>=</operator> <name>iTest</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if, for the purposes of tokenization, codepoint iCode is
** considered a token character (not a separator).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unicodeIsAlnum</name><parameter_list>(<parameter><decl><type><name>unicode_tokenizer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCode</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><call><name>sqlite3FtsUnicodeIsalnum</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xFFFFFFFE</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3FtsUnicodeIsalnum</name><argument_list>(<argument><expr><name>iCode</name></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>unicodeIsException</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Create a new tokenizer instance.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unicodeCreate</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Size of array argv[] */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>azArg</name></decl></parameter>,      <comment type="block">/* Tokenizer creation arguments */</comment>
  <parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>          <comment type="block">/* OUT: New tokenizer handle */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unicode_tokenizer</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>        <comment type="block">/* New tokenizer object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>unicode_tokenizer</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unicode_tokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unicode_tokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>eRemoveDiacritic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nArg</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">19</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"remove_diacritics=1"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>eRemoveDiacritic</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">19</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"remove_diacritics=0"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>eRemoveDiacritic</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">19</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"remove_diacritics=2"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>eRemoveDiacritic</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">11</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"tokenchars="</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unicodeAddExceptions</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">11</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"separators="</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>unicodeAddExceptions</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name><operator>-</operator><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block>{<block_content>
      <comment type="block">/* Unrecognized argument */</comment>
      <expr_stmt><expr><name>rc</name>  <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>unicodeDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>sqlite3_tokenizer</name> <operator>*</operator><operator>)</operator><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>sqlite3_tokenizer</name> <operator>*</operator><operator>)</operator><name>pNew</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Prepare to begin tokenizing a particular string.  The input
** string to be tokenized is pInput[0..nBytes-1].  A cursor
** used to incrementally tokenize this string is returned in 
** *ppCursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unicodeOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,           <comment type="block">/* The tokenizer */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aInput</name></decl></parameter>,             <comment type="block">/* Input string */</comment>
  <parameter><decl><type><name>int</name></type> <name>nInput</name></decl></parameter>,                     <comment type="block">/* Size of string aInput in bytes */</comment>
  <parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>   <comment type="block">/* OUT: New cursor object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unicode_cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <operator>(</operator><name>unicode_cursor</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unicode_cursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCsr</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unicode_cursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aInput</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>aInput</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>aInput</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nInput</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aInput</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nInput</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nInput</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>aInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nInput</name></name> <operator>=</operator> <name>nInput</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close a tokenization cursor previously opened by a call to
** simpleOpen() above.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unicodeClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unicode_cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>unicode_cursor</name> <operator>*</operator><operator>)</operator> <name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Extract the next token from a tokenization cursor.  The cursor must
** have been opened by a prior call to simpleOpen().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>unicodeNext</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier></type><name>pC</name></decl></parameter>,   <comment type="block">/* Cursor returned by simpleOpen */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>paToken</name></decl></parameter>,           <comment type="block">/* OUT: Token text */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnToken</name></decl></parameter>,                   <comment type="block">/* OUT: Number of bytes at *paToken */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piStart</name></decl></parameter>,                   <comment type="block">/* OUT: Starting offset of token */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piEnd</name></decl></parameter>,                     <comment type="block">/* OUT: Ending offset of token */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piPos</name></decl></parameter>                      <comment type="block">/* OUT: Position integer of token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unicode_cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>unicode_cursor</name> <operator>*</operator><operator>)</operator><name>pC</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unicode_tokenizer</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unicode_tokenizer</name> <operator>*</operator><operator>)</operator><name><name>pCsr</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pTokenizer</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iCode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aInput</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zStart</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aInput</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>nInput</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Scan past any delimiter characters before the start of the next token.
  ** Return SQLITE_DONE early if this takes us all the way to the end of 
  ** the input.  */</comment>
  <while>while<condition>( <expr><name>z</name><operator>&lt;</operator><name>zTerm</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>READ_UTF8</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>unicodeIsAlnum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>zStart</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>zStart</name><operator>&gt;=</operator><name>zTerm</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_DONE</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>zOut</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>zToken</name></name></expr>;</expr_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iOut</name></decl>;</decl_stmt>

    <comment type="block">/* Grow the output buffer if required. */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>zOut</name><operator>-</operator><name><name>pCsr</name><operator>-&gt;</operator><name>zToken</name></name><operator>)</operator><operator>&gt;=</operator><operator>(</operator><name><name>pCsr</name><operator>-&gt;</operator><name>nAlloc</name></name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNew</name> <init>= <expr><call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zToken</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nAlloc</name></name><operator>+</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zNew</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>zOut</name> <operator>=</operator> <operator>&amp;</operator><name><name>zNew</name><index>[<expr><name>zOut</name> <operator>-</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>zToken</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zToken</name></name> <operator>=</operator> <name>zNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Write the folded case of the last character read to the output */</comment>
    <expr_stmt><expr><name>zEnd</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOut</name> <operator>=</operator> <call><name>sqlite3FtsUnicodeFold</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>eRemoveDiacritic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iOut</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>WRITE_UTF8</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>iOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the cursor is not at EOF, read the next character */</comment>
    <if_stmt><if>if<condition>( <expr><name>z</name><operator>&gt;=</operator><name>zTerm</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>READ_UTF8</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>iCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><call><name>unicodeIsAlnum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr></argument>)</argument_list></call> 
       <operator>||</operator> <call><name>sqlite3FtsUnicodeIsdiacritic</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iCode</name></expr></argument>)</argument_list></call></expr>
  )</condition>;</do>

  <comment type="block">/* Set the output variables and return. */</comment>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iOff</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>z</name> <operator>-</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aInput</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>paToken</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>zToken</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnToken</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zOut</name> <operator>-</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>zToken</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>piStart</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zStart</name> <operator>-</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aInput</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>piEnd</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zEnd</name> <operator>-</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aInput</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>piPos</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iToken</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set *ppModule to a pointer to the sqlite3_tokenizer_module 
** structure for the unicode tokenizer.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts3UnicodeTokenizer</name><parameter_list>(<parameter><decl><type><name>sqlite3_tokenizer_module</name> <specifier>const</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>ppModule</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_tokenizer_module</name></type> <name>module</name> <init>= <expr><block>{
    <expr><literal type="number">0</literal></expr>,
    <expr><name>unicodeCreate</name></expr>,
    <expr><name>unicodeDestroy</name></expr>,
    <expr><name>unicodeOpen</name></expr>,
    <expr><name>unicodeClose</name></expr>,
    <expr><name>unicodeNext</name></expr>,
    <expr><literal type="number">0</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppModule</name> <operator>=</operator> <operator>&amp;</operator><name>module</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_FTS3) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ifndef SQLITE_DISABLE_FTS3_UNICODE */</comment>
</unit>
