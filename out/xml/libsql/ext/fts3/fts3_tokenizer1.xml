<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/fts3/fts3_tokenizer1.c"><comment type="block">/*
** 2006 Oct 10
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** Implementation of the "simple" full-text-search tokenizer.
*/</comment>

<comment type="block">/*
** The code in this file is only compiled if:
**
**     * The FTS3 module is being built as an extension
**       (in which case SQLITE_CORE is not defined), or
**
**     * The FTS3 module is being built into the core of
**       SQLite (in which case SQLITE_ENABLE_FTS3 is defined).
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts3Int.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS3</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts3_tokenizer.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>simple_tokenizer</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_tokenizer</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>delim</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>             <comment type="block">/* flag ASCII delimiters */</comment>
}</block></struct></type> <name>simple_tokenizer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>simple_tokenizer_cursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_tokenizer_cursor</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pInput</name></decl>;</decl_stmt>          <comment type="block">/* input we are tokenizing */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBytes</name></decl>;</decl_stmt>                  <comment type="block">/* size of the input */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOffset</name></decl>;</decl_stmt>                 <comment type="block">/* current position in pInput */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iToken</name></decl>;</decl_stmt>                  <comment type="block">/* index of next token to be returned */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pToken</name></decl>;</decl_stmt>                <comment type="block">/* storage for current token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTokenAllocated</name></decl>;</decl_stmt>         <comment type="block">/* space allocated to zToken buffer */</comment>
}</block></struct></type> <name>simple_tokenizer_cursor</name>;</typedef>


<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleDelim</name><parameter_list>(<parameter><decl><type><name>simple_tokenizer</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>c</name><operator>&lt;</operator><literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>delim</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3_isalnum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name>x</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>x</name><operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>x</name><operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><literal type="char">'z'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Create a new tokenizer instance.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleCreate</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTokenizer</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>simple_tokenizer</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>simple_tokenizer</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>t</name><operator>==</operator><name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* TODO(shess) Delimiters need to remain the same from run to run,
  ** else we need to reindex.  One solution would be a meta-table to
  ** track such information in the database, then we'd only want this
  ** information on the initial create.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <comment type="block">/* We explicitly don't support UTF-8 delimiters for now. */</comment>
      <if_stmt><if>if<condition>( <expr><name>ch</name><operator>&gt;=</operator><literal type="number">0x80</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>delim</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* Mark non-alphanumeric ASCII characters as delimiters */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">0x80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>delim</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><call><name>fts3_isalnum</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTokenizer</name> <operator>=</operator> <operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Destroy a tokenizer
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleDestroy</name><parameter_list>(<parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pTokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Prepare to begin tokenizing a particular string.  The input
** string to be tokenized is pInput[0..nBytes-1].  A cursor
** used to incrementally tokenize this string is returned in 
** *ppCursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>,         <comment type="block">/* The tokenizer */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBytes</name></decl></parameter>,        <comment type="block">/* String to be tokenized */</comment>
  <parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCursor</name></decl></parameter>    <comment type="block">/* OUT: Tokenization cursor */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>simple_tokenizer_cursor</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>pTokenizer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>simple_tokenizer_cursor</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pInput</name></name> <operator>=</operator> <name>pInput</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pInput</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nBytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBytes</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nBytes</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>pInput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nBytes</name></name> <operator>=</operator> <name>nBytes</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>                 <comment type="block">/* start tokenizing at the beginning */</comment>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>iToken</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pToken</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>               <comment type="block">/* no space allocated, yet. */</comment>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nTokenAllocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close a tokenization cursor previously opened by a call to
** simpleOpen() above.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>simple_tokenizer_cursor</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>simple_tokenizer_cursor</name> <operator>*</operator><operator>)</operator> <name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Extract the next token from a tokenization cursor.  The cursor must
** have been opened by a prior call to simpleOpen().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleNext</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,  <comment type="block">/* Cursor returned by simpleOpen */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppToken</name></decl></parameter>,               <comment type="block">/* OUT: *ppToken is the token text */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBytes</name></decl></parameter>,                       <comment type="block">/* OUT: Number of bytes in token */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piStartOffset</name></decl></parameter>,                 <comment type="block">/* OUT: Starting offset of token */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piEndOffset</name></decl></parameter>,                   <comment type="block">/* OUT: Ending offset of token */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piPosition</name></decl></parameter>                     <comment type="block">/* OUT: Position integer of token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>simple_tokenizer_cursor</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>simple_tokenizer_cursor</name> <operator>*</operator><operator>)</operator> <name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>simple_tokenizer</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>simple_tokenizer</name> <operator>*</operator><operator>)</operator> <name><name>pCursor</name><operator>-&gt;</operator><name>pTokenizer</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>pInput</name></name></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name><operator>&lt;</operator><name><name>c</name><operator>-&gt;</operator><name>nBytes</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iStartOffset</name></decl>;</decl_stmt>

    <comment type="block">/* Scan past delimiter characters */</comment>
    <while>while<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name><operator>&lt;</operator><name><name>c</name><operator>-&gt;</operator><name>nBytes</name></name> <operator>&amp;&amp;</operator> <call><name>simpleDelim</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Count non-delimiter characters. */</comment>
    <expr_stmt><expr><name>iStartOffset</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name></expr>;</expr_stmt>
    <while>while<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name><operator>&lt;</operator><name><name>c</name><operator>-&gt;</operator><name>nBytes</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>simpleDelim</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name><operator>&gt;</operator><name>iStartOffset</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name><operator>-</operator><name>iStartOffset</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><name><name>c</name><operator>-&gt;</operator><name>nTokenAllocated</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nTokenAllocated</name></name> <operator>=</operator> <name>n</name><operator>+</operator><literal type="number">20</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pToken</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>nTokenAllocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pNew</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pToken</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <comment type="block">/* TODO(shess) This needs expansion to handle UTF-8
        ** case-insensitivity.
        */</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>ch</name> <init>= <expr><name><name>p</name><index>[<expr><name>iStartOffset</name><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pToken</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>ch</name><operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>ch</name><operator>&lt;=</operator><literal type="char">'Z'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ch</name><operator>-</operator><literal type="char">'A'</literal><operator>+</operator><literal type="char">'a'</literal></expr> </then><else>: <expr><name>ch</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>ppToken</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>pToken</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pnBytes</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piStartOffset</name> <operator>=</operator> <name>iStartOffset</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piEndOffset</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>iOffset</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piPosition</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>iToken</name></name><operator>++</operator></expr>;</expr_stmt>

      <return>return <expr><name>SQLITE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>SQLITE_DONE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The set of routines that implement the simple tokenizer
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_tokenizer_module</name></type> <name>simpleTokenizerModule</name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr>,
  <expr><name>simpleCreate</name></expr>,
  <expr><name>simpleDestroy</name></expr>,
  <expr><name>simpleOpen</name></expr>,
  <expr><name>simpleClose</name></expr>,
  <expr><name>simpleNext</name></expr>,
  <expr><literal type="number">0</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Allocate a new simple tokenizer.  Return a pointer to the new
** tokenizer in *ppModule
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts3SimpleTokenizerModule</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer_module</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type><name>ppModule</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>ppModule</name> <operator>=</operator> <operator>&amp;</operator><name>simpleTokenizerModule</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_FTS3) */</comment>
</unit>
