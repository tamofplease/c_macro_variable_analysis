<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/lsm1/lsm-test/lsmtest6.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>OomTest</name></name></type> <name>OomTest</name>;</typedef>
<struct>struct <name>OomTest</name> <block>{
  <decl_stmt><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iNext</name></decl>;</decl_stmt>                      <comment type="block">/* Next value to pass to testMallocOom() */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFail</name></decl>;</decl_stmt>                      <comment type="block">/* Number of OOM events injected */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bEnable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Test case error code */</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomStart</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OomTest</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bEnable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFail</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <call><name>tdb_lsm_env</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>xOomHook</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFail</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>testOomContinue</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nFail</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testMallocOom</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>xOomHook</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomEnable</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bEnable</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bEnable</name></name> <operator>=</operator> <name>bEnable</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testMallocOomEnable</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>bEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomNext</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>testOomHit</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nFail</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>testOomFinish</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomAssert</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>bVal</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>test_failed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Test that the error code matches the state of the OomTest object passed
** as the first argument. Specifically, check that rc is LSM_NOMEM if an 
** OOM error has already been injected, or LSM_OK if not.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomAssertRc</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>testOomAssert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>rc</name><operator>==</operator><name>LSM_OK</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>LSM_NOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomAssert</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>testOomHit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><operator>(</operator><name>rc</name><operator>==</operator><name>LSM_NOMEM</name><operator>)</operator> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>bEnable</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomOpen</name><parameter_list>(
  <parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>lsm_db</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDb</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_new</name><argument_list>(<argument><expr><call><name>tdb_lsm_env</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ppDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_open</name><argument_list>(<argument><expr><operator>*</operator><name>ppDb</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomFetch</name><parameter_list>(
  <parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>,
  <parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><operator>*</operator><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>lsm_cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_csr_open</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_csr_seek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>testOomAssert</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><call><name>lsm_csr_valid</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_csr_key</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testOomAssert</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name><operator>!=</operator><name>LSM_OK</name> <operator>||</operator> <operator>(</operator><name>n</name><operator>==</operator><name>nKey</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>testOomAssert</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><call><name>lsm_csr_valid</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_csr_value</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testOomAssert</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name><operator>!=</operator><name>LSM_OK</name> <operator>||</operator> <operator>(</operator><name>n</name><operator>==</operator><name>nVal</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>lsm_csr_close</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomWrite</name><parameter_list>(
  <parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>,
  <parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><operator>*</operator><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_insert</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomFetchStr</name><parameter_list>(
  <parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>,
  <parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVal</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nKey</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nVal</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>testOomFetch</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>zVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomFetchData</name><parameter_list>(
  <parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>,
  <parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iKey</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomFetch</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomWriteStr</name><parameter_list>(
  <parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>,
  <parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVal</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nKey</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nVal</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>testOomWrite</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>zVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomWriteData</name><parameter_list>(
  <parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>,
  <parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iKey</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomWrite</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testOomScan</name><parameter_list>(
  <parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>, 
  <parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bReverse</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nScan</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iScan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lsm_cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>
    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xAdvance</name>)<parameter_list>(<parameter><decl><type><name>lsm_cursor</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>
    

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_csr_open</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>bReverse</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_csr_seek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>LSM_SEEK_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xAdvance</name> <operator>=</operator> <name>lsm_csr_prev</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_csr_seek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>LSM_SEEK_GE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>xAdvance</name> <operator>=</operator> <name>lsm_csr_next</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <call><name>lsm_csr_valid</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>iScan</name><operator>&lt;</operator><name>nScan</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_csr_key</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_csr_value</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xAdvance</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>iScan</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>lsm_csr_close</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSMTEST6_TESTDB</name></cpp:macro> <cpp:value>"testdb.lsm"</cpp:value></cpp:define> 

<function><type><name>void</name></type> <name>testDeleteLsmdb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLog</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-log"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-shm"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFrom</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isDatabase</name></decl></parameter>)</parameter_list><block>{<block_content>

  <if_stmt><if>if<condition>( <expr><call><name>access</name><argument_list>(<argument><expr><name>zFrom</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fd1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>sz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>fd1</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zFrom</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>_O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fd2</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zTo</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>_O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ftruncate</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>aBuf</name> <operator>=</operator> <call><name>testMalloc</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">4096</literal></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>bLockPage</name> <init>= <expr><name>isDatabase</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>bLockPage</name></expr> ?</condition><then> <expr><literal type="number">4066</literal></expr> </then><else>: <expr><literal type="number">4096</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>sz</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>, <argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>bLockPage</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testCopyLsmdb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFrom</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTo</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLog1</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-log"</literal></expr></argument>, <argument><expr><name>zFrom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLog2</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-log"</literal></expr></argument>, <argument><expr><name>zTo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm1</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-shm"</literal></expr></argument>, <argument><expr><name>zFrom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm2</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-shm"</literal></expr></argument>, <argument><expr><name>zTo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zShm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zLog2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copy_file</name><argument_list>(<argument><expr><name>zFrom</name></expr></argument>, <argument><expr><name>zTo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copy_file</name><argument_list>(<argument><expr><name>zLog1</name></expr></argument>, <argument><expr><name>zLog2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copy_file</name><argument_list>(<argument><expr><name>zShm1</name></expr></argument>, <argument><expr><name>zShm2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zLog1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zLog2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zShm1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zShm2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** File zFile is the path to a database. This function makes backups
** of the database file and its log as follows:
**
**     cp $(zFile)         $(zFile)-save
**     cp $(zFile)-$(zAux) $(zFile)-save-$(zAux)
**
** Function testRestoreDb() can be used to copy the files back in the
** other direction.
*/</comment>
<function><type><name>void</name></type> <name>testSaveDb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zAux</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLog</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-%s"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zAux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFileSave</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-save"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLogSave</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-%s-save"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zAux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zFileSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zLogSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copy_file</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zFileSave</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copy_file</name><argument_list>(<argument><expr><name>zLog</name></expr></argument>, <argument><expr><name>zLogSave</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zFileSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zLogSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** File zFile is the path to a database. This function restores
** a backup of the database made by a previous call to testSaveDb().
** Specifically, it does the equivalent of:
**
**     cp $(zFile)-save         $(zFile)
**     cp $(zFile)-save-$(zAux) $(zFile)-$(zAux)
*/</comment>
<function><type><name>void</name></type> <name>testRestoreDb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zAux</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLog</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-%s"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zAux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFileSave</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-save"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLogSave</name> <init>= <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s-%s-save"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zAux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>copy_file</name><argument_list>(<argument><expr><name>zFileSave</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>copy_file</name><argument_list>(<argument><expr><name>zLogSave</name></expr></argument>, <argument><expr><name>zLog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zFileSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zLogSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWriteStr</name><parameter_list>(<parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nKey</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nVal</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>lsm_insert</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>zVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_delete_db</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>testDeleteLsmdb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Create a small database. With the following content:
**
**    "one"   -&gt; "one"
**    "two"   -&gt; "four"
**    "three" -&gt; "nine"
**    "four"  -&gt; "sixteen"
**    "five"  -&gt; "twentyfive"
**    "six"   -&gt; "thirtysix"
**    "seven" -&gt; "fourtynine"
**    "eight" -&gt; "sixtyfour"
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_populate_db</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azStr</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"one"</literal></expr>,   <expr><literal type="string">"one"</literal></expr>,
    <expr><literal type="string">"two"</literal></expr>,   <expr><literal type="string">"four"</literal></expr>,
    <expr><literal type="string">"three"</literal></expr>, <expr><literal type="string">"nine"</literal></expr>,
    <expr><literal type="string">"four"</literal></expr>,  <expr><literal type="string">"sixteen"</literal></expr>,
    <expr><literal type="string">"five"</literal></expr>,  <expr><literal type="string">"twentyfive"</literal></expr>,
    <expr><literal type="string">"six"</literal></expr>,   <expr><literal type="string">"thirtysix"</literal></expr>,
    <expr><literal type="string">"seven"</literal></expr>, <expr><literal type="string">"fourtynine"</literal></expr>,
    <expr><literal type="string">"eight"</literal></expr>, <expr><literal type="string">"sixtyfour"</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>testDeleteLsmdb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_new</name><argument_list>(<argument><expr><call><name>tdb_lsm_env</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_open</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azStr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ii</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsmWriteStr</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>azStr</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>azStr</name><index>[<expr><name>ii</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testSaveDb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Datasource</name> <modifier>*</modifier></type><name>getDatasource</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DatasourceDefn</name></type> <name>defn</name> <init>= <expr><block>{ <expr><name>TEST_DATASOURCE_RANDOM</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">250</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>defn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set up a database file with the following properties:
**
**   * Page size is 1024 bytes.
**   * Block size is 64 KB.
**   * Contains 5000 key-value pairs starting at 0 from the
**     datasource returned getDatasource().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>setup_populate_db2</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBlocksize</name> <init>= <expr><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPagesize</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nWritebuffer</name> <init>= <expr><literal type="number">4</literal><operator>*</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>testDeleteLsmdb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_new</name><argument_list>(<argument><expr><call><name>tdb_lsm_env</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_open</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>LSM_CONFIG_BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBlocksize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>LSM_CONFIG_PAGE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>LSM_CONFIG_AUTOFLUSH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nWritebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>getDatasource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><literal type="number">5000</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsm_insert</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testSaveDb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Test the results of OOM conditions in lsm_new().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>simple_oom_1</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_new</name><argument_list>(<argument><expr><call><name>tdb_lsm_env</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Test the results of OOM conditions in lsm_open().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>simple_oom_2</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_new</name><argument_list>(<argument><expr><call><name>tdb_lsm_env</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_open</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Test the results of OOM conditions in simple fetch operations.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>simple_oom_3</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>testOomOpen</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testOomFetchStr</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"four"</literal></expr></argument>,  <argument><expr><literal type="string">"sixteen"</literal></expr></argument>,    <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomFetchStr</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"seven"</literal></expr></argument>, <argument><expr><literal type="string">"fourtynine"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomFetchStr</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"one"</literal></expr></argument>,   <argument><expr><literal type="string">"one"</literal></expr></argument>,        <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomFetchStr</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"eight"</literal></expr></argument>, <argument><expr><literal type="string">"sixtyfour"</literal></expr></argument>,  <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Test the results of OOM conditions in simple write operations.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>simple_oom_4</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>testDeleteLsmdb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomOpen</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testOomWriteStr</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"123"</literal></expr></argument>, <argument><expr><literal type="string">"onetwothree"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomWriteStr</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"456"</literal></expr></argument>, <argument><expr><literal type="string">"fourfivesix"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomWriteStr</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"789"</literal></expr></argument>, <argument><expr><literal type="string">"seveneightnine"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomWriteStr</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"123"</literal></expr></argument>, <argument><expr><literal type="string">"teneleventwelve"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomWriteStr</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"456"</literal></expr></argument>, <argument><expr><literal type="string">"fourteenfifteensixteen"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>simple_oom_5</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>getDatasource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>testRestoreDb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomOpen</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testOomFetchData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">3333</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomFetchData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomFetchData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">4999</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>simple_oom_6</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>getDatasource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>testRestoreDb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomOpen</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testOomWriteData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomWriteData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">5001</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomWriteData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">5002</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomFetchData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">5001</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomFetchData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">1234</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>simple_oom_7</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>getDatasource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>testRestoreDb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomOpen</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomScan</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>simple_oom_8</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>getDatasource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>testRestoreDb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomOpen</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomScan</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"xyz"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This test case has two clients connected to a database. The first client
** hits an OOM while writing to the database. Check that the second 
** connection is still able to query the db following the OOM.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>simple_oom2_1</name><parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type><name>pOom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nRecord</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Number of records initially in db */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nIns</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Number of records inserted with OOM */</comment>

  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>getDatasource</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>testDeleteLsmdb</name><argument_list>(<argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open the two connections. Initialize the in-memory tree so that it
  ** contains 100 records. Do all this with OOM injection disabled. */</comment>
  <expr_stmt><expr><call><name>testOomEnable</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomOpen</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testOomOpen</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>LSMTEST6_TESTDB</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nRecord</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>testOomWriteData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb1</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>testOomEnable</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Insert 10 more records using pDb1. Stop when an OOM is encountered. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>nRecord</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nRecord</name><operator>+</operator><name>nIns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>testOomWriteData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb1</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>testOomAssertRc</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Switch off OOM injection. Write a few rows using pDb2. Then check
  ** that the database may be successfully queried.  */</comment>
  <expr_stmt><expr><call><name>testOomEnable</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nRecord</name><operator>+</operator><name>nIns</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>testOomWriteData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nRecord</name><operator>+</operator><name>nIns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>testOomFetchData</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>testOomEnable</name><argument_list>(<argument><expr><name>pOom</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>do_test_oom1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>SimpleOom</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xSetup</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xFunc</name>)<parameter_list>(<parameter><decl><type><name>OomTest</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  }</block> <decl><name><name>aSimple</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"oom1.lsm.1"</literal></expr>, <expr><name>setup_delete_db</name></expr>,    <expr><name>simple_oom_1</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"oom1.lsm.2"</literal></expr>, <expr><name>setup_delete_db</name></expr>,    <expr><name>simple_oom_2</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"oom1.lsm.3"</literal></expr>, <expr><name>setup_populate_db</name></expr>,  <expr><name>simple_oom_3</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"oom1.lsm.4"</literal></expr>, <expr><name>setup_delete_db</name></expr>,    <expr><name>simple_oom_4</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"oom1.lsm.5"</literal></expr>, <expr><name>setup_populate_db2</name></expr>, <expr><name>simple_oom_5</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"oom1.lsm.6"</literal></expr>, <expr><name>setup_populate_db2</name></expr>, <expr><name>simple_oom_6</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"oom1.lsm.7"</literal></expr>, <expr><name>setup_populate_db2</name></expr>, <expr><name>simple_oom_7</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"oom1.lsm.8"</literal></expr>, <expr><name>setup_populate_db2</name></expr>, <expr><name>simple_oom_8</name></expr> }</block></expr>,

    <expr><block>{ <expr><literal type="string">"oom2.lsm.1"</literal></expr>, <expr><name>setup_delete_db</name></expr>,    <expr><name>simple_oom2_1</name></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aSimple</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>testCaseBegin</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>aSimple</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>OomTest</name></type> <name>t</name></decl>;</decl_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>aSimple</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xSetup</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>aSimple</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>xSetup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <for>for<control>(<init><expr><call><name>testOomStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><call><name>testOomContinue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><call><name>testOomNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name><name>aSimple</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>xFunc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"(%d injections)."</literal></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>iNext</name></name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>pRc</name> <operator>=</operator> <call><name>testOomFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testMallocOom</name><argument_list>(<argument><expr><call><name>tdb_lsm_env</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_oom</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>,           <comment type="block">/* Run test cases that match this pattern */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>do_test_oom1</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
