<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/lsm1/lsm-test/lsmtest9.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_SEQUENTIAL</name></cpp:macro> <cpp:value>TEST_DATASOURCE_SEQUENCE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_RANDOM</name></cpp:macro>     <cpp:value>TEST_DATASOURCE_RANDOM</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>Datatest4</name></name></type> <name>Datatest4</name>;</typedef>

<comment type="block">/*
** Test overview:
**
**   1. Insert (Datatest4.nRec) records into a database.
**
**   2. Repeat (Datatest4.nRepeat) times:
**
**      2a. Delete 2/3 of the records in the database.
**
**      2b. Run lsm_work(nMerge=1).
**
**      2c. Insert as many records as were deleted in 2a.
**
**      2d. Check database content is as expected.
**
**      2e. If (Datatest4.bReopen) is true, close and reopen the database.
*/</comment>
<struct>struct <name>Datatest4</name> <block>{
  <comment type="block">/* Datasource definition */</comment>
  <decl_stmt><decl><type><name>DatasourceDefn</name></type> <name>defn</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>nRec</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRepeat</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bReopen</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doDataTest4</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system to test */</comment>
  <parameter><decl><type><name>Datatest4</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Structure containing test parameters */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pControl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bMultiThreaded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* True for MT LSM database */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>nRecOn3</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nRec</name></name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Start the test case, open a database and allocate the datasource. */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testControlDb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>testOpen</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>tdb_lsm</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bMultiThreaded</name> <operator>=</operator> <call><name>tdb_lsm_multithread</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iData</name></expr></argument>, <argument><expr><name>nRecOn3</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,      <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iData</name></expr></argument>, <argument><expr><name>nRecOn3</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nRepeat</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

    <expr_stmt><expr><call><name>testDeleteDatasourceRange</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iData</name></expr></argument>, <argument><expr><name>nRecOn3</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testDeleteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,      <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iData</name></expr></argument>, <argument><expr><name>nRecOn3</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>db</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nDone</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
      fprintf(stderr, "lsm_work() start...\n"); fflush(stderr);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <do>do <block>{<block_content>
        <expr_stmt><expr><name>nDone</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_work</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>nDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>while<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nDone</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition>;</do>
      <if_stmt><if>if<condition>( <expr><name>bMultiThreaded</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>LSM_BUSY</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 
      fprintf(stderr, "lsm_work() done...\n"); fflush(stderr);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nRepeat</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iData</name> <operator>+=</operator> <operator>(</operator><name>nRecOn3</name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iData</name><operator>+</operator><name>nRecOn3</name></expr></argument>, <argument><expr><name>nRecOn3</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>,      <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iData</name><operator>+</operator><name>nRecOn3</name></expr></argument>, <argument><expr><name>nRecOn3</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testCompareDb</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nRecOn3</name><operator>*</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>iData</name></expr></argument>, <argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* If Datatest4.bReopen is true, close and reopen the database */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bReopen</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testReopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>tdb_lsm</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></if></if_stmt>

    <comment type="block">/* Update the progress dots... */</comment>
    <expr_stmt><expr><call><name>testCaseProgress</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRepeat</name></name></expr></argument>, <argument><expr><call><name>testCaseNDot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getName4</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>, <parameter><decl><type><name>Datatest4</name> <modifier>*</modifier></type><name>pTest</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zData</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>zData</name> <operator>=</operator> <call><name>testDatasourceName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTest</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"data4.%s.%s.%d.%d.%d"</literal></expr></argument>, 
      <argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>nRec</name></name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>nRepeat</name></name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>bReopen</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_data_4</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system name */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>,           <comment type="block">/* Run test cases that match this pattern */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datatest4</name></type> <name><name>aTest</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* defn,                                 nRec, nRepeat, bReopen */</comment>
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">20</literal></expr>,<expr><literal type="number">25</literal></expr>,     <expr><literal type="number">500</literal></expr>,<expr><literal type="number">600</literal></expr>}</block></expr>, <expr><literal type="number">10000</literal></expr>,      <expr><literal type="number">10</literal></expr>,       <expr><literal type="number">0</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">20</literal></expr>,<expr><literal type="number">25</literal></expr>,     <expr><literal type="number">500</literal></expr>,<expr><literal type="number">600</literal></expr>}</block></expr>, <expr><literal type="number">10000</literal></expr>,      <expr><literal type="number">10</literal></expr>,       <expr><literal type="number">1</literal></expr>   }</block></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>pRc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><call><name>getName4</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>testCaseBegin</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>doDataTest4</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
