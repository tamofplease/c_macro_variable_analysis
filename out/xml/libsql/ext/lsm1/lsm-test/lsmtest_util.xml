<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/lsm1/lsm-test/lsmtest_util.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Global variables used within this module.
*/</comment>
<struct><specifier>static</specifier> struct <name>TestutilGlobal</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>
}</block> <decl><name>g</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> struct <name>TestutilRnd</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>aRand1</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>          <comment type="block">/* Bits 0..10 */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>aRand2</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>          <comment type="block">/* Bits 11..21 */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>aRand3</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>          <comment type="block">/* Bits 22..31 */</comment>
}</block> <decl><name>r</name></decl>;</struct>

<comment type="block" format="doxygen">/*************************************************************************
** The following block is a copy of the implementation of SQLite function
** sqlite3_randomness. This version has two important differences:
**
**   1. It always uses the same seed. So the sequence of random data output
**      is the same for every run of the program.
**
**   2. It is not threadsafe.
*/</comment>
<struct><specifier>static</specifier> struct <name>sqlite3PrngType</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>             <comment type="block">/* State variables */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>           <comment type="block">/* State variables */</comment>
}</block> <decl><name>sqlite3Prng</name> <init>= <expr><block>{
    <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x28</literal></expr>,
  <expr><block>{
    <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, 
    <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x2D</literal></expr>, <expr><literal type="number">0x14</literal></expr>, 
    <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, 
    <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x67</literal></expr>, 
    <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x77</literal></expr>, 
    <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, 
    <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x52</literal></expr>, 
    <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, 
    <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, 
    <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, 
    <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xEA</literal></expr>, 
    <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, 
    <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x7A</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, 
    <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x62</literal></expr>, 
    <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x88</literal></expr>, 
    <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, 
    <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, 
    <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, 
    <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, 
    <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x13</literal></expr>, 
    <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x91</literal></expr>, 
    <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x92</literal></expr>, 
    <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, 
    <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x9A</literal></expr>, 
    <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xD4</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x9C</literal></expr>, 
    <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x28</literal></expr>, 
    <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x35</literal></expr>, 
    <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x5B</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0x18</literal></expr>, 
    <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, 
    <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xEC</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, 
    <expr><literal type="number">0x9C</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0xBB</literal></expr>, <expr><literal type="number">0x90</literal></expr>, 
    <expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0xF7</literal></expr>
  }</block></expr>
}</block></expr></init></decl>;</struct>

<comment type="block">/* Generate and return single random byte */</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name>randomByte</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>sqlite3Prng</name><operator>.</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>sqlite3Prng</name><operator>.</operator><name>s</name><index>[<expr><name><name>sqlite3Prng</name><operator>.</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sqlite3Prng</name><operator>.</operator><name>j</name></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sqlite3Prng</name><operator>.</operator><name>s</name><index>[<expr><name><name>sqlite3Prng</name><operator>.</operator><name>i</name></name></expr>]</index></name> <operator>=</operator> <name><name>sqlite3Prng</name><operator>.</operator><name>s</name><index>[<expr><name><name>sqlite3Prng</name><operator>.</operator><name>j</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sqlite3Prng</name><operator>.</operator><name>s</name><index>[<expr><name><name>sqlite3Prng</name><operator>.</operator><name>j</name></name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>sqlite3Prng</name><operator>.</operator><name>s</name><index>[<expr><name><name>sqlite3Prng</name><operator>.</operator><name>i</name></name></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name><name>sqlite3Prng</name><operator>.</operator><name>s</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return N random bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>randomBlob</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nBuf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>randomByte</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<comment type="block">/*
** End of code copied from SQLite.
*************************************************************************/</comment>


<function><type><name>int</name></type> <name>testPrngInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>randomBlob</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>aRand1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>.</operator><name>aRand1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>randomBlob</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>aRand2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>.</operator><name>aRand2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>randomBlob</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>aRand3</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>r</name><operator>.</operator><name>aRand3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>testPrngValue</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return
    <expr><name><name>r</name><operator>.</operator><name>aRand1</name><index>[<expr><name>iVal</name> <operator>&amp;</operator> <literal type="number">0x000007FF</literal></expr>]</index></name> <operator>^</operator>
    <name><name>r</name><operator>.</operator><name>aRand2</name><index>[<expr><operator>(</operator><name>iVal</name><operator>&gt;&gt;</operator><literal type="number">11</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000007FF</literal></expr>]</index></name> <operator>^</operator>
    <name><name>r</name><operator>.</operator><name>aRand3</name><index>[<expr><operator>(</operator><name>iVal</name><operator>&gt;&gt;</operator><literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000003FF</literal></expr>]</index></name></expr>
  ;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testPrngArray</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iVal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nOut</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>testPrngValue</name><argument_list>(<argument><expr><name>iVal</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testPrngString</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iVal</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><call><name>testPrngValue</name><argument_list>(<argument><expr><name>iVal</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testErrorInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>argc</name></name> <operator>=</operator> <name>argc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>argv</name></name> <operator>=</operator> <name>argv</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testPrintError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testPrintFUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s %s "</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testPrintUsage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArgs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"Usage: %s %s %s\n"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>argError</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>Entry</name> <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt> }</block>;</struct>
  <decl_stmt><decl><type><name><name>struct</name> <name>Entry</name></name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPrev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"unrecognized %s \"%s\": must be "</literal></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>pEntry</name><operator>=</operator><operator>(</operator>struct <name>Entry</name> <operator>*</operator><operator>)</operator><name>aData</name></expr>;</init> 
      <condition><expr><name><name>pEntry</name><operator>-&gt;</operator><name>zName</name></name></expr>;</condition> 
      <incr><expr><name>pEntry</name><operator>=</operator><operator>(</operator>struct <name>Entry</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pEntry</name><operator>)</operator><index>[<expr><name>sz</name></expr>]</index></expr></incr>
  )</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zPrev</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name>zPrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zPrev</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"or %s\n"</literal></expr></argument>, <argument><expr><name>zPrev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>testArgSelectX</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <struct>struct <name>Entry</name> <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt> }</block>;</struct>
  <decl_stmt><decl><type><name><name>struct</name> <name>Entry</name></name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nArg</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOut</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>pEntry</name><operator>=</operator><operator>(</operator>struct <name>Entry</name> <operator>*</operator><operator>)</operator><name>aData</name></expr>;</init> 
      <condition><expr><name><name>pEntry</name><operator>-&gt;</operator><name>zName</name></name></expr>;</condition> 
      <incr><expr><name>pEntry</name><operator>=</operator><operator>(</operator>struct <name>Entry</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>pEntry</name><operator>)</operator><index>[<expr><name>sz</name></expr>]</index></expr></incr>
  )</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nName</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&lt;=</operator><name>nName</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iOut</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nName</name><operator>==</operator><name>nArg</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>nOut</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>nOut</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>nOut</name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>argError</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>piOut</name> <operator>=</operator> <name>iOut</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><operator>(</operator><name>nOut</name><operator>!=</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>zero_time</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>testTimeInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zero_time</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>testTimeGet</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return
    <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zero_time</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator><operator>*</operator><literal type="number">1000</literal><operator>)</operator> <operator>+</operator>
    <operator>(</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>zero_time</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
