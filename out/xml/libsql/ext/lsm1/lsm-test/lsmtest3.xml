<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/lsm1/lsm-test/lsmtest3.c">

<comment type="block">/*
** This file contains tests related to the explicit rollback of database
** transactions and sub-transactions.
*/</comment>


<comment type="block">/*
** Repeat 2000 times (until the db contains 100,000 entries):
**
**   1. Open a transaction and insert 500 rows, opening a nested 
**      sub-transaction each 100 rows.
**
**   2. Roll back to each sub-transaction savepoint. Check the database
**      checksum looks Ok.
**
**   3. Every second iteration, roll back the main transaction. Check the
**      db checksum is correct. Every other iteration, commit the main
**      transaction (increasing the size of the db by 100 rows).
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>

<struct>struct <name>CksumDb</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nFirst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nLast</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nStep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azCksum</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>CksumDb</name> <modifier>*</modifier></type><name>testCksumArrayNew</name><parameter_list>(
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nFirst</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nLast</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nStep</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CksumDb</name> <modifier>*</modifier></type><name>pRet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nEntry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nLast</name><operator>&gt;=</operator><name>nFirst</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>nLast</name><operator>-</operator><name>nFirst</name><operator>)</operator><operator>%</operator><name>nStep</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
 
  <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CksumDb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CksumDb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nFirst</name></name> <operator>=</operator> <name>nFirst</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nLast</name></name> <operator>=</operator> <name>nLast</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nStep</name></name> <operator>=</operator> <name>nStep</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nEntry</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>nLast</name> <operator>-</operator> <name>nFirst</name><operator>)</operator> <operator>/</operator> <name>nStep</name><operator>)</operator></expr>;</expr_stmt>

  <comment type="block">/* Allocate space so that azCksum is an array of nEntry pointers to
  ** buffers each TEST_CKSUM_BYTES in size.  */</comment>
  <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>azCksum</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>nEntry</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>TEST_CKSUM_BYTES</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nEntry</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pStart</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pRet</name><operator>-&gt;</operator><name>azCksum</name><index>[<expr><name>nEntry</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>azCksum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pStart</name><index>[<expr><name>i</name> <operator>*</operator> <name>TEST_CKSUM_BYTES</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tdb_open</name><argument_list>(<argument><expr><literal type="string">"lsm"</literal></expr></argument>, <argument><expr><literal type="string">"tempdb.lsm"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nFirst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nEntry</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>testCksumDatabase</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>azCksum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name>nEntry</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nFirst</name><operator>+</operator><name>i</name><operator>*</operator><name>nStep</name></expr></argument>, <argument><expr><name>nStep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>testCksumArrayGet</name><parameter_list>(<parameter><decl><type><name>CksumDb</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nRow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nRow</name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nFirst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nRow</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nLast</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>nRow</name><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>nFirst</name></name><operator>)</operator> <operator>%</operator> <name><name>p</name><operator>-&gt;</operator><name>nStep</name></name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>nRow</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nFirst</name></name><operator>)</operator> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nStep</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>azCksum</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testCksumArrayFree</name><parameter_list>(<parameter><decl><type><name>CksumDb</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>azCksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* End of CksumDb code.
**************************************************************************/</comment>

<comment type="block">/*
** Test utility function. Write key-value pair $i from datasource pData 
** into database pDb.
*/</comment>
<function><type><name>void</name></type> <name>testWriteDatasource</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testWrite</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Test utility function. Delete datasource pData key $i from database pDb.
*/</comment>
<function><type><name>void</name></type> <name>testDeleteDatasource</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDelete</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function inserts nWrite key/value pairs into database pDb - the
** nWrite key value pairs starting at iFirst from data source pData.
*/</comment>
<function><type><name>void</name></type> <name>testWriteDatasourceRange</name><parameter_list>(
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database to write to */</comment>
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,              <comment type="block">/* Data source to read values from */</comment>
  <parameter><decl><type><name>int</name></type> <name>iFirst</name></decl></parameter>,                     <comment type="block">/* Index of first key/value pair */</comment>
  <parameter><decl><type><name>int</name></type> <name>nWrite</name></decl></parameter>,                     <comment type="block">/* Number of key/value pairs to write */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nWrite</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>testWriteDatasource</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iFirst</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testDeleteDatasourceRange</name><parameter_list>(
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database to write to */</comment>
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,              <comment type="block">/* Data source to read keys from */</comment>
  <parameter><decl><type><name>int</name></type> <name>iFirst</name></decl></parameter>,                     <comment type="block">/* Index of first key */</comment>
  <parameter><decl><type><name>int</name></type> <name>nWrite</name></decl></parameter>,                     <comment type="block">/* Number of keys to delete */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nWrite</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>testDeleteDatasource</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iFirst</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name></decl>;</decl_stmt> 
  <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"rollback.%s"</literal></expr></argument>, <argument><expr><name>zSystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rollback_test_1</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nRepeat</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CksumDb</name> <modifier>*</modifier></type><name>pCksum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>getName</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCaseStart</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pCksum</name> <operator>=</operator> <call><name>testCksumArrayNew</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nRepeat</name><operator>*</operator><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tdb_open</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pDb</name> <operator>&amp;&amp;</operator> <call><name>tdb_transaction_support</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testCaseSkip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>skip_rollback_test</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nRepeat</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zCksum</name><index>[<expr><name>TEST_CKSUM_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCurrent</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">100</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nDbRow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iTrans</name></decl>;</decl_stmt>

    <comment type="block">/* Check that the database is the expected size. */</comment>
    <expr_stmt><expr><name>nDbRow</name> <operator>=</operator> <call><name>testCountDatabase</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>nCurrent</name></expr></argument>, <argument><expr><name>nDbRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>iTrans</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>iTrans</name><operator>&lt;=</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>iTrans</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>tdb_begin</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>iTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nCurrent</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nCurrent</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>testCksumDatabase</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zCksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testCompareStr</name><argument_list>(<argument><expr><name>zCksum</name></expr></argument>, <argument><expr><call><name>testCksumArrayGet</name><argument_list>(<argument><expr><name>pCksum</name></expr></argument>, <argument><expr><name>nCurrent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>iTrans</name><operator>=</operator><literal type="number">6</literal></expr>;</init> <condition><expr><name>iTrans</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>iTrans</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>tdb_rollback</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>iTrans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nCurrent</name> <operator>-=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testCksumDatabase</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zCksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testCompareStr</name><argument_list>(<argument><expr><name>zCksum</name></expr></argument>, <argument><expr><call><name>testCksumArrayGet</name><argument_list>(<argument><expr><name>pCksum</name></expr></argument>, <argument><expr><name>nCurrent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>i</name><operator>%</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>tdb_rollback</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nCurrent</name> <operator>-=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testCksumDatabase</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zCksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testCompareStr</name><argument_list>(<argument><expr><name>zCksum</name></expr></argument>, <argument><expr><call><name>testCksumArrayGet</name><argument_list>(<argument><expr><name>pCksum</name></expr></argument>, <argument><expr><name>nCurrent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>tdb_commit</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label><name>skip_rollback_test</name>:</label>
  <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCksumArrayFree</name><argument_list>(<argument><expr><name>pCksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_rollback</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bRun</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>zPattern</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><call><name>getName</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>bRun</name> <operator>=</operator> <call><name>testGlobMatch</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>bRun</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>DatasourceDefn</name></type> <name>defn</name> <init>= <expr><block>{ <expr><name>TEST_DATASOURCE_RANDOM</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">100</literal></expr> }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>defn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <call><name>rollback_test_1</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
