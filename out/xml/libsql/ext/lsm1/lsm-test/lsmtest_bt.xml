<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/lsm1/lsm-test/lsmtest_bt.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bt.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>do_bt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>Option</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bPgno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eOpt</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aOpt</name> <index>[]</index></name> <init>= <expr><block>{ 
    <expr><block>{ <expr><literal type="string">"dbhdr"</literal></expr>,          <expr><literal type="number">0</literal></expr>, <expr><name>BT_INFO_HDRDUMP</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"filename"</literal></expr>,       <expr><literal type="number">0</literal></expr>, <expr><name>BT_INFO_FILENAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"block_freelist"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>BT_INFO_BLOCK_FREELIST</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"page_freelist"</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><name>BT_INFO_PAGE_FREELIST</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"filename"</literal></expr>,       <expr><literal type="number">0</literal></expr>, <expr><name>BT_INFO_FILENAME</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"page"</literal></expr>,           <expr><literal type="number">1</literal></expr>, <expr><name>BT_INFO_PAGEDUMP</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"page_ascii"</literal></expr>,     <expr><literal type="number">1</literal></expr>, <expr><name>BT_INFO_PAGEDUMP_ASCII</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"leaks"</literal></expr>,          <expr><literal type="number">0</literal></expr>, <expr><name>BT_INFO_PAGE_LEAKS</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> 
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>iOpt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bt_info</name></type> <name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOpt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bt_db</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintUsage</name><argument_list>(<argument><expr><literal type="string">"FILENAME OPTION ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zFile</name> <operator>=</operator> <name><name>azArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>zOpt</name> <operator>=</operator> <name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testArgSelect</name><argument_list>(<argument><expr><name>aOpt</name></expr></argument>, <argument><expr><literal type="string">"option"</literal></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>!=</operator><literal type="number">2</literal><operator>+</operator><name><name>aOpt</name><index>[<expr><name>iOpt</name></expr>]</index></name><operator>.</operator><name>bPgno</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintFUsage</name><argument_list>(<argument><expr><literal type="string">"FILENAME %s %s"</literal></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>aOpt</name><index>[<expr><name>iOpt</name></expr>]</index></name><operator>.</operator><name>bPgno</name></expr> ?</condition><then> <expr><literal type="string">"PGNO"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtNew</name><argument_list>(<argument><expr><call><name>sqlite4_env_default</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"sqlite4BtNew() failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtOpen</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"sqlite4BtOpen() failed: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>eType</name></name> <operator>=</operator> <name><name>aOpt</name><index>[<expr><name>iOpt</name></expr>]</index></name><operator>.</operator><name>eOpt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>pgno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite4_buffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>aOpt</name><index>[<expr><name>iOpt</name></expr>]</index></name><operator>.</operator><name>bPgno</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>pgno</name></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>BT_CONTROL_INFO</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"sqlite4BtControl() failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>.</operator><name>output</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite4_buffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
