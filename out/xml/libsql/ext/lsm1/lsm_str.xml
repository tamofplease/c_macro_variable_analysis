<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/lsm1/lsm_str.c"><comment type="block">/*
** 2012-04-27
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** Dynamic string functions.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** Turn bulk and uninitialized memory into an LsmString object
*/</comment>
<function><type><name>void</name></type> <name>lsmStringInit</name><parameter_list>(<parameter><decl><type><name>LsmString</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>, <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pStr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Increase the memory allocated for holding the string.  Realloc as needed.
**
** If a memory allocation error occurs, set pStr-&gt;n to -1 and free the existing
** allocation.  If a prior memory allocation has occurred, this routine is a
** no-op.
*/</comment>
<function><type><name>int</name></type> <name>lsmStringExtend</name><parameter_list>(<parameter><decl><type><name>LsmString</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nNew</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>nNew</name> <operator>&gt;=</operator> <name><name>pStr</name><operator>-&gt;</operator><name>nAlloc</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name> <init>= <expr><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>nNew</name> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zNew</name> <init>= <expr><call><name>lsmRealloc</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>nAlloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nAlloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>=</operator> <name>nAlloc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name>zNew</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name></name></expr> ?</condition><then> <expr><name>LSM_OK</name></expr> </then><else>: <expr><name>LSM_NOMEM_BKPT</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Clear an LsmString object, releasing any allocated memory that it holds.
** This also clears the error indication (if any).
*/</comment>
<function><type><name>void</name></type> <name>lsmStringClear</name><parameter_list>(<parameter><decl><type><name>LsmString</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmStringInit</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Append N bytes of text to the end of an LsmString object.  If
** N is negative, append the entire string.
**
** If the string is in an error state, this routine is a no-op.
*/</comment>
<function><type><name>int</name></type> <name>lsmStringAppend</name><parameter_list>(<parameter><decl><type><name>LsmString</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>N</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>N</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsmStringExtend</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>nAlloc</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name></name><operator>+</operator><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <name>N</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>lsmStringBinAppend</name><parameter_list>(<parameter><decl><type><name>LsmString</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsmStringExtend</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>nAlloc</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name></name><operator>+</operator><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Append printf-formatted content to an LsmString.
*/</comment>
<function><type><name>void</name></type> <name>lsmStringVAppendf</name><parameter_list>(
  <parameter><decl><type><name>LsmString</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, 
  <parameter><decl><type><name>va_list</name></type> <name>ap1</name></decl></parameter>,
  <parameter><decl><type><name>va_list</name></type> <name>ap2</name></decl></parameter>
)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><name>__STDC_VERSION__</name><operator>&lt;</operator><literal type="number">199901L</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> \
    <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>vsnprintf</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator><name>str</name></expr></argument>, <argument><expr><name>size_t</name> <name>size</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>format</name></expr></argument>, <argument><expr><name>va_list</name> <name>ap</name></expr></argument>)</argument_list></decl>
    <comment type="block">/* Compatibility crutch for C89 compilation mode. sqlite3_vsnprintf()
       does not work identically and causes test failures if used here.
       For the time being we are assuming that the target has vsnprintf(),
       but that is not guaranteed to be the case for pure C89 platforms.
    */</comment>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nAvail</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nAvail</name> <operator>=</operator> <name><name>pStr</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>-</operator> <name><name>pStr</name><operator>-&gt;</operator><name>n</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nWrite</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name><name>pStr</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>nAvail</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>nWrite</name><operator>&gt;=</operator><name>nAvail</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>lsmStringExtend</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>nWrite</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>nAlloc</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nWrite</name> <operator>=</operator> <call><name>vsnprintf</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name></name> <operator>+</operator> <name><name>pStr</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>nWrite</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <name>nWrite</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>z</name><index>[<expr><name><name>pStr</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lsmStringAppendf</name><parameter_list>(<parameter><decl><type><name>LsmString</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>, <decl><type ref="prev"/><name>ap2</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmStringVAppendf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>lsmStrlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name><name>zName</name><index>[<expr><name>nRet</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nRet</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>nRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write into memory obtained from lsm_malloc().
*/</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>lsmMallocPrintf</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>LsmString</name></type> <name>s</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>, <decl><type ref="prev"/><name>ap2</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lsmStringInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmStringVAppendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>s</name><operator>.</operator><name>n</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>lsmReallocOrFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>n</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
