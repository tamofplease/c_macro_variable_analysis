<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/ext/lsm1/lsm_mutex.c"><comment type="block">/*
** 2012-01-30
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** Mutex functions for LSM.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** Allocate a new mutex.
*/</comment>
<function><type><name>int</name></type> <name>lsmMutexNew</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexNew</name></name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>ppNew</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a handle for one of the static mutexes.
*/</comment>
<function><type><name>int</name></type> <name>lsmMutexStatic</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iMutex</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStatic</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexStatic</name></name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>iMutex</name></expr></argument>, <argument><expr><name>ppStatic</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free a mutex allocated by lsmMutexNew().
*/</comment>
<function><type><name>void</name></type> <name>lsmMutexDel</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pMutex</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexDel</name></name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Enter a mutex.
*/</comment>
<function><type><name>void</name></type> <name>lsmMutexEnter</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexEnter</name></name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Attempt to enter a mutex, but do not block. If successful, return zero.
** Otherwise, if the mutex is already held by some other thread and is not
** entered, return non zero.
**
** Each successful call to this function must be matched by a call to
** lsmMutexLeave().
*/</comment>
<function><type><name>int</name></type> <name>lsmMutexTry</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexTry</name></name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Leave a mutex.
*/</comment>
<function><type><name>void</name></type> <name>lsmMutexLeave</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexLeave</name></name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
<comment type="block">/*
** Return non-zero if the mutex passed as the second argument is held
** by the calling thread, or zero otherwise. If the implementation is not 
** able to tell if the mutex is held by the caller, it should return
** non-zero.
**
** This function is only used as part of assert() statements.
*/</comment>
<function><type><name>int</name></type> <name>lsmMutexHeld</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><ternary><condition><expr><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexHeld</name></name></expr> ?</condition><then> <expr><call><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexHeld</name></name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return non-zero if the mutex passed as the second argument is not 
** held by the calling thread, or zero otherwise. If the implementation 
** is not able to tell if the mutex is held by the caller, it should 
** return non-zero.
**
** This function is only used as part of assert() statements.
*/</comment>
<function><type><name>int</name></type> <name>lsmMutexNotHeld</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><ternary><condition><expr><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexNotHeld</name></name></expr> ?</condition><then> <expr><call><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexNotHeld</name></name><argument_list>(<argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
