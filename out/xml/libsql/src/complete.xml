<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/complete.c"><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** An tokenizer for SQL
**
** This file contains C code that implements the sqlite3_complete() API.
** This code used to be part of the tokenizer.c source file.  But by
** separating it out, the code will be automatically omitted from
** static links that do not use it.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_COMPLETE</name></cpp:ifndef>

<comment type="block">/*
** This is defined in tokenize.c.  We just have to import the definition.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_AMALGAMATION</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ASCII</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdChar</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((sqlite3CtypeMap[(unsigned char)C]&amp;0x46)!=0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_EBCDIC</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>sqlite3IsEbcdicIdChar</name><index>[]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdChar</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(((c=C)&gt;=0x42 &amp;&amp; sqlite3IsEbcdicIdChar[c-0x40]))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_AMALGAMATION */</comment>


<comment type="block">/*
** Token types used by the sqlite3_complete() routine.  See the header
** comments on that procedure for additional information.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tkSEMI</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tkWS</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tkOTHER</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tkEXPLAIN</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tkCREATE</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tkTEMP</name></cpp:macro>    <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tkTRIGGER</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tkEND</name></cpp:macro>     <cpp:value>7</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Return TRUE if the given SQL string ends in a semicolon.
**
** Special handling is require for CREATE TRIGGER statements.
** Whenever the CREATE TRIGGER keywords are seen, the statement
** must end with ";END;".
**
** This implementation uses a state machine with 8 states:
**
**   (0) INVALID   We have not yet seen a non-whitespace character.
**
**   (1) START     At the beginning or end of an SQL statement.  This routine
**                 returns 1 if it ends in the START state and 0 if it ends
**                 in any other state.
**
**   (2) NORMAL    We are in the middle of statement which ends with a single
**                 semicolon.
**
**   (3) EXPLAIN   The keyword EXPLAIN has been seen at the beginning of 
**                 a statement.
**
**   (4) CREATE    The keyword CREATE has been seen at the beginning of a
**                 statement, possibly preceded by EXPLAIN and/or followed by
**                 TEMP or TEMPORARY
**
**   (5) TRIGGER   We are in the middle of a trigger definition that must be
**                 ended by a semicolon, the keyword END, and another semicolon.
**
**   (6) SEMI      We've seen the first semicolon in the ";END;" that occurs at
**                 the end of a trigger definition.
**
**   (7) END       We've seen the ";END" of the ";END;" that occurs at the end
**                 of a trigger definition.
**
** Transitions between states above are determined by tokens extracted
** from the input.  The following tokens are significant:
**
**   (0) tkSEMI      A semicolon.
**   (1) tkWS        Whitespace.
**   (2) tkOTHER     Any other SQL token.
**   (3) tkEXPLAIN   The "explain" keyword.
**   (4) tkCREATE    The "create" keyword.
**   (5) tkTEMP      The "temp" or "temporary" keyword.
**   (6) tkTRIGGER   The "trigger" keyword.
**   (7) tkEND       The "end" keyword.
**
** Whitespace never causes a state transition and is always ignored.
** This means that a SQL string of all whitespace is invalid.
**
** If we compile with SQLITE_OMIT_TRIGGER, all of the computation needed
** to recognize the end of a trigger can be omitted.  All we have to do
** is look for a semicolon that is not part of an string or comment.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_complete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name></type> <name>state</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Current state, using numbers defined in header comment */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>token</name></decl>;</decl_stmt>       <comment type="block">/* Value of the next token */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifndef>
  <comment type="block">/* A complex statement machine used to detect the end of a CREATE TRIGGER
  ** statement.  This is the normal case.
  */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u8</name></type> <name><name>trans</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{
                     <comment type="block">/* Token:                                                */</comment>
     <comment type="block">/* State:       **  SEMI  WS  OTHER  EXPLAIN  CREATE  TEMP  TRIGGER  END */</comment>
     <comment type="block">/* 0 INVALID: */</comment> <expr><block>{    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>,       <expr><literal type="number">3</literal></expr>,      <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">2</literal></expr>,       <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">2</literal></expr>, }</block></expr>,
     <comment type="block">/* 1   START: */</comment> <expr><block>{    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">2</literal></expr>,       <expr><literal type="number">3</literal></expr>,      <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">2</literal></expr>,       <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">2</literal></expr>, }</block></expr>,
     <comment type="block">/* 2  NORMAL: */</comment> <expr><block>{    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>,       <expr><literal type="number">2</literal></expr>,      <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">2</literal></expr>,       <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">2</literal></expr>, }</block></expr>,
     <comment type="block">/* 3 EXPLAIN: */</comment> <expr><block>{    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">3</literal></expr>,     <expr><literal type="number">3</literal></expr>,       <expr><literal type="number">2</literal></expr>,      <expr><literal type="number">4</literal></expr>,    <expr><literal type="number">2</literal></expr>,       <expr><literal type="number">2</literal></expr>,   <expr><literal type="number">2</literal></expr>, }</block></expr>,
     <comment type="block">/* 4  CREATE: */</comment> <expr><block>{    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">4</literal></expr>,     <expr><literal type="number">2</literal></expr>,       <expr><literal type="number">2</literal></expr>,      <expr><literal type="number">2</literal></expr>,    <expr><literal type="number">4</literal></expr>,       <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">2</literal></expr>, }</block></expr>,
     <comment type="block">/* 5 TRIGGER: */</comment> <expr><block>{    <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">5</literal></expr>,     <expr><literal type="number">5</literal></expr>,       <expr><literal type="number">5</literal></expr>,      <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">5</literal></expr>,       <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">5</literal></expr>, }</block></expr>,
     <comment type="block">/* 6    SEMI: */</comment> <expr><block>{    <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">6</literal></expr>,     <expr><literal type="number">5</literal></expr>,       <expr><literal type="number">5</literal></expr>,      <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">5</literal></expr>,       <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">7</literal></expr>, }</block></expr>,
     <comment type="block">/* 7     END: */</comment> <expr><block>{    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">7</literal></expr>,     <expr><literal type="number">5</literal></expr>,       <expr><literal type="number">5</literal></expr>,      <expr><literal type="number">5</literal></expr>,    <expr><literal type="number">5</literal></expr>,       <expr><literal type="number">5</literal></expr>,   <expr><literal type="number">5</literal></expr>, }</block></expr>,
  }</block></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <comment type="block">/* If triggers are not supported by this compile then the statement machine
  ** used to detect the end of a statement is much simpler
  */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u8</name></type> <name><name>trans</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
                     <comment type="block">/* Token:           */</comment>
     <comment type="block">/* State:       **  SEMI  WS  OTHER */</comment>
     <comment type="block">/* 0 INVALID: */</comment> <expr><block>{    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,     <expr><literal type="number">2</literal></expr>, }</block></expr>,
     <comment type="block">/* 1   START: */</comment> <expr><block>{    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,     <expr><literal type="number">2</literal></expr>, }</block></expr>,
     <comment type="block">/* 2  NORMAL: */</comment> <expr><block>{    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,     <expr><literal type="number">2</literal></expr>, }</block></expr>,
  }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_TRIGGER */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>SQLITE_MISUSE_BKPT</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <while>while<condition>( <expr><operator>*</operator><name>zSql</name></expr> )</condition><block>{<block_content>
    <switch>switch<condition>( <expr><operator>*</operator><name>zSql</name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="char">';'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* A semicolon */</comment>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkSEMI</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">' '</literal></expr>:</case>
      <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
      <case>case <expr><literal type="char">'\f'</literal></expr>:</case> <block>{<block_content>  <comment type="block">/* White space is ignored */</comment>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkWS</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'/'</literal></expr>:</case> <block>{<block_content>   <comment type="block">/* C-style comments */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'*'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>zSql</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <while>while<condition>( <expr><name><name>zSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'*'</literal> <operator>||</operator> <name><name>zSql</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'/'</literal><operator>)</operator></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zSql</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zSql</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkWS</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'-'</literal></expr>:</case> <block>{<block_content>   <comment type="block">/* SQL-style comments from "--" to end of line */</comment>
        <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <while>while<condition>( <expr><operator>*</operator><name>zSql</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>zSql</name><operator>!=</operator><literal type="char">'\n'</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zSql</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>state</name><operator>==</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkWS</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'['</literal></expr>:</case> <block>{<block_content>   <comment type="block">/* Microsoft-style identifiers in [...] */</comment>
        <expr_stmt><expr><name>zSql</name><operator>++</operator></expr>;</expr_stmt>
        <while>while<condition>( <expr><operator>*</operator><name>zSql</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>zSql</name><operator>!=</operator><literal type="char">']'</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zSql</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><literal type="char">'`'</literal></expr>:</case>     <comment type="block">/* Grave-accent quoted symbols used by MySQL */</comment>
      <case>case <expr><literal type="char">'"'</literal></expr>:</case>     <comment type="block">/* single- and double-quoted strings */</comment>
      <case>case <expr><literal type="char">'\''</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>zSql</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>zSql</name><operator>++</operator></expr>;</expr_stmt>
        <while>while<condition>( <expr><operator>*</operator><name>zSql</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>zSql</name><operator>!=</operator><name>c</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zSql</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <if_stmt><if>if<condition>( <expr><operator>*</operator><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_EBCDIC</name></cpp:ifdef>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <if_stmt><if>if<condition>( <expr><call><name>IdChar</name><argument_list>(<argument><expr><operator>(</operator><name>u8</name><operator>)</operator><operator>*</operator><name>zSql</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <comment type="block">/* Keywords and unquoted identifiers */</comment>
          <decl_stmt><decl><type><name>int</name></type> <name>nId</name></decl>;</decl_stmt>
          <for>for<control>(<init><expr><name>nId</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><call><name>IdChar</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>nId</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>nId</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifdef>
          <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <switch>switch<condition>( <expr><operator>*</operator><name>zSql</name></expr> )</condition><block>{<block_content>
            <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case> <block>{<block_content>
              <if_stmt><if>if<condition>( <expr><name>nId</name><operator>==</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="string">"create"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkCREATE</name></expr>;</expr_stmt>
              </block_content>}</block></if><else>else<block>{<block_content>
                <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            </block_content>}</block>
            <case>case <expr><literal type="char">'t'</literal></expr>:</case> <case>case <expr><literal type="char">'T'</literal></expr>:</case> <block>{<block_content>
              <if_stmt><if>if<condition>( <expr><name>nId</name><operator>==</operator><literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="string">"trigger"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkTRIGGER</name></expr>;</expr_stmt>
              </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nId</name><operator>==</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="string">"temp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkTEMP</name></expr>;</expr_stmt>
              </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nId</name><operator>==</operator><literal type="number">9</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="string">"temporary"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkTEMP</name></expr>;</expr_stmt>
              </block_content>}</block></if><else>else<block>{<block_content>
                <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            </block_content>}</block>
            <case>case <expr><literal type="char">'e'</literal></expr>:</case>  <case>case <expr><literal type="char">'E'</literal></expr>:</case> <block>{<block_content>
              <if_stmt><if>if<condition>( <expr><name>nId</name><operator>==</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkEND</name></expr>;</expr_stmt>
              </block_content>}</block></if><if type="elseif">else
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_EXPLAIN</name></cpp:ifndef>
              if<condition>( <expr><name>nId</name><operator>==</operator><literal type="number">7</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="string">"explain"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkEXPLAIN</name></expr>;</expr_stmt>
              </block_content>}</block></if><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
              <block>{<block_content>
                <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            </block_content>}</block>
            <default>default:</default> <block>{<block_content>
              <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block>
          </block_content>}</block></switch>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_TRIGGER */</comment>
          <expr_stmt><expr><name>zSql</name> <operator>+=</operator> <name>nId</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <comment type="block">/* Operators and special symbols */</comment>
          <expr_stmt><expr><name>token</name> <operator>=</operator> <name>tkOTHER</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>trans</name><index>[<expr><name>state</name></expr>]</index><index>[<expr><name>token</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zSql</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>state</name><operator>==</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
<comment type="block">/*
** This routine is the same as the sqlite3_complete() routine described
** above, except that the parameter is required to be UTF-16 encoded, not
** UTF-8.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_complete16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zSql8</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOINIT</name></cpp:ifndef>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>pVal</name> <operator>=</operator> <call><name>sqlite3ValueNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>SQLITE_UTF16NATIVE</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql8</name> <operator>=</operator> <call><name>sqlite3ValueText</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql8</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_complete</name><argument_list>(<argument><expr><name>zSql8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_COMPLETE */</comment>
</unit>
