<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/hash.c"><comment type="block">/*
** 2001 September 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This is the implementation of generic hash-tables
** used in SQLite.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Turn bulk memory into a hash table object by initializing the
** fields of the Hash structure.
**
** "pNew" is a pointer to the hash table that is to be initialized.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3HashInit</name><parameter_list>(<parameter><decl><type><name>Hash</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pNew</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>htsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Remove all entries from a hash table.  Reclaim all memory.
** Call this routine to delete a hash table or to reset a hash table
** to the empty state.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3HashClear</name><parameter_list>(<parameter><decl><type><name>Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>         <comment type="block">/* For looping over all elements of the table */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pH</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>elem</name> <operator>=</operator> <name><name>pH</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>elem</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>next_elem</name> <init>= <expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>elem</name> <operator>=</operator> <name>next_elem</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The hashing function.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>strHash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>z</name><operator>++</operator><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>     <comment type="block">/*OPTIMIZATION-IF-TRUE*/</comment>
    <comment type="block">/* Knuth multiplicative hashing.  (Sorting &amp; Searching, p. 510).
    ** 0x9e3779b1 is 2654435761 which is the closest prime number to
    ** (2**32)*golden_ratio, where golden_ratio = (sqrt(5) - 1)/2. */</comment>
    <expr_stmt><expr><name>h</name> <operator>+=</operator> <name><name>sqlite3UpperToLower</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h</name> <operator>*=</operator> <literal type="number">0x9e3779b1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Link pNew element into the hash table pH.  If pEntry!=0 then also
** insert pNew into the pEntry hash bucket.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>insertElement</name><parameter_list>(
  <parameter><decl><type><name>Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>,              <comment type="block">/* The complete hash table */</comment>
  <parameter><decl><type><name><name>struct</name> <name>_ht</name></name> <modifier>*</modifier></type><name>pEntry</name></decl></parameter>,    <comment type="block">/* The entry into which pNew is inserted */</comment>
  <parameter><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>         <comment type="block">/* The element to be inserted */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>pHead</name></decl>;</decl_stmt>       <comment type="block">/* First element already in pEntry */</comment>
  <if_stmt><if>if<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pHead</name> <operator>=</operator> <ternary><condition><expr><name><name>pEntry</name><operator>-&gt;</operator><name>count</name></name></expr> ?</condition><then> <expr><name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>pHead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pHead</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pHead</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pHead</name><operator>-&gt;</operator><name>prev</name></name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt> </block_content>}</block></if>
    <else>else             <block>{<block_content> <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt> </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pHead</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pH</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* Resize the hash table so that it cantains "new_size" buckets.
**
** The hash table might fail to resize if sqlite3_malloc() fails or
** if the new size is the same as the prior size.
** Return TRUE if the resize occurs and false if not.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>rehash</name><parameter_list>(<parameter><decl><type><name>Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>new_size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>_ht</name></name> <modifier>*</modifier></type><name>new_ht</name></decl>;</decl_stmt>            <comment type="block">/* The new hash table */</comment>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>elem</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next_elem</name></decl>;</decl_stmt>    <comment type="block">/* For looping over existing elements */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_MALLOC_SOFT_LIMIT</name><operator>&gt;</operator><literal type="number">0</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name>new_size</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ht</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><name>SQLITE_MALLOC_SOFT_LIMIT</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>new_size</name> <operator>=</operator> <name>SQLITE_MALLOC_SOFT_LIMIT</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ht</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>new_size</name><operator>==</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* The inability to allocates space for a larger hash table is
  ** a performance hit but it is not a fatal error.  So mark the
  ** allocation as a benign. Use sqlite3Malloc()/memset(0) instead of 
  ** sqlite3MallocZero() to make the allocation, as sqlite3MallocZero()
  ** only zeroes the requested number of bytes whereas this module will
  ** use the actual amount of space allocated for the hash table (which
  ** may be larger than the requested amount).
  */</comment>
  <expr_stmt><expr><call><name>sqlite3BeginBenignMalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>new_ht</name> <operator>=</operator> <operator>(</operator>struct <name>_ht</name> <operator>*</operator><operator>)</operator><call><name>sqlite3Malloc</name><argument_list>( <argument><expr><name>new_size</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ht</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3EndBenignMalloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>new_ht</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name> <operator>=</operator> <name>new_ht</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name> <operator>=</operator> <name>new_size</name> <operator>=</operator> <call><name>sqlite3MallocSize</name><argument_list>(<argument><expr><name>new_ht</name></expr></argument>)</argument_list></call><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ht</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>new_ht</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>new_size</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>_ht</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>elem</name><operator>=</operator><name><name>pH</name><operator>-&gt;</operator><name>first</name></name></expr><operator>,</operator> <expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>elem</name></expr>;</condition> <incr><expr><name>elem</name> <operator>=</operator> <name>next_elem</name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name> <init>= <expr><call><name>strHash</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>new_size</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>next_elem</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>insertElement</name><argument_list>(<argument><expr><name>pH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>new_ht</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>, <argument><expr><name>elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This function (for internal use only) locates an element in an
** hash table that matches the given key.  If no element is found,
** a pointer to a static null element with HashElem.data==0 is returned.
** If pH is not NULL, then the hash for this key is written to *pH.
*/</comment>
<function><type><specifier>static</specifier> <name>HashElem</name> <modifier>*</modifier></type><name>findElementWithHash</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>,     <comment type="block">/* The pH to be searched */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>,   <comment type="block">/* The key we are searching for */</comment>
  <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pHash</name></decl></parameter> <comment type="block">/* Write the hash value here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>                <comment type="block">/* Used to loop thru the element list */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>            <comment type="block">/* Number of elements left to test */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>                <comment type="block">/* The computed hash */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>HashElem</name></type> <name>nullElement</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name></expr> )</condition><block>{<block_content>   <comment type="block">/*OPTIMIZATION-IF-TRUE*/</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>_ht</name></name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>strHash</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>&amp;</operator><name><name>pH</name><operator>-&gt;</operator><name>ht</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>elem</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>pEntry</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>elem</name> <operator>=</operator> <name><name>pH</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name> <operator>=</operator> <name><name>pH</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pHash</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pHash</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><name>count</name><operator>--</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>elem</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name><name>elem</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> 
      <return>return <expr><name>elem</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>elem</name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>&amp;</operator><name>nullElement</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Remove a single entry from the hash table given a pointer to that
** element and a hash on the element's key.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>removeElementGivenHash</name><parameter_list>(
  <parameter><decl><type><name>Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>,         <comment type="block">/* The pH containing "elem" */</comment>
  <parameter><decl><type><name>HashElem</name><modifier>*</modifier></type> <name>elem</name></decl></parameter>,   <comment type="block">/* The element to be removed from the pH */</comment>
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl></parameter>    <comment type="block">/* Hash value for the element */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>_ht</name></name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> 
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <operator>&amp;</operator><name><name>pH</name><operator>-&gt;</operator><name>ht</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name><operator>==</operator><name>elem</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>chain</name></name> <operator>=</operator> <name><name>elem</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pEntry</name><operator>-&gt;</operator><name>count</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEntry</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>( <argument><expr><name>elem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pH</name><operator>-&gt;</operator><name>first</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3HashClear</name><argument_list>(<argument><expr><name>pH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Attempt to locate an element of the hash table pH with a key
** that matches pKey.  Return the data for this element if it is
** found, or NULL if there is no match.
*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>sqlite3HashFind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pH</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pKey</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>findElementWithHash</name><argument_list>(<argument><expr><name>pH</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>data</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Insert an element into the hash table pH.  The key is pKey
** and the data is "data".
**
** If no element exists with a matching key, then a new
** element is created and NULL is returned.
**
** If another element already exists with the same key, then the
** new data replaces the old data and the old data is returned.
** The key is not copied in this instance.  If a malloc fails, then
** the new data is returned and the hash table is unchanged.
**
** If the "data" parameter to this function is NULL, then the
** element corresponding to "key" is removed from the hash table.
*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>sqlite3HashInsert</name><parameter_list>(<parameter><decl><type><name>Hash</name> <modifier>*</modifier></type><name>pH</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>h</name></decl>;</decl_stmt>       <comment type="block">/* the hash of the key modulo hash table size */</comment>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>elem</name></decl>;</decl_stmt>       <comment type="block">/* Used to loop thru the element list */</comment>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>new_elem</name></decl>;</decl_stmt>   <comment type="block">/* New element added to the pH */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pH</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pKey</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>elem</name> <operator>=</operator> <call><name>findElementWithHash</name><argument_list>(<argument><expr><name>pH</name></expr></argument>,<argument><expr><name>pKey</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>elem</name><operator>-&gt;</operator><name>data</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>old_data</name> <init>= <expr><name><name>elem</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>data</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>removeElementGivenHash</name><argument_list>(<argument><expr><name>pH</name></expr></argument>,<argument><expr><name>elem</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>elem</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <name>pKey</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>old_data</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>data</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>new_elem</name> <operator>=</operator> <operator>(</operator><name>HashElem</name><operator>*</operator><operator>)</operator><call><name>sqlite3Malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HashElem</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>new_elem</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>data</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>new_elem</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <name>pKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>new_elem</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>&gt;=</operator><literal type="number">10</literal> <operator>&amp;&amp;</operator> <name><name>pH</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>rehash</name><argument_list>(<argument><expr><name>pH</name></expr></argument>, <argument><expr><name><name>pH</name><operator>-&gt;</operator><name>count</name></name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>strHash</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pH</name><operator>-&gt;</operator><name>htsize</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>insertElement</name><argument_list>(<argument><expr><name>pH</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pH</name><operator>-&gt;</operator><name>ht</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pH</name><operator>-&gt;</operator><name>ht</name><index>[<expr><name>h</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>new_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
