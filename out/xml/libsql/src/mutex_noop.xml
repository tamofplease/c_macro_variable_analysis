<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/mutex_noop.c"><comment type="block">/*
** 2008 October 07
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the C functions that implement mutexes.
**
** This implementation in this file does not provide any mutual
** exclusion and is thus suitable for use only in applications
** that use SQLite in a single thread.  The routines defined
** here are place-holders.  Applications can substitute working
** mutex routines at start-time using the
**
**     sqlite3_config(SQLITE_CONFIG_MUTEX,...)
**
** interface.
**
** If compiled with SQLITE_DEBUG, then additional logic is inserted
** that does error checking on mutexes to make sure they are being
** called correctly.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MUTEX_OMIT</name></cpp:ifndef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifndef>
<comment type="block">/*
** Stub routines for all mutex methods.
**
** This routines provide no mutual exclusion or error checking.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>noopMutexInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>noopMutexEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sqlite3_mutex</name> <modifier>*</modifier></type><name>noopMutexAlloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>sqlite3_mutex</name><operator>*</operator><operator>)</operator><literal type="number">8</literal></expr>;</return> 
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>noopMutexFree</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>noopMutexEnter</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>noopMutexTry</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>noopMutexLeave</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> </block_content>}</block></function>

<function><type><name>sqlite3_mutex_methods</name> <specifier>const</specifier> <modifier>*</modifier></type><name>sqlite3NoopMutex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_mutex_methods</name></type> <name>sMutex</name> <init>= <expr><block>{
    <expr><name>noopMutexInit</name></expr>,
    <expr><name>noopMutexEnd</name></expr>,
    <expr><name>noopMutexAlloc</name></expr>,
    <expr><name>noopMutexFree</name></expr>,
    <expr><name>noopMutexEnter</name></expr>,
    <expr><name>noopMutexTry</name></expr>,
    <expr><name>noopMutexLeave</name></expr>,

    <expr><literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><operator>&amp;</operator><name>sMutex</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !SQLITE_DEBUG */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
<comment type="block">/*
** In this implementation, error checking is provided for testing
** and debugging purposes.  The mutexes still do not provide any
** mutual exclusion.
*/</comment>

<comment type="block">/*
** The mutex object
*/</comment>
<typedef>typedef <type><struct>struct <name>sqlite3_debug_mutex</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>     <comment type="block">/* The mutex type */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>;</decl_stmt>    <comment type="block">/* Number of entries without a matching leave */</comment>
}</block></struct></type> <name>sqlite3_debug_mutex</name>;</typedef>

<comment type="block">/*
** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routine are
** intended for use inside assert() statements.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>debugMutexHeld</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_debug_mutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>sqlite3_debug_mutex</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>cnt</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>debugMutexNotheld</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_debug_mutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>sqlite3_debug_mutex</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>cnt</name></name><operator>==</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Initialize and deinitialize the mutex subsystem.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>debugMutexInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>debugMutexEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return> </block_content>}</block></function>

<comment type="block">/*
** The sqlite3_mutex_alloc() routine allocates a new
** mutex and returns a pointer to it.  If it returns NULL
** that means that a mutex could not be allocated. 
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_mutex</name> <modifier>*</modifier></type><name>debugMutexAlloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_debug_mutex</name></type> <name><name>aStatic</name><index>[<expr><name>SQLITE_MUTEX_STATIC_VFS3</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_debug_mutex</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>id</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_MUTEX_FAST</name></expr>:</case>
    <case>case <expr><name>SQLITE_MUTEX_RECURSIVE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3Malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
      <if_stmt><if>if<condition>( <expr><name>id</name><operator>-</operator><literal type="number">2</literal><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>id</name><operator>-</operator><literal type="number">2</literal><operator>&gt;=</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aStatic</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>SQLITE_MISUSE_BKPT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>&amp;</operator><name><name>aStatic</name><index>[<expr><name>id</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><operator>(</operator><name>sqlite3_mutex</name><operator>*</operator><operator>)</operator><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This routine deallocates a previously allocated mutex.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>debugMutexFree</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_debug_mutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>sqlite3_debug_mutex</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>cnt</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name><operator>==</operator><name>SQLITE_MUTEX_RECURSIVE</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>id</name></name><operator>==</operator><name>SQLITE_MUTEX_FAST</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>SQLITE_MISUSE_BKPT</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The sqlite3_mutex_enter() and sqlite3_mutex_try() routines attempt
** to enter a mutex.  If another thread is already within the mutex,
** sqlite3_mutex_enter() will block and sqlite3_mutex_try() will return
** SQLITE_BUSY.  The sqlite3_mutex_try() interface returns SQLITE_OK
** upon successful entry.  Mutexes created using SQLITE_MUTEX_RECURSIVE can
** be entered multiple times by the same thread.  In such cases the,
** mutex must be exited an equal number of times before another thread
** can enter.  If the same thread tries to enter any other kind of mutex
** more than once, the behavior is undefined.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>debugMutexEnter</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_debug_mutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>sqlite3_debug_mutex</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name><operator>==</operator><name>SQLITE_MUTEX_RECURSIVE</name> <operator>||</operator> <call><name>debugMutexNotheld</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>debugMutexTry</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_debug_mutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>sqlite3_debug_mutex</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name><operator>==</operator><name>SQLITE_MUTEX_RECURSIVE</name> <operator>||</operator> <call><name>debugMutexNotheld</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cnt</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The sqlite3_mutex_leave() routine exits a mutex that was
** previously entered by the same thread.  The behavior
** is undefined if the mutex is not currently entered or
** is not currently allocated.  SQLite will never do either.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>debugMutexLeave</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>pX</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_debug_mutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>sqlite3_debug_mutex</name><operator>*</operator><operator>)</operator><name>pX</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>debugMutexHeld</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cnt</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name><operator>==</operator><name>SQLITE_MUTEX_RECURSIVE</name> <operator>||</operator> <call><name>debugMutexNotheld</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sqlite3_mutex_methods</name> <specifier>const</specifier> <modifier>*</modifier></type><name>sqlite3NoopMutex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_mutex_methods</name></type> <name>sMutex</name> <init>= <expr><block>{
    <expr><name>debugMutexInit</name></expr>,
    <expr><name>debugMutexEnd</name></expr>,
    <expr><name>debugMutexAlloc</name></expr>,
    <expr><name>debugMutexFree</name></expr>,
    <expr><name>debugMutexEnter</name></expr>,
    <expr><name>debugMutexTry</name></expr>,
    <expr><name>debugMutexLeave</name></expr>,

    <expr><name>debugMutexHeld</name></expr>,
    <expr><name>debugMutexNotheld</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <return>return <expr><operator>&amp;</operator><name>sMutex</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_DEBUG */</comment>

<comment type="block">/*
** If compiled with SQLITE_MUTEX_NOOP, then the no-op mutex implementation
** is used regardless of the run-time threadsafety setting.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_MUTEX_NOOP</name></cpp:ifdef>
<function><type><name>sqlite3_mutex_methods</name> <specifier>const</specifier> <modifier>*</modifier></type><name>sqlite3DefaultMutex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3NoopMutex</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(SQLITE_MUTEX_NOOP) */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_MUTEX_OMIT) */</comment>
</unit>
