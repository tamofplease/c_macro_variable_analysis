<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/test_vfstrace.c"><comment type="block">/*
** 2011 March 16
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains code implements a VFS shim that writes diagnostic
** output for each VFS call, similar to "strace".
**
** USAGE:
**
** This source file exports a single symbol which is the name of a
** function:
**
**   int vfstrace_register(
**     const char *zTraceName,         // Name of the newly constructed VFS
**     const char *zOldVfsName,        // Name of the underlying VFS
**     int (*xOut)(const char*,void*), // Output routine.  ex: fputs
**     void *pOutArg,                  // 2nd argument to xOut.  ex: stderr
**     int makeDefault                 // Make the new VFS the default
**   );
**
** Applications that want to trace their VFS usage must provide a callback
** function with this prototype:
**
**   int traceOutput(const char *zMessage, void *pAppData);
**
** This function will "output" the trace messages, where "output" can
** mean different things to different applications.  The traceOutput function
** for the command-line shell (see shell.c) is "fputs" from the standard
** library, which means that all trace output is written on the stream
** specified by the second argument.  In the case of the command-line shell
** the second argument is stderr.  Other applications might choose to output
** trace information to a file, over a socket, or write it into a buffer.
**
** The vfstrace_register() function creates a new "shim" VFS named by
** the zTraceName parameter.  A "shim" VFS is an SQLite backend that does
** not really perform the duties of a true backend, but simply filters or
** interprets VFS calls before passing them off to another VFS which does
** the actual work.  In this case the other VFS - the one that does the
** real work - is identified by the second parameter, zOldVfsName.  If
** the 2nd parameter is NULL then the default VFS is used.  The common
** case is for the 2nd parameter to be NULL.
**
** The third and fourth parameters are the pointer to the output function
** and the second argument to the output function.  For the SQLite
** command-line shell, when the -vfstrace option is used, these parameters
** are fputs and stderr, respectively.
**
** The fifth argument is true (non-zero) to cause the newly created VFS
** to become the default VFS.  The common case is for the fifth parameter
** to be true.
**
** The call to vfstrace_register() simply creates the shim VFS that does
** tracing.  The application must also arrange to use the new VFS for
** all database connections that are created and for which tracing is 
** desired.  This can be done by specifying the trace VFS using URI filename
** notation, or by specifying the trace VFS as the 4th parameter to
** sqlite3_open_v2() or by making the trace VFS be the default (by setting
** the 5th parameter of vfstrace_register() to 1).
**
**
** ENABLING VFSTRACE IN A COMMAND-LINE SHELL
**
** The SQLite command line shell implemented by the shell.c source file
** can be used with this module.  To compile in -vfstrace support, first
** gather this file (test_vfstrace.c), the shell source file (shell.c),
** and the SQLite amalgamation source files (sqlite3.c, sqlite3.h) into
** the working directory.  Then compile using a command like the following:
**
**    gcc -o sqlite3 -Os -I. -DSQLITE_ENABLE_VFSTRACE \
**        -DSQLITE_THREADSAFE=0 -DSQLITE_ENABLE_FTS3 -DSQLITE_ENABLE_RTREE \
**        -DHAVE_READLINE -DHAVE_USLEEP=1 \
**        shell.c test_vfstrace.c sqlite3.c -ldl -lreadline -lncurses
**
** The gcc command above works on Linux and provides (in addition to the
** -vfstrace option) support for FTS3 and FTS4, RTREE, and command-line
** editing using the readline library.  The command-line shell does not
** use threads so we added -DSQLITE_THREADSAFE=0 just to make the code
** run a little faster.   For compiling on a Mac, you'll probably need
** to omit the -DHAVE_READLINE, the -lreadline, and the -lncurses options.
** The compilation could be simplified to just this:
**
**    gcc -DSQLITE_ENABLE_VFSTRACE \
**         shell.c test_vfstrace.c sqlite3.c -ldl -lpthread
**
** In this second example, all unnecessary options have been removed
** Note that since the code is now threadsafe, we had to add the -lpthread
** option to pull in the pthreads library.
**
** To cross-compile for windows using MinGW, a command like this might
** work:
**
**    /opt/mingw/bin/i386-mingw32msvc-gcc -o sqlite3.exe -Os -I \
**         -DSQLITE_THREADSAFE=0 -DSQLITE_ENABLE_VFSTRACE \
**         shell.c test_vfstrace.c sqlite3.c
**
** Similar compiler commands will work on different systems.  The key
** invariants are (1) you must have -DSQLITE_ENABLE_VFSTRACE so that
** the shell.c source file will know to include the -vfstrace command-line
** option and (2) you must compile and link the three source files
** shell,c, test_vfstrace.c, and sqlite3.c.  
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>

<comment type="block">/*
** An instance of this structure is attached to the each trace VFS to
** provide auxiliary information.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>vfstrace_info</name></name></type> <name>vfstrace_info</name>;</typedef>
<struct>struct <name>vfstrace_info</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRootVfs</name></decl>;</decl_stmt>              <comment type="block">/* The underlying real VFS */</comment>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xOut</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>    <comment type="block">/* Send output here */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pOutArg</name></decl>;</decl_stmt>                      <comment type="block">/* First argument to xOut */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVfsName</name></decl>;</decl_stmt>               <comment type="block">/* Name of this trace-VFS */</comment>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pTraceVfs</name></decl>;</decl_stmt>             <comment type="block">/* Pointer back to the trace VFS */</comment>
}</block>;</struct>

<comment type="block">/*
** The sqlite3_file object for the trace VFS
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>vfstrace_file</name></name></type> <name>vfstrace_file</name>;</typedef>
<struct>struct <name>vfstrace_file</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>        <comment type="block">/* Base class.  Must be first */</comment>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name></decl>;</decl_stmt>     <comment type="block">/* The trace-VFS to which this file belongs */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFName</name></decl>;</decl_stmt>       <comment type="block">/* Base name of the file */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name></decl>;</decl_stmt>      <comment type="block">/* The real underlying file */</comment>
}</block>;</struct>

<comment type="block">/*
** Method declarations for vfstrace_file.
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceRead</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceWrite</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceShmMap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vfstraceShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Method declarations for vfstrace_vfs.
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncDir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceAccess</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceFullPathname</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vfstraceDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vfstraceDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><name>vfstraceDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name><operator>*</operator></expr></argument>,<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>zSymbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>vfstraceDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceSetSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_syscall_ptr</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sqlite3_syscall_ptr</name></type> <name>vfstraceGetSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vfstraceNextSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Return a pointer to the tail of the pathname.  Examples:
**
**     /home/drh/xyzzy.txt -&gt; xyzzy.txt
**     xyzzy.txt           -&gt; xyzzy.txt
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileTail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'/'</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <return>return <expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Send trace output defined by zFormat and subsequent arguments.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vfstrace_printf</name><parameter_list>(
  <parameter><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,
  <parameter><decl><type><modifier>...</modifier></type></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zMsg</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pInfo</name><operator>-&gt;</operator><name>xOut</name></name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pOutArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Convert value rc into a string and print it using zFormat.  zFormat
** should have exactly one %s
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vfstrace_print_errcode</name><parameter_list>(
  <parameter><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zVal</name></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_OK</name></expr>:</case>         <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_OK"</literal></expr>;</expr_stmt>          <break>break;</break>
    <case>case <expr><name>SQLITE_ERROR</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_ERROR"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_PERM</name></expr>:</case>       <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_PERM"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>SQLITE_ABORT</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_ABORT"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_BUSY</name></expr>:</case>       <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_BUSY"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>SQLITE_NOMEM</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_NOMEM"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_READONLY</name></expr>:</case>   <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_READONLY"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>SQLITE_INTERRUPT</name></expr>:</case>  <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_INTERRUPT"</literal></expr>;</expr_stmt>   <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_CORRUPT</name></expr>:</case>    <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_CORRUPT"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>SQLITE_FULL</name></expr>:</case>       <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_FULL"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>SQLITE_CANTOPEN</name></expr>:</case>   <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_CANTOPEN"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>SQLITE_PROTOCOL</name></expr>:</case>   <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_PROTOCOL"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>SQLITE_EMPTY</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_EMPTY"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_SCHEMA</name></expr>:</case>     <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_SCHEMA"</literal></expr>;</expr_stmt>      <break>break;</break>
    <case>case <expr><name>SQLITE_CONSTRAINT</name></expr>:</case> <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_CONSTRAINT"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>SQLITE_MISMATCH</name></expr>:</case>   <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_MISMATCH"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>SQLITE_MISUSE</name></expr>:</case>     <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_MISUSE"</literal></expr>;</expr_stmt>      <break>break;</break>
    <case>case <expr><name>SQLITE_NOLFS</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_NOLFS"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_READ</name></expr>:</case>         <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_READ"</literal></expr>;</expr_stmt>         <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_SHORT_READ</name></expr>:</case>   <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_SHORT_READ"</literal></expr>;</expr_stmt>   <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_WRITE</name></expr>:</case>        <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_WRITE"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_FSYNC</name></expr>:</case>        <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_FSYNC"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_DIR_FSYNC</name></expr>:</case>    <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_DIR_FSYNC"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_TRUNCATE</name></expr>:</case>     <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_TRUNCATE"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_FSTAT</name></expr>:</case>        <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_FSTAT"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_UNLOCK</name></expr>:</case>       <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_UNLOCK"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_RDLOCK</name></expr>:</case>       <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_RDLOCK"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_DELETE</name></expr>:</case>       <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_DELETE"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_BLOCKED</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_BLOCKED"</literal></expr>;</expr_stmt>      <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_NOMEM</name></expr>:</case>        <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_NOMEM"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_ACCESS</name></expr>:</case>       <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_ACCESS"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_CHECKRESERVEDLOCK</name></expr>:</case>
                               <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_CHECKRESERVEDLOCK"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_LOCK</name></expr>:</case>         <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_LOCK"</literal></expr>;</expr_stmt>         <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_CLOSE</name></expr>:</case>        <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_CLOSE"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_DIR_CLOSE</name></expr>:</case>    <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_DIR_CLOSE"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_SHMOPEN</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_SHMOPEN"</literal></expr>;</expr_stmt>      <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_SHMSIZE</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_SHMSIZE"</literal></expr>;</expr_stmt>      <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_SHMLOCK</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_SHMLOCK"</literal></expr>;</expr_stmt>      <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_SHMMAP</name></expr>:</case>       <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_SHMMAP"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_SEEK</name></expr>:</case>         <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_SEEK"</literal></expr>;</expr_stmt>         <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_GETTEMPPATH</name></expr>:</case>  <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_GETTEMPPATH"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>SQLITE_IOERR_CONVPATH</name></expr>:</case>     <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_IOERR_CONVPATH"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>SQLITE_READONLY_DBMOVED</name></expr>:</case>   <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_READONLY_DBMOVED"</literal></expr>;</expr_stmt>   <break>break;</break>
    <case>case <expr><name>SQLITE_LOCKED_SHAREDCACHE</name></expr>:</case> <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_LOCKED_SHAREDCACHE"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>SQLITE_BUSY_RECOVERY</name></expr>:</case>      <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_BUSY_RECOVERY"</literal></expr>;</expr_stmt>      <break>break;</break>
    <case>case <expr><name>SQLITE_CANTOPEN_NOTEMPDIR</name></expr>:</case> <expr_stmt><expr><name>zVal</name> <operator>=</operator> <literal type="string">"SQLITE_CANTOPEN_NOTEMPDIR"</literal></expr>;</expr_stmt> <break>break;</break>
    <default>default:</default> <block>{<block_content>
       <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><name>zVal</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
       <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>zVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Append to a buffer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>strappend</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pI</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zAppend</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>pI</name></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name><name>zAppend</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>zAppend</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pI</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Close an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xClose(%s)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pMethods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pMethods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xRead(%s,n=%d,ofst=%lld)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xWrite(%s,n=%d,ofst=%lld)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xTruncate(%s,%lld)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>,
                  <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xTruncate</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"|0"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SYNC_FULL</name></expr> )</condition><block type="pseudo"><block_content>        <expr_stmt><expr><call><name>strappend</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"|FULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SYNC_NORMAL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strappend</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"|NORMAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SYNC_DATAONLY</name></expr> )</condition><block type="pseudo"><block_content>    <expr_stmt><expr><call><name>strappend</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"|DATAONLY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>SQLITE_SYNC_FULL</name><operator>|</operator><name>SQLITE_SYNC_DATAONLY</name><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"|0x%x"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xSync(%s,%s)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>,
                  <argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xFileSize(%s)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s,"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" size=%lld\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the name of a lock.
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lockName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azLockNames</name><index>[]</index></name> <init>= <expr><block>{
     <expr><literal type="string">"NONE"</literal></expr>, <expr><literal type="string">"SHARED"</literal></expr>, <expr><literal type="string">"RESERVED"</literal></expr>, <expr><literal type="string">"PENDING"</literal></expr>, <expr><literal type="string">"EXCLUSIVE"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>eLock</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>eLock</name><operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>azLockNames</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>azLockNames</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="string">"???"</literal></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><name><name>azLockNames</name><index>[<expr><name>eLock</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Lock an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xLock(%s,%s)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>,
                  <argument><expr><call><name>lockName</name><argument_list>(<argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unlock an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xUnlock(%s,%s)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>,
                  <argument><expr><call><name>lockName</name><argument_list>(<argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xUnlock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xCheckReservedLock(%s,%d)"</literal></expr></argument>, 
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xCheckReservedLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">", out=%d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** File control method. For custom operations on an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOp</name></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>op</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>SQLITE_FCNTL_LOCKSTATE</name></expr>:</case>    <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LOCKSTATE"</literal></expr>;</expr_stmt>          <break>break;</break>
    <case>case <expr><name>SQLITE_GET_LOCKPROXYFILE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"GET_LOCKPROXYFILE"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>SQLITE_SET_LOCKPROXYFILE</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SET_LOCKPROXYFILE"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>SQLITE_LAST_ERRNO</name></expr>:</case>         <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"LAST_ERRNO"</literal></expr>;</expr_stmt>         <break>break;</break>
    <case>case <expr><name>SQLITE_FCNTL_SIZE_HINT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"SIZE_HINT,%lld"</literal></expr></argument>,
                       <argument><expr><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>SQLITE_FCNTL_CHUNK_SIZE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"CHUNK_SIZE,%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>SQLITE_FCNTL_FILE_POINTER</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"FILE_POINTER"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_FCNTL_SYNC_OMITTED</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"SYNC_OMITTED"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_FCNTL_WIN32_AV_RETRY</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"WIN32_AV_RETRY"</literal></expr>;</expr_stmt>   <break>break;</break>
    <case>case <expr><name>SQLITE_FCNTL_PERSIST_WAL</name></expr>:</case>  <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"PERSIST_WAL"</literal></expr>;</expr_stmt>        <break>break;</break>
    <case>case <expr><name>SQLITE_FCNTL_OVERWRITE</name></expr>:</case>    <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"OVERWRITE"</literal></expr>;</expr_stmt>          <break>break;</break>
    <case>case <expr><name>SQLITE_FCNTL_VFSNAME</name></expr>:</case>      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"VFSNAME"</literal></expr>;</expr_stmt>            <break>break;</break>
    <case>case <expr><name>SQLITE_FCNTL_TEMPFILENAME</name></expr>:</case> <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"TEMPFILENAME"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><literal type="number">0xca093fa0</literal></expr>:</case>                <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"DB_UNCHANGED"</literal></expr>;</expr_stmt>       <break>break;</break>
    <case>case <expr><name>SQLITE_FCNTL_PRAGMA</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type> <name>a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><specifier>const</specifier><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA,[%s,%s]"</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof <name>zBuf</name></sizeof></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xFileControl(%s,%s)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>, <argument><expr><name>zOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileControl</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_VFSNAME</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"vfstrace.%s/%z"</literal></expr></argument>,
                                    <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>op</name><operator>==</operator><name>SQLITE_FCNTL_PRAGMA</name> <operator>||</operator> <name>op</name><operator>==</operator><name>SQLITE_FCNTL_TEMPFILENAME</name><operator>)</operator>
   <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xFileControl(%s,%s) returns %s"</literal></expr></argument>,
                    <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>, <argument><expr><name>zOp</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xSectorSize(%s)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSectorSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an vfstrace-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xDeviceCharacteristics(%s)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xDeviceCharacteristics</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; 0x%08x\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Shared-memory operations.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zLck</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zLck</name></expr></argument>, <argument><expr><literal type="string">"|0"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SHM_UNLOCK</name></expr> )</condition><block type="pseudo"><block_content>    <expr_stmt><expr><call><name>strappend</name><argument_list>(<argument><expr><name>zLck</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"|UNLOCK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SHM_LOCK</name></expr> )</condition><block type="pseudo"><block_content>      <expr_stmt><expr><call><name>strappend</name><argument_list>(<argument><expr><name>zLck</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"|LOCK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SHM_SHARED</name></expr> )</condition><block type="pseudo"><block_content>    <expr_stmt><expr><call><name>strappend</name><argument_list>(<argument><expr><name>zLck</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"|SHARED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SHM_EXCLUSIVE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strappend</name><argument_list>(<argument><expr><name>zLck</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"|EXCLUSIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><literal type="number">0xf</literal><operator>)</operator></expr> )</condition><block>{<block_content>
     <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLck</name></expr></argument>)</argument_list></sizeof><operator>-</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zLck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"|0x%x"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xShmLock(%s,ofst=%d,n=%d,%s)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zLck</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceShmMap</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iRegion</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>szRegion</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>isWrite</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xShmMap(%s,iRegion=%d,szRegion=%d,isWrite=%d,*)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>, <argument><expr><name>iRegion</name></expr></argument>, <argument><expr><name>szRegion</name></expr></argument>, <argument><expr><name>isWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmMap</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>iRegion</name></expr></argument>, <argument><expr><name>szRegion</name></expr></argument>, <argument><expr><name>isWrite</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vfstraceShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xShmBarrier(%s)\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmBarrier</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delFlag</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xShmUnmap(%s,delFlag=%d)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>, <argument><expr><name>delFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmUnmap</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>delFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>



<comment type="block">/*
** Open an vfstrace file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_file</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>vfstrace_file</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pInfo</name></name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name> <operator>=</operator> <ternary><condition><expr><name>zName</name></expr> ?</condition><then> <expr><call><name>fileTail</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"&lt;temp&gt;"</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_file</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pRoot</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xOpen(%s,flags=0x%x)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_io_methods</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sqlite3_io_methods</name> <modifier>*</modifier></type><name>pSub</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>iVersion</name></name> <operator>=</operator> <name><name>pSub</name><operator>-&gt;</operator><name>iVersion</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xClose</name></name> <operator>=</operator> <name>vfstraceClose</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xRead</name></name> <operator>=</operator> <name>vfstraceRead</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xWrite</name></name> <operator>=</operator> <name>vfstraceWrite</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xTruncate</name></name> <operator>=</operator> <name>vfstraceTruncate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xSync</name></name> <operator>=</operator> <name>vfstraceSync</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xFileSize</name></name> <operator>=</operator> <name>vfstraceFileSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xLock</name></name> <operator>=</operator> <name>vfstraceLock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xUnlock</name></name> <operator>=</operator> <name>vfstraceUnlock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xCheckReservedLock</name></name> <operator>=</operator> <name>vfstraceCheckReservedLock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xFileControl</name></name> <operator>=</operator> <name>vfstraceFileControl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xSectorSize</name></name> <operator>=</operator> <name>vfstraceSectorSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xDeviceCharacteristics</name></name> <operator>=</operator> <name>vfstraceDeviceCharacteristics</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xShmMap</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSub</name><operator>-&gt;</operator><name>xShmMap</name></name></expr> ?</condition><then> <expr><name>vfstraceShmMap</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xShmLock</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSub</name><operator>-&gt;</operator><name>xShmLock</name></name></expr> ?</condition><then> <expr><name>vfstraceShmLock</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xShmBarrier</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSub</name><operator>-&gt;</operator><name>xShmBarrier</name></name></expr> ?</condition><then> <expr><name>vfstraceShmBarrier</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xShmUnmap</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pSub</name><operator>-&gt;</operator><name>xShmUnmap</name></name></expr> ?</condition><then> <expr><name>vfstraceShmUnmap</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOutFlags</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">", outFlags=0x%x\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete the file located at zPath. If the dirSync argument is true,
** ensure the file-system modifications are synced to disk before
** returning.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xDelete(\"%s\",%d)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pRoot</name><operator>-&gt;</operator><name>xDelete</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xAccess(\"%s\",%d)"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pRoot</name><operator>-&gt;</operator><name>xAccess</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">", out=%d\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (DEVSYM_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xFullPathname(\"%s\")"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pRoot</name><operator>-&gt;</operator><name>xFullPathname</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_print_errcode</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">", out=\"%.*s\"\n"</literal></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>vfstraceDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xDlOpen(\"%s\")\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xDlOpen</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer zErrMsg (size nByte bytes) with a human readable
** utf-8 string describing the most recent error encountered associated 
** with dynamic libraries.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vfstraceDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xDlError(%d)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xDlError</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">" -&gt; \"%s\""</literal></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to the symbol zSymbol in the dynamic library pHandle.
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*vfstraceDlSym(sqlite3_vfs *pVfs,void *p,const char *zSym)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator><block>{
  <expr><name>vfstrace_info</name> <operator>*</operator><name>pInfo</name> <operator>=</operator> <operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr>;
  <expr><name>sqlite3_vfs</name> <operator>*</operator><name>pRoot</name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr>;
  <expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xDlSym(\"%s\")\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xDlSym</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="block">/*
** Close the dynamic library handle pHandle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>vfstraceDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xDlOpen()\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xDlClose</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.xRandomness(%d)\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xRandomness</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xSleep</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return th3 emost recent error code and message
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iErr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xGetLastError</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>iErr</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Override system calls.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>vfstraceSetSystemCall</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_syscall_ptr</name></type> <name>pFunc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xSetSystemCall</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sqlite3_syscall_ptr</name></type> <name>vfstraceGetSystemCall</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xGetSystemCall</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>vfstraceNextSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pRoot</name><operator>-&gt;</operator><name>xNextSystemCall</name></name><argument_list>(<argument><expr><name>pRoot</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Clients invoke this routine to construct a new trace-vfs shim.
**
** Return SQLITE_OK on success.  
**
** SQLITE_NOMEM is returned in the case of a memory allocation error.
** SQLITE_NOTFOUND is returned if zOldVfsName does not exist.
*/</comment>
<function><type><name>int</name></type> <name>vfstrace_register</name><parameter_list>(
   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTraceName</name></decl></parameter>,           <comment type="block">/* Name of the newly constructed VFS */</comment>
   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOldVfsName</name></decl></parameter>,          <comment type="block">/* Name of the underlying VFS */</comment>
   <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xOut</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,   <comment type="block">/* Output routine.  ex: fputs */</comment>
   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pOutArg</name></decl></parameter>,                    <comment type="block">/* 2nd argument to xOut.  ex: stderr */</comment>
   <parameter><decl><type><name>int</name></type> <name>makeDefault</name></decl></parameter>                   <comment type="block">/* True to make the new VFS the default */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pRoot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>vfstrace_info</name> <modifier>*</modifier></type><name>pInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pRoot</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name>zOldVfsName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pRoot</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOTFOUND</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>nName</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zTraceName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pInfo</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nName</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><name>nByte</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <operator>(</operator><name>vfstrace_info</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNew</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>iVersion</name></name> <operator>=</operator> <name><name>pRoot</name><operator>-&gt;</operator><name>iVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>szOsFile</name></name> <operator>=</operator> <name><name>pRoot</name><operator>-&gt;</operator><name>szOsFile</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>vfstrace_file</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>mxPathname</name></name> <operator>=</operator> <name><name>pRoot</name><operator>-&gt;</operator><name>mxPathname</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zTraceName</name></expr></argument>, <argument><expr><name>nName</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pAppData</name></name> <operator>=</operator> <name>pInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xOpen</name></name> <operator>=</operator> <name>vfstraceOpen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xDelete</name></name> <operator>=</operator> <name>vfstraceDelete</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xAccess</name></name> <operator>=</operator> <name>vfstraceAccess</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xFullPathname</name></name> <operator>=</operator> <name>vfstraceFullPathname</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xDlOpen</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>xDlOpen</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>vfstraceDlOpen</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xDlError</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>xDlError</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>vfstraceDlError</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xDlSym</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>xDlSym</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>vfstraceDlSym</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xDlClose</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>xDlClose</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>vfstraceDlClose</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xRandomness</name></name> <operator>=</operator> <name>vfstraceRandomness</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xSleep</name></name> <operator>=</operator> <name>vfstraceSleep</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xCurrentTime</name></name> <operator>=</operator> <name>vfstraceCurrentTime</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xGetLastError</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>xGetLastError</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>vfstraceGetLastError</name></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:
                                   <expr><name>vfstraceCurrentTimeInt64</name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xSetSystemCall</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>xSetSystemCall</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: 
                                   <expr><name>vfstraceSetSystemCall</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xGetSystemCall</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>xGetSystemCall</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: 
                                   <expr><name>vfstraceGetSystemCall</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xNextSystemCall</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pRoot</name><operator>-&gt;</operator><name>xNextSystemCall</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: 
                                   <expr><name>vfstraceNextSystemCall</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pRootVfs</name></name> <operator>=</operator> <name>pRoot</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>xOut</name></name> <operator>=</operator> <name>xOut</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pOutArg</name></name> <operator>=</operator> <name>pOutArg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTraceVfs</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfstrace_printf</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="string">"%s.enabled_for(\"%s\")\n"</literal></expr></argument>,
       <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>zVfsName</name></name></expr></argument>, <argument><expr><name><name>pRoot</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>makeDefault</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
