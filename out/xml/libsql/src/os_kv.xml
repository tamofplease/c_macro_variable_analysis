<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/os_kv.c"><comment type="block">/*
** 2022-09-06
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains an experimental VFS layer that operates on a
** Key/Value storage engine where both keys and values must be pure
** text.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqliteInt.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_KV</name> <operator>||</operator> <operator>(</operator><name>SQLITE_OS_UNIX</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OS_KV_OPTIONAL</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>

<comment type="block" format="doxygen">/*****************************************************************************
** Debugging logic
*/</comment>

<comment type="block">/* SQLITE_KV_TRACE() is used for tracing calls to kvstorage routines. */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_KV_TRACE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>printf X</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_KV_TRACE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* SQLITE_KV_LOG() is used for tracing calls to the VFS interface */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_KV_LOG</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>printf X</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_KV_LOG</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Forward declaration of objects used by this VFS implementation
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>KVVfsFile</name></name></type> <name>KVVfsFile</name>;</typedef>

<comment type="block">/* A single open file.  There are only two files represented by this
** VFS - the database and the rollback journal.
*/</comment>
<struct>struct <name>KVVfsFile</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>              <comment type="block">/* IO methods */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zClass</name></decl>;</decl_stmt>             <comment type="block">/* Storage class */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isJournal</name></decl>;</decl_stmt>                  <comment type="block">/* True if this is a journal file */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nJrnl</name></decl>;</decl_stmt>             <comment type="block">/* Space allocated for aJrnl[] */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aJrnl</name></decl>;</decl_stmt>                    <comment type="block">/* Journal content */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szPage</name></decl>;</decl_stmt>                     <comment type="block">/* Last known page size */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>szDb</name></decl>;</decl_stmt>             <comment type="block">/* Database file size.  -1 means unknown */</comment>
}</block>;</struct>

<comment type="block">/*
** Methods for KVVfsFile
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsReadDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsReadJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsWriteDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsWriteJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsTruncateDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsTruncateJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsSyncDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsSyncJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFileSizeDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFileSizeJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFileControlDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFileControlJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Methods for sqlite3_vfs
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncDir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsAccess</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFullPathname</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>kvvfsDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name></type> <name>sqlite3OsKvvfsObject</name> <init>= <expr><block>{
  <expr><literal type="number">1</literal></expr>,                              <comment type="block">/* iVersion */</comment>
  <expr><sizeof>sizeof<argument_list>(<argument><expr><name>KVVfsFile</name></expr></argument>)</argument_list></sizeof></expr>,              <comment type="block">/* szOsFile */</comment>
  <expr><literal type="number">1024</literal></expr>,                           <comment type="block">/* mxPathname */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* pNext */</comment>
  <expr><literal type="string">"kvvfs"</literal></expr>,                        <comment type="block">/* zName */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* pAppData */</comment>
  <expr><name>kvvfsOpen</name></expr>,                      <comment type="block">/* xOpen */</comment>
  <expr><name>kvvfsDelete</name></expr>,                    <comment type="block">/* xDelete */</comment>
  <expr><name>kvvfsAccess</name></expr>,                    <comment type="block">/* xAccess */</comment>
  <expr><name>kvvfsFullPathname</name></expr>,              <comment type="block">/* xFullPathname */</comment>
  <expr><name>kvvfsDlOpen</name></expr>,                    <comment type="block">/* xDlOpen */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xDlError */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xDlSym */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xDlClose */</comment>
  <expr><name>kvvfsRandomness</name></expr>,                <comment type="block">/* xRandomness */</comment>
  <expr><name>kvvfsSleep</name></expr>,                     <comment type="block">/* xSleep */</comment>
  <expr><name>kvvfsCurrentTime</name></expr>,               <comment type="block">/* xCurrentTime */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xGetLastError */</comment>
  <expr><name>kvvfsCurrentTimeInt64</name></expr>           <comment type="block">/* xCurrentTimeInt64 */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Methods for sqlite3_file objects referencing a database file
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_io_methods</name></type> <name>kvvfs_db_io_methods</name> <init>= <expr><block>{
  <expr><literal type="number">1</literal></expr>,                              <comment type="block">/* iVersion */</comment>
  <expr><name>kvvfsClose</name></expr>,                     <comment type="block">/* xClose */</comment>
  <expr><name>kvvfsReadDb</name></expr>,                    <comment type="block">/* xRead */</comment>
  <expr><name>kvvfsWriteDb</name></expr>,                   <comment type="block">/* xWrite */</comment>
  <expr><name>kvvfsTruncateDb</name></expr>,                <comment type="block">/* xTruncate */</comment>
  <expr><name>kvvfsSyncDb</name></expr>,                    <comment type="block">/* xSync */</comment>
  <expr><name>kvvfsFileSizeDb</name></expr>,                <comment type="block">/* xFileSize */</comment>
  <expr><name>kvvfsLock</name></expr>,                      <comment type="block">/* xLock */</comment>
  <expr><name>kvvfsUnlock</name></expr>,                    <comment type="block">/* xUnlock */</comment>
  <expr><name>kvvfsCheckReservedLock</name></expr>,         <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>kvvfsFileControlDb</name></expr>,             <comment type="block">/* xFileControl */</comment>
  <expr><name>kvvfsSectorSize</name></expr>,                <comment type="block">/* xSectorSize */</comment>
  <expr><name>kvvfsDeviceCharacteristics</name></expr>,     <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmMap */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmLock */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmBarrier */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmUnmap */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xFetch */</comment>
  <expr><literal type="number">0</literal></expr>                               <comment type="block">/* xUnfetch */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Methods for sqlite3_file objects referencing a rollback journal
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_io_methods</name></type> <name>kvvfs_jrnl_io_methods</name> <init>= <expr><block>{
  <expr><literal type="number">1</literal></expr>,                              <comment type="block">/* iVersion */</comment>
  <expr><name>kvvfsClose</name></expr>,                     <comment type="block">/* xClose */</comment>
  <expr><name>kvvfsReadJrnl</name></expr>,                  <comment type="block">/* xRead */</comment>
  <expr><name>kvvfsWriteJrnl</name></expr>,                 <comment type="block">/* xWrite */</comment>
  <expr><name>kvvfsTruncateJrnl</name></expr>,              <comment type="block">/* xTruncate */</comment>
  <expr><name>kvvfsSyncJrnl</name></expr>,                  <comment type="block">/* xSync */</comment>
  <expr><name>kvvfsFileSizeJrnl</name></expr>,              <comment type="block">/* xFileSize */</comment>
  <expr><name>kvvfsLock</name></expr>,                      <comment type="block">/* xLock */</comment>
  <expr><name>kvvfsUnlock</name></expr>,                    <comment type="block">/* xUnlock */</comment>
  <expr><name>kvvfsCheckReservedLock</name></expr>,         <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>kvvfsFileControlJrnl</name></expr>,           <comment type="block">/* xFileControl */</comment>
  <expr><name>kvvfsSectorSize</name></expr>,                <comment type="block">/* xSectorSize */</comment>
  <expr><name>kvvfsDeviceCharacteristics</name></expr>,     <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmMap */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmLock */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmBarrier */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xShmUnmap */</comment>
  <expr><literal type="number">0</literal></expr>,                              <comment type="block">/* xFetch */</comment>
  <expr><literal type="number">0</literal></expr>                               <comment type="block">/* xUnfetch */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/****** Storage subsystem **************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Forward declarations for the low-level storage engine
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvstorageWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvstorageDelete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>kvstorageRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KVSTORAGE_KEY_SZ</name></cpp:macro>  <cpp:value>32</cpp:value></cpp:define>

<comment type="block">/* Expand the key name with an appropriate prefix and put the result
** zKeyOut[].  The zKeyOut[] buffer is assumed to hold at least
** KVSTORAGE_KEY_SZ bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>kvstorageMakeKey</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zClass</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKeyIn</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zKeyOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>KVSTORAGE_KEY_SZ</name></expr></argument>, <argument><expr><name>zKeyOut</name></expr></argument>, <argument><expr><literal type="string">"kvvfs-%s-%s"</literal></expr></argument>, <argument><expr><name>zClass</name></expr></argument>, <argument><expr><name>zKeyIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Write content into a key.  zClass is the particular namespace of the
** underlying key/value store to use - either "local" or "session".
**
** Both zKey and zData are zero-terminated pure text strings.
**
** Return the number of errors.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvstorageWrite</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zClass</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zXKey</name><index>[<expr><name>KVSTORAGE_KEY_SZ</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>kvstorageMakeKey</name><argument_list>(<argument><expr><name>zClass</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>zXKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zXKey</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>fd</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>SQLITE_KV_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"KVVFS-WRITE  %-15s (%d) %.50s%s\n"</literal><operator>,</operator> <name>zXKey</name><operator>,</operator>
                 <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></call><operator>,</operator> <name>zData</name><operator>,</operator>
                 <ternary><condition><expr><call><name>strlen</name><argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">50</literal></expr> ?</condition><then> <expr><literal type="string">"..."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>zData</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Delete a key (with its corresponding data) from the key/value
** namespace given by zClass.  If the key does not previously exist,
** this routine is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvstorageDelete</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zClass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zXKey</name><index>[<expr><name>KVSTORAGE_KEY_SZ</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>kvstorageMakeKey</name><argument_list>(<argument><expr><name>zClass</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>zXKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zXKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"KVVFS-DELETE %-15s\n"</literal><operator>,</operator> <name>zXKey</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Read the value associated with a zKey from the key/value namespace given
** by zClass and put the text data associated with that key in the first
** nBuf bytes of zBuf[].  The value might be truncated if zBuf is not large
** enough to hold it all.  The value put into zBuf must always be zero
** terminated, even if it gets truncated because nBuf is not large enough.
**
** Return the total number of bytes in the data, without truncation, and
** not counting the final zero terminator.   Return -1 if the key does
** not exist.
**
** If nBuf&lt;=0 then this routine simply returns the size of the data without
** actually reading it.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvstorageRead</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zClass</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zXKey</name><index>[<expr><name>KVSTORAGE_KEY_SZ</name></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>kvstorageMakeKey</name><argument_list>(<argument><expr><name>zClass</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>zXKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>access</name><argument_list>(<argument><expr><name>zXKey</name></expr></argument>, <argument><expr><name>R_OK</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal>
   <operator>||</operator> <call><name>stat</name><argument_list>(<argument><expr><name>zXKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal>
   <operator>||</operator> <operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>SQLITE_KV_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"KVVFS-READ   %-15s (-1)\n"</literal><operator>,</operator> <name>zXKey</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nBuf</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><operator>.</operator><name>st_size</name></name></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nBuf</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>zBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SQLITE_KV_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"KVVFS-READ   %-15s (%d)\n"</literal><operator>,</operator> <name>zXKey</name><operator>,</operator>
                 <operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><operator>.</operator><name>st_size</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>buf</name><operator>.</operator><name>st_size</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nBuf</name> <operator>&gt;</operator> <name><name>buf</name><operator>.</operator><name>st_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nBuf</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>st_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zXKey</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>fd</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>SQLITE_KV_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"KVVFS-READ   %-15s (-1)\n"</literal><operator>,</operator> <name>zXKey</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>n</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nBuf</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SQLITE_KV_TRACE</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"KVVFS-READ   %-15s (%lld) %.50s%s\n"</literal><operator>,</operator> <name>zXKey</name><operator>,</operator>
                 <name>n</name><operator>,</operator> <name>zBuf</name><operator>,</operator> <ternary><condition><expr><name>n</name><operator>&gt;</operator><literal type="number">50</literal></expr> ?</condition><then> <expr><literal type="string">"..."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>n</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** An internal level of indirection which enables us to replace the
** kvvfs i/o methods with JavaScript implementations in WASM builds.
** Maintenance reminder: if this struct changes in any way, the JSON
** rendering of its structure must be updated in
** sqlite3_wasm_enum_json(). There are no binary compatibility
** concerns, so it does not need an iVersion member. This file is
** necessarily always compiled together with sqlite3_wasm_enum_json(),
** and JS code dynamically creates the mapping of members based on
** that JSON description.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>sqlite3_kvvfs_methods</name></name></type> <name>sqlite3_kvvfs_methods</name>;</typedef>
<struct>struct <name>sqlite3_kvvfs_methods</name> <block>{
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xRead</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zClass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xWrite</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zClass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xDelete</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zClass</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nKeySize</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** This object holds the kvvfs I/O methods which may be swapped out
** for JavaScript-side implementations in WASM builds. In such builds
** it cannot be const, but in native builds it should be so that
** the compiler can hopefully optimize this level of indirection out.
** That said, kvvfs is intended primarily for use in WASM builds.
**
** Note that this is not explicitly flagged as static because the
** amalgamation build will tag it with SQLITE_PRIVATE.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_WASM</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>const</specifier>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<name>sqlite3_kvvfs_methods</name></type> <name>sqlite3KvvfsMethods</name> <init>= <expr><block>{
<expr><name>kvstorageRead</name></expr>,
<expr><name>kvstorageWrite</name></expr>,
<expr><name>kvstorageDelete</name></expr>,
<expr><name>KVSTORAGE_KEY_SZ</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/****** Utility subroutines ************************************************/</comment>

<comment type="block">/*
** Encode binary into the text encoded used to persist on disk.
** The output text is stored in aOut[], which must be at least
** nData+1 bytes in length.
**
** Return the actual length of the encoded text, not counting the
** zero terminator at the end.
**
** Encoding format
** ---------------
**
**   *  Non-zero bytes are encoded as upper-case hexadecimal
**
**   *  A sequence of one or more zero-bytes that are not at the
**      beginning of the buffer are encoded as a little-endian
**      base-26 number using a..z.  "a" means 0.  "b" means 1,
**      "z" means 25.  "ab" means 26.  "ac" means 52.  And so forth.
**
**   *  Because there is no overlap between the encoding characters
**      of hexadecimal and base-26 numbers, it is always clear where
**      one stops and the next begins.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsEncode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>aData</name></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nData</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>c</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"0123456789ABCDEF"</literal><index>[<expr><name>c</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="string">"0123456789ABCDEF"</literal><index>[<expr><name>c</name><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* A sequence of 1 or more zeros is stored as a little-endian
      ** base-26 number using a..z as the digits. So one zero is "b".
      ** Two zeros is "c". 25 zeros is "z", 26 zeros is "ab", 27 is "bb",
      ** and so forth.
      */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>+</operator><name>k</name><operator>&lt;</operator><name>nData</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>k</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>k</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <while>while<condition>( <expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal><operator>+</operator><operator>(</operator><name>k</name><operator>%</operator><literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name> <operator>/=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>signed</name> <name>char</name></type> <name><name>kvvfsHexValue</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,    <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,

  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,   <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Decode the text encoding back to binary.  The binary content is
** written into pOut, which must be at least nOut bytes in length.
**
** The return value is the number of bytes actually written into aOut[].
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsDecode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aIn</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>kvvfsHexValue</name><index>[<expr><name><name>aIn</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>c</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mult</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>aIn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <while>while<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'z'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator><operator>*</operator><name>mult</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mult</name> <operator>*=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>aIn</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if<condition>( <expr><name>j</name><operator>+</operator><name>n</name><operator>&gt;</operator><name>nOut</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aOut</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>aIn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>c</name><operator>&lt;&lt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>kvvfsHexValue</name><index>[<expr><name><name>aIn</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>c</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>j</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Decode a complete journal file.  Allocate space in pFile-&gt;aJrnl
** and store the decoding there.  Or leave pFile-&gt;aJrnl set to NULL
** if an error is encountered.
**
** The first few characters of the text encoding will be a little-endian
** base-26 number (digits a..z) that is the total number of bytes
** in the decoded journal file image.  This base-26 number is followed
** by a single space, then the encoding of the journal.  The space
** separator is required to act as a terminator for the base-26 number.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>kvvfsDecodeJournal</name><parameter_list>(
  <parameter><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,      <comment type="block">/* Store decoding in pFile-&gt;aJrnl */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTxt</name></decl></parameter>,      <comment type="block">/* Text encoding.  Zero-terminated */</comment>
  <parameter><decl><type><name>int</name></type> <name>nTxt</name></decl></parameter>               <comment type="block">/* Bytes in zTxt, excluding zero terminator */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>mult</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>mult</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>zTxt</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>)</operator><operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'z'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <operator>(</operator><name><name>zTxt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator><operator>*</operator><name>mult</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mult</name> <operator>*=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>kvvfsDecode</name><argument_list>(<argument><expr><name>zTxt</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Read or write the "sz" element, containing the database file size.
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_int64</name></type> <name>kvvfsReadFileSize</name><parameter_list>(<parameter><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zData</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>zData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name></expr></argument>, <argument><expr><literal type="string">"sz"</literal></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>strtoll</name><argument_list>(<argument><expr><name>zData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsWriteFileSize</name><parameter_list>(<parameter><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>sz</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zData</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name></expr></argument>, <argument><expr><literal type="string">"sz"</literal></expr></argument>, <argument><expr><name>zData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****** sqlite3_io_methods methods ******************************************/</comment>

<comment type="block">/*
** Close an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name> <operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xClose %s %s\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>,</operator> 
             <ternary><condition><expr><name><name>pFile</name><operator>-&gt;</operator><name>isJournal</name></name></expr> ?</condition><then> <expr><literal type="string">"journal"</literal></expr> </then><else>: <expr><literal type="string">"db"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read from the -journal file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsReadJrnl</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name><operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>isJournal</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xRead('%s-journal',%d,%lld)\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>,</operator> <name>iAmt</name><operator>,</operator> <name>iOfst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>szTxt</name> <init>= <expr><call><name>kvstorageRead</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name></expr></argument>, <argument><expr><literal type="string">"jrnl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aTxt</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>szTxt</name><operator>&lt;=</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_IOERR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>aTxt</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><name>szTxt</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>aTxt</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>kvstorageRead</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name></expr></argument>, <argument><expr><literal type="string">"jrnl"</literal></expr></argument>, <argument><expr><name>aTxt</name></expr></argument>, <argument><expr><name>szTxt</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>kvvfsDecodeJournal</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>aTxt</name></expr></argument>, <argument><expr><name>szTxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aTxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&gt;</operator><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_IOERR_SHORT_READ</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name><operator>+</operator><name>iOfst</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read from the database file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsReadDb</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name><operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>got</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zKey</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>aData</name><index>[<expr><literal type="number">133073</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iOfst</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iAmt</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xRead('%s-db',%d,%lld)\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>,</operator> <name>iAmt</name><operator>,</operator> <name>iOfst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&gt;=</operator><literal type="number">512</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iOfst</name> <operator>%</operator> <name>iAmt</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_IOERR_READ</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iAmt</name> <operator>&amp;</operator> <operator>(</operator><name>iAmt</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name><name>iAmt</name><argument_list type="generic">&lt;<argument><expr><literal type="number">512</literal> <operator>||</operator> <name>iAmt</name></expr></argument>&gt;</argument_list></name><literal type="number">65536</literal></expr> )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_IOERR_READ</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <name>iAmt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>iOfst</name><operator>/</operator><name>iAmt</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>got</name> <operator>=</operator> <call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>got</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>aData</name><index>[<expr><name>got</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>+</operator><name>iAmt</name><operator>&lt;</operator><literal type="number">512</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>iOfst</name><operator>+</operator><name>iAmt</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>aData</name><index>[<expr><name>k</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>kvvfsDecode</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><name>iOfst</name><operator>+</operator><name>iAmt</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aData</name><index>[<expr><literal type="number">2000</literal><operator>+</operator><name>iOfst</name></expr>]</index></name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>iAmt</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>kvvfsDecode</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><name>iAmt</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zBuf</name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iAmt</name><operator>-</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_IOERR_SHORT_READ</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Write into the -journal file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsWriteJrnl</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name><operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iEnd</name> <init>= <expr><name>iOfst</name><operator>+</operator><name>iAmt</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xWrite('%s-journal',%d,%lld)\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>,</operator> <name>iAmt</name><operator>,</operator> <name>iOfst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iEnd</name><operator>&gt;=</operator><literal type="number">0x10000000</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_FULL</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name><operator>&lt;</operator><name>iEnd</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aNew</name> <init>= <expr><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name></expr></argument>, <argument><expr><name>iEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_IOERR_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name><operator>&lt;</operator><name>iOfst</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name><operator>+</operator><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iOfst</name><operator>-</operator><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name> <operator>=</operator> <name>iEnd</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name><operator>+</operator><name>iOfst</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write into the database file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsWriteDb</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name><operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zKey</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>aData</name><index>[<expr><literal type="number">131073</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xWrite('%s-db',%d,%lld)\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>,</operator> <name>iAmt</name><operator>,</operator> <name>iOfst</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iAmt</name><operator>&gt;=</operator><literal type="number">512</literal> <operator>&amp;&amp;</operator> <name>iAmt</name><operator>&lt;=</operator><literal type="number">65536</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>iAmt</name> <operator>&amp;</operator> <operator>(</operator><name>iAmt</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>szPage</name></name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pFile</name><operator>-&gt;</operator><name>szPage</name></name><operator>==</operator><name>iAmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <name>iAmt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>iOfst</name><operator>/</operator><name>iAmt</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>kvvfsEncode</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_IOERR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>+</operator><name>iAmt</name> <operator>&gt;</operator> <name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name> <operator>=</operator> <name>iOfst</name> <operator>+</operator> <name>iAmt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsTruncateJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name> <operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xTruncate('%s-journal',%lld)\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>,</operator> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>size</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xDelete</name></name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name></expr></argument>, <argument><expr><literal type="string">"jrnl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsTruncateDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name> <operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name><operator>&gt;</operator><name>size</name>
   <operator>&amp;&amp;</operator> <name><name>pFile</name><operator>-&gt;</operator><name>szPage</name></name><operator>&gt;</operator><literal type="number">0</literal> 
   <operator>&amp;&amp;</operator> <operator>(</operator><name>size</name> <operator>%</operator> <name><name>pFile</name><operator>-&gt;</operator><name>szPage</name></name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zKey</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pgno</name></decl>, <decl><type ref="prev"/><name>pgnoMax</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xTruncate('%s-db',%lld)\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>,</operator> <name>size</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgno</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>size</name><operator>/</operator><name><name>pFile</name><operator>-&gt;</operator><name>szPage</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgnoMax</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name><operator>/</operator><name><name>pFile</name><operator>-&gt;</operator><name>szPage</name></name></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>pgno</name><operator>&lt;=</operator><name>pgnoMax</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xDelete</name></name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pgno</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><call><name>kvvfsWriteFileSize</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>SQLITE_IOERR</name></expr> </then><else>: <expr><name>SQLITE_OK</name></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_IOERR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsSyncJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name> <operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xSync('%s-journal')\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name>kvvfsTruncateJrnl</name><argument_list>(<argument><expr><name>pProtoFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zOut</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">50</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_IOERR_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <do>do<block>{<block_content>
    <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'a'</literal> <operator>+</operator> <operator>(</operator><name>n</name><operator>%</operator><literal type="number">26</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">26</literal></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition>;</do>
  <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>kvvfsEncode</name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zOut</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name></expr></argument>, <argument><expr><literal type="string">"jrnl"</literal></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>SQLITE_IOERR</name></expr> </then><else>: <expr><name>SQLITE_OK</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsSyncDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFileSizeJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name> <operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xFileSize('%s-journal')\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFileSizeDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name> <operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xFileSize('%s-db')\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pSize</name> <operator>=</operator> <call><name>kvvfsReadFileSize</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Lock an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name> <operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>pFile</name><operator>-&gt;</operator><name>isJournal</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xLock(%s,%d)\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>,</operator> <name>eLock</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>eLock</name><operator>!=</operator><name>SQLITE_LOCK_NONE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name> <operator>=</operator> <call><name>kvvfsReadFileSize</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unlock an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name> <operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>pFile</name><operator>-&gt;</operator><name>isJournal</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xUnlock(%s,%d)\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>,</operator> <name>eLock</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>eLock</name><operator>==</operator><name>SQLITE_LOCK_NONE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xCheckReservedLock\n"</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pResOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** File control method. For custom operations on an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFileControlJrnl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xFileControl(%d) on journal\n"</literal><operator>,</operator> <name>op</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_NOTFOUND</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFileControlDb</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xFileControl(%d) on database\n"</literal><operator>,</operator> <name>op</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_SYNC</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name> <operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xSync('%s-db')\n"</literal><operator>,</operator> <name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>!=</operator><call><name>kvvfsWriteFileSize</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_NOTFOUND</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">512</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an kvvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****** sqlite3_vfs methods *************************************************/</comment>

<comment type="block">/*
** Open an kvvfs file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pProtoVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pProtoFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>KVVfsFile</name> <modifier>*</modifier></type><name>pFile</name> <init>= <expr><operator>(</operator><name>KVVfsFile</name><operator>*</operator><operator>)</operator><name>pProtoFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>zName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xOpen(\"%s\")\n"</literal><operator>,</operator> <name>zName</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
   <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><literal type="string">"session"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>isJournal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>kvvfs_db_io_methods</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><literal type="string">"local-journal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> 
   <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><literal type="string">"session-journal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>isJournal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>kvvfs_jrnl_io_methods</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><name>SQLITE_CANTOPEN</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'s'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name> <operator>=</operator> <literal type="string">"session"</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>zClass</name></name> <operator>=</operator> <literal type="string">"local"</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>aJrnl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>nJrnl</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>szDb</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete the file located at zPath. If the dirSync argument is true,
** ensure the file-system modifications are synced to disk before
** returning.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><literal type="string">"local-journal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xDelete</name></name><argument_list>(<argument><expr><literal type="string">"local"</literal></expr></argument>, <argument><expr><literal type="string">"jrnl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><literal type="string">"session-journal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xDelete</name></name><argument_list>(<argument><expr><literal type="string">"session"</literal></expr></argument>, <argument><expr><literal type="string">"jrnl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pProtoVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xAccess(\"%s\")\n"</literal><operator>,</operator> <name>zPath</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><literal type="string">"local-journal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pResOut</name> <operator>=</operator> <call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xRead</name></name><argument_list>(<argument><expr><literal type="string">"local"</literal></expr></argument>, <argument><expr><literal type="string">"jrnl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><literal type="string">"session-journal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pResOut</name> <operator>=</operator> <call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xRead</name></name><argument_list>(<argument><expr><literal type="string">"session"</literal></expr></argument>, <argument><expr><literal type="string">"jrnl"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><literal type="string">"local"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pResOut</name> <operator>=</operator> <call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xRead</name></name><argument_list>(<argument><expr><literal type="string">"local"</literal></expr></argument>, <argument><expr><literal type="string">"sz"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><literal type="string">"session"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pResOut</name> <operator>=</operator> <call><name><name>sqlite3KvvfsMethods</name><operator>.</operator><name>xRead</name></name><argument_list>(<argument><expr><literal type="string">"session"</literal></expr></argument>, <argument><expr><literal type="string">"sz"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pResOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xAccess returns %d\n"</literal><operator>,</operator><operator>*</operator><name>pResOut</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (INST_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nPath</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OS_KV_ALWAYS_LOCAL</name></cpp:ifdef>
  <expr_stmt><expr><name>zPath</name> <operator>=</operator> <literal type="string">"local"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>nPath</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SQLITE_KV_LOG</name><argument_list>(<argument><expr><operator>(</operator><literal type="string">"xFullPathname(\"%s\")\n"</literal><operator>,</operator> <name>zPath</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nOut</name><operator>&lt;</operator><name>nPath</name><operator>+</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nPath</name> <operator>=</operator> <name>nOut</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>nPath</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>kvvfsDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zBufOut</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nByte</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>kvvfsCurrentTimeInt64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pTimeOut</name> <operator>=</operator> <name>i</name><operator>/</operator><literal type="number">86400000.0</literal></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type> <name>kvvfsCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_int64</name></type> <name>unixEpoch</name> <init>= <expr><literal type="number">24405875</literal><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><literal type="number">8640000</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>sNow</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sNow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Cannot fail given valid arguments */</comment>
  <expr_stmt><expr><operator>*</operator><name>pTimeOut</name> <operator>=</operator> <name>unixEpoch</name> <operator>+</operator> <literal type="number">1000</literal><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name><name>sNow</name><operator>.</operator><name>tv_sec</name></name> <operator>+</operator> <name><name>sNow</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OS_KV || SQLITE_OS_UNIX */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_KV</name></expr></cpp:if>
<comment type="block">/* 
** This routine is called initialize the KV-vfs as the default VFS.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_os_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sqlite3OsKvvfsObject</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sqlite3_os_end</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OS_KV */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_UNIX</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OS_KV_OPTIONAL</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>sqlite3KvvfsInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sqlite3OsKvvfsObject</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
