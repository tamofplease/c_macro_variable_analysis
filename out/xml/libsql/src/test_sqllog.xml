<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/test_sqllog.c"><comment type="block">/*
** 2012 November 26
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** OVERVIEW
**
**   This file contains experimental code used to record data from live
**   SQLite applications that may be useful for offline analysis. 
**   Specifically, this module can be used to capture the following
**   information:
**
**     1) The initial contents of all database files opened by the 
**        application, and
**
**     2) All SQL statements executed by the application.
**
**   The captured information can then be used to run (for example)
**   performance analysis looking for slow queries or to look for
**   optimization opportunities in either the application or in SQLite
**   itself.
**
** USAGE
**
**   To use this module, SQLite must be compiled with the SQLITE_ENABLE_SQLLOG
**   pre-processor symbol defined and this file linked into the application.
**   One way to link this file into the application is to append the content
**   of this file onto the end of the "sqlite3.c" amalgamation and then 
**   recompile the application as normal except with the addition  of the
**   -DSQLITE_ENABLE_SQLLOG option.
**
**   At runtime, logging is enabled by setting environment variable
**   SQLITE_SQLLOG_DIR to the name of a directory in which to store logged 
**   data. The logging directory must already exist.
**
**   Usually, if the application opens the same database file more than once
**   (either by attaching it or by using more than one database handle), only
**   a single copy is made. This behavior may be overridden (so that a 
**   separate copy is taken each time the database file is opened or attached)
**   by setting the environment variable SQLITE_SQLLOG_REUSE_FILES to 0.
**
**   If the environment variable SQLITE_SQLLOG_CONDITIONAL is defined, then
**   logging is only done for database connections if a file named
**   "&lt;database&gt;-sqllog" exists in the same directly as the main database
**   file when it is first opened ("&lt;database&gt;" is replaced by the actual 
**   name of the main database file).
**
** OUTPUT:
**
**   The SQLITE_SQLLOG_DIR is populated with three types of files:
**
**      sqllog_N.db   - Copies of database files. N may be any integer.
**
**      sqllog_N.sql  - A list of SQL statements executed by a single
**                      connection. N may be any integer.
**
**      sqllog.idx    - An index mapping from integer N to a database
**                      file name - indicating the full path of the
**                      database from which sqllog_N.db was copied.
**
** ERROR HANDLING:
**
**   This module attempts to make a best effort to continue logging if an
**   IO or other error is encountered. For example, if a log file cannot 
**   be opened logs are not collected for that connection, but other
**   logging proceeds as expected. Errors are logged by calling sqlite3_log().
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_SQLITE3_H_</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getProcessId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:if>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>_getpid</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getpid</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Names of environment variables to be used */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENVIRONMENT_VARIABLE1_NAME</name></cpp:macro> <cpp:value>"SQLITE_SQLLOG_DIR"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENVIRONMENT_VARIABLE2_NAME</name></cpp:macro> <cpp:value>"SQLITE_SQLLOG_REUSE_FILES"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENVIRONMENT_VARIABLE3_NAME</name></cpp:macro> <cpp:value>"SQLITE_SQLLOG_CONDITIONAL"</cpp:value></cpp:define>

<comment type="block">/* Assume that all database and database file names are shorted than this. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLLOG_NAMESZ</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<comment type="block">/* Maximum number of simultaneous database connections the process may
** open (if any more are opened an error is logged using sqlite3_log()
** and processing is halted).
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CONNECTIONS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<comment type="block">/* There is one instance of this object for each SQLite database connection
** that is being logged.
*/</comment>
<struct>struct <name>SLConn</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>isErr</name></decl>;</decl_stmt>                      <comment type="block">/* True if an error has occurred */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                    <comment type="block">/* Connection handle */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iLog</name></decl>;</decl_stmt>                       <comment type="block">/* First integer value used in file names */</comment>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>                       <comment type="block">/* File descriptor for log file */</comment>
}</block>;</struct>

<comment type="block">/* This object is a singleton that keeps track of all data loggers.
*/</comment>
<struct><specifier>static</specifier> struct <name>SLGlobal</name> <block>{
  <comment type="block">/* Protected by MUTEX_STATIC_MAIN */</comment>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>           <comment type="block">/* Recursive mutex */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nConn</name></decl>;</decl_stmt>                      <comment type="block">/* Size of aConn[] array */</comment>

  <comment type="block">/* Protected by SLGlobal.mutex */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bConditional</name></decl>;</decl_stmt>               <comment type="block">/* Only trace if *-sqllog file is present */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bReuse</name></decl>;</decl_stmt>                     <comment type="block">/* True to avoid extra copies of db files */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zPrefix</name><index>[<expr><name>SQLLOG_NAMESZ</name></expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* Prefix for all created files */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zIdx</name><index>[<expr><name>SQLLOG_NAMESZ</name></expr>]</index></name></decl>;</decl_stmt>       <comment type="block">/* Full path to *.idx file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iNextLog</name></decl>;</decl_stmt>                   <comment type="block">/* Used to allocate file names */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iNextDb</name></decl>;</decl_stmt>                    <comment type="block">/* Used to allocate database file names */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bRec</name></decl>;</decl_stmt>                       <comment type="block">/* True if testSqllog() is called rec. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iClock</name></decl>;</decl_stmt>                     <comment type="block">/* Clock value */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>SLConn</name></name></type> <name><name>aConn</name><index>[<expr><name>MAX_CONNECTIONS</name></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>sqllogglobal</name></decl>;</struct>

<comment type="block">/*
** Return true if c is an ASCII whitespace character.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqllog_isspace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name>c</name><operator>==</operator><literal type="char">' '</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'\t'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'\n'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'\v'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'\f'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'\r'</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The first argument points to a nul-terminated string containing an SQL
** command. Before returning, this function sets *pz to point to the start
** of the first token in this command, and *pn to the number of bytes in 
** the token. This is used to check if the SQL command is an "ATTACH" or 
** not.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqllogTokenize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pz</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

  <comment type="block">/* Skip past any whitespace */</comment>
  <while>while<condition>( <expr><call><name>sqllog_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Figure out how long the first token is */</comment>
  <expr_stmt><expr><operator>*</operator><name>pz</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>(</operator><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>&lt;=</operator><literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>&lt;=</operator><literal type="char">'Z'</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><operator>*</operator><name>pn</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Check if the logs directory already contains a copy of database file 
** zFile. If so, return a pointer to the full path of the copy. Otherwise,
** return NULL.
**
** If a non-NULL value is returned, then the caller must arrange to 
** eventually free it using sqlite3_free().
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>sqllogFindFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Open the index file for reading */</comment>
  <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zIdx</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>fd</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_IOERR</name></expr></argument>, <argument><expr><literal type="string">"sqllogFindFile(): error in fopen()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Loop through each entry in the index file. If zFile is not NULL and the
  ** entry is a match, then set zRet to point to the filename of the existing
  ** copy and break out of the loop.  */</comment>
  <while>while<condition>( <expr><call><name>feof</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zLine</name><index>[<expr><name>SQLLOG_NAMESZ</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>fgets</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>zLine</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>z</name> <operator>=</operator> <name>zLine</name></expr>;</expr_stmt>
      <while>while<condition>( <expr><operator>*</operator><name>z</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>z</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
      <while>while<condition>( <expr><operator>*</operator><name>z</name><operator>==</operator><literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqllog_isspace</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

      <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>=</operator> <name>zLine</name></expr>;</expr_stmt>
        <while>while<condition>( <expr><operator>*</operator><name>z</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>z</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>z</name><operator>-</operator><name>zLine</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>z</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s_%s.db"</literal></expr></argument>, <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zPrefix</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if<condition>( <expr><call><name>ferror</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_IOERR</name></expr></argument>, <argument><expr><literal type="string">"sqllogFindFile(): error reading index file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqllogFindAttached</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                    <comment type="block">/* Database connection */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSearch</name></decl></parameter>,            <comment type="block">/* Name to search for (or NULL) */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,                    <comment type="block">/* OUT: Name of attached database */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>                     <comment type="block">/* OUT: Name of attached file */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <comment type="block">/* The "PRAGMA database_list" command returns a list of databases in the
  ** order that they were attached. So a newly attached database is 
  ** described by the last row returned.  */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>bRec</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>bRec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA database_list"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <while>while<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVal1</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal1</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVal2</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal2</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>zVal1</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nVal1</name> <operator>=</operator> <call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zName</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zVal1</name></expr></argument>, <argument><expr><name>nVal1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>zVal2</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nVal2</name> <operator>=</operator> <call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zVal2</name></expr></argument>, <argument><expr><name>nVal2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name>zSearch</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zSearch</name></expr></argument>)</argument_list></call><operator>==</operator><name>nVal1</name> 
       <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><name>zSearch</name></expr></argument>, <argument><expr><name>zVal1</name></expr></argument>, <argument><expr><name>nVal1</name></expr></argument>)</argument_list></call></expr>
      )</condition><block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>bRec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"sqllogFindAttached(): error in \"PRAGMA database_list\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Parameter zSearch is the name of a database attached to the database 
** connection associated with the first argument. This function creates
** a backup of this database in the logs directory.
**
** The name used for the backup file is automatically generated. Call
** it zFile.
**
** If the bLog parameter is true, then a statement of the following form
** is written to the log file associated with *p:
**
**    ATTACH 'zFile' AS 'zName';
**
** Otherwise, if bLog is false, a comment is added to the log file:
**
**    -- Main database file is 'zFile'
**
** The SLGlobal.mutex mutex is always held when this function is called.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqllogCopydb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SLConn</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSearch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bLog</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zName</name><index>[<expr><name>SQLLOG_NAMESZ</name></expr>]</index></name></decl>;</decl_stmt>      <comment type="block">/* Attached database name */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zFile</name><index>[<expr><name>SQLLOG_NAMESZ</name></expr>]</index></name></decl>;</decl_stmt>      <comment type="block">/* Database file name */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zInit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqllogFindAttached</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSearch</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>zFile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'\0'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zInit</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>sqllogglobal</name><operator>.</operator><name>bReuse</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zInit</name> <operator>=</operator> <call><name>sqllogFindFile</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zInit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>zInit</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>

      <comment type="block">/* Generate a file-name to use for the copy of this database */</comment>
      <expr_stmt><expr><name>iDb</name> <operator>=</operator> <name><name>sqllogglobal</name><operator>.</operator><name>iNextDb</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>zInit</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s_%02d.db"</literal></expr></argument>, <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zPrefix</name></name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Create the backup */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>bRec</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>bRec</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name>zInit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>pBak</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA synchronous = 0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pBak</name> <operator>=</operator> <call><name>sqlite3_backup_init</name><argument_list>(<argument><expr><name>copy</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pBak</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_backup_step</name><argument_list>(<argument><expr><name>pBak</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_backup_finish</name><argument_list>(<argument><expr><name>pBak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>bRec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* Write an entry into the database index file */</comment>
        <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zIdx</name></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>fd</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"%d %s\n"</literal></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"sqllogCopydb(): error backing up database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>bLog</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zFree</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"ATTACH '%q' AS '%q'; -- clock=%d\n"</literal></expr></argument>, 
        <argument><expr><name>zInit</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>iClock</name></name><operator>++</operator></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zFree</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"-- Main database is '%q'\n"</literal></expr></argument>, <argument><expr><name>zInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** If it is not already open, open the log file for connection *p. 
**
** The SLGlobal.mutex mutex is always held when this function is called.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqllogOpenlog</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SLConn</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="block">/* If the log file has not yet been opened, open it now. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLog</name></decl>;</decl_stmt>

    <comment type="block">/* If it is still NULL, have global.zPrefix point to a copy of 
    ** environment variable $ENVIRONMENT_VARIABLE1_NAME.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>sqllogglobal</name><operator>.</operator><name>zPrefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zVar</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>ENVIRONMENT_VARIABLE1_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zVar</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zVar</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">10</literal><operator>&gt;=</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zPrefix</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zPrefix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zPrefix</name></name></expr></argument>,
                        <argument><expr><literal type="string">"%s/sqllog_%05d"</literal></expr></argument>, <argument><expr><name>zVar</name></expr></argument>, <argument><expr><call><name>getProcessId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zIdx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zIdx</name></name></expr></argument>,
                        <argument><expr><literal type="string">"%s.idx"</literal></expr></argument>, <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zPrefix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>getenv</name><argument_list>(<argument><expr><name>ENVIRONMENT_VARIABLE2_NAME</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>bReuse</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><call><name>getenv</name><argument_list>(<argument><expr><name>ENVIRONMENT_VARIABLE2_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zIdx</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>fd</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Open the log file */</comment>
    <expr_stmt><expr><name>zLog</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s_%05d.sql"</literal></expr></argument>, <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>zPrefix</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iLog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zLog</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_IOERR</name></expr></argument>, <argument><expr><literal type="string">"sqllogOpenlog(): Failed to open log file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is called if the SQLLOG callback is invoked to report
** execution of an SQL statement. Parameter p is the connection the statement
** was executed by and parameter zSql is the text of the statement itself.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testSqllogStmt</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SLConn</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFirst</name></decl>;</decl_stmt>             <comment type="block">/* Pointer to first token in zSql */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFirst</name></decl>;</decl_stmt>                     <comment type="block">/* Size of token zFirst in bytes */</comment>

  <expr_stmt><expr><call><name>sqllogTokenize</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zFirst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nFirst</name><operator>!=</operator><literal type="number">6</literal> <operator>||</operator> <literal type="number">0</literal><operator>!=</operator><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><literal type="string">"ATTACH"</literal></expr></argument>, <argument><expr><name>zFirst</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <comment type="block">/* Not an ATTACH statement. Write this directly to the log. */</comment>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="string">"%s; -- clock=%d\n"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>iClock</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* This is an ATTACH statement. Copy the database. */</comment>
    <expr_stmt><expr><call><name>sqllogCopydb</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The database handle passed as the only argument has just been opened.
** Return true if this module should log initial databases and SQL 
** statements for this connection, or false otherwise.
**
** If an error occurs, sqlite3_log() is invoked to report it to the user
** and zero returned.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqllogTraceDb</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>bRet</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>sqllogglobal</name><operator>.</operator><name>bConditional</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zFile</name><index>[<expr><name>SQLLOG_NAMESZ</name></expr>]</index></name></decl>;</decl_stmt>      <comment type="block">/* Attached database name */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqllogFindAttached</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nFile</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>SQLLOG_NAMESZ</name><operator>-</operator><name>nFile</name><operator>)</operator><operator>&lt;</operator><literal type="number">8</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_IOERR</name></expr></argument>, 
            <argument><expr><literal type="string">"sqllogTraceDb(): database name too long (%d bytes)"</literal></expr></argument>, <argument><expr><name>nFile</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zFile</name><index>[<expr><name>nFile</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-sqllog"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bRet</name> <operator>=</operator> <operator>!</operator><call><name>access</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>F_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>bRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The SQLITE_CONFIG_SQLLOG callback registered by sqlite3_init_sqllog().
**
** The eType parameter has the following values:
**
**    0:  Opening a new database connection.  zSql is the name of the
**        file being opened.  db is a pointer to the newly created database
**        connection.
**
**    1:  An SQL statement has run to completion.  zSql is the text of the
**        SQL statement with all parameters expanded to their actual values.
**
**    2:  Closing a database connection.  zSql is NULL.  The db pointer to
**        the database connection being closed has already been shut down
**        and cannot be used for any further SQL.
**
** The pCtx parameter is a copy of the pointer that was originally passed
** into the sqlite3_config(SQLITE_CONFIG_SQLLOG) statement.  In this
** particular implementation, pCtx is always a pointer to the 
** sqllogglobal global variable define above.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testSqllog</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>SLConn</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mainmtx</name> <init>= <expr><call><name>sqlite3_mutex_alloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>eType</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>eType</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>eType</name><operator>==</operator><literal type="number">2</literal><operator>)</operator><operator>==</operator><operator>(</operator><name>zSql</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* This is a database open command. */</comment>
  <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mainmtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>sqllogglobal</name><operator>.</operator><name>mutex</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <call><name>sqlite3_mutex_alloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mainmtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>sqllogglobal</name><operator>.</operator><name>bRec</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqllogTraceDb</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>

      <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mainmtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>sqllogglobal</name><operator>.</operator><name>aConn</name><index>[<expr><name><name>sqllogglobal</name><operator>.</operator><name>nConn</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iLog</name></name> <operator>=</operator> <name><name>sqllogglobal</name><operator>.</operator><name>iNextLog</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mainmtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Open the log and take a copy of the main database file */</comment>
      <expr_stmt><expr><call><name>sqllogOpenlog</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqllogCopydb</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>

  <else>else<block>{<block_content>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>sqllogglobal</name><operator>.</operator><name>nConn</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>sqllogglobal</name><operator>.</operator><name>aConn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name><operator>==</operator><name>db</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* A database handle close command */</comment>
    <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mainmtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><name><name>sqllogglobal</name><operator>.</operator><name>nConn</name></name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>nConn</name></name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>sqllogglobal</name><operator>.</operator><name>nConn</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_mutex_free</name><argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>i</name><operator>&lt;</operator><name><name>sqllogglobal</name><operator>.</operator><name>nConn</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nShift</name> <init>= <expr><operator>&amp;</operator><name><name>sqllogglobal</name><operator>.</operator><name>aConn</name><index>[<expr><name><name>sqllogglobal</name><operator>.</operator><name>nConn</name></name></expr>]</index></name> <operator>-</operator> <name>p</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>nShift</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nShift</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SLConn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mainmtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* An ordinary SQL command. */</comment>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>i</name><operator>&lt;</operator><name><name>sqllogglobal</name><operator>.</operator><name>nConn</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>sqllogglobal</name><operator>.</operator><name>bRec</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>testSqllogStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>sqllogglobal</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is called either before sqlite3_initialized() or by it.
** It checks if the SQLITE_SQLLOG_DIR variable is defined, and if so 
** registers an SQLITE_CONFIG_SQLLOG callback to record the applications
** database activity.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_init_sqllog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><call><name>getenv</name><argument_list>(<argument><expr><name>ENVIRONMENT_VARIABLE1_NAME</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>==</operator><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_SQLLOG</name></expr></argument>, <argument><expr><name>testSqllog</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sqllogglobal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqllogglobal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>bReuse</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>getenv</name><argument_list>(<argument><expr><name>ENVIRONMENT_VARIABLE3_NAME</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>sqllogglobal</name><operator>.</operator><name>bConditional</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
