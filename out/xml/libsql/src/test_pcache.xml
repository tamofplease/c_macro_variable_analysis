<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/test_pcache.c"><comment type="block">/*
** 2008 November 18
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** 
** This file contains code used for testing the SQLite system.
** None of the code in this file goes into a deliverable build.
** 
** This file contains an application-defined pager cache
** implementation that can be plugged in in place of the
** default pcache.  This alternative pager cache will throw
** some errors that the default cache does not.
**
** This pagecache implementation is designed for simplicity
** not speed.  
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Global data used by this test implementation.  There is no
** mutexing, which means this page cache will not work in a
** multi-threaded test.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>testpcacheGlobalType</name></name></type> <name>testpcacheGlobalType</name>;</typedef>
<struct>struct <name>testpcacheGlobalType</name> <block>{
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pDummy</name></decl>;</decl_stmt>             <comment type="block">/* Dummy allocation to simulate failures */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInstance</name></decl>;</decl_stmt>            <comment type="block">/* Number of current instances */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>discardChance</name></decl>;</decl_stmt>   <comment type="block">/* Chance of discarding on an unpin (0-100) */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>prngSeed</name></decl>;</decl_stmt>        <comment type="block">/* Seed for the PRNG */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>highStress</name></decl>;</decl_stmt>      <comment type="block">/* Call xStress agressively */</comment>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>testpcacheGlobalType</name></type> <name>testpcacheGlobal</name></decl>;</decl_stmt>

<comment type="block">/*
** Initializer.
**
** Verify that the initializer is only called when the system is
** uninitialized.  Allocate some memory and report SQLITE_NOMEM if
** the allocation fails.  This provides a means to test the recovery
** from a failed initialization attempt.  It also verifies that the
** the destructor always gets call - otherwise there would be a
** memory leak.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>testpcacheInit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pArg</name><operator>==</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>testpcacheGlobal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>SQLITE_NOMEM</name></expr> </then><else>: <expr><name>SQLITE_OK</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Destructor
**
** Verify that this is only called after initialization.
** Free the memory allocated by the initializer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testpcacheShutdown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pArg</name><operator>==</operator><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>testpcacheGlobal</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Number of pages in a cache.
**
** The number of pages is a hard upper bound in this test module.
** If more pages are requested, sqlite3PcacheFetch() returns NULL.
**
** If testing with in-memory temp tables, provide a larger pcache.
** Some of the test cases need this.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEMP_STORE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>SQLITE_TEMP_STORE</name><operator>&gt;=</operator><literal type="number">2</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>TESTPCACHE_NPAGE</name></cpp:macro>    <cpp:value>499</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>TESTPCACHE_NPAGE</name></cpp:macro>    <cpp:value>217</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTPCACHE_RESERVE</name></cpp:macro>   <cpp:value>17</cpp:value></cpp:define>

<comment type="block">/*
** Magic numbers used to determine validity of the page cache.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTPCACHE_VALID</name></cpp:macro>  <cpp:value>0x364585fd</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTPCACHE_CLEAR</name></cpp:macro>  <cpp:value>0xd42670d4</cpp:value></cpp:define>

<comment type="block">/*
** Private implementation of a page cache.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>testpcache</name></name></type> <name>testpcache</name>;</typedef>
<struct>struct <name>testpcache</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>szPage</name></decl>;</decl_stmt>               <comment type="block">/* Size of each page.  Multiple of 8. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szExtra</name></decl>;</decl_stmt>              <comment type="block">/* Size of extra data that accompanies each page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bPurgeable</name></decl>;</decl_stmt>           <comment type="block">/* True if the page cache is purgeable */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFree</name></decl>;</decl_stmt>                <comment type="block">/* Number of unused slots in a[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPinned</name></decl>;</decl_stmt>              <comment type="block">/* Number of pinned slots in a[] */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>iRand</name></decl>;</decl_stmt>           <comment type="block">/* State of the PRNG */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>iMagic</name></decl>;</decl_stmt>          <comment type="block">/* Magic number for sanity checking */</comment>
  <struct>struct <name>testpcachePage</name> <block>{
    <decl_stmt><decl><type><name>sqlite3_pcache_page</name></type> <name>page</name></decl>;</decl_stmt>  <comment type="block">/* Base class */</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>key</name></decl>;</decl_stmt>              <comment type="block">/* The key for this page. 0 means unallocated */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>isPinned</name></decl>;</decl_stmt>              <comment type="block">/* True if the page is pinned */</comment>
  }</block> <decl><name><name>a</name><index>[<expr><name>TESTPCACHE_NPAGE</name></expr>]</index></name></decl>;</struct>    <comment type="block">/* All pages in the cache */</comment>
}</block>;</struct>

<comment type="block">/*
** Get a random number using the PRNG in the given page cache.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>testpcacheRandom</name><parameter_list>(<parameter><decl><type><name>testpcache</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iRand</name></name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iRand</name></name><operator>*</operator><literal type="number">69069</literal> <operator>+</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iRand</name></name><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Allocate a new page cache instance.
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_pcache</name> <modifier>*</modifier></type><name>testpcacheCreate</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>szPage</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>szExtra</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bPurgeable</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nMem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>x</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>testpcache</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>szPage</name> <operator>=</operator> <operator>(</operator><name>szPage</name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>nMem</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>testpcache</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>TESTPCACHE_NPAGE</name><operator>*</operator><operator>(</operator><name>szPage</name><operator>+</operator><name>szExtra</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><name>nMem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <name>szPage</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>szExtra</name></name> <operator>=</operator> <name>szExtra</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFree</name></name> <operator>=</operator> <name>TESTPCACHE_NPAGE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iRand</name></name> <operator>=</operator> <name><name>testpcacheGlobal</name><operator>.</operator><name>prngSeed</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bPurgeable</name></name> <operator>=</operator> <name>bPurgeable</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iMagic</name></name> <operator>=</operator> <name>TESTPCACHE_VALID</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TESTPCACHE_NPAGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>x</name> <operator>+=</operator> <operator>(</operator><name>szPage</name><operator>+</operator><name>szExtra</name><operator>)</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPinned</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>page</name><operator>.</operator><name>pBuf</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>page</name><operator>.</operator><name>pExtra</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>x</name><index>[<expr><name>szPage</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>sqlite3_pcache</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set the cache size
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testpcacheCachesize</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>testpcache</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>testpcache</name><operator>*</operator><operator>)</operator><name>pCache</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iMagic</name></name><operator>==</operator><name>TESTPCACHE_VALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return the number of pages in the cache that are being used.
** This includes both pinned and unpinned pages.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>testpcachePagecount</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>testpcache</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>testpcache</name><operator>*</operator><operator>)</operator><name>pCache</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iMagic</name></name><operator>==</operator><name>TESTPCACHE_VALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TESTPCACHE_NPAGE</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nFree</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Fetch a page.
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_pcache_page</name> <modifier>*</modifier></type><name>testpcacheFetch</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name></type> <name>key</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>createFlag</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>testpcache</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>testpcache</name><operator>*</operator><operator>)</operator><name>pCache</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iMagic</name></name><operator>==</operator><name>TESTPCACHE_VALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* See if the page is already in cache.  Return immediately if it is */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TESTPCACHE_NPAGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name><operator>==</operator><name>key</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPinned</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name> <operator>&lt;=</operator> <name>TESTPCACHE_NPAGE</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nFree</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPinned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>page</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* If createFlag is 0, never allocate a new page */</comment>
  <if_stmt><if>if<condition>( <expr><name>createFlag</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If no pages are available, always fail */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name><operator>==</operator><name>TESTPCACHE_NPAGE</name></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Do not allocate the last TESTPCACHE_RESERVE pages unless createFlag is 2 */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name><operator>&gt;=</operator><name>TESTPCACHE_NPAGE</name><operator>-</operator><name>TESTPCACHE_RESERVE</name> <operator>&amp;&amp;</operator> <name>createFlag</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Do not allocate if highStress is enabled and createFlag is not 2.  
  **
  ** The highStress setting causes pagerStress() to be called much more
  ** often, which exercises the pager logic more intensely.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>testpcacheGlobal</name><operator>.</operator><name>highStress</name></name> <operator>&amp;&amp;</operator> <name>createFlag</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Find a free page to allocate if there are any free pages.
  ** Withhold TESTPCACHE_RESERVE free pages until createFlag is 2.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nFree</name></name><operator>&gt;</operator><name>TESTPCACHE_RESERVE</name> <operator>||</operator> <operator>(</operator><name>createFlag</name><operator>==</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nFree</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>testpcacheRandom</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>TESTPCACHE_NPAGE</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TESTPCACHE_NPAGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>TESTPCACHE_NPAGE</name></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>key</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>isPinned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>page</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>page</name><operator>.</operator><name>pExtra</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szExtra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFree</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name> <operator>&lt;=</operator> <name>TESTPCACHE_NPAGE</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nFree</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>page</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* The prior loop always finds a freepage to allocate */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If this cache is not purgeable then we have to fail.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bPurgeable</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If there are no free pages, recycle a page.  The page to
  ** recycle is selected at random from all unpinned pages.
  */</comment>
  <expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>testpcacheRandom</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>TESTPCACHE_NPAGE</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TESTPCACHE_NPAGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>TESTPCACHE_NPAGE</name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>key</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>isPinned</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>isPinned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>page</name><operator>.</operator><name>pBuf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>page</name><operator>.</operator><name>pExtra</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>szExtra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name> <operator>&lt;=</operator> <name>TESTPCACHE_NPAGE</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nFree</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>page</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* The previous loop always finds a page to recycle. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unpin a page.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testpcacheUnpin</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_pcache_page</name> <modifier>*</modifier></type><name>pOldPage</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>discard</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>testpcache</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>testpcache</name><operator>*</operator><operator>)</operator><name>pCache</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iMagic</name></name><operator>==</operator><name>TESTPCACHE_VALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Randomly discard pages as they are unpinned according to the
  ** discardChance setting.  If discardChance is 0, the random discard
  ** never happens.  If discardChance is 100, it always happens.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bPurgeable</name></name>
  <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">100</literal><operator>-</operator><name><name>testpcacheGlobal</name><operator>.</operator><name>discardChance</name></name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><call><name>testpcacheRandom</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>%</operator><literal type="number">100</literal><operator>)</operator></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name>discard</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TESTPCACHE_NPAGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>page</name><operator>==</operator><name>pOldPage</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* The pOldPage pointer always points to a pinned page */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPinned</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPinned</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>discard</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFree</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nFree</name></name><operator>&lt;=</operator><name>TESTPCACHE_NPAGE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* The pOldPage pointer always points to a valid page */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Rekey a single page.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testpcacheRekey</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_pcache_page</name> <modifier>*</modifier></type><name>pOldPage</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name></type> <name>oldKey</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name></type> <name>newKey</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>testpcache</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>testpcache</name><operator>*</operator><operator>)</operator><name>pCache</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iMagic</name></name><operator>==</operator><name>TESTPCACHE_VALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If there already exists another page at newKey, verify that
  ** the other page is unpinned and discard it.
  */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TESTPCACHE_NPAGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name><operator>==</operator><name>newKey</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* The new key is never a page that is already pinned */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPinned</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFree</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nFree</name></name><operator>&lt;=</operator><name>TESTPCACHE_NPAGE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Find the page to be rekeyed and rekey it.
  */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TESTPCACHE_NPAGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name><operator>==</operator><name>oldKey</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* The oldKey and pOldPage parameters match */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>page</name><operator>==</operator><name>pOldPage</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* Page to be rekeyed must be pinned */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPinned</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <name>newKey</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Rekey is always given a valid page to work with */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Truncate the page cache.  Every page with a key of iLimit or larger
** is discarded.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testpcacheTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>iLimit</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>testpcache</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>testpcache</name><operator>*</operator><operator>)</operator><name>pCache</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iMagic</name></name><operator>==</operator><name>TESTPCACHE_VALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>TESTPCACHE_NPAGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name><operator>&gt;=</operator><name>iLimit</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>isPinned</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nPinned</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFree</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nFree</name></name><operator>&lt;=</operator><name>TESTPCACHE_NPAGE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Destroy a page cache.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testpcacheDestroy</name><parameter_list>(<parameter><decl><type><name>sqlite3_pcache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>testpcache</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>testpcache</name><operator>*</operator><operator>)</operator><name>pCache</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iMagic</name></name><operator>==</operator><name>TESTPCACHE_VALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iMagic</name></name> <operator>=</operator> <name>TESTPCACHE_CLEAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Invoke this routine to register or unregister the testing pager cache
** implemented by this file.
**
** Install the test pager cache if installFlag is 1 and uninstall it if
** installFlag is 0.
**
** When installing, discardChance is a number between 0 and 100 that
** indicates the probability of discarding a page when unpinning the
** page.  0 means never discard (unless the discard flag is set).
** 100 means always discard.
*/</comment>
<function><type><name>void</name></type> <name>installTestPCache</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>installFlag</name></decl></parameter>,            <comment type="block">/* True to install.  False to uninstall. */</comment>
  <parameter><decl><type><name>unsigned</name></type> <name>discardChance</name></decl></parameter>,     <comment type="block">/* 0-100.  Chance to discard on unpin */</comment>
  <parameter><decl><type><name>unsigned</name></type> <name>prngSeed</name></decl></parameter>,          <comment type="block">/* Seed for the PRNG */</comment>
  <parameter><decl><type><name>unsigned</name></type> <name>highStress</name></decl></parameter>         <comment type="block">/* Call xStress agressively */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_pcache_methods2</name></type> <name>testPcache</name> <init>= <expr><block>{
    <expr><literal type="number">1</literal></expr>,
    <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>testpcacheGlobal</name></expr>,
    <expr><name>testpcacheInit</name></expr>,
    <expr><name>testpcacheShutdown</name></expr>,
    <expr><name>testpcacheCreate</name></expr>,
    <expr><name>testpcacheCachesize</name></expr>,
    <expr><name>testpcachePagecount</name></expr>,
    <expr><name>testpcacheFetch</name></expr>,
    <expr><name>testpcacheUnpin</name></expr>,
    <expr><name>testpcacheRekey</name></expr>,
    <expr><name>testpcacheTruncate</name></expr>,
    <expr><name>testpcacheDestroy</name></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_pcache_methods2</name></type> <name>defaultPcache</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>isInstalled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>nInstance</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>pDummy</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>discardChance</name><operator>&lt;=</operator><literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>discardChance</name></name> <operator>=</operator> <name>discardChance</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>prngSeed</name></name> <operator>=</operator> <name>prngSeed</name> <operator>^</operator> <operator>(</operator><name>prngSeed</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>testpcacheGlobal</name><operator>.</operator><name>highStress</name></name> <operator>=</operator> <name>highStress</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>installFlag</name><operator>!=</operator><name>isInstalled</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>installFlag</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_GETPCACHE2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defaultPcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>defaultPcache</name><operator>.</operator><name>xCreate</name></name><operator>!=</operator><name>testpcacheCreate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_PCACHE2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>testPcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>defaultPcache</name><operator>.</operator><name>xCreate</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_PCACHE2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defaultPcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>isInstalled</name> <operator>=</operator> <name>installFlag</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
