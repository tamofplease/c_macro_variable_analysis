<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/mutex.c"><comment type="block">/*
** 2007 August 14
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the C functions that implement mutexes.
**
** This file contains code that is common across all mutex implementations.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_DEBUG</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_OMIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
** For debugging purposes, record when the mutex subsystem is initialized
** and uninitialized so that we can assert() if there is an attempt to
** allocate a mutex while the system is uninitialized.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>SQLITE_WSD</name> <name>int</name></type> <name>mutexIsInit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_DEBUG &amp;&amp; !defined(SQLITE_MUTEX_OMIT) */</comment>


<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MUTEX_OMIT</name></cpp:ifndef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_MULTITHREADED_CHECKS</name></cpp:ifdef>
<comment type="block">/*
** This block (enclosed by SQLITE_ENABLE_MULTITHREADED_CHECKS) contains
** the implementation of a wrapper around the system default mutex
** implementation (sqlite3DefaultMutex()). 
**
** Most calls are passed directly through to the underlying default
** mutex implementation. Except, if a mutex is configured by calling
** sqlite3MutexWarnOnContention() on it, then if contention is ever
** encountered within xMutexEnter() a warning is emitted via sqlite3_log().
**
** This type of mutex is used as the database handle mutex when testing
** apps that usually use SQLITE_CONFIG_MULTITHREAD mode.
*/</comment>

<comment type="block">/* 
** Type for all mutexes used when SQLITE_ENABLE_MULTITHREADED_CHECKS
** is defined. Variable CheckMutex.mutex is a pointer to the real mutex
** allocated by the system mutex implementation. Variable iType is usually set
** to the type of mutex requested - SQLITE_MUTEX_RECURSIVE, SQLITE_MUTEX_FAST
** or one of the static mutex identifiers. Or, if this is a recursive mutex
** that has been configured using sqlite3MutexWarnOnContention(), it is
** set to SQLITE_MUTEX_WARNONCONTENTION.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>CheckMutex</name></name></type> <name>CheckMutex</name>;</typedef>
<struct>struct <name>CheckMutex</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_MUTEX_WARNONCONTENTION</name></cpp:macro>  <cpp:value>(-1)</cpp:value></cpp:define>

<comment type="block">/* 
** Pointer to real mutex methods object used by the CheckMutex
** implementation. Set by checkMutexInit(). 
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>SQLITE_WSD</name> <specifier>const</specifier> <name>sqlite3_mutex_methods</name> <modifier>*</modifier></type><name>pGlobalMutexMethods</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>checkMutexHeld</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>pGlobalMutexMethods</name><operator>-&gt;</operator><name>xMutexHeld</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CheckMutex</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>checkMutexNotheld</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name><name>pGlobalMutexMethods</name><operator>-&gt;</operator><name>xMutexNotheld</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>CheckMutex</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Initialize and deinitialize the mutex subsystem.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>checkMutexInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content> 
  <expr_stmt><expr><name>pGlobalMutexMethods</name> <operator>=</operator> <call><name>sqlite3DefaultMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return> 
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>checkMutexEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content> 
  <expr_stmt><expr><name>pGlobalMutexMethods</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return> 
</block_content>}</block></function>

<comment type="block">/*
** Allocate a mutex.
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_mutex</name> <modifier>*</modifier></type><name>checkMutexAlloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>CheckMutex</name></type> <name><name>staticMutexes</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">5</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">9</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CheckMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_MUTEX_RECURSIVE</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>SQLITE_MUTEX_FAST</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iType</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3MallocZero</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CheckMutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iType</name></name> <operator>=</operator> <name>iType</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
    <if_stmt><if>if<condition>( <expr><name>iType</name><operator>-</operator><literal type="number">2</literal><operator>&gt;=</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>staticMutexes</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>SQLITE_MISUSE_BKPT</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>staticMutexes</name><index>[<expr><name>iType</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name> <operator>=</operator> <call><name><name>pGlobalMutexMethods</name><operator>-&gt;</operator><name>xMutexAlloc</name></name><argument_list>(<argument><expr><name>iType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>mutex</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>iType</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>(</operator><name>sqlite3_mutex</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free a mutex.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>checkMutexFree</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_MUTEX_RECURSIVE</name><operator>&lt;</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_MUTEX_FAST</name><operator>&lt;</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_MUTEX_WARNONCONTENTION</name><operator>&lt;</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_ENABLE_API_ARMOR</name></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name>CheckMutex</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>iType</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
    <decl_stmt><decl><type><name>CheckMutex</name> <modifier>*</modifier></type><name>pCheck</name> <init>= <expr><operator>(</operator><name>CheckMutex</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pGlobalMutexMethods</name><operator>-&gt;</operator><name>xMutexFree</name></name><argument_list>(<argument><expr><name><name>pCheck</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <else>else<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>SQLITE_MISUSE_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
** Enter the mutex.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>checkMutexEnter</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CheckMutex</name> <modifier>*</modifier></type><name>pCheck</name> <init>= <expr><operator>(</operator><name>CheckMutex</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pCheck</name><operator>-&gt;</operator><name>iType</name></name><operator>==</operator><name>SQLITE_MUTEX_WARNONCONTENTION</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>==</operator><call><name><name>pGlobalMutexMethods</name><operator>-&gt;</operator><name>xMutexTry</name></name><argument_list>(<argument><expr><name><name>pCheck</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_MISUSE</name></expr></argument>, 
        <argument><expr><literal type="string">"illegal multi-threaded access to database connection"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name><name>pGlobalMutexMethods</name><operator>-&gt;</operator><name>xMutexEnter</name></name><argument_list>(<argument><expr><name><name>pCheck</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Enter the mutex (do not block).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>checkMutexTry</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CheckMutex</name> <modifier>*</modifier></type><name>pCheck</name> <init>= <expr><operator>(</operator><name>CheckMutex</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>pGlobalMutexMethods</name><operator>-&gt;</operator><name>xMutexTry</name></name><argument_list>(<argument><expr><name><name>pCheck</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Leave the mutex.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>checkMutexLeave</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CheckMutex</name> <modifier>*</modifier></type><name>pCheck</name> <init>= <expr><operator>(</operator><name>CheckMutex</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pGlobalMutexMethods</name><operator>-&gt;</operator><name>xMutexLeave</name></name><argument_list>(<argument><expr><name><name>pCheck</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>sqlite3_mutex_methods</name> <specifier>const</specifier> <modifier>*</modifier></type><name>multiThreadedCheckMutex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_mutex_methods</name></type> <name>sMutex</name> <init>= <expr><block>{
    <expr><name>checkMutexInit</name></expr>,
    <expr><name>checkMutexEnd</name></expr>,
    <expr><name>checkMutexAlloc</name></expr>,
    <expr><name>checkMutexFree</name></expr>,
    <expr><name>checkMutexEnter</name></expr>,
    <expr><name>checkMutexTry</name></expr>,
    <expr><name>checkMutexLeave</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
    <expr><name>checkMutexHeld</name></expr>,
    <expr><name>checkMutexNotheld</name>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <literal type="number">0</literal></expr>,
    <expr><literal type="number">0</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>&amp;</operator><name>sMutex</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Mark the SQLITE_MUTEX_RECURSIVE mutex passed as the only argument as
** one on which there should be no contention.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3MutexWarnOnContention</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name><operator>==</operator><name>checkMutexAlloc</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>CheckMutex</name> <modifier>*</modifier></type><name>pCheck</name> <init>= <expr><operator>(</operator><name>CheckMutex</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCheck</name><operator>-&gt;</operator><name>iType</name></name><operator>==</operator><name>SQLITE_MUTEX_RECURSIVE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCheck</name><operator>-&gt;</operator><name>iType</name></name> <operator>=</operator> <name>SQLITE_MUTEX_WARNONCONTENTION</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* ifdef SQLITE_ENABLE_MULTITHREADED_CHECKS */</comment>

<comment type="block">/*
** Initialize the mutex system.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MutexInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content> 
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* If the xMutexAlloc method has not been set, then the user did not
    ** install a mutex implementation via sqlite3_config() prior to 
    ** sqlite3_initialize() being called. This block copies pointers to
    ** the default implementation into the sqlite3GlobalConfig structure.
    */</comment>
    <decl_stmt><decl><type><name>sqlite3_mutex_methods</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pFrom</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_mutex_methods</name> <modifier>*</modifier></type><name>pTo</name> <init>= <expr><operator>&amp;</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bCoreMutex</name></name></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_MULTITHREADED_CHECKS</name></cpp:ifdef>
      <expr_stmt><expr><name>pFrom</name> <operator>=</operator> <call><name>multiThreadedCheckMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>pFrom</name> <operator>=</operator> <call><name>sqlite3DefaultMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>pFrom</name> <operator>=</operator> <call><name>sqlite3NoopMutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexInit</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexInit</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexEnd</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexEnd</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexFree</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexFree</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexEnter</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexEnter</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexTry</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexTry</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexLeave</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexLeave</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexHeld</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexHeld</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexNotheld</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexNotheld</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3MemoryBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>xMutexAlloc</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>xMutexAlloc</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexInit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexInit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>GLOBAL</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>mutexIsInit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>sqlite3MemoryBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Shutdown the mutex system. This call frees resources allocated by
** sqlite3MutexInit().
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MutexEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnd</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>GLOBAL</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>mutexIsInit</name></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Retrieve a pointer to a static mutex or allocate a new dynamic one.
*/</comment>
<function><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>sqlite3_mutex_alloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOINIT</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><name>id</name><operator>&lt;=</operator><name>SQLITE_MUTEX_RECURSIVE</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>id</name><operator>&gt;</operator><name>SQLITE_MUTEX_RECURSIVE</name> <operator>&amp;&amp;</operator> <call><name>sqlite3MutexInit</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>sqlite3MutexAlloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bCoreMutex</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>GLOBAL</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>mutexIsInit</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexAlloc</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free a dynamic mutex.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_mutex_free</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexFree</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexFree</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Obtain the mutex p. If some other thread already has the mutex, block
** until it can be obtained.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_mutex_enter</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexEnter</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Obtain the mutex p. If successful, return SQLITE_OK. Otherwise, if another
** thread holds the mutex and it cannot be obtained, return SQLITE_BUSY.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_mutex_try</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexTry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexTry</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The sqlite3_mutex_leave() routine exits a mutex that was previously
** entered by the same thread.  The behavior is undefined if the mutex 
** is not currently entered. If a NULL pointer is passed as an argument
** this function is a no-op.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_mutex_leave</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexLeave</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexLeave</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
<comment type="block">/*
** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routine are
** intended for use inside assert() statements.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_mutex_held</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexHeld</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexHeld</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sqlite3_mutex_notheld</name><parameter_list>(<parameter><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexNotheld</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>mutex</name><operator>.</operator><name>xMutexNotheld</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_MUTEX_OMIT) */</comment>
</unit>
