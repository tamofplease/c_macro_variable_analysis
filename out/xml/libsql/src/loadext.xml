<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/loadext.c"><comment type="block">/*
** 2006 June 7
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code used to dynamically load extensions into
** the SQLite library.
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_CORE</name></cpp:ifndef>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_CORE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>  <comment type="block">/* Disable the API redefinition in sqlite3ext.h */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
<comment type="block">/*
** Some API routines are omitted when various features are
** excluded from a build of SQLite.  Substitute a NULL pointer
** for any missing APIs.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_ENABLE_COLUMN_METADATA</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_database_name</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_database_name16</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_table_name</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_table_name16</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_origin_name</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_origin_name16</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_AUTHORIZATION</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_set_authorizer</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_bind_text16</name></cpp:macro>            <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_collation_needed16</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_decltype16</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_name16</name></cpp:macro>          <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_text16</name></cpp:macro>          <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_complete16</name></cpp:macro>             <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_create_collation16</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_create_function16</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_errmsg16</name></cpp:macro>               <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_open16</name></cpp:macro>                 <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_prepare16</name></cpp:macro>              <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_prepare16_v2</name></cpp:macro>           <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_prepare16_v3</name></cpp:macro>           <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_result_error16</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_result_text16</name></cpp:macro>          <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_result_text16be</name></cpp:macro>        <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_result_text16le</name></cpp:macro>        <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_value_text16</name></cpp:macro>           <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_value_text16be</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_value_text16le</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_database_name16</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_table_name16</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_origin_name16</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_COMPLETE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_complete</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_complete16</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_DECLTYPE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_decltype16</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_column_decltype</name></cpp:macro>        <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_PROGRESS_CALLBACK</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_progress_handler</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_create_module</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_create_module_v2</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_declare_vtab</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_vtab_config</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_vtab_on_conflict</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_vtab_collation</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_SHARED_CACHE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_enable_shared_cache</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_TRACE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_DEPRECATED</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_profile</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_trace</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_GET_TABLE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_free_table</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_get_table</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_INCRBLOB</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_bind_zeroblob</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_blob_bytes</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_blob_close</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_blob_open</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_blob_read</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_blob_write</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_blob_reopen</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_TRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_trace_v2</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The following structure contains pointers to all SQLite API routines.
** A pointer to this structure is passed into extensions when they are
** loaded so that the extension can make calls back into the SQLite
** library.
**
** When adding new APIs, add them to the bottom of this structure
** in order to preserve backwards compatibility.
**
** Extensions that use newer APIs should first call the
** sqlite3_libversion_number() to make sure that the API they
** intend to use is supported by the library.  Extensions should
** also check to make sure that the pointer to the function is
** not NULL before calling it.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_api_routines</name></type> <name>sqlite3Apis</name> <init>= <expr><block>{
  <expr><name>sqlite3_aggregate_context</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr><name>sqlite3_aggregate_count</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_bind_blob</name></expr>,
  <expr><name>sqlite3_bind_double</name></expr>,
  <expr><name>sqlite3_bind_int</name></expr>,
  <expr><name>sqlite3_bind_int64</name></expr>,
  <expr><name>sqlite3_bind_null</name></expr>,
  <expr><name>sqlite3_bind_parameter_count</name></expr>,
  <expr><name>sqlite3_bind_parameter_index</name></expr>,
  <expr><name>sqlite3_bind_parameter_name</name></expr>,
  <expr><name>sqlite3_bind_text</name></expr>,
  <expr><name>sqlite3_bind_text16</name></expr>,
  <expr><name>sqlite3_bind_value</name></expr>,
  <expr><name>sqlite3_busy_handler</name></expr>,
  <expr><name>sqlite3_busy_timeout</name></expr>,
  <expr><name>sqlite3_changes</name></expr>,
  <expr><name>sqlite3_close</name></expr>,
  <expr><name>sqlite3_collation_needed</name></expr>,
  <expr><name>sqlite3_collation_needed16</name></expr>,
  <expr><name>sqlite3_column_blob</name></expr>,
  <expr><name>sqlite3_column_bytes</name></expr>,
  <expr><name>sqlite3_column_bytes16</name></expr>,
  <expr><name>sqlite3_column_count</name></expr>,
  <expr><name>sqlite3_column_database_name</name></expr>,
  <expr><name>sqlite3_column_database_name16</name></expr>,
  <expr><name>sqlite3_column_decltype</name></expr>,
  <expr><name>sqlite3_column_decltype16</name></expr>,
  <expr><name>sqlite3_column_double</name></expr>,
  <expr><name>sqlite3_column_int</name></expr>,
  <expr><name>sqlite3_column_int64</name></expr>,
  <expr><name>sqlite3_column_name</name></expr>,
  <expr><name>sqlite3_column_name16</name></expr>,
  <expr><name>sqlite3_column_origin_name</name></expr>,
  <expr><name>sqlite3_column_origin_name16</name></expr>,
  <expr><name>sqlite3_column_table_name</name></expr>,
  <expr><name>sqlite3_column_table_name16</name></expr>,
  <expr><name>sqlite3_column_text</name></expr>,
  <expr><name>sqlite3_column_text16</name></expr>,
  <expr><name>sqlite3_column_type</name></expr>,
  <expr><name>sqlite3_column_value</name></expr>,
  <expr><name>sqlite3_commit_hook</name></expr>,
  <expr><name>sqlite3_complete</name></expr>,
  <expr><name>sqlite3_complete16</name></expr>,
  <expr><name>sqlite3_create_collation</name></expr>,
  <expr><name>sqlite3_create_collation16</name></expr>,
  <expr><name>sqlite3_create_function</name></expr>,
  <expr><name>sqlite3_create_function16</name></expr>,
  <expr><name>sqlite3_create_module</name></expr>,
  <expr><name>sqlite3_data_count</name></expr>,
  <expr><name>sqlite3_db_handle</name></expr>,
  <expr><name>sqlite3_declare_vtab</name></expr>,
  <expr><name>sqlite3_enable_shared_cache</name></expr>,
  <expr><name>sqlite3_errcode</name></expr>,
  <expr><name>sqlite3_errmsg</name></expr>,
  <expr><name>sqlite3_errmsg16</name></expr>,
  <expr><name>sqlite3_exec</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr><name>sqlite3_expired</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_finalize</name></expr>,
  <expr><name>sqlite3_free</name></expr>,
  <expr><name>sqlite3_free_table</name></expr>,
  <expr><name>sqlite3_get_autocommit</name></expr>,
  <expr><name>sqlite3_get_auxdata</name></expr>,
  <expr><name>sqlite3_get_table</name></expr>,
  <expr><literal type="number">0</literal></expr>,     <comment type="block">/* Was sqlite3_global_recover(), but that function is deprecated */</comment>
  <expr><name>sqlite3_interrupt</name></expr>,
  <expr><name>sqlite3_last_insert_rowid</name></expr>,
  <expr><name>sqlite3_libversion</name></expr>,
  <expr><name>sqlite3_libversion_number</name></expr>,
  <expr><name>sqlite3_malloc</name></expr>,
  <expr><name>sqlite3_mprintf</name></expr>,
  <expr><name>sqlite3_open</name></expr>,
  <expr><name>sqlite3_open16</name></expr>,
  <expr><name>sqlite3_prepare</name></expr>,
  <expr><name>sqlite3_prepare16</name></expr>,
  <expr><name>sqlite3_profile</name></expr>,
  <expr><name>sqlite3_progress_handler</name></expr>,
  <expr><name>sqlite3_realloc</name></expr>,
  <expr><name>sqlite3_reset</name></expr>,
  <expr><name>sqlite3_result_blob</name></expr>,
  <expr><name>sqlite3_result_double</name></expr>,
  <expr><name>sqlite3_result_error</name></expr>,
  <expr><name>sqlite3_result_error16</name></expr>,
  <expr><name>sqlite3_result_int</name></expr>,
  <expr><name>sqlite3_result_int64</name></expr>,
  <expr><name>sqlite3_result_null</name></expr>,
  <expr><name>sqlite3_result_text</name></expr>,
  <expr><name>sqlite3_result_text16</name></expr>,
  <expr><name>sqlite3_result_text16be</name></expr>,
  <expr><name>sqlite3_result_text16le</name></expr>,
  <expr><name>sqlite3_result_value</name></expr>,
  <expr><name>sqlite3_rollback_hook</name></expr>,
  <expr><name>sqlite3_set_authorizer</name></expr>,
  <expr><name>sqlite3_set_auxdata</name></expr>,
  <expr><name>sqlite3_snprintf</name></expr>,
  <expr><name>sqlite3_step</name></expr>,
  <expr><name>sqlite3_table_column_metadata</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr><name>sqlite3_thread_cleanup</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_total_changes</name></expr>,
  <expr><name>sqlite3_trace</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr><name>sqlite3_transfer_bindings</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_update_hook</name></expr>,
  <expr><name>sqlite3_user_data</name></expr>,
  <expr><name>sqlite3_value_blob</name></expr>,
  <expr><name>sqlite3_value_bytes</name></expr>,
  <expr><name>sqlite3_value_bytes16</name></expr>,
  <expr><name>sqlite3_value_double</name></expr>,
  <expr><name>sqlite3_value_int</name></expr>,
  <expr><name>sqlite3_value_int64</name></expr>,
  <expr><name>sqlite3_value_numeric_type</name></expr>,
  <expr><name>sqlite3_value_text</name></expr>,
  <expr><name>sqlite3_value_text16</name></expr>,
  <expr><name>sqlite3_value_text16be</name></expr>,
  <expr><name>sqlite3_value_text16le</name></expr>,
  <expr><name>sqlite3_value_type</name></expr>,
  <expr><name>sqlite3_vmprintf</name></expr>,
  <comment type="block">/*
  ** The original API set ends here.  All extensions can call any
  ** of the APIs above provided that the pointer is not NULL.  But
  ** before calling APIs that follow, extension should check the
  ** sqlite3_libversion_number() to make sure they are dealing with
  ** a library that is new enough to support that API.
  *************************************************************************
  */</comment>
  <expr><name>sqlite3_overload_function</name></expr>,

  <comment type="block">/*
  ** Added after 3.3.13
  */</comment>
  <expr><name>sqlite3_prepare_v2</name></expr>,
  <expr><name>sqlite3_prepare16_v2</name></expr>,
  <expr><name>sqlite3_clear_bindings</name></expr>,

  <comment type="block">/*
  ** Added for 3.4.1
  */</comment>
  <expr><name>sqlite3_create_module_v2</name></expr>,

  <comment type="block">/*
  ** Added for 3.5.0
  */</comment>
  <expr><name>sqlite3_bind_zeroblob</name></expr>,
  <expr><name>sqlite3_blob_bytes</name></expr>,
  <expr><name>sqlite3_blob_close</name></expr>,
  <expr><name>sqlite3_blob_open</name></expr>,
  <expr><name>sqlite3_blob_read</name></expr>,
  <expr><name>sqlite3_blob_write</name></expr>,
  <expr><name>sqlite3_create_collation_v2</name></expr>,
  <expr><name>sqlite3_file_control</name></expr>,
  <expr><name>sqlite3_memory_highwater</name></expr>,
  <expr><name>sqlite3_memory_used</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_MUTEX_OMIT</name></cpp:ifdef>
  <expr><literal type="number">0</literal></expr>, 
  <expr><literal type="number">0</literal></expr>, 
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><name>sqlite3_mutex_alloc</name></expr>,
  <expr><name>sqlite3_mutex_enter</name></expr>,
  <expr><name>sqlite3_mutex_free</name></expr>,
  <expr><name>sqlite3_mutex_leave</name></expr>,
  <expr><name>sqlite3_mutex_try</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_open_v2</name></expr>,
  <expr><name>sqlite3_release_memory</name></expr>,
  <expr><name>sqlite3_result_error_nomem</name></expr>,
  <expr><name>sqlite3_result_error_toobig</name></expr>,
  <expr><name>sqlite3_sleep</name></expr>,
  <expr><name>sqlite3_soft_heap_limit</name></expr>,
  <expr><name>sqlite3_vfs_find</name></expr>,
  <expr><name>sqlite3_vfs_register</name></expr>,
  <expr><name>sqlite3_vfs_unregister</name></expr>,

  <comment type="block">/*
  ** Added for 3.5.8
  */</comment>
  <expr><name>sqlite3_threadsafe</name></expr>,
  <expr><name>sqlite3_result_zeroblob</name></expr>,
  <expr><name>sqlite3_result_error_code</name></expr>,
  <expr><name>sqlite3_test_control</name></expr>,
  <expr><name>sqlite3_randomness</name></expr>,
  <expr><name>sqlite3_context_db_handle</name></expr>,

  <comment type="block">/*
  ** Added for 3.6.0
  */</comment>
  <expr><name>sqlite3_extended_result_codes</name></expr>,
  <expr><name>sqlite3_limit</name></expr>,
  <expr><name>sqlite3_next_stmt</name></expr>,
  <expr><name>sqlite3_sql</name></expr>,
  <expr><name>sqlite3_status</name></expr>,

  <comment type="block">/*
  ** Added for 3.7.4
  */</comment>
  <expr><name>sqlite3_backup_finish</name></expr>,
  <expr><name>sqlite3_backup_init</name></expr>,
  <expr><name>sqlite3_backup_pagecount</name></expr>,
  <expr><name>sqlite3_backup_remaining</name></expr>,
  <expr><name>sqlite3_backup_step</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_COMPILEOPTION_DIAGS</name></cpp:ifndef>
  <expr><name>sqlite3_compileoption_get</name></expr>,
  <expr><name>sqlite3_compileoption_used</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_create_function_v2</name></expr>,
  <expr><name>sqlite3_db_config</name></expr>,
  <expr><name>sqlite3_db_mutex</name></expr>,
  <expr><name>sqlite3_db_status</name></expr>,
  <expr><name>sqlite3_extended_errcode</name></expr>,
  <expr><name>sqlite3_log</name></expr>,
  <expr><name>sqlite3_soft_heap_limit64</name></expr>,
  <expr><name>sqlite3_sourceid</name></expr>,
  <expr><name>sqlite3_stmt_status</name></expr>,
  <expr><name>sqlite3_strnicmp</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_UNLOCK_NOTIFY</name></cpp:ifdef>
  <expr><name>sqlite3_unlock_notify</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WAL</name></cpp:ifndef>
  <expr><name>sqlite3_wal_autocheckpoint</name></expr>,
  <expr><name>sqlite3_wal_checkpoint</name></expr>,
  <expr><name>sqlite3_wal_hook</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_blob_reopen</name></expr>,
  <expr><name>sqlite3_vtab_config</name></expr>,
  <expr><name>sqlite3_vtab_on_conflict</name></expr>,
  <expr><name>sqlite3_close_v2</name></expr>,
  <expr><name>sqlite3_db_filename</name></expr>,
  <expr><name>sqlite3_db_readonly</name></expr>,
  <expr><name>sqlite3_db_release_memory</name></expr>,
  <expr><name>sqlite3_errstr</name></expr>,
  <expr><name>sqlite3_stmt_busy</name></expr>,
  <expr><name>sqlite3_stmt_readonly</name></expr>,
  <expr><name>sqlite3_stricmp</name></expr>,
  <expr><name>sqlite3_uri_boolean</name></expr>,
  <expr><name>sqlite3_uri_int64</name></expr>,
  <expr><name>sqlite3_uri_parameter</name></expr>,
  <expr><name>sqlite3_vsnprintf</name></expr>,
  <expr><name>sqlite3_wal_checkpoint_v2</name></expr>,
  <comment type="block">/* Version 3.8.7 and later */</comment>
  <expr><name>sqlite3_auto_extension</name></expr>,
  <expr><name>sqlite3_bind_blob64</name></expr>,
  <expr><name>sqlite3_bind_text64</name></expr>,
  <expr><name>sqlite3_cancel_auto_extension</name></expr>,
  <expr><name>sqlite3_load_extension</name></expr>,
  <expr><name>sqlite3_malloc64</name></expr>,
  <expr><name>sqlite3_msize</name></expr>,
  <expr><name>sqlite3_realloc64</name></expr>,
  <expr><name>sqlite3_reset_auto_extension</name></expr>,
  <expr><name>sqlite3_result_blob64</name></expr>,
  <expr><name>sqlite3_result_text64</name></expr>,
  <expr><name>sqlite3_strglob</name></expr>,
  <comment type="block">/* Version 3.8.11 and later */</comment>
  <expr><operator>(</operator><name>sqlite3_value</name><operator>*</operator><call>(<modifier>*</modifier>)<argument_list>(<argument><expr><specifier>const</specifier> <name>sqlite3_value</name><operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator><name>sqlite3_value_dup</name></expr>,
  <expr><name>sqlite3_value_free</name></expr>,
  <expr><name>sqlite3_result_zeroblob64</name></expr>,
  <expr><name>sqlite3_bind_zeroblob64</name></expr>,
  <comment type="block">/* Version 3.9.0 and later */</comment>
  <expr><name>sqlite3_value_subtype</name></expr>,
  <expr><name>sqlite3_result_subtype</name></expr>,
  <comment type="block">/* Version 3.10.0 and later */</comment>
  <expr><name>sqlite3_status64</name></expr>,
  <expr><name>sqlite3_strlike</name></expr>,
  <expr><name>sqlite3_db_cacheflush</name></expr>,
  <comment type="block">/* Version 3.12.0 and later */</comment>
  <expr><name>sqlite3_system_errno</name></expr>,
  <comment type="block">/* Version 3.14.0 and later */</comment>
  <expr><name>sqlite3_trace_v2</name></expr>,
  <expr><name>sqlite3_expanded_sql</name></expr>,
  <comment type="block">/* Version 3.18.0 and later */</comment>
  <expr><name>sqlite3_set_last_insert_rowid</name></expr>,
  <comment type="block">/* Version 3.20.0 and later */</comment>
  <expr><name>sqlite3_prepare_v3</name></expr>,
  <expr><name>sqlite3_prepare16_v3</name></expr>,
  <expr><name>sqlite3_bind_pointer</name></expr>,
  <expr><name>sqlite3_result_pointer</name></expr>,
  <expr><name>sqlite3_value_pointer</name></expr>,
  <comment type="block">/* Version 3.22.0 and later */</comment>
  <expr><name>sqlite3_vtab_nochange</name></expr>,
  <expr><name>sqlite3_value_nochange</name></expr>,
  <expr><name>sqlite3_vtab_collation</name></expr>,
  <comment type="block">/* Version 3.24.0 and later */</comment>
  <expr><name>sqlite3_keyword_count</name></expr>,
  <expr><name>sqlite3_keyword_name</name></expr>,
  <expr><name>sqlite3_keyword_check</name></expr>,
  <expr><name>sqlite3_str_new</name></expr>,
  <expr><name>sqlite3_str_finish</name></expr>,
  <expr><name>sqlite3_str_appendf</name></expr>,
  <expr><name>sqlite3_str_vappendf</name></expr>,
  <expr><name>sqlite3_str_append</name></expr>,
  <expr><name>sqlite3_str_appendall</name></expr>,
  <expr><name>sqlite3_str_appendchar</name></expr>,
  <expr><name>sqlite3_str_reset</name></expr>,
  <expr><name>sqlite3_str_errcode</name></expr>,
  <expr><name>sqlite3_str_length</name></expr>,
  <expr><name>sqlite3_str_value</name></expr>,
  <comment type="block">/* Version 3.25.0 and later */</comment>
  <expr><name>sqlite3_create_window_function</name></expr>,
  <comment type="block">/* Version 3.26.0 and later */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_NORMALIZE</name></cpp:ifdef>
  <expr><name>sqlite3_normalized_sql</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* Version 3.28.0 and later */</comment>
  <expr><name>sqlite3_stmt_isexplain</name></expr>,
  <expr><name>sqlite3_value_frombind</name></expr>,
  <comment type="block">/* Version 3.30.0 and later */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>
  <expr><name>sqlite3_drop_modules</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* Version 3.31.0 and later */</comment>
  <expr><name>sqlite3_hard_heap_limit64</name></expr>,
  <expr><name>sqlite3_uri_key</name></expr>,
  <expr><name>sqlite3_filename_database</name></expr>,
  <expr><name>sqlite3_filename_journal</name></expr>,
  <expr><name>sqlite3_filename_wal</name></expr>,
  <comment type="block">/* Version 3.32.0 and later */</comment>
  <expr><name>sqlite3_create_filename</name></expr>,
  <expr><name>sqlite3_free_filename</name></expr>,
  <expr><name>sqlite3_database_file_object</name></expr>,
  <comment type="block">/* Version 3.34.0 and later */</comment>
  <expr><name>sqlite3_txn_state</name></expr>,
  <comment type="block">/* Version 3.36.1 and later */</comment>
  <expr><name>sqlite3_changes64</name></expr>,
  <expr><name>sqlite3_total_changes64</name></expr>,
  <comment type="block">/* Version 3.37.0 and later */</comment>
  <expr><name>sqlite3_autovacuum_pages</name></expr>,
  <comment type="block">/* Version 3.38.0 and later */</comment>
  <expr><name>sqlite3_error_offset</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>
  <expr><name>sqlite3_vtab_rhs_value</name></expr>,
  <expr><name>sqlite3_vtab_distinct</name></expr>,
  <expr><name>sqlite3_vtab_in</name></expr>,
  <expr><name>sqlite3_vtab_in_first</name></expr>,
  <expr><name>sqlite3_vtab_in_next</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <comment type="block">/* Version 3.39.0 and later */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DESERIALIZE</name></cpp:ifndef>
  <expr><name>sqlite3_deserialize</name></expr>,
  <expr><name>sqlite3_serialize</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><literal type="number">0</literal></expr>,
  <expr><literal type="number">0</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_db_name</name></expr>,
  <comment type="block">/* Version 3.40.0 and later */</comment>
  <expr><name>sqlite3_value_encoding</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* True if x is the directory separator character
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>DirSep</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((X)=='/'||(X)=='\\')</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>DirSep</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((X)=='/')</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Attempt to load an SQLite extension library contained in the file
** zFile.  The entry point is zProc.  zProc may be 0 in which case a
** default entry point name (sqlite3_extension_init) is used.  Use
** of the default name is recommended.
**
** Return SQLITE_OK on success and SQLITE_ERROR if something goes wrong.
**
** If an error occurs and pzErrMsg is not 0, then fill *pzErrMsg with 
** error message text.  The calling function should free this memory
** by calling sqlite3DbFree(db, ).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlite3LoadExtension</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,          <comment type="block">/* Load the extension into this database connection */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,    <comment type="block">/* Name of the shared library containing extension */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zProc</name></decl></parameter>,    <comment type="block">/* Entry point.  Use "sqlite3_extension_init" if 0 */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>       <comment type="block">/* Put error message here if not 0 */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>pVfs</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_loadext_entry</name></type> <name>xInit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrmsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEntry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zAltEntry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>aHandle</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>nMsg</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <comment type="block">/* Shared library endings to try if zFile cannot be loaded as written */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azEndings</name><index>[]</index></name> <init>= <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:if>
     <expr><literal type="string">"dll"</literal>   
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
     <literal type="string">"dylib"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
     <literal type="string">"so"</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></expr></init></decl>;</decl_stmt>


  <if_stmt><if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pzErrMsg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Ticket #1863.  To avoid a creating security problems for older
  ** applications that relink against newer versions of SQLite, the
  ** ability to run load_extension is turned off by default.  One
  ** must call either sqlite3_enable_load_extension(db) or
  ** sqlite3_db_config(db, SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION, 1, 0)
  ** to turn on extension loading.
  */</comment>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SQLITE_LoadExtension</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pzErrMsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"not authorized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zEntry</name> <operator>=</operator> <ternary><condition><expr><name>zProc</name></expr> ?</condition><then> <expr><name>zProc</name></expr> </then><else>: <expr><literal type="string">"sqlite3_extension_init"</literal></expr></else></ternary></expr>;</expr_stmt>

  <comment type="block">/* tag-20210611-1.  Some dlopen() implementations will segfault if given
  ** an oversize filename.  Most filesystems have a pathname limit of 4K,
  ** so limit the extension filename length to about twice that.
  ** https://sqlite.org/forum/forumpost/08a0d6d9bf */</comment>
  <if_stmt><if>if<condition>( <expr><name>nMsg</name><operator>&gt;</operator><name>SQLITE_MAX_PATHLEN</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>extension_not_found</name>;</goto></block_content></block></if></if_stmt>
    
  <expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>sqlite3OsDlOpen</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_UNIX</name> <operator>||</operator> <name>SQLITE_OS_WIN</name></expr></cpp:if>
  <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azEndings</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>handle</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zAltFile</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name><name>azEndings</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zAltFile</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name>sqlite3OsDlOpen</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zAltFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zAltFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name>handle</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>extension_not_found</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>xInit</name> <operator>=</operator> <operator>(</operator><name>sqlite3_loadext_entry</name><operator>)</operator><call><name>sqlite3OsDlSym</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>zEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If no entry point was specified and the default legacy
  ** entry point name "sqlite3_extension_init" was not found, then
  ** construct an entry point name "sqlite3_X_init" where the X is
  ** replaced by the lowercase value of every ASCII alphabetic 
  ** character in the filename after the last "/" upto the first ".",
  ** and eliding the first three characters if they are "lib".  
  ** Examples:
  **
  **    /usr/local/lib/libExample5.4.3.so ==&gt;  sqlite3_example_init
  **    C:/lib/mathfuncs.dll              ==&gt;  sqlite3_mathfuncs_init
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>xInit</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zProc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iFile</name></decl>, <decl><type ref="prev"/><name>iEntry</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ncFile</name> <init>= <expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>zAltEntry</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>ncFile</name><operator>+</operator><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zAltEntry</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3OsDlClose</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_NOMEM_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zAltEntry</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iFile</name><operator>=</operator><name>ncFile</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iFile</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>DirSep</name><argument_list>(<argument><expr><name><name>zFile</name><index>[<expr><name>iFile</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iFile</name><operator>--</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
    <expr_stmt><expr><name>iFile</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><name>zFile</name><operator>+</operator><name>iFile</name></expr></argument>, <argument><expr><literal type="string">"lib"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iFile</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>iEntry</name><operator>=</operator><literal type="number">8</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name> <operator>=</operator> <name><name>zFile</name><index>[<expr><name>iFile</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'.'</literal></expr>;</condition> <incr><expr><name>iFile</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3Isalpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>zAltEntry</name><index>[<expr><name>iEntry</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><name><name>sqlite3UpperToLower</name><index>[<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>c</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zAltEntry</name><operator>+</operator><name>iEntry</name></expr></argument>, <argument><expr><literal type="string">"_init"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zEntry</name> <operator>=</operator> <name>zAltEntry</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xInit</name> <operator>=</operator> <operator>(</operator><name>sqlite3_loadext_entry</name><operator>)</operator><call><name>sqlite3OsDlSym</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>zEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>xInit</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nMsg</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zEntry</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">300</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pzErrMsg</name> <operator>=</operator> <name>zErrmsg</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zErrmsg</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nMsg</name><operator>&lt;</operator><literal type="number">0x7fffffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* zErrmsg would be NULL if not so */</comment>
        <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nMsg</name></expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>,
            <argument><expr><literal type="string">"no entry point [%s] in shared library [%s]"</literal></expr></argument>, <argument><expr><name>zEntry</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3OsDlError</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>nMsg</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3OsDlClose</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zAltEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zAltEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xInit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrmsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sqlite3Apis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK_LOAD_PERMANENTLY</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pzErrMsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"error during initialization: %s"</literal></expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3OsDlClose</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Append the new shared library handle to the db-&gt;aExtension array. */</comment>
  <expr_stmt><expr><name>aHandle</name> <operator>=</operator> <call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>nExtension</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>aHandle</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>nExtension</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aHandle</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aExtension</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>db</name><operator>-&gt;</operator><name>nExtension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aExtension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>aExtension</name></name> <operator>=</operator> <name>aHandle</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>aExtension</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>nExtension</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>handle</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>

<label><name>extension_not_found</name>:</label>
  <if_stmt><if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nMsg</name> <operator>+=</operator> <literal type="number">300</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pzErrMsg</name> <operator>=</operator> <name>zErrmsg</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zErrmsg</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nMsg</name><operator>&lt;</operator><literal type="number">0x7fffffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* zErrmsg would be NULL if not so */</comment>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nMsg</name></expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>,
          <argument><expr><literal type="string">"unable to open shared library [%.*s]"</literal></expr></argument>, <argument><expr><name>SQLITE_MAX_PATHLEN</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3OsDlError</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>nMsg</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sqlite3_load_extension</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,          <comment type="block">/* Load the extension into this database connection */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,    <comment type="block">/* Name of the shared library containing extension */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zProc</name></decl></parameter>,    <comment type="block">/* Entry point.  Use "sqlite3_extension_init" if 0 */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>       <comment type="block">/* Put error message here if not 0 */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3LoadExtension</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zProc</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3ApiExit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Call this routine when the database connection is closing in order
** to clean up loaded extensions
*/</comment>
<function><type><name>void</name></type> <name>sqlite3CloseExtensions</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nExtension</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3OsDlClose</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aExtension</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aExtension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Enable or disable extension loading.  Extension loading is disabled by
** default so as not to open security holes in older applications.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_enable_load_extension</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>onoff</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>onoff</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SQLITE_LoadExtension</name><operator>|</operator><name>SQLITE_LoadExtFunc</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>u64</name><operator>)</operator><operator>(</operator><name>SQLITE_LoadExtension</name><operator>|</operator><name>SQLITE_LoadExtFunc</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_OMIT_LOAD_EXTENSION) */</comment>

<comment type="block">/*
** The following object holds the list of automatically loaded
** extensions.
**
** This list is shared across threads.  The SQLITE_MUTEX_STATIC_MAIN
** mutex must be held while accessing this list.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>sqlite3AutoExtList</name></name></type> <name>sqlite3AutoExtList</name>;</typedef>
<expr_stmt><expr><specifier>static</specifier> <name>SQLITE_WSD</name> struct <name>sqlite3AutoExtList</name> <block>{
  <expr><name>u32</name> <name>nExt</name></expr>;              <comment type="block">/* Number of entries in aExt[] */</comment>          
  <expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>aExt</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;   <comment type="block">/* Pointers to the extension init functions */</comment>
}</block> <name>sqlite3Autoext</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<comment type="block">/* The "wsdAutoext" macro will resolve to the autoextension
** state vector.  If writable static data is unsupported on the target,
** we have to locate the state vector at run-time.  In the more common
** case where writable static data is supported, wsdStat can refer directly
** to the "sqlite3Autoext" state vector declared above.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdAutoextInit</name></cpp:macro> \
  <cpp:value>sqlite3AutoExtList *x = &amp;GLOBAL(sqlite3AutoExtList,sqlite3Autoext)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdAutoext</name></cpp:macro> <cpp:value>x[0]</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdAutoextInit</name></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdAutoext</name></cpp:macro> <cpp:value>sqlite3Autoext</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Register a statically linked extension that is automatically
** loaded by every new database connection.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_auto_extension</name><parameter_list>(
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xInit</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOINIT</name></cpp:ifndef>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>wsdAutoextInit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>xInit</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>u64</name></type> <name>nByte</name> <init>= <expr><operator>(</operator><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <function_decl><type><name>void</name></type> (<modifier>*</modifier><modifier>*</modifier><name>aNew</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
      <expr_stmt><expr><name>aNew</name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM_BKPT</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name><index>[<expr><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name></expr>]</index></name> <operator>=</operator> <name>xInit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>rc</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator><operator>==</operator><name>rc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Cancel a prior call to sqlite3_auto_extension.  Remove xInit from the
** set of routines that is invoked for each new database connection, if it
** is currently on the list.  If xInit is not on the list, then this
** routine is a no-op.
**
** Return 1 if xInit was found on the list and removed.  Return 0 if xInit
** was not on the list.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_cancel_auto_extension</name><parameter_list>(
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xInit</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>wsdAutoextInit</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>xInit</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>wsdAutoext</name><operator>.</operator><name>aExt</name><index>[<expr><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Reset the automatic extension loading mechanism.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_reset_auto_extension</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOINIT</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_initialize</name><argument_list>()</argument_list></call><operator>==</operator><name>SQLITE_OK</name></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>wsdAutoextInit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Load all automatic extensions.
**
** If anything goes wrong, set an error in the database connection.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3AutoLoadExtensions</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>go</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_loadext_entry</name></type> <name>xInit</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>wsdAutoextInit</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Common case: early out without every having to acquire a mutex */</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>go</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrmsg</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name> <init>= <expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MAIN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifdef>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pThunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pThunk</name> <init>= <expr><operator>&amp;</operator><name>sqlite3Apis</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name><name>wsdAutoext</name><operator>.</operator><name>nExt</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>xInit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>go</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>xInit</name> <operator>=</operator> <operator>(</operator><name>sqlite3_loadext_entry</name><operator>)</operator><name><name>wsdAutoext</name><operator>.</operator><name>aExt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zErrmsg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>xInit</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>xInit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrmsg</name></expr></argument>, <argument><expr><name>pThunk</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3ErrorWithMsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>,
            <argument><expr><literal type="string">"automatic extension loading failed: %s"</literal></expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>go</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
