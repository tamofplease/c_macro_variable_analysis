<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/test_vfs.c"><comment type="block">/*
** 2010 May 05
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains the implementation of the Tcl [testvfs] command,
** used to create SQLite VFS implementations with various properties and
** instrumentation to support testing SQLite.
**
**   testvfs VFSNAME ?OPTIONS?
**
** Available options are:
**
**   -noshm      BOOLEAN        (True to omit shm methods. Default false)
**   -default    BOOLEAN        (True to make the vfs default. Default false)
**   -szosfile   INTEGER        (Value for sqlite3_vfs.szOsFile)
**   -mxpathname INTEGER        (Value for sqlite3_vfs.mxPathname)
**   -iversion   INTEGER        (Value for sqlite3_vfs.iVersion)
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_TEST</name></expr></cpp:if>          <comment type="block">/* This file is used for testing only */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_SQLITE_TCL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"sqlite_tcl.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"tcl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>Testvfs</name></name></type> <name>Testvfs</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>TestvfsShm</name></name></type> <name>TestvfsShm</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>TestvfsBuffer</name></name></type> <name>TestvfsBuffer</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>TestvfsFile</name></name></type> <name>TestvfsFile</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>TestvfsFd</name></name></type> <name>TestvfsFd</name>;</typedef>

<comment type="block">/*
** An open file handle.
*/</comment>
<struct>struct <name>TestvfsFile</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>              <comment type="block">/* Base class.  Must be first */</comment>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name></decl>;</decl_stmt>                 <comment type="block">/* File data */</comment>
}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tvfsGetFd</name><parameter_list>(<parameter><type><name>pFile</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((TestvfsFile *)pFile)-&gt;pFd)</cpp:value></cpp:define>

<struct>struct <name>TestvfsFd</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>              <comment type="block">/* The VFS */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl>;</decl_stmt>          <comment type="block">/* Filename as passed to xOpen() */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name></decl>;</decl_stmt>            <comment type="block">/* The real, underlying file descriptor */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pShmId</name></decl>;</decl_stmt>                <comment type="block">/* Shared memory id for Tcl callbacks */</comment>

  <decl_stmt><decl><type><name>TestvfsBuffer</name> <modifier>*</modifier></type><name>pShm</name></decl>;</decl_stmt>            <comment type="block">/* Shared memory buffer */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>excllock</name></decl>;</decl_stmt>                   <comment type="block">/* Mask of exclusive locks */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>sharedlock</name></decl>;</decl_stmt>                 <comment type="block">/* Mask of shared locks */</comment>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>               <comment type="block">/* Next handle opened on the same file */</comment>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAULT_INJECT_NONE</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAULT_INJECT_TRANSIENT</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAULT_INJECT_PERSISTENT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>TestFaultInject</name></name></type> <name>TestFaultInject</name>;</typedef>
<struct>struct <name>TestFaultInject</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iCnt</name></decl>;</decl_stmt>                       <comment type="block">/* Remaining calls before fault injection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eFault</name></decl>;</decl_stmt>                     <comment type="block">/* A FAULT_INJECT_* value */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFail</name></decl>;</decl_stmt>                      <comment type="block">/* Number of faults injected */</comment>
}</block>;</struct>

<comment type="block">/*
** An instance of this structure is allocated for each VFS created. The
** sqlite3_vfs.pAppData field of the VFS structure registered with SQLite
** is set to point to it.
*/</comment>
<struct>struct <name>Testvfs</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>                    <comment type="block">/* Name of this VFS */</comment>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pParent</name></decl>;</decl_stmt>           <comment type="block">/* The VFS to use for file IO */</comment>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>              <comment type="block">/* The testvfs registered with SQLite */</comment>
  <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl>;</decl_stmt>             <comment type="block">/* Interpreter to run script in */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pScript</name></decl>;</decl_stmt>               <comment type="block">/* Script to execute */</comment>
  <decl_stmt><decl><type><name>TestvfsBuffer</name> <modifier>*</modifier></type><name>pBuffer</name></decl>;</decl_stmt>         <comment type="block">/* List of shared buffers */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isNoshm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isFullshm</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>                       <comment type="block">/* Mask controlling [script] and [ioerr] */</comment>

  <decl_stmt><decl><type><name>TestFaultInject</name></type> <name>ioerr_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestFaultInject</name></type> <name>full_err</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestFaultInject</name></type> <name>cantopen_err</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int iIoerrCnt;
  int ioerr;
  int nIoerrFail;
  int iFullCnt;
  int fullerr;
  int nFullFail;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>int</name></type> <name>iDevchar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSectorsize</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** The Testvfs.mask variable is set to a combination of the following.
** If a bit is clear in Testvfs.mask, then calls made by SQLite to the 
** corresponding VFS method is ignored for purposes of:
**
**   + Simulating IO errors, and
**   + Invoking the Tcl callback script.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_SHMOPEN_MASK</name></cpp:macro>      <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_SHMLOCK_MASK</name></cpp:macro>      <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_SHMMAP_MASK</name></cpp:macro>       <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_SHMBARRIER_MASK</name></cpp:macro>   <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_SHMCLOSE_MASK</name></cpp:macro>     <cpp:value>0x00000080</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_OPEN_MASK</name></cpp:macro>         <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_SYNC_MASK</name></cpp:macro>         <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_DELETE_MASK</name></cpp:macro>       <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_CLOSE_MASK</name></cpp:macro>        <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_WRITE_MASK</name></cpp:macro>        <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_TRUNCATE_MASK</name></cpp:macro>     <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_ACCESS_MASK</name></cpp:macro>       <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_FULLPATHNAME_MASK</name></cpp:macro> <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_READ_MASK</name></cpp:macro>         <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_UNLOCK_MASK</name></cpp:macro>       <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_LOCK_MASK</name></cpp:macro>         <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_CKLOCK_MASK</name></cpp:macro>       <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_FCNTL_MASK</name></cpp:macro>        <cpp:value>0x00100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_ALL_MASK</name></cpp:macro>          <cpp:value>0x001FFFFF</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_MAX_PAGES</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<comment type="block">/*
** A shared-memory buffer. There is one of these objects for each shared
** memory region opened by clients. If two clients open the same file,
** there are two TestvfsFile structures but only one TestvfsBuffer structure.
*/</comment>
<struct>struct <name>TestvfsBuffer</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>                    <comment type="block">/* Associated file name */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pgsz</name></decl>;</decl_stmt>                       <comment type="block">/* Page size */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name><name>aPage</name><index>[<expr><name>TESTVFS_MAX_PAGES</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* Array of ckalloc'd pages */</comment>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFile</name></decl>;</decl_stmt>               <comment type="block">/* List of open handles */</comment>
  <decl_stmt><decl><type><name>TestvfsBuffer</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>           <comment type="block">/* Next in linked list of all buffers */</comment>
}</block>;</struct>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARENTVFS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((Testvfs *)((x)-&gt;pAppData))-&gt;pParent)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTVFS_MAX_ARGS</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>


<comment type="block">/*
** Method declarations for TestvfsFile.
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsRead</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsWrite</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Method declarations for tvfs_vfs.
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncDir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsAccess</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsFullPathname</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tvfsDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tvfsDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><name>tvfsDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name><operator>*</operator></expr></argument>,<argument><expr><name>void</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>zSymbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tvfsDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOAD_EXTENSION */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsShmOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsShmMap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>tvfsShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsFetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>tvfsUnfetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_io_methods</name></type> <name>tvfs_io_methods</name> <init>= <expr><block>{
  <expr><literal type="number">3</literal></expr>,                              <comment type="block">/* iVersion */</comment>
  <expr><name>tvfsClose</name></expr>,                      <comment type="block">/* xClose */</comment>
  <expr><name>tvfsRead</name></expr>,                       <comment type="block">/* xRead */</comment>
  <expr><name>tvfsWrite</name></expr>,                      <comment type="block">/* xWrite */</comment>
  <expr><name>tvfsTruncate</name></expr>,                   <comment type="block">/* xTruncate */</comment>
  <expr><name>tvfsSync</name></expr>,                       <comment type="block">/* xSync */</comment>
  <expr><name>tvfsFileSize</name></expr>,                   <comment type="block">/* xFileSize */</comment>
  <expr><name>tvfsLock</name></expr>,                       <comment type="block">/* xLock */</comment>
  <expr><name>tvfsUnlock</name></expr>,                     <comment type="block">/* xUnlock */</comment>
  <expr><name>tvfsCheckReservedLock</name></expr>,          <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>tvfsFileControl</name></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><name>tvfsSectorSize</name></expr>,                 <comment type="block">/* xSectorSize */</comment>
  <expr><name>tvfsDeviceCharacteristics</name></expr>,      <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><name>tvfsShmMap</name></expr>,                     <comment type="block">/* xShmMap */</comment>
  <expr><name>tvfsShmLock</name></expr>,                    <comment type="block">/* xShmLock */</comment>
  <expr><name>tvfsShmBarrier</name></expr>,                 <comment type="block">/* xShmBarrier */</comment>
  <expr><name>tvfsShmUnmap</name></expr>,                   <comment type="block">/* xShmUnmap */</comment>
  <expr><name>tvfsFetch</name></expr>,
  <expr><name>tvfsUnfetch</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsResultCode</name><parameter_list>(<parameter><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>errcode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>eCode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCode</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aCode</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><name>SQLITE_OK</name></expr>,       <expr><literal type="string">"SQLITE_OK"</literal></expr>     }</block></expr>,
    <expr><block>{ <expr><name>SQLITE_ERROR</name></expr>,    <expr><literal type="string">"SQLITE_ERROR"</literal></expr>  }</block></expr>,
    <expr><block>{ <expr><name>SQLITE_IOERR</name></expr>,    <expr><literal type="string">"SQLITE_IOERR"</literal></expr>  }</block></expr>,
    <expr><block>{ <expr><name>SQLITE_LOCKED</name></expr>,   <expr><literal type="string">"SQLITE_LOCKED"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>SQLITE_BUSY</name></expr>,     <expr><literal type="string">"SQLITE_BUSY"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><name>SQLITE_READONLY</name></expr>, <expr><literal type="string">"SQLITE_READONLY"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><name>SQLITE_READONLY_CANTINIT</name></expr>, <expr><literal type="string">"SQLITE_READONLY_CANTINIT"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><name>SQLITE_NOTFOUND</name></expr>, <expr><literal type="string">"SQLITE_NOTFOUND"</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,              <expr><literal type="string">"SQLITE_OMIT"</literal></expr>   }</block></expr>,
  }</block></expr></init></decl>;</struct>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aCode</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>aCode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zCode</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name><name>aCode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eCode</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsInjectFault</name><parameter_list>(<parameter><decl><type><name>TestFaultInject</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eFault</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iCnt</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iCnt</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>iCnt</name></name><operator>&lt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>eFault</name></name><operator>==</operator><name>FAULT_INJECT_PERSISTENT</name> <operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFail</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsInjectIoerr</name><parameter_list>(<parameter><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>tvfsInjectFault</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ioerr_err</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsInjectFullerr</name><parameter_list>(<parameter><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>tvfsInjectFault</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>full_err</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsInjectCantopenerr</name><parameter_list>(<parameter><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>tvfsInjectFault</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cantopen_err</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>tvfsExecTcl</name><parameter_list>(
  <parameter><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMethod</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>arg3</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>arg4</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Return code from Tcl_EvalObj() */</comment>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pEval</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>zMethod</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>arg2</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>arg1</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>arg3</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>arg2</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pEval</name> <operator>=</operator> <call><name>Tcl_DuplicateObj</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pEval</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zMethod</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>arg1</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pEval</name></expr></argument>, <argument><expr><name>arg1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>arg2</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pEval</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>arg3</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pEval</name></expr></argument>, <argument><expr><name>arg3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>arg4</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pEval</name></expr></argument>, <argument><expr><name>arg4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pEval</name></expr></argument>, <argument><expr><name>TCL_EVAL_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>TCL_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_BackgroundError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Close an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFile</name> <modifier>*</modifier></type><name>pTestfile</name> <init>= <expr><operator>(</operator><name>TestvfsFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><name><name>pTestfile</name><operator>-&gt;</operator><name>pFd</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_CLOSE_MASK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xClose"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3OsClose</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pFd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTestfile</name><operator>-&gt;</operator><name>pFd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_READ_MASK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xRead"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_READ_MASK</name> <operator>&amp;&amp;</operator> <call><name>tvfsInjectIoerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_WRITE_MASK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xWrite"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>, 
        <argument><expr><call><name>Tcl_NewWideIntObj</name><argument_list>(<argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>tvfsInjectFullerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_FULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_WRITE_MASK</name> <operator>&amp;&amp;</operator> <call><name>tvfsInjectIoerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsWrite</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_TRUNCATE_MASK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xTruncate"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsTruncate</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_SYNC_MASK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>( <expr><name>flags</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>SQLITE_SYNC_NORMAL</name></expr>:</case>
        <expr_stmt><expr><name>zFlags</name> <operator>=</operator> <literal type="string">"normal"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SQLITE_SYNC_FULL</name></expr>:</case>
        <expr_stmt><expr><name>zFlags</name> <operator>=</operator> <literal type="string">"full"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SQLITE_SYNC_NORMAL</name><operator>|</operator><name>SQLITE_SYNC_DATAONLY</name></expr>:</case>
        <expr_stmt><expr><name>zFlags</name> <operator>=</operator> <literal type="string">"normal|dataonly"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SQLITE_SYNC_FULL</name><operator>|</operator><name>SQLITE_SYNC_DATAONLY</name></expr>:</case>
        <expr_stmt><expr><name>zFlags</name> <operator>=</operator> <literal type="string">"full|dataonly"</literal></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xSync"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>,
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zFlags</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>tvfsInjectFullerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_FULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsSync</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsFileSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Lock an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_LOCK_MASK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zLock</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLock</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zLock</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xLock"</literal></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, 
                   <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zLock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsLock</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unlock an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_UNLOCK_MASK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zLock</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLock</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zLock</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xUnlock"</literal></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, 
                   <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zLock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_WRITE_MASK</name> <operator>&amp;&amp;</operator> <call><name>tvfsInjectIoerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_IOERR_UNLOCK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsUnlock</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_CKLOCK_MASK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xCheckReservedLock"</literal></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsCheckReservedLock</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** File control method. For custom operations on an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_PRAGMA</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_ERROR</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>x</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
          <while>while<condition>( <expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
          <while>while<condition>( <expr><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"filename"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_FCNTL_MASK</name><operator>)</operator></expr> )</condition><block>{<block_content>
    <struct>struct <name>Fcntl</name> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>iFnctl</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFnctl</name></decl>;</decl_stmt>
    }</block> <decl><name><name>aF</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr><name>SQLITE_FCNTL_BEGIN_ATOMIC_WRITE</name></expr>, <expr><literal type="string">"BEGIN_ATOMIC_WRITE"</literal></expr> }</block></expr>,
      <expr><block>{ <expr><name>SQLITE_FCNTL_COMMIT_ATOMIC_WRITE</name></expr>, <expr><literal type="string">"COMMIT_ATOMIC_WRITE"</literal></expr> }</block></expr>,
      <expr><block>{ <expr><name>SQLITE_FCNTL_ZIPVFS</name></expr>, <expr><literal type="string">"ZIPVFS"</literal></expr> }</block></expr>,
    }</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aF</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name><name>aF</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iFnctl</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aF</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xFileControl"</literal></expr></argument>, 
          <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, 
          <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>aF</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zFnctl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><ternary><condition><expr><name>rc</name><operator>&lt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>SQLITE_OK</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iSectorsize</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>iSectorsize</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsSectorSize</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an tvfs-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iDevchar</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>iDevchar</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsDeviceCharacteristics</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open an tvfs file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFile</name> <modifier>*</modifier></type><name>pTestfile</name> <init>= <expr><operator>(</operator><name>TestvfsFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pFd</name> <operator>=</operator> <operator>(</operator><name>TestvfsFd</name> <operator>*</operator><operator>)</operator><call><name>ckalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestvfsFd</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>szOsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pFd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestvfsFd</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>szOsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name> <operator>=</operator> <name>zName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name></name> <operator>=</operator> <name>pVfs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_file</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pFd</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pTestfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestvfsFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTestfile</name><operator>-&gt;</operator><name>pFd</name></name> <operator>=</operator> <name>pFd</name></expr>;</expr_stmt>

  <comment type="block">/* Evaluate the Tcl script: 
  **
  **   SCRIPT xOpen FILENAME KEY-VALUE-ARGS
  **
  ** If the script returns an SQLite error code other than SQLITE_OK, an
  ** error is returned to the caller. If it returns SQLITE_OK, the new
  ** connection is named "anon". Otherwise, the value returned by the
  ** script is used as the connection name.
  */</comment>
  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_OPEN_MASK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pArg</name> <init>= <expr><call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>flags</name><operator>&amp;</operator><name>SQLITE_OPEN_MAIN_DB</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>&amp;</operator><name><name>zName</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <while>while<condition>( <expr><operator>*</operator><name>z</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xOpen"</literal></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>pId</name> <operator>=</operator> <call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_OPEN_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator>  <call><name>tvfsInjectIoerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>tvfsInjectCantopenerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_CANTOPEN</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>tvfsInjectFullerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_FULL</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pId</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pId</name> <operator>=</operator> <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><literal type="string">"anon"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name> <operator>=</operator> <name>pId</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsOpen</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_io_methods</name> <modifier>*</modifier></type><name>pMethods</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pVfs</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_io_methods</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>sqlite3_io_methods</name></expr></argument>, <argument><expr><name>xShmMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>pMethods</name> <operator>=</operator> <operator>(</operator><name>sqlite3_io_methods</name> <operator>*</operator><operator>)</operator><call><name>ckalloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pMethods</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tvfs_io_methods</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMethods</name><operator>-&gt;</operator><name>iVersion</name></name> <operator>=</operator> <name><name>pFd</name><operator>-&gt;</operator><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>iVersion</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pMethods</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;</operator><name><name>pVfs</name><operator>-&gt;</operator><name>iVersion</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pMethods</name><operator>-&gt;</operator><name>iVersion</name></name> <operator>=</operator> <name><name>pVfs</name><operator>-&gt;</operator><name>iVersion</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pVfs</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name><operator>)</operator><operator>-&gt;</operator><name>isNoshm</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pMethods</name><operator>-&gt;</operator><name>xShmUnmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMethods</name><operator>-&gt;</operator><name>xShmLock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMethods</name><operator>-&gt;</operator><name>xShmBarrier</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMethods</name><operator>-&gt;</operator><name>xShmMap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <name>pMethods</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete the file located at zPath. If the dirSync argument is true,
** ensure the file-system modifications are synced to disk before
** returning.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_DELETE_MASK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xDelete"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsDelete</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_ACCESS_MASK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zArg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>flags</name><operator>==</operator><name>SQLITE_ACCESS_EXISTS</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zArg</name> <operator>=</operator> <literal type="string">"SQLITE_ACCESS_EXISTS"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>flags</name><operator>==</operator><name>SQLITE_ACCESS_READWRITE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zArg</name> <operator>=</operator> <literal type="string">"SQLITE_ACCESS_READWRITE"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>flags</name><operator>==</operator><name>SQLITE_ACCESS_READ</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zArg</name> <operator>=</operator> <literal type="string">"SQLITE_ACCESS_READ"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xAccess"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>TCL_OK</name><operator>==</operator><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>SQLITE_OK</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsAccess</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (DEVSYM_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_FULLPATHNAME_MASK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xFullPathname"</literal></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3OsFullPathname</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tvfsDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsDlOpen</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate the buffer zErrMsg (size nByte bytes) with a human readable
** utf-8 string describing the most recent error encountered associated 
** with dynamic libraries.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tvfsDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3OsDlError</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to the symbol zSymbol in the dynamic library pHandle.
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*tvfsDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator><block>{
  <return>return <expr><call><name>sqlite3OsDlSym</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>

<comment type="block">/*
** Close the dynamic library handle pHandle.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tvfsDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3OsDlClose</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOAD_EXTENSION */</comment>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsRandomness</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3OsSleep</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xCurrentTime</name><argument_list>(<argument><expr><call><name>PARENTVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsShmOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>TestvfsBuffer</name> <modifier>*</modifier></type><name>pBuffer</name></decl>;</decl_stmt>         <comment type="block">/* Buffer to open connection to */</comment>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name></decl>;</decl_stmt>                 <comment type="block">/* The testvfs file structure */</comment>

  <expr_stmt><expr><name>pFd</name> <operator>=</operator> <call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>isFullshm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name> <operator>&amp;&amp;</operator> <name><name>pFd</name><operator>-&gt;</operator><name>pShm</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pFd</name><operator>-&gt;</operator><name>pNext</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Evaluate the Tcl script: 
  **
  **   SCRIPT xShmOpen FILENAME
  */</comment>
  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_SHMOPEN_MASK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xShmOpen"</literal></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_SHMOPEN_MASK</name> <operator>&amp;&amp;</operator> <call><name>tvfsInjectIoerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_IOERR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Search for a TestvfsBuffer. Create a new one if required. */</comment>
  <for>for<control>(<init><expr><name>pBuffer</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pBuffer</name></name></expr>;</init> <condition><expr><name>pBuffer</name></expr>;</condition> <incr><expr><name>pBuffer</name><operator>=</operator><name><name>pBuffer</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>zFile</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pBuffer</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>szName</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestvfsBuffer</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>szName</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pBuffer</name> <operator>=</operator> <operator>(</operator><name>TestvfsBuffer</name> <operator>*</operator><operator>)</operator><call><name>ckalloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>zFile</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBuffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>zFile</name></name></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>zFilename</name></name></expr></argument>, <argument><expr><name>szName</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pBuffer</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pBuffer</name></name> <operator>=</operator> <name>pBuffer</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Connect the TestvfsBuffer to the new TestvfsShm handle and return. */</comment>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pBuffer</name><operator>-&gt;</operator><name>pFile</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>pFile</name></name> <operator>=</operator> <name>pFd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name></name> <operator>=</operator> <name>pBuffer</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tvfsAllocPage</name><parameter_list>(<parameter><decl><type><name>TestvfsBuffer</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iPage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgsz</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iPage</name><operator>&lt;</operator><name>TESTVFS_MAX_PAGES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><call><name>ckalloc</name><argument_list>(<argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pgsz</name></name> <operator>=</operator> <name>pgsz</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsShmMap</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,            <comment type="block">/* Handle open on database file */</comment>
  <parameter><decl><type><name>int</name></type> <name>iPage</name></decl></parameter>,                      <comment type="block">/* Page to retrieve */</comment>
  <parameter><decl><type><name>int</name></type> <name>pgsz</name></decl></parameter>,                       <comment type="block">/* Size of pages */</comment>
  <parameter><decl><type><name>int</name></type> <name>isWrite</name></decl></parameter>,                    <comment type="block">/* True to extend file if necessary */</comment>
  <parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>              <comment type="block">/* OUT: Mapped memory */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>isFullshm</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name> <init>= <expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmMap</name></name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr><name>iPage</name></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>, <argument><expr><name>isWrite</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tvfsShmOpen</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_SHMMAP_MASK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pArg</name> <init>= <expr><call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>iPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>isWrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xShmMap"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name><operator>-&gt;</operator><name>zFile</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_SHMMAP_MASK</name> <operator>&amp;&amp;</operator> <call><name>tvfsInjectIoerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>isWrite</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tvfsAllocPage</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name></name></expr></argument>, <argument><expr><name>iPage</name></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>SQLITE_READONLY</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>void</name> <specifier>volatile</specifier> <operator>*</operator><operator>)</operator><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>iPage</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsShmLock</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nLock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zLock</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>isFullshm</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name> <init>= <expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmLock</name></name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_SHMLOCK_MASK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>zLock</name></expr></argument>, <argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nLock</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SHM_LOCK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zLock</name><index>[<expr><name>nLock</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zLock</name><index>[<expr><name>nLock</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" unlock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>nLock</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zLock</name><index>[<expr><name>nLock</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SHM_SHARED</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zLock</name><index>[<expr><name>nLock</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" shared"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zLock</name><index>[<expr><name>nLock</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" exclusive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xShmLock"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name><operator>-&gt;</operator><name>zFile</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>,
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zLock</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_SHMLOCK_MASK</name> <operator>&amp;&amp;</operator> <call><name>tvfsInjectIoerr</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>isLock</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SHM_LOCK</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>isExcl</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>SQLITE_SHM_EXCLUSIVE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u32</name></type> <name>mask</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>n</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>ofst</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>isLock</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>p2</name><operator>=</operator><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name><operator>-&gt;</operator><name>pFile</name></name></expr>;</init> <condition><expr><name>p2</name></expr>;</condition> <incr><expr><name>p2</name><operator>=</operator><name><name>p2</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>p2</name><operator>==</operator><name>pFd</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p2</name><operator>-&gt;</operator><name>excllock</name></name><operator>&amp;</operator><name>mask</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>isExcl</name> <operator>&amp;&amp;</operator> <name><name>p2</name><operator>-&gt;</operator><name>sharedlock</name></name><operator>&amp;</operator><name>mask</name><operator>)</operator></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_BUSY</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>isExcl</name></expr> )</condition><block type="pseudo"><block_content>  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>excllock</name></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><name>isExcl</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>sharedlock</name></name> <operator>|=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>isExcl</name></expr> )</condition><block type="pseudo"><block_content>  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>excllock</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>isExcl</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>sharedlock</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>mask</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tvfsShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_SHMBARRIER_MASK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><ternary><condition><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name></name></expr> ?</condition><then> <expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name><operator>-&gt;</operator><name>zFile</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xShmBarrier"</literal></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>isFullshm</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name> <init>= <expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmBarrier</name></name><argument_list>(<argument><expr><name>pReal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsShmUnmap</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>deleteFlag</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pFd</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsBuffer</name> <modifier>*</modifier></type><name>pBuffer</name> <init>= <expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFd</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>isFullshm</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pReal</name> <init>= <expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>pReal</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmUnmap</name></name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr><name>deleteFlag</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pBuffer</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name> <operator>&amp;&amp;</operator> <name><name>pFd</name><operator>-&gt;</operator><name>pShm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>mask</name></name><operator>&amp;</operator><name>TESTVFS_SHMCLOSE_MASK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tvfsExecTcl</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"xShmUnmap"</literal></expr></argument>, 
        <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name><operator>-&gt;</operator><name>zFile</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShmId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tvfsResultCode</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>ppFd</name><operator>=</operator><operator>&amp;</operator><name><name>pBuffer</name><operator>-&gt;</operator><name>pFile</name></name></expr>;</init> <condition><expr><operator>*</operator><name>ppFd</name><operator>!=</operator><name>pFd</name></expr>;</condition> <incr><expr><name>ppFd</name><operator>=</operator><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>ppFd</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>ppFd</name><operator>)</operator><operator>==</operator><name>pFd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppFd</name> <operator>=</operator> <name><name>pFd</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pBuffer</name><operator>-&gt;</operator><name>pFile</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestvfsBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pBuffer</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name><operator>!=</operator><name>pBuffer</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pBuffer</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFd</name><operator>-&gt;</operator><name>pShm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsFetch</name><parameter_list>(
    <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
    <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, 
    <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
    <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsFetch</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tvfsUnfetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestvfsFd</name> <modifier>*</modifier></type><name>pFd</name> <init>= <expr><call><name>tvfsGetFd</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsUnfetch</name><argument_list>(<argument><expr><name><name>pFd</name><operator>-&gt;</operator><name>pReal</name></name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>SQLITE_TCLAPI</name></type> <name>testvfs_obj_cmd</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>cd</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name>cd</name></expr></init></decl>;</decl_stmt>

  <enum>enum <name>DB_enum</name> <block>{ 
    <decl><name>CMD_SHM</name></decl>, <decl><name>CMD_DELETE</name></decl>, <decl><name>CMD_FILTER</name></decl>, <decl><name>CMD_IOERR</name></decl>, <decl><name>CMD_SCRIPT</name></decl>, 
    <decl><name>CMD_DEVCHAR</name></decl>, <decl><name>CMD_SECTORSIZE</name></decl>, <decl><name>CMD_FULLERR</name></decl>, <decl><name>CMD_CANTOPENERR</name></decl>
  }</block>;</enum>
  <struct>struct <name>TestvfsSubcmd</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>enum</name> <name>DB_enum</name></name></type> <name>eCmd</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aSubcmd</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"shm"</literal></expr>,         <expr><name>CMD_SHM</name></expr>         }</block></expr>,
    <expr><block>{ <expr><literal type="string">"delete"</literal></expr>,      <expr><name>CMD_DELETE</name></expr>      }</block></expr>,
    <expr><block>{ <expr><literal type="string">"filter"</literal></expr>,      <expr><name>CMD_FILTER</name></expr>      }</block></expr>,
    <expr><block>{ <expr><literal type="string">"ioerr"</literal></expr>,       <expr><name>CMD_IOERR</name></expr>       }</block></expr>,
    <expr><block>{ <expr><literal type="string">"fullerr"</literal></expr>,     <expr><name>CMD_FULLERR</name></expr>     }</block></expr>,
    <expr><block>{ <expr><literal type="string">"cantopenerr"</literal></expr>, <expr><name>CMD_CANTOPENERR</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"script"</literal></expr>,      <expr><name>CMD_SCRIPT</name></expr>      }</block></expr>,
    <expr><block>{ <expr><literal type="string">"devchar"</literal></expr>,     <expr><name>CMD_DEVCHAR</name></expr>     }</block></expr>,
    <expr><block>{ <expr><literal type="string">"sectorsize"</literal></expr>,  <expr><name>CMD_SECTORSIZE</name></expr>  }</block></expr>,
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"SUBCOMMAND ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIndexFromObjStruct</name><argument_list>(
        <argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>aSubcmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aSubcmd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"subcommand"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr> 
  )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch<condition>( <expr><name><name>aSubcmd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eCmd</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>CMD_SHM</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pObj</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TestvfsBuffer</name> <modifier>*</modifier></type><name>pBuffer</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>objc</name><operator>!=</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"FILE ?VALUE?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>ckalloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pParent</name><operator>-&gt;</operator><name>mxPathname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pParent</name><operator>-&gt;</operator><name>xFullPathname</name></name><argument_list>(
          <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pParent</name></name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, 
          <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pParent</name><operator>-&gt;</operator><name>mxPathname</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"failed to get full path: "</literal></expr></argument>,
                         <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>pBuffer</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pBuffer</name></name></expr>;</init> <condition><expr><name>pBuffer</name></expr>;</condition> <incr><expr><name>pBuffer</name><operator>=</operator><name><name>pBuffer</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>zFile</name></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pBuffer</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"no such file: "</literal></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pgsz</name> <init>= <expr><name><name>pBuffer</name><operator>-&gt;</operator><name>pgsz</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>pgsz</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pgsz</name> <operator>=</operator> <literal type="number">65536</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>*</operator><name>pgsz</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><name>pgsz</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tvfsAllocPage</name><argument_list>(<argument><expr><name>pBuffer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>n</name><operator>-</operator><name>i</name><operator>*</operator><name>pgsz</name><operator>&lt;</operator><name>pgsz</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>nByte</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name><operator>*</operator><name>pgsz</name></expr>]</index></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pObj</name> <operator>=</operator> <call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>pgsz</name> <init>= <expr><name><name>pBuffer</name><operator>-&gt;</operator><name>pgsz</name></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>pgsz</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pgsz</name> <operator>=</operator> <literal type="number">65536</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>Tcl_AppendObjToObj</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>, <argument><expr><call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr><name><name>pBuffer</name><operator>-&gt;</operator><name>aPage</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <comment type="block">/*  TESTVFS filter METHOD-LIST
    **
    **     Activate special processing for those methods contained in the list
    */</comment>
    <case>case <expr><name>CMD_FILTER</name></expr>:</case> <block>{<block_content>
      <struct><specifier>static</specifier> struct <name>VfsMethod</name> <block>{
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>
      }</block> <decl><name><name>vfsmethod</name> <index>[]</index></name> <init>= <expr><block>{
        <expr><block>{ <expr><literal type="string">"xShmOpen"</literal></expr>,           <expr><name>TESTVFS_SHMOPEN_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xShmLock"</literal></expr>,           <expr><name>TESTVFS_SHMLOCK_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xShmBarrier"</literal></expr>,        <expr><name>TESTVFS_SHMBARRIER_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xShmUnmap"</literal></expr>,          <expr><name>TESTVFS_SHMCLOSE_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xShmMap"</literal></expr>,            <expr><name>TESTVFS_SHMMAP_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xSync"</literal></expr>,              <expr><name>TESTVFS_SYNC_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xDelete"</literal></expr>,            <expr><name>TESTVFS_DELETE_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xWrite"</literal></expr>,             <expr><name>TESTVFS_WRITE_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xRead"</literal></expr>,              <expr><name>TESTVFS_READ_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xTruncate"</literal></expr>,          <expr><name>TESTVFS_TRUNCATE_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xOpen"</literal></expr>,              <expr><name>TESTVFS_OPEN_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xClose"</literal></expr>,             <expr><name>TESTVFS_CLOSE_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xAccess"</literal></expr>,            <expr><name>TESTVFS_ACCESS_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xFullPathname"</literal></expr>,      <expr><name>TESTVFS_FULLPATHNAME_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xUnlock"</literal></expr>,            <expr><name>TESTVFS_UNLOCK_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xLock"</literal></expr>,              <expr><name>TESTVFS_LOCK_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xCheckReservedLock"</literal></expr>, <expr><name>TESTVFS_CKLOCK_MASK</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"xFileControl"</literal></expr>,       <expr><name>TESTVFS_FCNTL_MASK</name></expr> }</block></expr>,
      }</block></expr></init></decl>;</struct>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier></type><name>apElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nElem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"LIST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_ListObjGetElements</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nElem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>apElem</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nElem</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iMethod</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zElem</name> <init>= <expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>apElem</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>iMethod</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iMethod</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>vfsmethod</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iMethod</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zElem</name></expr></argument>, <argument><expr><name><name>vfsmethod</name><index>[<expr><name>iMethod</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>vfsmethod</name><index>[<expr><name>iMethod</name></expr>]</index></name><operator>.</operator><name>mask</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>( <expr><name>iMethod</name><operator>==</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>vfsmethod</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"unknown method: "</literal></expr></argument>, <argument><expr><name>zElem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TCL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <comment type="block">/*
    **  TESTVFS script ?SCRIPT?
    **
    **  Query or set the script to be run when filtered VFS events
    **  occur.
    */</comment>
    <case>case <expr><name>CMD_SCRIPT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name> <operator>=</operator> <call><name>Tcl_DuplicateObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?SCRIPT?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <break>break;</break>
    </block_content>}</block>

    <comment type="block">/*
    ** TESTVFS ioerr ?IFAIL PERSIST?
    **
    **   Where IFAIL is an integer and PERSIST is boolean.
    */</comment>
    <case>case <expr><name>CMD_CANTOPENERR</name></expr>:</case>
    <case>case <expr><name>CMD_IOERR</name></expr>:</case>
    <case>case <expr><name>CMD_FULLERR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>TestFaultInject</name> <modifier>*</modifier></type><name>pTest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iRet</name></decl>;</decl_stmt>

      <switch>switch<condition>( <expr><name><name>aSubcmd</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eCmd</name></expr> )</condition><block>{<block_content>
        <case>case <expr><name>CMD_IOERR</name></expr>:</case> <expr_stmt><expr><name>pTest</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ioerr_err</name></name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>CMD_FULLERR</name></expr>:</case> <expr_stmt><expr><name>pTest</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>full_err</name></name></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>CMD_CANTOPENERR</name></expr>:</case> <expr_stmt><expr><name>pTest</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>cantopen_err</name></name></expr>;</expr_stmt> <break>break;</break>
        <default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></switch>
      <expr_stmt><expr><name>iRet</name> <operator>=</operator> <name><name>pTest</name><operator>-&gt;</operator><name>nFail</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTest</name><operator>-&gt;</operator><name>nFail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTest</name><operator>-&gt;</operator><name>eFault</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTest</name><operator>-&gt;</operator><name>iCnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iCnt</name></decl>, <decl><type ref="prev"/><name>iPersist</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>TCL_OK</name><operator>!=</operator><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCnt</name></expr></argument>)</argument_list></call>
         <operator>||</operator> <name>TCL_OK</name><operator>!=</operator><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPersist</name></expr></argument>)</argument_list></call></expr>
        )</condition><block>{<block_content>
          <return>return <expr><name>TCL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>pTest</name><operator>-&gt;</operator><name>eFault</name></name> <operator>=</operator> <ternary><condition><expr><name>iPersist</name></expr>?</condition><then><expr><name>FAULT_INJECT_PERSISTENT</name></expr></then><else>:<expr><name>FAULT_INJECT_TRANSIENT</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTest</name><operator>-&gt;</operator><name>iCnt</name></name> <operator>=</operator> <name>iCnt</name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?CNT PERSIST?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>iRet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>CMD_DELETE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>Tcl_DeleteCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>CMD_DEVCHAR</name></expr>:</case> <block>{<block_content>
      <struct>struct <name>DeviceFlag</name> <block>{
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iValue</name></decl>;</decl_stmt>
      }</block> <decl><name><name>aFlag</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{ <expr><literal type="string">"default"</literal></expr>,               <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"atomic"</literal></expr>,                <expr><name>SQLITE_IOCAP_ATOMIC</name></expr>                }</block></expr>,
        <expr><block>{ <expr><literal type="string">"atomic512"</literal></expr>,             <expr><name>SQLITE_IOCAP_ATOMIC512</name></expr>             }</block></expr>,
        <expr><block>{ <expr><literal type="string">"atomic1k"</literal></expr>,              <expr><name>SQLITE_IOCAP_ATOMIC1K</name></expr>              }</block></expr>,
        <expr><block>{ <expr><literal type="string">"atomic2k"</literal></expr>,              <expr><name>SQLITE_IOCAP_ATOMIC2K</name></expr>              }</block></expr>,
        <expr><block>{ <expr><literal type="string">"atomic4k"</literal></expr>,              <expr><name>SQLITE_IOCAP_ATOMIC4K</name></expr>              }</block></expr>,
        <expr><block>{ <expr><literal type="string">"atomic8k"</literal></expr>,              <expr><name>SQLITE_IOCAP_ATOMIC8K</name></expr>              }</block></expr>,
        <expr><block>{ <expr><literal type="string">"atomic16k"</literal></expr>,             <expr><name>SQLITE_IOCAP_ATOMIC16K</name></expr>             }</block></expr>,
        <expr><block>{ <expr><literal type="string">"atomic32k"</literal></expr>,             <expr><name>SQLITE_IOCAP_ATOMIC32K</name></expr>             }</block></expr>,
        <expr><block>{ <expr><literal type="string">"atomic64k"</literal></expr>,             <expr><name>SQLITE_IOCAP_ATOMIC64K</name></expr>             }</block></expr>,
        <expr><block>{ <expr><literal type="string">"sequential"</literal></expr>,            <expr><name>SQLITE_IOCAP_SEQUENTIAL</name></expr>            }</block></expr>,
        <expr><block>{ <expr><literal type="string">"safe_append"</literal></expr>,           <expr><name>SQLITE_IOCAP_SAFE_APPEND</name></expr>           }</block></expr>,
        <expr><block>{ <expr><literal type="string">"undeletable_when_open"</literal></expr>, <expr><name>SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN</name></expr> }</block></expr>,
        <expr><block>{ <expr><literal type="string">"powersafe_overwrite"</literal></expr>,   <expr><name>SQLITE_IOCAP_POWERSAFE_OVERWRITE</name></expr>   }</block></expr>,
        <expr><block>{ <expr><literal type="string">"immutable"</literal></expr>,             <expr><name>SQLITE_IOCAP_IMMUTABLE</name></expr>             }</block></expr>,
        <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
      }</block></expr></init></decl>;</struct>
      <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier></type><name>pRet</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iFlag</name></decl>;</decl_stmt>

      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?ATTR-LIST?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><modifier>*</modifier></type><name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if<condition>( <expr><call><name>Tcl_ListObjGetElements</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nFlags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <return>return <expr><name>TCL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nFlags</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIndexFromObjStruct</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>flags</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>aFlag</name></expr></argument>, 
                <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aFlag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"flag"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>)</argument_list></call></expr> 
          )</condition><block>{<block_content>
            <return>return <expr><name>TCL_ERROR</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>aFlag</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name><name>iValue</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nFlags</name></expr></argument>&gt;</argument_list></name><literal type="number">1</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"bad flags: "</literal></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TCL_ERROR</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>iNew</name> <operator>|=</operator> <name><name>aFlag</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>iValue</name></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iDevchar</name></name> <operator>=</operator> <name>iNew</name><operator>|</operator> <literal type="number">0x10000000</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>iFlag</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iFlag</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aFlag</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aFlag</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iFlag</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iDevchar</name></name> <operator>&amp;</operator> <name><name>aFlag</name><index>[<expr><name>iFlag</name></expr>]</index></name><operator>.</operator><name>iValue</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(
              <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name><name>aFlag</name><index>[<expr><name>iFlag</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>CMD_SECTORSIZE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&gt;</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"?VALUE?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iNew</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <return>return <expr><name>TCL_ERROR</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSectorsize</name></name> <operator>=</operator> <name>iNew</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iSectorsize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>SQLITE_TCLAPI</name></type> <name>testvfs_obj_del</name><parameter_list>(<parameter><decl><type><name>ClientData</name></type> <name>cd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><name>cd</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pScript</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_vfs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Testvfs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ckfree</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Usage:  testvfs VFSNAME ?SWITCHES?
**
** Switches are:
**
**   -noshm   BOOLEAN             (True to omit shm methods. Default false)
**   -default BOOLEAN             (True to make the vfs default. Default false)
**
** This command creates two things when it is invoked: an SQLite VFS, and
** a Tcl command. Both are named VFSNAME. The VFS is installed. It is not
** installed as the default VFS.
**
** The VFS passes all file I/O calls through to the underlying VFS.
**
** Whenever the xShmMap method of the VFS
** is invoked, the SCRIPT is executed as follows:
**
**   SCRIPT xShmMap    FILENAME ID
**
** The value returned by the invocation of SCRIPT above is interpreted as
** an SQLite error code and returned to SQLite. Either a symbolic 
** "SQLITE_OK" or numeric "0" value may be returned.
**
** The contents of the shared-memory buffer associated with a given file
** may be read and set using the following command:
**
**   VFSNAME shm FILENAME ?NEWVALUE?
**
** When the xShmLock method is invoked by SQLite, the following script is
** run:
**
**   SCRIPT xShmLock    FILENAME ID LOCK
**
** where LOCK is of the form "OFFSET NBYTE lock/unlock shared/exclusive"
*/</comment>
<function><type><specifier>static</specifier> <name>int</name> <name>SQLITE_TCLAPI</name></type> <name>testvfs_cmd</name><parameter_list>(
  <parameter><decl><type><name>ClientData</name></type> <name>cd</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name></type> <name>tvfs_vfs</name> <init>= <expr><block>{
    <expr><literal type="number">3</literal></expr>,                            <comment type="block">/* iVersion */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* szOsFile */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* mxPathname */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pNext */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* zName */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pAppData */</comment>
    <expr><name>tvfsOpen</name></expr>,                     <comment type="block">/* xOpen */</comment>
    <expr><name>tvfsDelete</name></expr>,                   <comment type="block">/* xDelete */</comment>
    <expr><name>tvfsAccess</name></expr>,                   <comment type="block">/* xAccess */</comment>
    <expr><name>tvfsFullPathname</name></expr>,             <comment type="block">/* xFullPathname */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
    <expr><name>tvfsDlOpen</name></expr>,                   <comment type="block">/* xDlOpen */</comment>
    <expr><name>tvfsDlError</name></expr>,                  <comment type="block">/* xDlError */</comment>
    <expr><name>tvfsDlSym</name></expr>,                    <comment type="block">/* xDlSym */</comment>
    <expr><name>tvfsDlClose</name></expr>,                  <comment type="block">/* xDlClose */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xDlOpen */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xDlError */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xDlSym */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xDlClose */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOAD_EXTENSION */</comment>
    <expr><name>tvfsRandomness</name></expr>,               <comment type="block">/* xRandomness */</comment>
    <expr><name>tvfsSleep</name></expr>,                    <comment type="block">/* xSleep */</comment>
    <expr><name>tvfsCurrentTime</name></expr>,              <comment type="block">/* xCurrentTime */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xGetLastError */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xCurrentTimeInt64 */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xSetSystemCall */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xGetSystemCall */</comment>
    <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* xNextSystemCall */</comment>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Testvfs</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>                     <comment type="block">/* New object */</comment>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>              <comment type="block">/* New VFS */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zVfs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                      <comment type="block">/* Bytes of space to allocate at p */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isNoshm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                <comment type="block">/* True if -noshm is passed */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isFullshm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* True if -fullshm is passed */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isDefault</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* True if -default is passed */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szOsFile</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Value passed to -szosfile */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>mxPathname</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Value passed to -mxpathname */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iVersion</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Value passed to -iversion */</comment>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>&lt;</operator><literal type="number">2</literal> <operator>||</operator> <literal type="number">0</literal><operator>!=</operator><operator>(</operator><name>objc</name><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>bad_args</name>;</goto></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>objc</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nSwitch</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSwitch</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>zSwitch</name> <operator>=</operator> <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nSwitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <if_stmt><if>if<condition>( <expr><name>nSwitch</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-noshm"</literal></expr></argument>, <argument><expr><name>zSwitch</name></expr></argument>, <argument><expr><name>nSwitch</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNoshm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>isNoshm</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>isFullshm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>nSwitch</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-default"</literal></expr></argument>, <argument><expr><name>zSwitch</name></expr></argument>, <argument><expr><name>nSwitch</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isDefault</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>nSwitch</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-szosfile"</literal></expr></argument>, <argument><expr><name>zSwitch</name></expr></argument>, <argument><expr><name>nSwitch</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>szOsFile</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>nSwitch</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-mxpathname"</literal></expr></argument>, <argument><expr><name>zSwitch</name></expr></argument>, <argument><expr><name>nSwitch</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mxPathname</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>nSwitch</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-iversion"</literal></expr></argument>, <argument><expr><name>zSwitch</name></expr></argument>, <argument><expr><name>nSwitch</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVersion</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if<condition>( <expr><name>nSwitch</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"-fullshm"</literal></expr></argument>, <argument><expr><name>zSwitch</name></expr></argument>, <argument><expr><name>nSwitch</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isFullshm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>isFullshm</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>isNoshm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else<block>{<block_content>
      <goto>goto <name>bad_args</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>szOsFile</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>TestvfsFile</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>szOsFile</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TestvfsFile</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zVfs</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Testvfs</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zVfs</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Testvfs</name> <operator>*</operator><operator>)</operator><call><name>ckalloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iDevchar</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iSectorsize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="block">/* Create the new object command before querying SQLite for a default VFS
  ** to use for 'real' IO operations. This is because creating the new VFS
  ** may delete an existing [testvfs] VFS of the same name. If such a VFS
  ** is currently the default, the new [testvfs] may end up calling the 
  ** methods of a deleted object.
  */</comment>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zVfs</name></expr></argument>, <argument><expr><name>testvfs_obj_cmd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>testvfs_obj_del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pParent</name></name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>interp</name></name> <operator>=</operator> <name>interp</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zVfs</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>zVfs</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pVfs</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vfs</name> <operator>*</operator><operator>)</operator><call><name>ckalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_vfs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tvfs_vfs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_vfs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVfs</name><operator>-&gt;</operator><name>pAppData</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVfs</name><operator>-&gt;</operator><name>iVersion</name></name> <operator>=</operator> <name>iVersion</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVfs</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVfs</name><operator>-&gt;</operator><name>mxPathname</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pParent</name><operator>-&gt;</operator><name>mxPathname</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>mxPathname</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mxPathname</name><operator>&lt;</operator><name><name>pVfs</name><operator>-&gt;</operator><name>mxPathname</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pVfs</name><operator>-&gt;</operator><name>mxPathname</name></name> <operator>=</operator> <name>mxPathname</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pVfs</name><operator>-&gt;</operator><name>szOsFile</name></name> <operator>=</operator> <name>szOsFile</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pVfs</name></name> <operator>=</operator> <name>pVfs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isNoshm</name></name> <operator>=</operator> <name>isNoshm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isFullshm</name></name> <operator>=</operator> <name>isFullshm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>mask</name></name> <operator>=</operator> <name>TESTVFS_ALL_MASK</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>isDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>

 <label><name>bad_args</name>:</label>
  <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"VFSNAME ?-noshm BOOL? ?-fullshm BOOL? ?-default BOOL? ?-mxpathname INT? ?-szosfile INT? ?-iversion INT?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>getDbPointer</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zA</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDb</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlite3ErrName</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** tclcmd: vfs_shmlock DB DBNAME (shared|exclusive) (lock|unlock) OFFSET N
*/</comment>
<function><type><specifier>static</specifier> <name>int</name> <name>SQLITE_TCLAPI</name></type> <name>test_vfs_shmlock</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>clientData</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azArg1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"shared"</literal></expr>, <expr><literal type="string">"exclusive"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azArg2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"lock"</literal></expr>, <expr><literal type="string">"unlock"</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbname</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iArg1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iArg2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFd</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">7</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, 
        <argument><expr><literal type="string">"DB DBNAME (shared|exclusive) (lock|unlock) OFFSET N"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zDbname</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call> 
   <operator>||</operator> <call><name>Tcl_GetIndexFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>azArg1</name></expr></argument>, <argument><expr><literal type="string">"ARG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iArg1</name></expr></argument>)</argument_list></call> 
   <operator>||</operator> <call><name>Tcl_GetIndexFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>azArg2</name></expr></argument>, <argument><expr><literal type="string">"ARG"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iArg2</name></expr></argument>)</argument_list></call> 
   <operator>||</operator> <call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOffset</name></expr></argument>)</argument_list></call>
   <operator>||</operator> <call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>
  )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDbname</name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_FILE_POINTER</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pFd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pFd</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pFd</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmLock</name></name><argument_list>(<argument><expr><name>pFd</name></expr></argument>, <argument><expr><name>iOffset</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, 
      <argument><expr><operator>(</operator><ternary><condition><expr><name>iArg1</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>SQLITE_SHM_SHARED</name></expr> </then><else>: <expr><name>SQLITE_SHM_EXCLUSIVE</name></expr></else></ternary><operator>)</operator>
    <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>iArg2</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>SQLITE_SHM_LOCK</name></expr> </then><else>: <expr><name>SQLITE_SHM_UNLOCK</name></expr></else></ternary><operator>)</operator></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><call><name>sqlite3ErrName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>SQLITE_TCLAPI</name></type> <name>test_vfs_set_readmark</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>clientData</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbname</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSlot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iVal</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier></type><name>pShm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name> <modifier>*</modifier></type><name>aShm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>objc</name><operator>!=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"DB DBNAME SLOT ?VALUE?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zDbname</name> <operator>=</operator> <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call> 
   <operator>||</operator> <call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSlot</name></expr></argument>)</argument_list></call>
   <operator>||</operator> <operator>(</operator><name>objc</name><operator>==</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
  )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDbname</name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_FILE_POINTER</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pFd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pFd</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pFd</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmMap</name></name><argument_list>(<argument><expr><name>pFd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><call><name>sqlite3ErrName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pShm</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"*-shm is not yet mapped"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>aShm</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>*</operator><operator>)</operator><name>pShm</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <literal type="number">12</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>iSlot</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>==</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>aShm</name><index>[<expr><name>iOff</name></expr>]</index></name> <operator>=</operator> <name>iVal</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name><name>aShm</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Sqlitetestvfs_Init</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"testvfs"</literal></expr></argument>, <argument><expr><name>testvfs_cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"vfs_shmlock"</literal></expr></argument>, <argument><expr><name>test_vfs_shmlock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"vfs_set_readmark"</literal></expr></argument>, <argument><expr><name>test_vfs_set_readmark</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
