<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/fault.c"><comment type="block">/*
** 2008 Jan 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains code to support the concept of "benign" 
** malloc failures (when the xMalloc() or xRealloc() method of the
** sqlite3_mem_methods structure fails to allocate a block of memory
** and returns 0). 
**
** Most malloc failures are non-benign. After they occur, SQLite
** abandons the current operation and returns an error code (usually
** SQLITE_NOMEM) to the user. However, sometimes a fault is not necessarily
** fatal. For example, if a malloc fails while resizing a hash table, this 
** is completely recoverable simply by not carrying out the resize. The 
** hash table will continue to function normally.  So a malloc failure 
** during a hash table resize is a benign fault.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_UNTESTABLE</name></cpp:ifndef>

<comment type="block">/*
** Global variables.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>BenignMallocHooks</name></name></type> <name>BenignMallocHooks</name>;</typedef>
<expr_stmt><expr><specifier>static</specifier> <name>SQLITE_WSD</name> struct <name>BenignMallocHooks</name> <block>{
  <expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>xBenignBegin</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
  <expr><call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><name>xBenignEnd</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;
}</block> <name>sqlite3Hooks</name> <operator>=</operator> <block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>;</expr_stmt>

<comment type="block">/* The "wsdHooks" macro will resolve to the appropriate BenignMallocHooks
** structure.  If writable static data is unsupported on the target,
** we have to locate the state vector at run-time.  In the more common
** case where writable static data is supported, wsdHooks can refer directly
** to the "sqlite3Hooks" state vector declared above.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdHooksInit</name></cpp:macro> \
  <cpp:value>BenignMallocHooks *x = &amp;GLOBAL(BenignMallocHooks,sqlite3Hooks)</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdHooks</name></cpp:macro> <cpp:value>x[0]</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdHooksInit</name></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>wsdHooks</name></cpp:macro> <cpp:value>sqlite3Hooks</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Register hooks to call when sqlite3BeginBenignMalloc() and
** sqlite3EndBenignMalloc() are called, respectively.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3BenignMallocHooks</name><parameter_list>(
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xBenignBegin</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xBenignEnd</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>wsdHooksInit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wsdHooks</name><operator>.</operator><name>xBenignBegin</name></name> <operator>=</operator> <name>xBenignBegin</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>wsdHooks</name><operator>.</operator><name>xBenignEnd</name></name> <operator>=</operator> <name>xBenignEnd</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This (sqlite3EndBenignMalloc()) is called by SQLite code to indicate that
** subsequent malloc failures are benign. A call to sqlite3EndBenignMalloc()
** indicates that subsequent malloc failures are non-benign.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3BeginBenignMalloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>wsdHooksInit</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wsdHooks</name><operator>.</operator><name>xBenignBegin</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>wsdHooks</name><operator>.</operator><name>xBenignBegin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3EndBenignMalloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>wsdHooksInit</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>wsdHooks</name><operator>.</operator><name>xBenignEnd</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>wsdHooks</name><operator>.</operator><name>xBenignEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* #ifndef SQLITE_UNTESTABLE */</comment>
</unit>
