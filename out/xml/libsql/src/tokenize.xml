<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/src/tokenize.c"><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** An tokenizer for SQL
**
** This file contains C code that splits an SQL input string up into
** individual tokens and sends those tokens one-by-one over to the
** parser for analysis.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Character classes for tokenizing
**
** In the sqlite3GetToken() function, a switch() on aiClass[c] is implemented
** using a lookup table, whereas a switch() directly on c uses a binary search.
** The lookup table is much faster.  To maximize speed, and to ensure that
** a lookup table is used, all of the classes need to be small integers and
** all of them need to be used within the switch.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_X</name></cpp:macro>          <cpp:value>0</cpp:value></cpp:define>    <comment type="block">/* The letter 'x', or start of BLOB literal */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_KYWD0</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>    <comment type="block">/* First letter of a keyword */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_KYWD</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>    <comment type="block">/* Alphabetics or '_'.  Usable in a keyword */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_DIGIT</name></cpp:macro>      <cpp:value>3</cpp:value></cpp:define>    <comment type="block">/* Digits */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_DOLLAR</name></cpp:macro>     <cpp:value>4</cpp:value></cpp:define>    <comment type="block">/* '$' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_VARALPHA</name></cpp:macro>   <cpp:value>5</cpp:value></cpp:define>    <comment type="block">/* '@', '#', ':'.  Alphabetic SQL variables */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_VARNUM</name></cpp:macro>     <cpp:value>6</cpp:value></cpp:define>    <comment type="block">/* '?'.  Numeric SQL variables */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_SPACE</name></cpp:macro>      <cpp:value>7</cpp:value></cpp:define>    <comment type="block">/* Space characters */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_QUOTE</name></cpp:macro>      <cpp:value>8</cpp:value></cpp:define>    <comment type="block">/* '"', '\'', or '`'.  String literals, quoted ids */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_QUOTE2</name></cpp:macro>     <cpp:value>9</cpp:value></cpp:define>    <comment type="block">/* '['.   [...] style quoted ids */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PIPE</name></cpp:macro>      <cpp:value>10</cpp:value></cpp:define>    <comment type="block">/* '|'.   Bitwise OR or concatenate */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_MINUS</name></cpp:macro>     <cpp:value>11</cpp:value></cpp:define>    <comment type="block">/* '-'.  Minus or SQL-style comment */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_LT</name></cpp:macro>        <cpp:value>12</cpp:value></cpp:define>    <comment type="block">/* '&lt;'.  Part of &lt; or &lt;= or &lt;&gt; */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_GT</name></cpp:macro>        <cpp:value>13</cpp:value></cpp:define>    <comment type="block">/* '&gt;'.  Part of &gt; or &gt;= */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_EQ</name></cpp:macro>        <cpp:value>14</cpp:value></cpp:define>    <comment type="block">/* '='.  Part of = or == */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_BANG</name></cpp:macro>      <cpp:value>15</cpp:value></cpp:define>    <comment type="block">/* '!'.  Part of != */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_SLASH</name></cpp:macro>     <cpp:value>16</cpp:value></cpp:define>    <comment type="block">/* '/'.  / or c-style comment */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_LP</name></cpp:macro>        <cpp:value>17</cpp:value></cpp:define>    <comment type="block">/* '(' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_RP</name></cpp:macro>        <cpp:value>18</cpp:value></cpp:define>    <comment type="block">/* ')' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_SEMI</name></cpp:macro>      <cpp:value>19</cpp:value></cpp:define>    <comment type="block">/* ';' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PLUS</name></cpp:macro>      <cpp:value>20</cpp:value></cpp:define>    <comment type="block">/* '+' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_STAR</name></cpp:macro>      <cpp:value>21</cpp:value></cpp:define>    <comment type="block">/* '*' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PERCENT</name></cpp:macro>   <cpp:value>22</cpp:value></cpp:define>    <comment type="block">/* '%' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_COMMA</name></cpp:macro>     <cpp:value>23</cpp:value></cpp:define>    <comment type="block">/* ',' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_AND</name></cpp:macro>       <cpp:value>24</cpp:value></cpp:define>    <comment type="block">/* '&amp;' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_TILDA</name></cpp:macro>     <cpp:value>25</cpp:value></cpp:define>    <comment type="block">/* '~' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_DOT</name></cpp:macro>       <cpp:value>26</cpp:value></cpp:define>    <comment type="block">/* '.' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_ID</name></cpp:macro>        <cpp:value>27</cpp:value></cpp:define>    <comment type="block">/* unicode characters usable in IDs */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_ILLEGAL</name></cpp:macro>   <cpp:value>28</cpp:value></cpp:define>    <comment type="block">/* Illegal character */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_NUL</name></cpp:macro>       <cpp:value>29</cpp:value></cpp:define>    <comment type="block">/* 0x00 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_BOM</name></cpp:macro>       <cpp:value>30</cpp:value></cpp:define>    <comment type="block">/* First byte of UTF8 BOM:  0xEF 0xBB 0xBF */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aiClass</name><index>[]</index></name> <init>= <expr><block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ASCII</name></cpp:ifdef>
<comment type="block">/*         x0  x1  x2  x3  x4  x5  x6  x7  x8  x9  xa  xb  xc  xd  xe  xf */</comment>
<comment type="block">/* 0x */</comment>   <expr><literal type="number">29</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* 1x */</comment>   <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* 2x */</comment>    <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>,  <expr><literal type="number">8</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">16</literal></expr>,
<comment type="block">/* 3x */</comment>    <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>,  <expr><literal type="number">6</literal></expr>,
<comment type="block">/* 4x */</comment>    <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,
<comment type="block">/* 5x */</comment>    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">2</literal></expr>,
<comment type="block">/* 6x */</comment>    <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,
<comment type="block">/* 7x */</comment>    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* 8x */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,
<comment type="block">/* 9x */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,
<comment type="block">/* Ax */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,
<comment type="block">/* Bx */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,
<comment type="block">/* Cx */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,
<comment type="block">/* Dx */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,
<comment type="block">/* Ex */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">30</literal></expr>,
<comment type="block">/* Fx */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_EBCDIC</name></cpp:ifdef>
<comment type="block">/*         x0  x1  x2  x3  x4  x5  x6  x7  x8  x9  xa  xb  xc  xd  xe  xf */</comment>
<comment type="block">/* 0x */</comment>   <literal type="number">29</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* 1x */</comment>   <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* 2x */</comment>   <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* 3x */</comment>   <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* 4x */</comment>    <expr><literal type="number">7</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">10</literal></expr>,
<comment type="block">/* 5x */</comment>   <expr><literal type="number">24</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">15</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* 6x */</comment>   <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">22</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>,  <expr><literal type="number">6</literal></expr>,
<comment type="block">/* 7x */</comment>   <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">8</literal></expr>, <expr><literal type="number">14</literal></expr>,  <expr><literal type="number">8</literal></expr>,
<comment type="block">/* 8x */</comment>   <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* 9x */</comment>   <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* Ax */</comment>   <expr><literal type="number">28</literal></expr>, <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* Bx */</comment>   <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* Cx */</comment>   <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* Dx */</comment>   <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* Ex */</comment>   <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<comment type="block">/* Fx */</comment>    <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">28</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** The charMap() macro maps alphabetic characters (only) into their
** lower-case ASCII equivalent.  On ASCII machines, this is just
** an upper-to-lower case map.  On EBCDIC machines we also need
** to adjust the encoding.  The mapping is only valid for alphabetics
** which are the only characters for which this feature is used. 
**
** Used by keywordhash.h
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ASCII</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>charMap</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sqlite3UpperToLower[(unsigned char)X]</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_EBCDIC</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>charMap</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ebcdicToAscii[(unsigned char)X]</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>ebcdicToAscii</name><index>[]</index></name> <init>= <expr><block>{
<comment type="block">/* 0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 0x */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 1x */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 2x */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 3x */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 4x */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 5x */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">95</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 6x */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 7x */</comment>
   <expr><literal type="number">0</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">99</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">105</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 8x */</comment>
   <expr><literal type="number">0</literal></expr>,<expr><literal type="number">106</literal></expr>,<expr><literal type="number">107</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">110</literal></expr>,<expr><literal type="number">111</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">114</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 9x */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">118</literal></expr>,<expr><literal type="number">119</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">122</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Ax */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Bx */</comment>
   <expr><literal type="number">0</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">99</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">105</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Cx */</comment>
   <expr><literal type="number">0</literal></expr>,<expr><literal type="number">106</literal></expr>,<expr><literal type="number">107</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">110</literal></expr>,<expr><literal type="number">111</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">114</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Dx */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">118</literal></expr>,<expr><literal type="number">119</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">122</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Ex */</comment>
   <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Fx */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The sqlite3KeywordCode function looks up an identifier to determine if
** it is a keyword.  If it is a keyword, the token code of that keyword is 
** returned.  If the input is not a keyword, TK_ID is returned.
**
** The implementation of this routine was generated by a program,
** mkkeywordhash.c, located in the tool subdirectory of the distribution.
** The output of the mkkeywordhash.c program is written into a file
** named keywordhash.h and then included into this source file by
** the #include below.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"keywordhash.h"</cpp:file></cpp:include>


<comment type="block">/*
** If X is a character that can be used in an identifier then
** IdChar(X) will be true.  Otherwise it is false.
**
** For ASCII, any character with the high-order bit set is
** allowed in an identifier.  For 7-bit characters, 
** sqlite3IsIdChar[X] must be 1.
**
** For EBCDIC, the rules are more complex but have the same
** end result.
**
** Ticket #1066.  the SQL standard does not allow '$' in the
** middle of identifiers.  But many SQL implementations do. 
** SQLite will allow '$' in identifiers for compatibility.
** But the feature is undocumented.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ASCII</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdChar</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((sqlite3CtypeMap[(unsigned char)C]&amp;0x46)!=0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_EBCDIC</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>sqlite3IsEbcdicIdChar</name><index>[]</index></name> <init>= <expr><block>{
<comment type="block">/* x0 x1 x2 x3 x4 x5 x6 x7 x8 x9 xA xB xC xD xE xF */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 4x */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 5x */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 6x */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 7x */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 8x */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* 9x */</comment>
    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Ax */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Bx */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,  <comment type="block">/* Cx */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,  <comment type="block">/* Dx */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,  <comment type="block">/* Ex */</comment>
    <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Fx */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdChar</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(((c=C)&gt;=0x42 &amp;&amp; sqlite3IsEbcdicIdChar[c-0x40]))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Make the IdChar function accessible from ctime.c and alter.c */</comment>
<function><type><name>int</name></type> <name>sqlite3IsIdChar</name><parameter_list>(<parameter><decl><type><name>u8</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>IdChar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
<comment type="block">/*
** Return the id of the next token in string (*pz). Before returning, set
** (*pz) to point to the byte following the parsed token.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>getToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pz</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>*</operator><name>pz</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>                          <comment type="block">/* Token type to return */</comment>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>z</name> <operator>+=</operator> <call><name>sqlite3GetToken</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name>t</name><operator>==</operator><name>TK_SPACE</name></expr> )</condition>;</do>
  <if_stmt><if>if<condition>( <expr><name>t</name><operator>==</operator><name>TK_ID</name> 
   <operator>||</operator> <name>t</name><operator>==</operator><name>TK_STRING</name> 
   <operator>||</operator> <name>t</name><operator>==</operator><name>TK_JOIN_KW</name> 
   <operator>||</operator> <name>t</name><operator>==</operator><name>TK_WINDOW</name> 
   <operator>||</operator> <name>t</name><operator>==</operator><name>TK_OVER</name> 
   <operator>||</operator> <call><name>sqlite3ParserFallback</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>==</operator><name>TK_ID</name></expr> 
  )</condition><block>{<block_content>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>TK_ID</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pz</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The following three functions are called immediately after the tokenizer
** reads the keywords WINDOW, OVER and FILTER, respectively, to determine
** whether the token should be treated as a keyword or an SQL identifier.
** This cannot be handled by the usual lemon %fallback method, due to
** the ambiguity in some constructions. e.g.
**
**   SELECT sum(x) OVER ...
**
** In the above, "OVER" might be a keyword, or it might be an alias for the 
** sum(x) expression. If a "%fallback ID OVER" directive were added to 
** grammar, then SQLite would always treat "OVER" as an alias, making it
** impossible to call a window-function without a FILTER clause.
**
** WINDOW is treated as a keyword if:
**
**   * the following token is an identifier, or a keyword that can fallback
**     to being an identifier, and
**   * the token after than one is TK_AS.
**
** OVER is a keyword if:
**
**   * the previous token was TK_RP, and
**   * the next token is either TK_LP or an identifier.
**
** FILTER is a keyword if:
**
**   * the previous token was TK_RP, and
**   * the next token is TK_LP.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>analyzeWindowKeyword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>getToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>t</name><operator>!=</operator><name>TK_ID</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_ID</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>getToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>t</name><operator>!=</operator><name>TK_AS</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_ID</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>TK_WINDOW</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>analyzeOverKeyword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastToken</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>lastToken</name><operator>==</operator><name>TK_RP</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>getToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>t</name><operator>==</operator><name>TK_LP</name> <operator>||</operator> <name>t</name><operator>==</operator><name>TK_ID</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TK_OVER</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TK_ID</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>analyzeFilterKeyword</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lastToken</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>lastToken</name><operator>==</operator><name>TK_RP</name> <operator>&amp;&amp;</operator> <call><name>getToken</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call><operator>==</operator><name>TK_LP</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>TK_FILTER</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TK_ID</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_WINDOWFUNC */</comment>

<comment type="block">/*
** Return the length (in bytes) of the token that begins at z[0]. 
** Store the token type in *tokenType before returning.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3GetToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tokenType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>aiClass</name><index>[<expr><operator>*</operator><name>z</name></expr>]</index></name></expr> )</condition><block>{<block_content>  <comment type="block">/* Switch on the character-class of the first byte
                          ** of the token. See the comment on the CC_ defines
                          ** above. */</comment>
    <case>case <expr><name>CC_SPACE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">' '</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'\t'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'\n'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'\f'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'\r'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SPACE</name></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_MINUS</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SPACE</name></expr>;</expr_stmt>   <comment type="block">/* IMP: R-22934-25134 */</comment>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'&gt;'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_PTR</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="char">'&gt;'</literal><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_MINUS</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_LP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_LP</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_RP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_RP</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_SEMI</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SEMI</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_PLUS</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_PLUS</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_STAR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_STAR</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_SLASH</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'*'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SLASH</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator> <expr><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</init> <condition><expr><operator>(</operator><name>c</name><operator>!=</operator><literal type="char">'*'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>c</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SPACE</name></expr>;</expr_stmt>   <comment type="block">/* IMP: R-22934-25134 */</comment>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_PERCENT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_REM</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_EQ</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_EQ</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal><operator>)</operator></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_LT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>==</operator><literal type="char">'='</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_LE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'&gt;'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_NE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'&lt;'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_LSHIFT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_LT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_GT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>==</operator><literal type="char">'='</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_GE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'&gt;'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_RSHIFT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_GT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_BANG</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'='</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_NE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_PIPE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'|'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_BITOR</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_CONCAT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_COMMA</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_COMMA</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_AND</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_BITAND</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_TILDA</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_BITNOT</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_QUOTE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>delim</name> <init>= <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>delim</name><operator>==</operator><literal type="char">'`'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>delim</name><operator>==</operator><literal type="char">'\''</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>delim</name><operator>==</operator><literal type="char">'"'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><name>delim</name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>delim</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <break>break;</break>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'\''</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_STRING</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ID</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_DOT</name></expr>:</case> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FLOATING_POINT</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_DOT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* If the next character is a digit, this is a floating point
      ** number that begins with ".".  Fall thru into the next case */</comment>
      <comment type="block">/* no break */</comment> <expr_stmt><expr><name>deliberate_fall_through</name></expr></expr_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_DIGIT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'2'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'3'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'4'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'5'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'6'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'7'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'8'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'9'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_INTEGER</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_HEX_INTEGER</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'X'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>sqlite3Isxdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><call><name>sqlite3Isxdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FLOATING_POINT</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <while>while<condition>( <expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_FLOAT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'e'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
           <operator>(</operator> <call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> 
            <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'+'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
           <operator>)</operator></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <while>while<condition>( <expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_FLOAT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <while>while<condition>( <expr><call><name>IdChar</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_QUOTE2</name></expr>:</case> <block>{<block_content>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>c</name><operator>!=</operator><literal type="char">']'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <ternary><condition><expr><name>c</name><operator>==</operator><literal type="char">']'</literal></expr> ?</condition><then> <expr><name>TK_ID</name></expr> </then><else>: <expr><name>TK_ILLEGAL</name></expr></else></ternary></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_VARNUM</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_VARIABLE</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_DOLLAR</name></expr>:</case>
    <case>case <expr><name>CC_VARALPHA</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'$'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'@'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'#'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_VARIABLE</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>IdChar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TCL_VARIABLE</name></cpp:ifndef>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <do>do<block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block>while<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">')'</literal></expr> )</condition>;</do>
          <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">')'</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        </block_content>}</block></if><else>else<block>{<block_content>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_KYWD0</name></expr>:</case> <block>{<block_content>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>aiClass</name><index>[<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>&lt;=</operator><name>CC_KYWD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <if_stmt><if>if<condition>( <expr><call><name>IdChar</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <comment type="block">/* This token started out using characters that can appear in keywords,
        ** but z[i] is a character not allowed within keywords, so this must
        ** be an identifier instead */</comment>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ID</name></expr>;</expr_stmt>
      <return>return <expr><call><name>keywordCode</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>tokenType</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_X</name></expr>:</case> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_BLOB_LITERAL</name></cpp:ifndef>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'X'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'\''</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_BLOB</name></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><call><name>sqlite3Isxdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
        <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'\''</literal> <operator>||</operator> <name>i</name><operator>%</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
          <while>while<condition>( <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'\''</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <comment type="block">/* If it is not a BLOB literal, then it must be an ID, since no
      ** SQL keywords start with the letter 'x'.  Fall through */</comment>
      <comment type="block">/* no break */</comment> <expr_stmt><expr><name>deliberate_fall_through</name></expr></expr_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_KYWD</name></expr>:</case>
    <case>case <expr><name>CC_ID</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CC_BOM</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0xbb</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">0xbf</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SPACE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">3</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>CC_NUL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>
  <while>while<condition>( <expr><call><name>IdChar</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ID</name></expr>;</expr_stmt>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Run the parser on the given SQL string.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3RunParser</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                   <comment type="block">/* Number of errors encountered */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pEngine</name></decl>;</decl_stmt>                  <comment type="block">/* The LEMON-generated LALR(1) parser */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                      <comment type="block">/* Length of the next token token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>tokenType</name></decl>;</decl_stmt>                  <comment type="block">/* type of the next token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>lastTokenParsed</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* type of the previous token */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>       <comment type="block">/* The database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>mxSqlLen</name></decl>;</decl_stmt>                   <comment type="block">/* Max length of an SQL string */</comment>
  <decl_stmt><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParentParse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Outer parse context, if any */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sqlite3Parser_ENGINEALWAYSONSTACK</name></cpp:ifdef>
  <decl_stmt><decl><type><name>yyParser</name></type> <name>sEngine</name></decl>;</decl_stmt>    <comment type="block">/* Space to hold the Lemon-generated Parser object */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <macro><name>VVA_ONLY</name><argument_list>( <argument>u8 startedWithOom = db-&gt;mallocFailed</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>zSql</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>mxSqlLen</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aLimit</name><index>[<expr><name>SQLITE_LIMIT_SQL_LENGTH</name></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>nVdbeActive</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>AtomicStore</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>isInterrupted</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>zTail</name></name> <operator>=</operator> <name>zSql</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SQLITE_ParserTrace</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"parser: [[[%s]]]\n"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3ParserTrace</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"parser: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3ParserTrace</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sqlite3Parser_ENGINEALWAYSONSTACK</name></cpp:ifdef>
  <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <operator>&amp;</operator><name>sEngine</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ParserInit</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>, <argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>pEngine</name> <operator>=</operator> <call><name>sqlite3ParserAlloc</name><argument_list>(<argument><expr><name>sqlite3Malloc</name></expr></argument>, <argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pEngine</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3OomFault</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_NOMEM_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTable</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nVar</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pVList</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pParentParse</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>pParse</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pParse</name></name> <operator>=</operator> <name>pParse</name></expr>;</expr_stmt>
  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3GetToken</name><argument_list>(<argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zSql</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mxSqlLen</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>mxSqlLen</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_TOOBIG</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name><operator>++</operator></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
    <if_stmt><if>if<condition>( <expr><name>tokenType</name><operator>&gt;=</operator><name>TK_WINDOW</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>tokenType</name><operator>==</operator><name>TK_SPACE</name> <operator>||</operator> <name>tokenType</name><operator>==</operator><name>TK_OVER</name> <operator>||</operator> <name>tokenType</name><operator>==</operator><name>TK_FILTER</name>
           <operator>||</operator> <name>tokenType</name><operator>==</operator><name>TK_ILLEGAL</name> <operator>||</operator> <name>tokenType</name><operator>==</operator><name>TK_WINDOW</name></expr></argument> 
      )</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if_stmt><if>if<condition>( <expr><name>tokenType</name><operator>&gt;=</operator><name>TK_SPACE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>tokenType</name><operator>==</operator><name>TK_SPACE</name> <operator>||</operator> <name>tokenType</name><operator>==</operator><name>TK_ILLEGAL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_WINDOWFUNC */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>AtomicLoad</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>isInterrupted</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_INTERRUPT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>tokenType</name><operator>==</operator><name>TK_SPACE</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zSql</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* Upon reaching the end of input, call the parser two more times
        ** with tokens TK_SEMI and 0, in that order. */</comment>
        <if_stmt><if>if<condition>( <expr><name>lastTokenParsed</name><operator>==</operator><name>TK_SEMI</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>tokenType</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>lastTokenParsed</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>tokenType</name> <operator>=</operator> <name>TK_SEMI</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>tokenType</name><operator>==</operator><name>TK_WINDOW</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>n</name><operator>==</operator><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tokenType</name> <operator>=</operator> <call><name>analyzeWindowKeyword</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>zSql</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>tokenType</name><operator>==</operator><name>TK_OVER</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>n</name><operator>==</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tokenType</name> <operator>=</operator> <call><name>analyzeOverKeyword</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>zSql</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lastTokenParsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>tokenType</name><operator>==</operator><name>TK_FILTER</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>n</name><operator>==</operator><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tokenType</name> <operator>=</operator> <call><name>analyzeFilterKeyword</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>zSql</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lastTokenParsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_WINDOWFUNC */</comment>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>Token</name></type> <name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>x</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>zSql</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"unrecognized token: \"%T\""</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>sLastToken</name><operator>.</operator><name>z</name></name> <operator>=</operator> <name>zSql</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>sLastToken</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Parser</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>, <argument><expr><name>tokenType</name></expr></argument>, <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>sLastToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastTokenParsed</name> <operator>=</operator> <name>tokenType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zSql</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name>startedWithOom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nErr</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>YYTRACKMAXSTACKDEPTH</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlite3MallocMutex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3StatusHighwater</name><argument_list>(<argument><expr><name>SQLITE_STATUS_PARSER_STACK</name></expr></argument>,
      <argument><expr><call><name>sqlite3ParserStackPeak</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlite3MallocMutex</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* YYDEBUG */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>sqlite3Parser_ENGINEALWAYSONSTACK</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sqlite3ParserFinalize</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>sqlite3ParserFree</name><argument_list>(<argument><expr><name>pEngine</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>||</operator> <operator>(</operator><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_DONE</name><operator>)</operator></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3ErrStr</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><literal type="string">"%s in \"%s\""</literal></expr></argument>, <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>zErrMsg</name></name></expr></argument>, <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>zTail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nErr</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>zTail</name></name> <operator>=</operator> <name>zSql</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>apVtabLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTable</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>IN_SPECIAL_PARSE</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* If the pParse-&gt;declareVtab flag is set, do not delete any table 
    ** structure built up in pParse-&gt;pNewTable. The calling code (see vtab.c)
    ** will take responsibility for freeing the Table structure.
    */</comment>
    <expr_stmt><expr><call><name>sqlite3DeleteTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3DeleteTrigger</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>pVList</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3DbNNFreeNN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pVList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>pParse</name></name> <operator>=</operator> <name>pParentParse</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nErr</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pParse</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nErr</name></expr>;</return>
</block_content>}</block></while>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_NORMALIZE</name></cpp:ifdef>
<comment type="block">/*
** Insert a single space character into pStr if the current string
** ends with an identifier
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>addSpaceSeparator</name><parameter_list>(<parameter><decl><type><name>sqlite3_str</name> <modifier>*</modifier></type><name>pStr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pStr</name><operator>-&gt;</operator><name>nChar</name></name> <operator>&amp;&amp;</operator> <call><name>sqlite3IsIdChar</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>zText</name><index>[<expr><name><name>pStr</name><operator>-&gt;</operator><name>nChar</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Compute a normalization of the SQL given by zSql[0..nSql-1].  Return
** the normalization in space obtained from sqlite3DbMalloc().  Or return
** NULL if anything goes wrong or if zSql is NULL.
*/</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>sqlite3Normalize</name><parameter_list>(
  <parameter><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>pVdbe</name></decl></parameter>,       <comment type="block">/* VM being reprepared */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>   <comment type="block">/* The original SQL string */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>       <comment type="block">/* The database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>             <comment type="block">/* Next unread byte of zSql[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>             <comment type="block">/* length of current token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>tokenType</name></decl>;</decl_stmt>     <comment type="block">/* type of current token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>prevType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* Previous non-whitespace token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nParen</name></decl>;</decl_stmt>        <comment type="block">/* Number of nested levels of parentheses */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iStartIN</name></decl>;</decl_stmt>      <comment type="block">/* Start of RHS of IN operator in z[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nParenAtIN</name></decl>;</decl_stmt>    <comment type="block">/* Value of nParent at start of RHS of IN operator */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>j</name></decl>;</decl_stmt>             <comment type="block">/* Bytes of normalized SQL generated so far */</comment>
  <decl_stmt><decl><type><name>sqlite3_str</name> <modifier>*</modifier></type><name>pStr</name></decl>;</decl_stmt> <comment type="block">/* The normalized SQL string under construction */</comment>

  <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>sqlite3VdbeDb</name><argument_list>(<argument><expr><name>pVdbe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tokenType</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>nParen</name> <operator>=</operator> <name>iStartIN</name> <operator>=</operator> <name>nParenAtIN</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pStr</name> <operator>=</operator> <call><name>sqlite3_str_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pStr</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* sqlite3_str_new() never returns NULL */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>pStr</name><operator>-&gt;</operator><name>accError</name></name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>n</name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>tokenType</name><operator>!=</operator><name>TK_SPACE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>prevType</name> <operator>=</operator> <name>tokenType</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3GetToken</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zSql</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name>n</name><operator>&lt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <switch>switch<condition>( <expr><name>tokenType</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>TK_SPACE</name></expr>:</case> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TK_NULL</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>prevType</name><operator>==</operator><name>TK_IS</name> <operator>||</operator> <name>prevType</name><operator>==</operator><name>TK_NOT</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">" NULL"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <comment type="block">/* Fall through */</comment>
      </block_content>}</block>
      <case>case <expr><name>TK_STRING</name></expr>:</case>
      <case>case <expr><name>TK_INTEGER</name></expr>:</case>
      <case>case <expr><name>TK_FLOAT</name></expr>:</case>
      <case>case <expr><name>TK_VARIABLE</name></expr>:</case>
      <case>case <expr><name>TK_BLOB</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TK_LP</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>nParen</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>prevType</name><operator>==</operator><name>TK_IN</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>iStartIN</name> <operator>=</operator> <name><name>pStr</name><operator>-&gt;</operator><name>nChar</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nParenAtIN</name> <operator>=</operator> <name>nParen</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TK_RP</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>iStartIN</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nParen</name><operator>==</operator><name>nParenAtIN</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>nChar</name></name><operator>&gt;=</operator><operator>(</operator><name>u32</name><operator>)</operator><name>iStartIN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>nChar</name></name> <operator>=</operator> <name>iStartIN</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">"?,?,?"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>iStartIN</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nParen</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TK_ID</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>iStartIN</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>pStr</name><operator>-&gt;</operator><name>nChar</name></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3Isquote</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zId</name> <init>= <expr><call><name>sqlite3DbStrNDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>nId</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>zId</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
          <expr_stmt><expr><call><name>sqlite3Dequote</name><argument_list>(<argument><expr><name>zId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'"'</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3VdbeUsesDoubleQuotedString</name><argument_list>(<argument><expr><name>pVdbe</name></expr></argument>, <argument><expr><name>zId</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>nId</name> <operator>=</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><call><name>sqlite3GetToken</name><argument_list>(<argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eType</name></expr></argument>)</argument_list></call><operator>==</operator><name>nId</name> <operator>&amp;&amp;</operator> <name>eType</name><operator>==</operator><name>TK_ID</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>addSpaceSeparator</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>zId</name></expr></argument>, <argument><expr><name>nId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">"\"%w\""</literal></expr></argument>, <argument><expr><name>zId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>addSpaceSeparator</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>zSql</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <while>while<condition>( <expr><name>j</name><operator>&lt;</operator><name><name>pStr</name><operator>-&gt;</operator><name>nChar</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>zText</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3Tolower</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>zText</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TK_SELECT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name>iStartIN</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <comment type="block">/* fall through */</comment>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3IsIdChar</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>addSpaceSeparator</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>pStr</name><operator>-&gt;</operator><name>nChar</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><name>zSql</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>j</name><operator>&lt;</operator><name><name>pStr</name><operator>-&gt;</operator><name>nChar</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pStr</name><operator>-&gt;</operator><name>zText</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3Toupper</name><argument_list>(<argument><expr><name><name>pStr</name><operator>-&gt;</operator><name>zText</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>tokenType</name><operator>!=</operator><name>TK_SEMI</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><call><name>sqlite3_str_finish</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function></block_content></block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_NORMALIZE */</comment>
</unit>
