<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/tool/speedtest8.c"><comment type="block">/*
** Performance test for SQLite.
**
** This program reads ASCII text from a file named on the command-line
** and submits that text  to SQLite for evaluation.  A new database
** is created at the beginning of the program.  All statements are
** timed using the high-resolution timer built into Intel-class processors.
**
** To compile this program, first compile the SQLite library separately
** will full optimizations.  For example:
**
**     gcc -c -O6 -DSQLITE_THREADSAFE=0 sqlite3.c
**
** Then link against this program.  But to do optimize this program
** because that defeats the hi-res timer.
**
**     gcc speedtest8.c sqlite3.o -ldl -I../src
**
** Then run this program with a single argument which is the name of
** a file containing SQL script that you want to test:
**
**     ./a.out test.db  test.sql
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/times.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sched.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>

<comment type="block">/* 
** hwtime.h contains inline assembler code for implementing 
** high-performance timing routines.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwtime.h"</cpp:file></cpp:include>

<comment type="block">/*
** Timers
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite_uint64</name></type> <name>prepTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite_uint64</name></type> <name>runTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite_uint64</name></type> <name>finalizeTime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Prepare and run a single statement of SQL.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>prepareAndRun</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bQuiet</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stmtTail</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite_uint64</name></type> <name>iStart</name></decl>, <decl><type ref="prev"/><name>iElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bQuiet</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"***************************************************************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bQuiet</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SQL statement: [%s]\n"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>iStart</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmtTail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iElapse</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>iStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>prepTime</name> <operator>+=</operator> <name>iElapse</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bQuiet</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sqlite3_prepare_v2() returns %d in %llu cycles\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>iElapse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>iStart</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>rc</name><operator>=</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>nRow</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
    <expr_stmt><expr><name>iElapse</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>iStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>runTime</name> <operator>+=</operator> <name>iElapse</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bQuiet</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sqlite3_step() returns %d after %d rows in %llu cycles\n"</literal></expr></argument>,
             <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>nRow</name></expr></argument>, <argument><expr><name>iElapse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iStart</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iElapse</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>iStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>finalizeTime</name> <operator>+=</operator> <name>iElapse</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bQuiet</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sqlite3_finalize() returns %d in %llu cycles\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>iElapse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite_uint64</name></type> <name>iStart</name></decl>, <decl><type ref="prev"/><name>iElapse</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite_uint64</name></type> <name>iSetup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArgv0</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bQuiet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name><name>struct</name> <name>tms</name></name></type> <name>tmsStart</name></decl>, <decl><type ref="prev"/><name>tmsEnd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>clock_t</name></type> <name>clkStart</name></decl>, <decl><type ref="prev"/><name>clkEnd</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OSINST</name></cpp:ifdef>
  <decl_stmt><decl><type><specifier>extern</specifier> <name>sqlite3_vfs</name> <modifier>*</modifier></type><name>sqlite3_instvfs_binarylog</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlite3_instvfs_destroy</name><argument_list>(<argument><expr><name>sqlite3_vfs</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <while>while <condition>(<expr><name>argc</name><operator>&gt;</operator><literal type="number">3</literal></expr>)</condition>
  <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OSINST</name></cpp:ifdef>
    <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-log"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
     <expr_stmt><expr><name>pVfs</name> <operator>=</operator> <call><name>sqlite3_instvfs_binarylog</name><argument_list>(<argument><expr><literal type="string">"oslog"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
     <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/*
    ** Increasing the priority slightly above normal can help with
    ** repeatability of testing.  Note that with Cygwin, -5 equates
    ** to "High", +5 equates to "Low", and anything in between
    ** equates to "Normal".
    */</comment>
    <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-priority"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <decl_stmt><decl><type><name>int</name></type> <name>new_priority</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>SetPriorityClass</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, 
        <argument><expr><ternary><condition><expr><operator>(</operator><name>new_priority</name><operator>&lt;=</operator><operator>-</operator><literal type="number">5</literal><operator>)</operator></expr> ?</condition><then> <expr><name>HIGH_PRIORITY_CLASS</name></expr> </then><else>: 
        <expr><ternary><condition><expr><operator>(</operator><name>new_priority</name><operator>&lt;=</operator><literal type="number">0</literal><operator>)</operator></expr>  ?</condition><then> <expr><name>ABOVE_NORMAL_PRIORITY_CLASS</name></expr> </then><else>: 
        <expr><ternary><condition><expr><operator>(</operator><name>new_priority</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>  ?</condition><then> <expr><name>NORMAL_PRIORITY_CLASS</name></expr> </then><else>: 
        <expr><ternary><condition><expr><operator>(</operator><name>new_priority</name><operator>&lt;</operator><literal type="number">5</literal><operator>)</operator></expr>   ?</condition><then> <expr><name>BELOW_NORMAL_PRIORITY_CLASS</name></expr> </then><else>: 
        <expr><name>IDLE_PRIORITY_CLASS</name></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error setting priority\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <decl_stmt><decl><type><name><name>struct</name> <name>sched_param</name></name></type> <name>myParam</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sched_getparam</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>myParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Current process priority is %d.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>myParam</name><operator>.</operator><name>sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>myParam</name><operator>.</operator><name>sched_priority</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"Setting process priority to %d.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>myParam</name><operator>.</operator><name>sched_priority</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <if_stmt><if>if <condition>(<expr><call><name>sched_setparam</name> <argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>myParam</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"error setting priority\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name>argv</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>argc</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-quiet"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
     <expr_stmt><expr><name>bQuiet</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>argv</name><operator>++</operator></expr>;</expr_stmt>
     <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
     <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
   <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s [options] FILENAME SQL-SCRIPT\n"</literal>
              <literal type="string">"Runs SQL-SCRIPT against a UTF8 database\n"</literal>
              <literal type="string">"\toptions:\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OSINST</name></cpp:ifdef>
              <literal type="string">"\t-log &lt;log&gt;\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
              <literal type="string">"\t-priority &lt;value&gt; : set priority of task\n"</literal>
              <literal type="string">"\t-quiet : only display summary results\n"</literal></expr></argument>,
              <argument><expr><name>zArgv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nSql</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nSql</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nSql</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nSql</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>nSql</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SQLite version: %d\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_libversion_number</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>clkStart</name> <operator>=</operator> <call><name>times</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmsStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>iStart</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iElapse</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>iStart</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iSetup</name> <operator>=</operator> <name>iElapse</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bQuiet</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sqlite3_open() returns %d in %llu cycles\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>iElapse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nSql</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="char">';'</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>isComplete</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>zSql</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>isComplete</name> <operator>=</operator> <call><name>sqlite3_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>isComplete</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>j</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><name>j</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>j</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">".crash"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>nStmt</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>prepareAndRun</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>bQuiet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>iStart</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iElapse</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>iStart</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name>clkEnd</name> <operator>=</operator> <call><name>times</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmsEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>iSetup</name> <operator>+=</operator> <name>iElapse</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bQuiet</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sqlite3_close() returns in %llu cycles\n"</literal></expr></argument>, <argument><expr><name>iElapse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Statements run:        %15d stmts\n"</literal></expr></argument>, <argument><expr><name>nStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bytes of SQL text:     %15d bytes\n"</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total prepare time:    %15llu cycles\n"</literal></expr></argument>, <argument><expr><name>prepTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total run time:        %15llu cycles\n"</literal></expr></argument>, <argument><expr><name>runTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total finalize time:   %15llu cycles\n"</literal></expr></argument>, <argument><expr><name>finalizeTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Open/Close time:       %15llu cycles\n"</literal></expr></argument>, <argument><expr><name>iSetup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total time:            %15llu cycles\n"</literal></expr></argument>,
      <argument><expr><name>prepTime</name> <operator>+</operator> <name>runTime</name> <operator>+</operator> <name>finalizeTime</name> <operator>+</operator> <name>iSetup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total user CPU time:   %15.3g secs\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>tmsEnd</name><operator>.</operator><name>tms_utime</name></name> <operator>-</operator> <name><name>tmsStart</name><operator>.</operator><name>tms_utime</name></name><operator>)</operator><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>CLOCKS_PER_SEC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total system CPU time: %15.3g secs\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>tmsEnd</name><operator>.</operator><name>tms_stime</name></name> <operator>-</operator> <name><name>tmsStart</name><operator>.</operator><name>tms_stime</name></name><operator>)</operator><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>CLOCKS_PER_SEC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total real time:       %15.3g secs\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>clkEnd</name> <operator>-</operator><name>clkStart</name><operator>)</operator><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>CLOCKS_PER_SEC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_OSINST</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>pVfs</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_instvfs_destroy</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"vfs log written to %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
