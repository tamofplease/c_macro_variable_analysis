<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/tool/getlock.c"><comment type="block">/*
** This utility program looks at an SQLite database and determines whether
** or not it is locked, the kind of lock, and who is holding this lock.
**
** This only works on unix when the posix advisory locking method is used
** (which is the default on unix) and when the PENDING_BYTE is in its
** usual place.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s database\n"</literal></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Check for a conflicting lock.  If one is found, print an this
** on standard output using the format string given and return 1.
** If there are no conflicting locks, return 0.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isLocked</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,                <comment type="block">/* File descriptor to check */</comment>
  <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,             <comment type="block">/* F_RDLCK or F_WRLCK */</comment>
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iOfst</name></decl></parameter>,   <comment type="block">/* First byte of the lock */</comment>
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iCnt</name></decl></parameter>,    <comment type="block">/* Number of bytes in the lock range */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name></decl></parameter>     <comment type="block">/* Type of lock */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>lk</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lk</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lk</name><operator>.</operator><name>l_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lk</name><operator>.</operator><name>l_start</name></name> <operator>=</operator> <name>iOfst</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lk</name><operator>.</operator><name>l_len</name></name> <operator>=</operator> <name>iCnt</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>fcntl</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>F_GETLK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lk</name></expr></argument>)</argument_list></call><operator>==</operator><operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fcntl(%d) failed: errno=%d\n"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>lk</name><operator>.</operator><name>l_type</name></name><operator>==</operator><name>F_UNLCK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s lock held by %d\n"</literal></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>lk</name><operator>.</operator><name>l_pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Location of locking bytes in the database file
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PENDING_BYTE</name></cpp:macro>      <cpp:value>(0x40000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESERVED_BYTE</name></cpp:macro>     <cpp:value>(PENDING_BYTE+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARED_FIRST</name></cpp:macro>      <cpp:value>(PENDING_BYTE+2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHARED_SIZE</name></cpp:macro>       <cpp:value>510</cpp:value></cpp:define>

<comment type="block">/*
** Lock locations for shared-memory locks used by WAL mode.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHM_BASE</name></cpp:macro>          <cpp:value>120</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHM_WRITE</name></cpp:macro>         <cpp:value>SHM_BASE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHM_CHECKPOINT</name></cpp:macro>    <cpp:value>(SHM_BASE+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHM_RECOVER</name></cpp:macro>       <cpp:value>(SHM_BASE+2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHM_READ_FIRST</name></cpp:macro>    <cpp:value>(SHM_BASE+3)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHM_READ_SIZE</name></cpp:macro>     <cpp:value>5</cpp:value></cpp:define>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>hDb</name></decl>;</decl_stmt>        <comment type="block">/* File descriptor for the open database file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>hShm</name></decl>;</decl_stmt>       <comment type="block">/* File descriptor for WAL shared-memory file */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm</name></decl>;</decl_stmt>     <comment type="block">/* Name of the shared-memory file for WAL mode */</comment>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>got</name></decl>;</decl_stmt>    <comment type="block">/* Bytes read from header */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isWal</name></decl>;</decl_stmt>                 <comment type="block">/* True if in WAL mode */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name></decl>;</decl_stmt>                 <comment type="block">/* Length of filename */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>aHdr</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* Database header */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nLock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* Number of locks held */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                     <comment type="block">/* Loop counter */</comment>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>hDb</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>hDb</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"cannot open %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Make sure we are dealing with an database file */</comment>
  <expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>hDb</name></expr></argument>, <argument><expr><name>aHdr</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>got</name><operator>!=</operator><literal type="number">100</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>aHdr</name></expr></argument>, <argument><expr><literal type="string">"SQLite format 3"</literal></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"not an SQLite database: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* First check for an exclusive lock */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>isLocked</name><argument_list>(<argument><expr><name>hDb</name></expr></argument>, <argument><expr><name>F_RDLCK</name></expr></argument>, <argument><expr><name>SHARED_FIRST</name></expr></argument>, <argument><expr><name>SHARED_SIZE</name></expr></argument>, <argument><expr><literal type="string">"EXCLUSIVE"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>isWal</name> <operator>=</operator> <name><name>aHdr</name><index>[<expr><literal type="number">18</literal></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>isWal</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Rollback mode */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>isLocked</name><argument_list>(<argument><expr><name>hDb</name></expr></argument>, <argument><expr><name>F_RDLCK</name></expr></argument>, <argument><expr><name>PENDING_BYTE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"PENDING"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>isLocked</name><argument_list>(<argument><expr><name>hDb</name></expr></argument>, <argument><expr><name>F_RDLCK</name></expr></argument>, <argument><expr><name>RESERVED_BYTE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"RESERVED"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>isLocked</name><argument_list>(<argument><expr><name>hDb</name></expr></argument>, <argument><expr><name>F_WRLCK</name></expr></argument>, <argument><expr><name>SHARED_FIRST</name></expr></argument>, <argument><expr><name>SHARED_SIZE</name></expr></argument>, <argument><expr><literal type="string">"SHARED"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* WAL mode */</comment>
    <expr_stmt><expr><name>nName</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zShm</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nName</name> <operator>+</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zShm</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zShm</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zShm</name><index>[<expr><name>nName</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-shm"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hShm</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zShm</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>hShm</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"cannot open %s\n"</literal></expr></argument>, <argument><expr><name>zShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>isLocked</name><argument_list>(<argument><expr><name>hShm</name></expr></argument>, <argument><expr><name>F_RDLCK</name></expr></argument>, <argument><expr><name>SHM_RECOVER</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"WAL-RECOVERY"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nLock</name> <operator>+=</operator> <call><name>isLocked</name><argument_list>(<argument><expr><name>hShm</name></expr></argument>, <argument><expr><name>F_RDLCK</name></expr></argument>, <argument><expr><name>SHM_CHECKPOINT</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"WAL-CHECKPOINT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nLock</name> <operator>+=</operator> <call><name>isLocked</name><argument_list>(<argument><expr><name>hShm</name></expr></argument>, <argument><expr><name>F_RDLCK</name></expr></argument>, <argument><expr><name>SHM_WRITE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"WAL-WRITE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>SHM_READ_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>nLock</name> <operator>+=</operator> <call><name>isLocked</name><argument_list>(<argument><expr><name>hShm</name></expr></argument>, <argument><expr><name>F_WRLCK</name></expr></argument>, <argument><expr><name>SHM_READ_FIRST</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"WAL-READ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLock</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"file is not locked\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
