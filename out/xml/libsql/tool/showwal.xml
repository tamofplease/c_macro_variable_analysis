<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/tool/showwal.c"><comment type="block">/*
** A utility for printing content from a write-ahead log file.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>isdigit((unsigned char)(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPRINT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>isprint((unsigned char)(X))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>pagesize</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* Size of a database page */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* File descriptor for reading the WAL file */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>mxFrame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* Last frame */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>perLine</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* HEX elements to print per line */</comment>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>i64</name>;</typedef>      <comment type="block">/* Datatype for 64-bit integers */</comment>

<comment type="block">/* Information for computing the checksum */</comment>
<typedef>typedef <type><name><name>struct</name> <name>Cksum</name></name></type> <name>Cksum</name>;</typedef>
<struct>struct <name>Cksum</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>bSwap</name></decl>;</decl_stmt>           <comment type="block">/* True to do byte swapping on 32-bit words */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>     <comment type="block">/* Current checksum value */</comment>
}</block>;</struct>

<comment type="block">/*
** extract a 32-bit big-endian integer
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>getInt32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name> <init>= <expr><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Swap bytes on a 32-bit unsigned integer
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>swab32</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x000000FF</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x0000FF00</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator>
         <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">0x00FF0000</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator>  <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>x</name><operator>)</operator><operator>&amp;</operator><literal type="number">0xFF000000</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">24</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Extend the checksum.  Reinitialize the checksum if bInit is true.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>extendCksum</name><parameter_list>(
  <parameter><decl><type><name>Cksum</name> <modifier>*</modifier></type><name>pCksum</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nByte</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bInit</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>a32</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>bInit</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>a</name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>a</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* Host is little-endian */</comment>
      <expr_stmt><expr><name><name>pCksum</name><operator>-&gt;</operator><name>bSwap</name></name> <operator>=</operator> <call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0x377f0682</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Host is big-endian */</comment>
      <expr_stmt><expr><name><name>pCksum</name><operator>-&gt;</operator><name>bSwap</name></name> <operator>=</operator> <call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0x377f0683</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pCksum</name><operator>-&gt;</operator><name>s0</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCksum</name><operator>-&gt;</operator><name>s1</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>a32</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>aData</name></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>nByte</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x0</name> <init>= <expr><name><name>a32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x1</name> <init>= <expr><name><name>a32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCksum</name><operator>-&gt;</operator><name>bSwap</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>swab32</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swab32</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCksum</name><operator>-&gt;</operator><name>s0</name></name> <operator>+=</operator> <name>x0</name> <operator>+</operator> <name><name>pCksum</name><operator>-&gt;</operator><name>s1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCksum</name><operator>-&gt;</operator><name>s1</name></name> <operator>+=</operator> <name>x1</name> <operator>+</operator> <name><name>pCksum</name><operator>-&gt;</operator><name>s0</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a32</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
** Convert the var-int format into i64.  Return the number of bytes
** in the var-int.  Write the var-int value into *pVal.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>decodeVarint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return> </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pVal</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">9</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Report an out-of-memory error and die.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>out_of_memory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Out of memory...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Read content from the file.
**
** Space to hold the content is obtained from malloc() and needs to be
** freed by the caller.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>getContent</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>ofst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>aData</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>out_of_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>aData</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Print a range of bytes as hex and as ascii.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_byte_range</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>,              <comment type="block">/* First byte in the range of bytes to print */</comment>
  <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>,             <comment type="block">/* Number of bytes to print */</comment>
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,  <comment type="block">/* Content to print */</comment>
  <parameter><decl><type><name>int</name></type> <name>printOfst</name></decl></parameter>          <comment type="block">/* Add this amount to the index on the left column */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOfstFmt</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name>printOfst</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">0xfff</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %03x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><operator>(</operator><name>printOfst</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">0xffff</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %04x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><operator>(</operator><name>printOfst</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">0xfffff</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %05x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><operator>(</operator><name>printOfst</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">0xffffff</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %06x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zOfstFmt</name> <operator>=</operator> <literal type="string">" %08x: "</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nByte</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>perLine</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>zOfstFmt</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><name>printOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>perLine</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><name>j</name><operator>&gt;</operator><name>nByte</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>aData</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>perLine</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><name>j</name><operator>&gt;</operator><name>nByte</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>ISPRINT</name><argument_list>(<argument><expr><name><name>aData</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>aData</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* Print a line of decode output showing a 4-byte integer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_decode_line</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,      <comment type="block">/* Content being decoded */</comment>
  <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>,       <comment type="block">/* Start and size of decode */</comment>
  <parameter><decl><type><name>int</name></type> <name>asHex</name></decl></parameter>,                 <comment type="block">/* If true, output value as hex */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>           <comment type="block">/* Message to append */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>aData</name><index>[<expr><name>ofst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">" %03x: %02x"</literal></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name><name>aData</name><index>[<expr><name>ofst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;=</operator><name>nByte</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" %02x"</literal></expr></argument>, <argument><expr><name><name>aData</name><index>[<expr><name>ofst</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>aData</name><index>[<expr><name>ofst</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>asHex</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"  0x%08x"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"   %9d"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s  %s\n"</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Print an entire page of content as hex
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_frame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iFrame</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iStart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>iStart</name> <operator>=</operator> <literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name>iFrame</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>pagesize</name><operator>+</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Frame %d:   (offsets 0x%llx..0x%llx)\n"</literal></expr></argument>,
          <argument><expr><name>iFrame</name></expr></argument>, <argument><expr><name>iStart</name></expr></argument>, <argument><expr><name>iStart</name><operator>+</operator><name>pagesize</name><operator>+</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>getContent</name><argument_list>(<argument><expr><name>iStart</name></expr></argument>, <argument><expr><name>pagesize</name><operator>+</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Page number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"DB size, or 0 for non-commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Salt-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Salt-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Checksum-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Checksum-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_byte_range</name><argument_list>(<argument><expr><name>iStart</name><operator>+</operator><literal type="number">24</literal></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>aData</name><operator>+</operator><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Summarize a single frame on a single line.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_oneline_frame</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iFrame</name></decl></parameter>, <parameter><decl><type><name>Cksum</name> <modifier>*</modifier></type><name>pCksum</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iStart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>s0</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>iStart</name> <operator>=</operator> <literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name>iFrame</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>pagesize</name><operator>+</operator><literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>getContent</name><argument_list>(<argument><expr><name>iStart</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>extendCksum</name><argument_list>(<argument><expr><name>pCksum</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>extendCksum</name><argument_list>(<argument><expr><name>pCksum</name></expr></argument>, <argument><expr><call><name>getContent</name><argument_list>(<argument><expr><name>iStart</name><operator>+</operator><literal type="number">24</literal></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>s0</name> <operator>=</operator> <call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name><operator>+</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name><operator>+</operator><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Frame %4d: %6d %6d 0x%08x,%08x 0x%08x,%08x %s\n"</literal></expr></argument>,
          <argument><expr><name>iFrame</name></expr></argument>, 
          <argument><expr><call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name><operator>+</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>s0</name></expr></argument>,
          <argument><expr><name>s1</name></expr></argument>,
          <argument><expr><ternary><condition><expr><operator>(</operator><name>s0</name><operator>==</operator><name><name>pCksum</name><operator>-&gt;</operator><name>s0</name></name> <operator>&amp;&amp;</operator> <name>s1</name><operator>==</operator><name><name>pCksum</name><operator>-&gt;</operator><name>s1</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"cksum-fail"</literal></expr></else></ternary></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Reset the checksum so that a single frame checksum failure will not
  ** cause all subsequent frames to also show a failure. */</comment>
  <expr_stmt><expr><name><name>pCksum</name><operator>-&gt;</operator><name>s0</name></name> <operator>=</operator> <name>s0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCksum</name><operator>-&gt;</operator><name>s1</name></name> <operator>=</operator> <name>s1</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Decode the WAL header.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_wal_header</name><parameter_list>(<parameter><decl><type><name>Cksum</name> <modifier>*</modifier></type><name>pCksum</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>getContent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCksum</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>extendCksum</name><argument_list>(<argument><expr><name>pCksum</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Checksum byte order: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pCksum</name><operator>-&gt;</operator><name>bSwap</name></name></expr> ?</condition><then> <expr><literal type="string">"swapped"</literal></expr> </then><else>: <expr><literal type="string">"native"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"WAL Header:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="string">"Magic.  0x377f0682 (le) or 0x377f0683 (be)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"File format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Database page size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Checkpoint sequence number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Salt-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Salt-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Checksum-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Checksum-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCksum</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pCksum</name><operator>-&gt;</operator><name>s0</name></name><operator>!=</operator><call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name><operator>+</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"**** cksum-1 mismatch: 0x%08x\n"</literal></expr></argument>, <argument><expr><name><name>pCksum</name><operator>-&gt;</operator><name>s0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCksum</name><operator>-&gt;</operator><name>s1</name></name><operator>!=</operator><call><name>getInt32</name><argument_list>(<argument><expr><name>aData</name><operator>+</operator><literal type="number">28</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"**** cksum-2 mismatch: 0x%08x\n"</literal></expr></argument>, <argument><expr><name><name>pCksum</name><operator>-&gt;</operator><name>s1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<comment type="block">/*
** Describe cell content.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>describeContent</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,       <comment type="block">/* Cell content */</comment>
  <parameter><decl><type><name>i64</name></type> <name>nLocal</name></decl></parameter>,             <comment type="block">/* Bytes in a[] */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zDesc</name></decl></parameter>             <comment type="block">/* Write description here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nDesc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pLimit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>sep</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pLimit</name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><index>[<expr><name>nLocal</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <operator>&amp;</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>n</name></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pData</name><operator>&lt;=</operator><name>pLimit</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nLocal</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zDesc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sep</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sep</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>zDesc</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* NULL is a "*" */</comment>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><literal type="number">6</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>signed</name> <name>char</name><operator>)</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
      <switch>switch<condition>( <expr><name>x</name></expr> )</condition><block>{<block_content>
        <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
        <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
        <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>pData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>  <expr_stmt><expr><name>pData</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">7</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pData</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">8</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">9</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x</name><operator>&gt;=</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>x</name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"blob(%lld)"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"txt(%lld)"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>pData</name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zDesc</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>nDesc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Compute the local payload size given the total payload size and
** the page size.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>localPayload</name><parameter_list>(<parameter><decl><type><name>i64</name></type> <name>nPayload</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>cType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>maxLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>minLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>surplus</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nLocal</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>==</operator><literal type="number">13</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Table leaf */</comment>
    <expr_stmt><expr><name>maxLocal</name> <operator>=</operator> <name>pagesize</name><operator>-</operator><literal type="number">35</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>minLocal</name> <operator>=</operator> <operator>(</operator><name>pagesize</name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">32</literal><operator>/</operator><literal type="number">255</literal><operator>-</operator><literal type="number">23</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>maxLocal</name> <operator>=</operator> <operator>(</operator><name>pagesize</name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal><operator>/</operator><literal type="number">255</literal><operator>-</operator><literal type="number">23</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>minLocal</name> <operator>=</operator> <operator>(</operator><name>pagesize</name><operator>-</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><literal type="number">32</literal><operator>/</operator><literal type="number">255</literal><operator>-</operator><literal type="number">23</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nPayload</name><operator>&gt;</operator><name>maxLocal</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>surplus</name> <operator>=</operator> <name>minLocal</name> <operator>+</operator> <operator>(</operator><name>nPayload</name><operator>-</operator><name>minLocal</name><operator>)</operator><operator>%</operator><operator>(</operator><name>pagesize</name><operator>-</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>surplus</name><operator>&lt;=</operator><name>maxLocal</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>surplus</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>minLocal</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <name>nPayload</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>nLocal</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Create a description for a single cell.
**
** The return value is the local cell size.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>describeCell</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>cType</name></decl></parameter>,    <comment type="block">/* Page type */</comment>
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,       <comment type="block">/* Cell content */</comment>
  <parameter><decl><type><name>int</name></type> <name>showCellContent</name></decl></parameter>,    <comment type="block">/* Show cell content if true */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzDesc</name></decl></parameter>           <comment type="block">/* Store description here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nDesc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>leftChild</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nPayload</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>rowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>nLocal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>zDesc</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>&lt;=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>leftChild</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>, <argument><expr><literal type="string">"lx: %d "</literal></expr></argument>, <argument><expr><name>leftChild</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>!=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"n: %lld "</literal></expr></argument>, <argument><expr><name>nPayload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nLocal</name> <operator>=</operator> <call><name>localPayload</name><argument_list>(<argument><expr><name>nPayload</name></expr></argument>, <argument><expr><name>cType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nPayload</name> <operator>=</operator> <name>nLocal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cType</name><operator>==</operator><literal type="number">5</literal> <operator>||</operator> <name>cType</name><operator>==</operator><literal type="number">13</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>decodeVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r: %lld "</literal></expr></argument>, <argument><expr><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLocal</name><operator>&lt;</operator><name>nPayload</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ovfl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>nLocal</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ovfl</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ov: %d "</literal></expr></argument>, <argument><expr><name>ovfl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>showCellContent</name> <operator>&amp;&amp;</operator> <name>cType</name><operator>!=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nDesc</name> <operator>+=</operator> <call><name>describeContent</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nLocal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zDesc</name><index>[<expr><name>nDesc</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pzDesc</name> <operator>=</operator> <name>zDesc</name></expr>;</expr_stmt>
  <return>return <expr><name>nLocal</name><operator>+</operator><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Decode a btree page
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_btree_page</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,   <comment type="block">/* Content of the btree page to be decoded */</comment>
  <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>,           <comment type="block">/* Page number */</comment>
  <parameter><decl><type><name>int</name></type> <name>hdrSize</name></decl></parameter>,        <comment type="block">/* Size of the page1-header in bytes */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArgs</name></decl></parameter>   <comment type="block">/* Flags to control formatting */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><literal type="string">"unknown"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCell</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCellPtr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>showCellContent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>showMap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"index interior node"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"table interior node"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"index leaf"</literal></expr>;</expr_stmt>           <break>break;</break>
    <case>case <expr><literal type="number">13</literal></expr>:</case> <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"table leaf"</literal></expr>;</expr_stmt>           <break>break;</break>
  </block_content>}</block></switch>
  <while>while<condition>( <expr><name><name>zArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <switch>switch<condition>( <expr><name><name>zArgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>showCellContent</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <break>break;</break>
      <case>case <expr><literal type="char">'m'</literal></expr>:</case> <expr_stmt><expr><name>showMap</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>          <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><name>zArgs</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Decode of btree page %d:\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Offset to first freeblock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Number of cells on this page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nCell</name> <operator>=</operator> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Offset to cell content area"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Fragmented byte count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Right child"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iCellPtr</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>iCellPtr</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nCell</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" key: lx=left-child n=payload-size r=rowid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>showMap</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zMap</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zMap</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zMap</name></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><name>hdrSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>hdrSize</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><name>iCellPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>hdrSize</name><operator>+</operator><name>iCellPtr</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>nCell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCell</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>cofst</name> <init>= <expr><name>iCellPtr</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDesc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>n</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cofst</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>cofst</name></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>a</name><index>[<expr><name>cofst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>describeCell</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>cofst</name><operator>-</operator><name>hdrSize</name></expr>]</index></name></expr></argument>, <argument><expr><name>showCellContent</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>showMap</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>cofst</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'*'</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zMap</name><index>[<expr><name>cofst</name></expr>]</index></name> <operator>=</operator> <literal type="char">'['</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zMap</name><index>[<expr><name>cofst</name><operator>+</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">']'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>j</name><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>cofst</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %03x: cell[%d] %s\n"</literal></expr></argument>, <argument><expr><name>cofst</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>zDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>showMap</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>pagesize</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">64</literal></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %03x: %.64s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zMap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>  
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zPgSz</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Usage: %s FILENAME ?PAGE? ...\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>fd</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: can't open %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>zPgSz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zPgSz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>zPgSz</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pagesize</name> <operator>=</operator> <name><name>zPgSz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">65536</literal> <operator>+</operator> <name><name>zPgSz</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>zPgSz</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pagesize</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pagesize</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pagesize: %d\n"</literal></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>sbuf</name><operator>.</operator><name>st_size</name></name><operator>&lt;</operator><literal type="number">32</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"file too small to be a WAL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>mxFrame</name> <operator>=</operator> <operator>(</operator><name><name>sbuf</name><operator>.</operator><name>st_size</name></name> <operator>-</operator> <literal type="number">32</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>pagesize</name> <operator>+</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Available pages: 1..%d\n"</literal></expr></argument>, <argument><expr><name>mxFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cksum</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>print_wal_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>mxFrame</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>print_oneline_frame</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iStart</name></decl>, <decl><type ref="prev"/><name>iEnd</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLeft</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"header"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>print_wal_header</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ISDIGIT</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s: unknown option: [%s]\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>iStart</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zLeft</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zLeft</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"..end"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <name>mxFrame</name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zLeft</name> <operator>&amp;&amp;</operator> <name><name>zLeft</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <name><name>zLeft</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zLeft</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zLeft</name> <operator>&amp;&amp;</operator> <name><name>zLeft</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'b'</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>i64</name></type> <name>ofst</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>, <decl><type ref="prev"/><name>hdrSize</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>iStart</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>hdrSize</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ofst</name> <operator>=</operator> <name>hdrSize</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>=</operator> <name>pagesize</name><operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>hdrSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ofst</name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name>iStart</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>pagesize</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nByte</name> <operator>=</operator> <name>pagesize</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>ofst</name> <operator>=</operator> <literal type="number">32</literal> <operator>+</operator> <name>hdrSize</name> <operator>+</operator> <operator>(</operator><name>i64</name><operator>)</operator><operator>(</operator><name>iStart</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>pagesize</name><operator>+</operator><literal type="number">24</literal><operator>)</operator> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>getContent</name><argument_list>(<argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decode_btree_page</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iStart</name></expr></argument>, <argument><expr><name>hdrSize</name></expr></argument>, <argument><expr><name>zLeft</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zLeft</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"truncate"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* Frame number followed by "truncate" truncates the WAL file
        ** after that frame */</comment>
        <decl_stmt><decl><type><name>off_t</name></type> <name>newSize</name> <init>= <expr><literal type="number">32</literal> <operator>+</operator> <name>iStart</name><operator>*</operator><operator>(</operator><name>pagesize</name><operator>+</operator><literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>truncate</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>newSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <name>iStart</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>iStart</name><operator>&lt;</operator><literal type="number">1</literal> <operator>||</operator> <name><name>iEnd</name><argument_list type="generic">&lt;<argument><expr><name>iStart</name> <operator>||</operator> <name>iEnd</name></expr></argument>&gt;</argument_list></name><name>mxFrame</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
          <argument><expr><literal type="string">"Page argument should be LOWER?..UPPER?.  Range 1 to %d\n"</literal></expr></argument>,
          <argument><expr><name>mxFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <while>while<condition>( <expr><name>iStart</name><operator>&lt;=</operator><name>iEnd</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>print_frame</name><argument_list>(<argument><expr><name>iStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iStart</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
