<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/tool/mkkeywordhash.c"><comment type="block">/*
** Compile and run this standalone program in order to generate code that
** implements a function that will translate alphabetic identifiers into
** parser token codes.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** A header comment placed at the beginning of generated code.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zHdr</name><index>[]</index></name> <init>= 
  <expr><literal type="string">"/***** This file contains automatically generated code ******\n"</literal>
  <literal type="string">"**\n"</literal>
  <literal type="string">"** The code in this file has been automatically generated by\n"</literal>
  <literal type="string">"**\n"</literal>
  <literal type="string">"**   sqlite/tool/mkkeywordhash.c\n"</literal>
  <literal type="string">"**\n"</literal>
  <literal type="string">"** The code in this file implements a function that determines whether\n"</literal>
  <literal type="string">"** or not a given identifier is really an SQL keyword.  The same thing\n"</literal>
  <literal type="string">"** might be implemented more directly using a hand-written hash table.\n"</literal>
  <literal type="string">"** But by using this automatically generated code, the size of the code\n"</literal>
  <literal type="string">"** is substantially reduced.  This is important for embedded applications\n"</literal>
  <literal type="string">"** on platforms with limited memory.\n"</literal>
  <literal type="string">"*/\n"</literal></expr></init></decl>
;</decl_stmt>

<comment type="block">/*
** All the keywords of the SQL language are stored in a hash
** table composed of instances of the following structure.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Keyword</name></name></type> <name>Keyword</name>;</typedef>
<struct>struct <name>Keyword</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>         <comment type="block">/* The keyword name */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTokenType</name></decl>;</decl_stmt>    <comment type="block">/* Token value for this keyword */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>            <comment type="block">/* Code this keyword if non-zero */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>priority</name></decl>;</decl_stmt>        <comment type="block">/* Put higher priorities earlier in the hash chain */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>              <comment type="block">/* Unique ID for this record */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>hash</name></decl>;</decl_stmt>            <comment type="block">/* Hash on the keyword */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>          <comment type="block">/* Offset to start of name string */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>             <comment type="block">/* Length of this keyword, not counting final \000 */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>prefix</name></decl>;</decl_stmt>          <comment type="block">/* Number of characters in prefix */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>longestSuffix</name></decl>;</decl_stmt>   <comment type="block">/* Longest suffix that is a prefix on another word */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iNext</name></decl>;</decl_stmt>           <comment type="block">/* Index in aKeywordTable[] of next with same hash */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>substrId</name></decl>;</decl_stmt>        <comment type="block">/* Id to another keyword this keyword is embedded in */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>substrOffset</name></decl>;</decl_stmt>    <comment type="block">/* Offset into substrId for start of this keyword */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zOrigName</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* Original keyword name before processing */</comment>
}</block>;</struct>

<comment type="block">/*
** Define masks used to determine which keywords are allowed
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_ALTERTABLE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_VIRTUALTABLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ALTER</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ALTER</name></cpp:macro>      <cpp:value>0x00000001</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALWAYS</name></cpp:macro>       <cpp:value>0x00000002</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_ANALYZE</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYZE</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ANALYZE</name></cpp:macro>    <cpp:value>0x00000004</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_ATTACH</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ATTACH</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>ATTACH</name></cpp:macro>     <cpp:value>0x00000008</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_AUTOINCREMENT</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOINCR</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOINCR</name></cpp:macro>   <cpp:value>0x00000010</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_CAST</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>CAST</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>CAST</name></cpp:macro>       <cpp:value>0x00000020</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_COMPOUND_SELECT</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPOUND</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>COMPOUND</name></cpp:macro>   <cpp:value>0x00000040</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_CONFLICT_CLAUSE</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>CONFLICT</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>CONFLICT</name></cpp:macro>   <cpp:value>0x00000080</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_EXPLAIN</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>EXPLAIN</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>EXPLAIN</name></cpp:macro>    <cpp:value>0x00000100</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_FOREIGN_KEY</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>FKEY</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>FKEY</name></cpp:macro>       <cpp:value>0x00000200</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_PRAGMA</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PRAGMA</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>PRAGMA</name></cpp:macro>     <cpp:value>0x00000400</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_REINDEX</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>REINDEX</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>REINDEX</name></cpp:macro>    <cpp:value>0x00000800</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_SUBQUERY</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SUBQUERY</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>SUBQUERY</name></cpp:macro>   <cpp:value>0x00001000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>TRIGGER</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>TRIGGER</name></cpp:macro>    <cpp:value>0x00002000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_AUTOVACUUM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> \
    <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_VACUUM</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_ATTACH</name></expr></argument>)</argument_list></call><operator>)</operator></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>VACUUM</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>VACUUM</name></cpp:macro>     <cpp:value>0x00004000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_VIEW</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>VIEW</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>VIEW</name></cpp:macro>       <cpp:value>0x00008000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>VTAB</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>VTAB</name></cpp:macro>       <cpp:value>0x00010000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOVACUUM</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>AUTOVACUUM</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_CTE</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>CTE</name></cpp:macro>        <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>CTE</name></cpp:macro>        <cpp:value>0x00040000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_UPSERT</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>UPSERT</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>UPSERT</name></cpp:macro>     <cpp:value>0x00080000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOWFUNC</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOWFUNC</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_GENERATED_COLUMNS</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>GENCOL</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>GENCOL</name></cpp:macro>     <cpp:value>0x00200000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_RETURNING</name></cpp:ifdef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>RETURNING</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>RETURNING</name></cpp:macro>  <cpp:value>0x00400000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** These are the keywords
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>Keyword</name></type> <name><name>aKeywordTable</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{ <expr><literal type="string">"ABORT"</literal></expr>,            <expr><literal type="string">"TK_ABORT"</literal></expr>,        <expr><name>CONFLICT</name><operator>|</operator><name>TRIGGER</name></expr>, <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ACTION"</literal></expr>,           <expr><literal type="string">"TK_ACTION"</literal></expr>,       <expr><name>FKEY</name></expr>,             <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ADD"</literal></expr>,              <expr><literal type="string">"TK_ADD"</literal></expr>,          <expr><name>ALTER</name></expr>,            <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"AFTER"</literal></expr>,            <expr><literal type="string">"TK_AFTER"</literal></expr>,        <expr><name>TRIGGER</name></expr>,          <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ALL"</literal></expr>,              <expr><literal type="string">"TK_ALL"</literal></expr>,          <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ALTER"</literal></expr>,            <expr><literal type="string">"TK_ALTER"</literal></expr>,        <expr><name>ALTER</name></expr>,            <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ALWAYS"</literal></expr>,           <expr><literal type="string">"TK_ALWAYS"</literal></expr>,       <expr><name>GENCOL</name></expr>,           <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ANALYZE"</literal></expr>,          <expr><literal type="string">"TK_ANALYZE"</literal></expr>,      <expr><name>ANALYZE</name></expr>,          <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"AND"</literal></expr>,              <expr><literal type="string">"TK_AND"</literal></expr>,          <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"AS"</literal></expr>,               <expr><literal type="string">"TK_AS"</literal></expr>,           <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ASC"</literal></expr>,              <expr><literal type="string">"TK_ASC"</literal></expr>,          <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ATTACH"</literal></expr>,           <expr><literal type="string">"TK_ATTACH"</literal></expr>,       <expr><name>ATTACH</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"AUTOINCREMENT"</literal></expr>,    <expr><literal type="string">"TK_AUTOINCR"</literal></expr>,     <expr><name>AUTOINCR</name></expr>,         <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"BEFORE"</literal></expr>,           <expr><literal type="string">"TK_BEFORE"</literal></expr>,       <expr><name>TRIGGER</name></expr>,          <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"BEGIN"</literal></expr>,            <expr><literal type="string">"TK_BEGIN"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"BETWEEN"</literal></expr>,          <expr><literal type="string">"TK_BETWEEN"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"BY"</literal></expr>,               <expr><literal type="string">"TK_BY"</literal></expr>,           <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CASCADE"</literal></expr>,          <expr><literal type="string">"TK_CASCADE"</literal></expr>,      <expr><name>FKEY</name></expr>,             <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CASE"</literal></expr>,             <expr><literal type="string">"TK_CASE"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CAST"</literal></expr>,             <expr><literal type="string">"TK_CAST"</literal></expr>,         <expr><name>CAST</name></expr>,             <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CHECK"</literal></expr>,            <expr><literal type="string">"TK_CHECK"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"COLLATE"</literal></expr>,          <expr><literal type="string">"TK_COLLATE"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"COLUMN"</literal></expr>,           <expr><literal type="string">"TK_COLUMNKW"</literal></expr>,     <expr><name>ALTER</name></expr>,            <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"COMMIT"</literal></expr>,           <expr><literal type="string">"TK_COMMIT"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CONFLICT"</literal></expr>,         <expr><literal type="string">"TK_CONFLICT"</literal></expr>,     <expr><name>CONFLICT</name></expr>,         <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CONSTRAINT"</literal></expr>,       <expr><literal type="string">"TK_CONSTRAINT"</literal></expr>,   <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CREATE"</literal></expr>,           <expr><literal type="string">"TK_CREATE"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">2</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CROSS"</literal></expr>,            <expr><literal type="string">"TK_JOIN_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CURRENT"</literal></expr>,          <expr><literal type="string">"TK_CURRENT"</literal></expr>,      <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CURRENT_DATE"</literal></expr>,     <expr><literal type="string">"TK_CTIME_KW"</literal></expr>,     <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CURRENT_TIME"</literal></expr>,     <expr><literal type="string">"TK_CTIME_KW"</literal></expr>,     <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"CURRENT_TIMESTAMP"</literal></expr>,<expr><literal type="string">"TK_CTIME_KW"</literal></expr>,     <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DATABASE"</literal></expr>,         <expr><literal type="string">"TK_DATABASE"</literal></expr>,     <expr><name>ATTACH</name></expr>,           <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DEFAULT"</literal></expr>,          <expr><literal type="string">"TK_DEFAULT"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DEFERRED"</literal></expr>,         <expr><literal type="string">"TK_DEFERRED"</literal></expr>,     <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DEFERRABLE"</literal></expr>,       <expr><literal type="string">"TK_DEFERRABLE"</literal></expr>,   <expr><name>FKEY</name></expr>,             <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DELETE"</literal></expr>,           <expr><literal type="string">"TK_DELETE"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DESC"</literal></expr>,             <expr><literal type="string">"TK_DESC"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DETACH"</literal></expr>,           <expr><literal type="string">"TK_DETACH"</literal></expr>,       <expr><name>ATTACH</name></expr>,           <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DISTINCT"</literal></expr>,         <expr><literal type="string">"TK_DISTINCT"</literal></expr>,     <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DO"</literal></expr>,               <expr><literal type="string">"TK_DO"</literal></expr>,           <expr><name>UPSERT</name></expr>,           <expr><literal type="number">2</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"DROP"</literal></expr>,             <expr><literal type="string">"TK_DROP"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"END"</literal></expr>,              <expr><literal type="string">"TK_END"</literal></expr>,          <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"EACH"</literal></expr>,             <expr><literal type="string">"TK_EACH"</literal></expr>,         <expr><name>TRIGGER</name></expr>,          <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ELSE"</literal></expr>,             <expr><literal type="string">"TK_ELSE"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">2</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ESCAPE"</literal></expr>,           <expr><literal type="string">"TK_ESCAPE"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">4</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"EXCEPT"</literal></expr>,           <expr><literal type="string">"TK_EXCEPT"</literal></expr>,       <expr><name>COMPOUND</name></expr>,         <expr><literal type="number">4</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"EXCLUSIVE"</literal></expr>,        <expr><literal type="string">"TK_EXCLUSIVE"</literal></expr>,    <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"EXCLUDE"</literal></expr>,          <expr><literal type="string">"TK_EXCLUDE"</literal></expr>,      <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"EXISTS"</literal></expr>,           <expr><literal type="string">"TK_EXISTS"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">4</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"EXPLAIN"</literal></expr>,          <expr><literal type="string">"TK_EXPLAIN"</literal></expr>,      <expr><name>EXPLAIN</name></expr>,          <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FAIL"</literal></expr>,             <expr><literal type="string">"TK_FAIL"</literal></expr>,         <expr><name>CONFLICT</name><operator>|</operator><name>TRIGGER</name></expr>, <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FILTER"</literal></expr>,           <expr><literal type="string">"TK_FILTER"</literal></expr>,       <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">4</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FIRST"</literal></expr>,            <expr><literal type="string">"TK_FIRST"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">4</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FOLLOWING"</literal></expr>,        <expr><literal type="string">"TK_FOLLOWING"</literal></expr>,    <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">4</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FOR"</literal></expr>,              <expr><literal type="string">"TK_FOR"</literal></expr>,          <expr><name>TRIGGER</name></expr>,          <expr><literal type="number">2</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FOREIGN"</literal></expr>,          <expr><literal type="string">"TK_FOREIGN"</literal></expr>,      <expr><name>FKEY</name></expr>,             <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FROM"</literal></expr>,             <expr><literal type="string">"TK_FROM"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FULL"</literal></expr>,             <expr><literal type="string">"TK_JOIN_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"FUNCTION"</literal></expr>,          <expr><literal type="string">"TK_FUNCTION"</literal></expr>,    <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>,     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"GENERATED"</literal></expr>,        <expr><literal type="string">"TK_GENERATED"</literal></expr>,    <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"GLOB"</literal></expr>,             <expr><literal type="string">"TK_LIKE_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"GROUP"</literal></expr>,            <expr><literal type="string">"TK_GROUP"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"GROUPS"</literal></expr>,           <expr><literal type="string">"TK_GROUPS"</literal></expr>,       <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">2</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"HAVING"</literal></expr>,           <expr><literal type="string">"TK_HAVING"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"IF"</literal></expr>,               <expr><literal type="string">"TK_IF"</literal></expr>,           <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">2</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"IGNORE"</literal></expr>,           <expr><literal type="string">"TK_IGNORE"</literal></expr>,       <expr><name>CONFLICT</name><operator>|</operator><name>TRIGGER</name></expr>, <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"IMMEDIATE"</literal></expr>,        <expr><literal type="string">"TK_IMMEDIATE"</literal></expr>,    <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"IN"</literal></expr>,               <expr><literal type="string">"TK_IN"</literal></expr>,           <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"INDEX"</literal></expr>,            <expr><literal type="string">"TK_INDEX"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"INDEXED"</literal></expr>,          <expr><literal type="string">"TK_INDEXED"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"INITIALLY"</literal></expr>,        <expr><literal type="string">"TK_INITIALLY"</literal></expr>,    <expr><name>FKEY</name></expr>,             <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"INNER"</literal></expr>,            <expr><literal type="string">"TK_JOIN_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"INSERT"</literal></expr>,           <expr><literal type="string">"TK_INSERT"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"INSTEAD"</literal></expr>,          <expr><literal type="string">"TK_INSTEAD"</literal></expr>,      <expr><name>TRIGGER</name></expr>,          <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"INTERSECT"</literal></expr>,        <expr><literal type="string">"TK_INTERSECT"</literal></expr>,    <expr><name>COMPOUND</name></expr>,         <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"INTO"</literal></expr>,             <expr><literal type="string">"TK_INTO"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"IS"</literal></expr>,               <expr><literal type="string">"TK_IS"</literal></expr>,           <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ISNULL"</literal></expr>,           <expr><literal type="string">"TK_ISNULL"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"JOIN"</literal></expr>,             <expr><literal type="string">"TK_JOIN"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"KEY"</literal></expr>,              <expr><literal type="string">"TK_KEY"</literal></expr>,          <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"LANGUAGE"</literal></expr>,         <expr><literal type="string">"TK_LANGUAGE"</literal></expr>,     <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"LAST"</literal></expr>,             <expr><literal type="string">"TK_LAST"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">4</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"LEFT"</literal></expr>,             <expr><literal type="string">"TK_JOIN_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"LIKE"</literal></expr>,             <expr><literal type="string">"TK_LIKE_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"LIMIT"</literal></expr>,            <expr><literal type="string">"TK_LIMIT"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"MATCH"</literal></expr>,            <expr><literal type="string">"TK_MATCH"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">2</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"MATERIALIZED"</literal></expr>,     <expr><literal type="string">"TK_MATERIALIZED"</literal></expr>, <expr><name>CTE</name></expr>,              <expr><literal type="number">12</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"NATURAL"</literal></expr>,          <expr><literal type="string">"TK_JOIN_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"NO"</literal></expr>,               <expr><literal type="string">"TK_NO"</literal></expr>,           <expr><name>FKEY</name><operator>|</operator><name>WINDOWFUNC</name></expr>,  <expr><literal type="number">2</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"NOT"</literal></expr>,              <expr><literal type="string">"TK_NOT"</literal></expr>,          <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"NOTHING"</literal></expr>,          <expr><literal type="string">"TK_NOTHING"</literal></expr>,      <expr><name>UPSERT</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"NOTNULL"</literal></expr>,          <expr><literal type="string">"TK_NOTNULL"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"NULL"</literal></expr>,             <expr><literal type="string">"TK_NULL"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"NULLS"</literal></expr>,            <expr><literal type="string">"TK_NULLS"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"OF"</literal></expr>,               <expr><literal type="string">"TK_OF"</literal></expr>,           <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"OFFSET"</literal></expr>,           <expr><literal type="string">"TK_OFFSET"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ON"</literal></expr>,               <expr><literal type="string">"TK_ON"</literal></expr>,           <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"OR"</literal></expr>,               <expr><literal type="string">"TK_OR"</literal></expr>,           <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">9</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ORDER"</literal></expr>,            <expr><literal type="string">"TK_ORDER"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"OTHERS"</literal></expr>,           <expr><literal type="string">"TK_OTHERS"</literal></expr>,       <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"OUTER"</literal></expr>,            <expr><literal type="string">"TK_JOIN_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">5</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"OVER"</literal></expr>,             <expr><literal type="string">"TK_OVER"</literal></expr>,         <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"PARTITION"</literal></expr>,        <expr><literal type="string">"TK_PARTITION"</literal></expr>,    <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"PLAN"</literal></expr>,             <expr><literal type="string">"TK_PLAN"</literal></expr>,         <expr><name>EXPLAIN</name></expr>,          <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"PRAGMA"</literal></expr>,           <expr><literal type="string">"TK_PRAGMA"</literal></expr>,       <expr><name>PRAGMA</name></expr>,           <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"PRECEDING"</literal></expr>,        <expr><literal type="string">"TK_PRECEDING"</literal></expr>,    <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"PRIMARY"</literal></expr>,          <expr><literal type="string">"TK_PRIMARY"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"QUERY"</literal></expr>,            <expr><literal type="string">"TK_QUERY"</literal></expr>,        <expr><name>EXPLAIN</name></expr>,          <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"RAISE"</literal></expr>,            <expr><literal type="string">"TK_RAISE"</literal></expr>,        <expr><name>TRIGGER</name></expr>,          <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"RANDOM"</literal></expr>,           <expr><literal type="string">"TK_RANDOM"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"RANGE"</literal></expr>,            <expr><literal type="string">"TK_RANGE"</literal></expr>,        <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"RECURSIVE"</literal></expr>,        <expr><literal type="string">"TK_RECURSIVE"</literal></expr>,    <expr><name>CTE</name></expr>,              <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"REFERENCES"</literal></expr>,       <expr><literal type="string">"TK_REFERENCES"</literal></expr>,   <expr><name>FKEY</name></expr>,             <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"REGEXP"</literal></expr>,           <expr><literal type="string">"TK_LIKE_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"REINDEX"</literal></expr>,          <expr><literal type="string">"TK_REINDEX"</literal></expr>,      <expr><name>REINDEX</name></expr>,          <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"RELEASE"</literal></expr>,          <expr><literal type="string">"TK_RELEASE"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"RENAME"</literal></expr>,           <expr><literal type="string">"TK_RENAME"</literal></expr>,       <expr><name>ALTER</name></expr>,            <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"REPLACE"</literal></expr>,          <expr><literal type="string">"TK_REPLACE"</literal></expr>,      <expr><name>CONFLICT</name></expr>,         <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"RESTRICT"</literal></expr>,         <expr><literal type="string">"TK_RESTRICT"</literal></expr>,     <expr><name>FKEY</name></expr>,             <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"RETURNING"</literal></expr>,        <expr><literal type="string">"TK_RETURNING"</literal></expr>,    <expr><name>RETURNING</name></expr>,        <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"RIGHT"</literal></expr>,            <expr><literal type="string">"TK_JOIN_KW"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">0</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ROLLBACK"</literal></expr>,         <expr><literal type="string">"TK_ROLLBACK"</literal></expr>,     <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ROW"</literal></expr>,              <expr><literal type="string">"TK_ROW"</literal></expr>,          <expr><name>TRIGGER</name></expr>,          <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"ROWS"</literal></expr>,             <expr><literal type="string">"TK_ROWS"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"SAVEPOINT"</literal></expr>,        <expr><literal type="string">"TK_SAVEPOINT"</literal></expr>,    <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"SELECT"</literal></expr>,           <expr><literal type="string">"TK_SELECT"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"SET"</literal></expr>,              <expr><literal type="string">"TK_SET"</literal></expr>,          <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"TABLE"</literal></expr>,            <expr><literal type="string">"TK_TABLE"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"TEMP"</literal></expr>,             <expr><literal type="string">"TK_TEMP"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"TEMPORARY"</literal></expr>,        <expr><literal type="string">"TK_TEMP"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"THEN"</literal></expr>,             <expr><literal type="string">"TK_THEN"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"TIES"</literal></expr>,             <expr><literal type="string">"TK_TIES"</literal></expr>,         <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"TO"</literal></expr>,               <expr><literal type="string">"TK_TO"</literal></expr>,           <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"TRANSACTION"</literal></expr>,      <expr><literal type="string">"TK_TRANSACTION"</literal></expr>,  <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"TRIGGER"</literal></expr>,          <expr><literal type="string">"TK_TRIGGER"</literal></expr>,      <expr><name>TRIGGER</name></expr>,          <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"UNBOUNDED"</literal></expr>,        <expr><literal type="string">"TK_UNBOUNDED"</literal></expr>,    <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"UNION"</literal></expr>,            <expr><literal type="string">"TK_UNION"</literal></expr>,        <expr><name>COMPOUND</name></expr>,         <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"UNIQUE"</literal></expr>,           <expr><literal type="string">"TK_UNIQUE"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"UPDATE"</literal></expr>,           <expr><literal type="string">"TK_UPDATE"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"USING"</literal></expr>,            <expr><literal type="string">"TK_USING"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">8</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"VACUUM"</literal></expr>,           <expr><literal type="string">"TK_VACUUM"</literal></expr>,       <expr><name>VACUUM</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"VALUES"</literal></expr>,           <expr><literal type="string">"TK_VALUES"</literal></expr>,       <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"VIEW"</literal></expr>,             <expr><literal type="string">"TK_VIEW"</literal></expr>,         <expr><name>VIEW</name></expr>,             <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"VIRTUAL"</literal></expr>,          <expr><literal type="string">"TK_VIRTUAL"</literal></expr>,      <expr><name>VTAB</name></expr>,             <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"WHEN"</literal></expr>,             <expr><literal type="string">"TK_WHEN"</literal></expr>,         <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"WHERE"</literal></expr>,            <expr><literal type="string">"TK_WHERE"</literal></expr>,        <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">10</literal></expr>     }</block></expr>,
  <expr><block>{ <expr><literal type="string">"WINDOW"</literal></expr>,           <expr><literal type="string">"TK_WINDOW"</literal></expr>,       <expr><name>WINDOWFUNC</name></expr>,       <expr><literal type="number">3</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"WITH"</literal></expr>,             <expr><literal type="string">"TK_WITH"</literal></expr>,         <expr><name>CTE</name></expr>,              <expr><literal type="number">4</literal></expr>      }</block></expr>,
  <expr><block>{ <expr><literal type="string">"WITHOUT"</literal></expr>,          <expr><literal type="string">"TK_WITHOUT"</literal></expr>,      <expr><name>ALWAYS</name></expr>,           <expr><literal type="number">1</literal></expr>      }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Number of keywords */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nKeyword</name> <init>= <expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aKeywordTable</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aKeywordTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>

<comment type="block">/* Map all alphabetic characters into lower-case for hashing.  This is
** only valid for alphabetics.  In particular it does not work for '_'
** and so the hash cannot be on a keyword position that might be an '_'.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>charMap</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(0x20|(X))</cpp:value></cpp:define>

<comment type="block">/*
** Comparision function for two Keyword records
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>keywordCompare1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Keyword</name> <modifier>*</modifier></type><name>pA</name> <init>= <expr><operator>(</operator><name>Keyword</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Keyword</name> <modifier>*</modifier></type><name>pB</name> <init>= <expr><operator>(</operator><name>Keyword</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>pA</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>pB</name><operator>-&gt;</operator><name>len</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pA</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>pB</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>n</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>keywordCompare2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Keyword</name> <modifier>*</modifier></type><name>pA</name> <init>= <expr><operator>(</operator><name>Keyword</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Keyword</name> <modifier>*</modifier></type><name>pB</name> <init>= <expr><operator>(</operator><name>Keyword</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>pB</name><operator>-&gt;</operator><name>longestSuffix</name></name> <operator>-</operator> <name><name>pA</name><operator>-&gt;</operator><name>longestSuffix</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pA</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>pB</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>n</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>keywordCompare3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Keyword</name> <modifier>*</modifier></type><name>pA</name> <init>= <expr><operator>(</operator><name>Keyword</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>Keyword</name> <modifier>*</modifier></type><name>pB</name> <init>= <expr><operator>(</operator><name>Keyword</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>pA</name><operator>-&gt;</operator><name>offset</name></name> <operator>-</operator> <name><name>pB</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pB</name><operator>-&gt;</operator><name>id</name></name> <operator>-</operator> <name><name>pA</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>n</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a KeywordTable entry with the given id
*/</comment>
<function><type><specifier>static</specifier> <name>Keyword</name> <modifier>*</modifier></type><name>findById</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name><operator>==</operator><name>id</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If aKeyword[*pFrom-1].iNext has a higher priority that aKeyword[*pFrom-1]
** itself, then swap them.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>reorder</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pFrom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>pFrom</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iNext</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>priority</name> <operator>&gt;=</operator> <name><name>aKeywordTable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>priority</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iNext</name> <operator>=</operator> <name><name>aKeywordTable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iNext</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aKeywordTable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iNext</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pFrom</name> <operator>=</operator> <name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>reorder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Parameter to the hash function
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_OP</name></cpp:macro> <cpp:value>^</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_CC</name></cpp:macro> <cpp:value>'^'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_C0</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_C1</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASH_C2</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<comment type="block">/*
** This routine does the work.  The generated code is printed on standard
** output.
*/</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bestSize</name></decl>, <decl><type ref="prev"/><name>bestCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nChar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>totalLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>aKWHash</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* 1000 is much bigger than nKeyword */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zKWText</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Remove entries from the list of keywords that have mask==0 */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mask</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&lt;</operator><name>i</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>aKeywordTable</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>nKeyword</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

  <comment type="block">/* Fill in the lengths of strings and hashes for all entries. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Keyword</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zOrigName</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zOrigName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <operator>(</operator><call><name>charMap</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><name>HASH_C0</name><operator>)</operator> <macro><name>HASH_OP</name>
              <argument_list>(<argument>charMap(p-&gt;zName[p-&gt;len-<literal type="number">1</literal>])*HASH_C1</argument>)</argument_list></macro> <call><name>HASH_OP</name>
              <argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name><operator>*</operator><name>HASH_C2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Sort the table from shortest to longest keyword */</comment>
  <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>aKeywordTable</name></expr></argument>, <argument><expr><name>nKeyword</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aKeywordTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>keywordCompare1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Look for short keywords embedded in longer keywords */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>nKeyword</name><operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Keyword</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>nKeyword</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><name>i</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>substrId</name></name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Keyword</name> <modifier>*</modifier></type><name>pOther</name> <init>= <expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pOther</name><operator>-&gt;</operator><name>substrId</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pOther</name><operator>-&gt;</operator><name>len</name></name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><name><name>pOther</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pOther</name><operator>-&gt;</operator><name>zName</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>substrId</name></name> <operator>=</operator> <name><name>pOther</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>substrOffset</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <comment type="block">/* Compute the longestSuffix value for every word */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Keyword</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>substrId</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Keyword</name> <modifier>*</modifier></type><name>pOther</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><name>i</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>pOther</name> <operator>=</operator> <operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pOther</name><operator>-&gt;</operator><name>substrId</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <for>for<control>(<init><expr><name>k</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>longestSuffix</name></name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;&amp;</operator> <name>k</name><operator>&lt;</operator><name><name>pOther</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zName</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pOther</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>longestSuffix</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <comment type="block">/* Sort the table into reverse order by length */</comment>
  <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>aKeywordTable</name></expr></argument>, <argument><expr><name>nKeyword</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aKeywordTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>keywordCompare2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Fill in the offset for all entries */</comment>
  <expr_stmt><expr><name>nChar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Keyword</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>substrId</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>nChar</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nChar</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>k</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Keyword</name> <modifier>*</modifier></type><name>pOther</name> <init>= <expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pOther</name><operator>-&gt;</operator><name>offset</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pOther</name><operator>-&gt;</operator><name>substrId</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pOther</name><operator>-&gt;</operator><name>len</name></name><operator>&lt;=</operator><name>k</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zName</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name><operator>-</operator><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pOther</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <name>pOther</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>nChar</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nChar</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Keyword</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>substrId</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>findById</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>substrId</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>offset</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>substrOffset</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Sort the table by offset */</comment>
  <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>aKeywordTable</name></expr></argument>, <argument><expr><name>nKeyword</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aKeywordTable</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>keywordCompare3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Figure out how big to make the hash table in order to minimize the
  ** number of collisions */</comment>
  <expr_stmt><expr><name>bestSize</name> <operator>=</operator> <name>nKeyword</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bestCount</name> <operator>=</operator> <name>nKeyword</name><operator>*</operator><name>nKeyword</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>nKeyword</name><operator>/</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">2</literal><operator>*</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aKWHash</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>aKeywordTable</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hash</name> <operator>%</operator> <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aKWHash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aKWHash</name><index>[<expr><name>h</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>count</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>aKWHash</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
    <if_stmt><if>if<condition>( <expr><name>count</name><operator>&lt;</operator><name>bestCount</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>bestCount</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>bestSize</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Compute the hash */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>bestSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aKWHash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hash</name> <operator>%</operator> <name>bestSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iNext</name> <operator>=</operator> <name><name>aKWHash</name><index>[<expr><name>h</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aKWHash</name><index>[<expr><name>h</name></expr>]</index></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reorder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aKWHash</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Begin generating code */</comment>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zHdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* Hash score: %d */\n"</literal></expr></argument>, <argument><expr><name>bestCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* zKWText[] encodes %d bytes of keyword text in %d bytes */\n"</literal></expr></argument>,
          <argument><expr><name>totalLen</name> <operator>+</operator> <name>nKeyword</name></expr></argument>, <argument><expr><name>nChar</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Keyword</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>substrId</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zKWText</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>len</name></name><operator>&gt;</operator><literal type="number">70</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s */\n"</literal></expr></argument>, <argument><expr><literal type="number">74</literal><operator>-</operator><name>j</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/*   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s */\n"</literal></expr></argument>, <argument><expr><literal type="number">74</literal><operator>-</operator><name>j</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const char zKWText[%d] = {\n"</literal></expr></argument>, <argument><expr><name>nChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zKWText</name><index>[<expr><name>nChar</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>zKWText</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'%c',"</literal></expr></argument>, <argument><expr><name><name>zKWText</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">68</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* aKWHash[i] is the hash value for the i-th keyword */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const unsigned char aKWHash[%d] = {\n"</literal></expr></argument>, <argument><expr><name>bestSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>bestSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %3d,"</literal></expr></argument>, <argument><expr><name><name>aKWHash</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s};\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* aKWNext[] forms the hash collision chain.  If aKWHash[i]==0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** then the i-th keyword has no more hash collisions.  Otherwise,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** the next keyword with the same hash is aKWHash[i]-1. */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const unsigned char aKWNext[%d] = {\n"</literal></expr></argument>, <argument><expr><name>nKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %3d,"</literal></expr></argument>, <argument><expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s};\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* aKWLen[i] is the length (in bytes) of the i-th keyword */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const unsigned char aKWLen[%d] = {\n"</literal></expr></argument>, <argument><expr><name>nKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %3d,"</literal></expr></argument>, <argument><expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name><operator>+</operator><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s};\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>    

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* aKWOffset[i] is the index into zKWText[] of the start of\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** the text for the i-th keyword. */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const unsigned short int aKWOffset[%d] = {\n"</literal></expr></argument>, <argument><expr><name>nKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %3d,"</literal></expr></argument>, <argument><expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s};\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* aKWCode[i] is the parser symbol code for the i-th keyword */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const unsigned char aKWCode[%d] = {\n"</literal></expr></argument>, <argument><expr><name>nKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zToken</name> <init>= <expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zTokenType</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s,%*s"</literal></expr></argument>, <argument><expr><name>zToken</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">14</literal><operator>-</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zToken</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s};\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\n"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* Hash table decoded:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>bestSize</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>aKWHash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** %3d:"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>j</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>aKeywordTable</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>zOrigName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>aKeywordTable</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iNext</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*/\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* Check to see if z[0..n-1] is a keyword. If it is, write the\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** parser symbol code for that keyword into *pType.  Always\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"** return the integer n (the length of the token). */\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static int keywordCode(const char *z, int n, int *pType){\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  int i, j;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  const char *zKW;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  if( n&gt;=2 ){\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    i = ((charMap(z[0])*%d) %c"</literal></expr></argument>, <argument><expr><name>HASH_C0</name></expr></argument>, <argument><expr><name>HASH_CC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" (charMap(z[n-1])*%d) %c"</literal></expr></argument>, <argument><expr><name>HASH_C1</name></expr></argument>, <argument><expr><name>HASH_CC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" n*%d) %% %d;\n"</literal></expr></argument>, <argument><expr><name>HASH_C2</name></expr></argument>, <argument><expr><name>bestSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    for(i=((int)aKWHash[i])-1; i&gt;=0; i=((int)aKWNext[i])-1){\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      if( aKWLen[i]!=n ) continue;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      zKW = &amp;zKWText[aKWOffset[i]];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#ifdef SQLITE_ASCII\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      if( (z[0]&amp;~0x20)!=zKW[0] ) continue;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      if( (z[1]&amp;~0x20)!=zKW[1] ) continue;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      j = 2;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      while( j&lt;n &amp;&amp; (z[j]&amp;~0x20)==zKW[j] ){ j++; }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#ifdef SQLITE_EBCDIC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      if( toupper(z[0])!=zKW[0] ) continue;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      if( toupper(z[1])!=zKW[1] ) continue;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      j = 2;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      while( j&lt;n &amp;&amp; toupper(z[j])==zKW[j] ){ j++; }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      if( j&lt;n ) continue;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKeyword</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      testcase( i==%d ); /* %s */\n"</literal></expr></argument>,
           <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>aKeywordTable</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zOrigName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      *pType = aKWCode[i];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"      break;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  return n;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int sqlite3KeywordCode(const unsigned char *z, int n){\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  int id = TK_ID;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  keywordCode((char*)z, n, &amp;id);\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  return id;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"#define SQLITE_N_KEYWORD %d\n"</literal></expr></argument>, <argument><expr><name>nKeyword</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int sqlite3_keyword_name(int i,const char **pzName,int *pnName){\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  if( i&lt;0 || i&gt;=SQLITE_N_KEYWORD ) return SQLITE_ERROR;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  *pzName = zKWText + aKWOffset[i];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  *pnName = aKWLen[i];\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  return SQLITE_OK;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int sqlite3_keyword_count(void){ return SQLITE_N_KEYWORD; }\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"int sqlite3_keyword_check(const char *zName, int nName){\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  return TK_ID!=sqlite3KeywordCode((const u8*)zName, nName);\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
