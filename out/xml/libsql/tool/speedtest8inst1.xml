<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/tool/speedtest8inst1.c"><comment type="block">/*
** Performance test for SQLite.
**
** This program reads ASCII text from a file named on the command-line
** and submits that text  to SQLite for evaluation.  A new database
** is created at the beginning of the program.  All statements are
** timed using the high-resolution timer built into Intel-class processors.
**
** To compile this program, first compile the SQLite library separately
** will full optimizations.  For example:
**
**     gcc -c -O6 -DSQLITE_THREADSAFE=0 sqlite3.c
**
** Then link against this program.  But to do optimize this program
** because that defeats the hi-res timer.
**
**     gcc speedtest8.c sqlite3.o -ldl -I../src
**
** Then run this program with a single argument which is the name of
** a file containing SQL script that you want to test:
**
**     ./a.out test.db  test.sql
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSPACE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>isspace((unsigned char)(X))</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_osinst.c"</cpp:file></cpp:include>

<comment type="block">/*
** Prepare and run a single statement of SQL.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>prepareAndRun</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pInstVfs</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stmtTail</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zMessage</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>zMessage</name><index>[<expr><literal type="number">1023</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>iTime</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>zMessage</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_prepare_v2: %s"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_instvfs_binarylog_marker</name><argument_list>(<argument><expr><name>pInstVfs</name></expr></argument>, <argument><expr><name>zMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>iTime</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmtTail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iTime</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>iTime</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_instvfs_binarylog_call</name><argument_list>(<argument><expr><name>pInstVfs</name></expr></argument>,<argument><expr><name>BINARYLOG_PREPARE_V2</name></expr></argument>,<argument><expr><name>iTime</name></expr></argument>,<argument><expr><name>rc</name></expr></argument>,<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>zMessage</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_step loop: %s"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_instvfs_binarylog_marker</name><argument_list>(<argument><expr><name>pInstVfs</name></expr></argument>, <argument><expr><name>zMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iTime</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>rc</name><operator>=</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>nRow</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
    <expr_stmt><expr><name>iTime</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>iTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_instvfs_binarylog_call</name><argument_list>(<argument><expr><name>pInstVfs</name></expr></argument>, <argument><expr><name>BINARYLOG_STEP</name></expr></argument>, <argument><expr><name>iTime</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">1023</literal></expr></argument>, <argument><expr><name>zMessage</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_finalize: %s"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_instvfs_binarylog_marker</name><argument_list>(<argument><expr><name>pInstVfs</name></expr></argument>, <argument><expr><name>zMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iTime</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iTime</name> <operator>=</operator> <call><name>sqlite3Hwtime</name><argument_list>()</argument_list></call> <operator>-</operator> <name>iTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_instvfs_binarylog_call</name><argument_list>(<argument><expr><name>pInstVfs</name></expr></argument>, <argument><expr><name>BINARYLOG_FINALIZE</name></expr></argument>, <argument><expr><name>iTime</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stringcompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLeft</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRight</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zLeft</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>zRight</name><index>[<expr><name>ii</name></expr>]</index></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>zLeft</name><index>[<expr><name>ii</name></expr>]</index></name><operator>!=</operator><name><name>zRight</name><index>[<expr><name>ii</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return<expr><operator>(</operator> <name><name>zLeft</name><index>[<expr><name>ii</name></expr>]</index></name><operator>==</operator><name><name>zRight</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>readScriptFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnScript</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name> <init>= <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SQLITE_OPEN_READONLY</name><operator>|</operator><name>SQLITE_OPEN_MAIN_DB</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>sqlite3_file</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name><name>pVfs</name><operator>-&gt;</operator><name>szOsFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pVfs</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <goto>goto <name>error_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <goto>goto <name>close_out</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zData</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>nByte</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <goto>goto <name>close_out</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>zData</name><index>[<expr><name>nByte</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnScript</name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt>
  <return>return <expr><name>zData</name></expr>;</return>

<label><name>close_out</name>:</label>
  <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error_out</name>:</label>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>zUsageMsg</name><index>[]</index></name> <init>= 
    <expr><literal type="string">"Usage: %s options...\n"</literal>
    <literal type="string">"  where available options are:\n"</literal>
    <literal type="string">"\n"</literal>
    <literal type="string">"    -db      DATABASE-FILE  (database file to operate on)\n"</literal>
    <literal type="string">"    -script  SCRIPT-FILE    (script file to read sql from)\n"</literal>
    <literal type="string">"    -log     LOG-FILE       (log file to create)\n"</literal>
    <literal type="string">"    -logdata                (log all data to log file)\n"</literal>
    <literal type="string">"\n"</literal>
    <literal type="string">"  Options -db, -script and -log are compulsory\n"</literal>
    <literal type="string">"\n"</literal></expr></init></decl>
  ;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zScript</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLog</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>logdata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pInstVfs</name></decl>;</decl_stmt>                 <comment type="block">/* Instrumentation VFS */</comment>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nSql</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>stringcompare</name><argument_list>(<argument><expr><literal type="string">"-db"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ii</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;</operator><name>argc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zDb</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <if type="elseif">else if<condition>( <expr><call><name>stringcompare</name><argument_list>(<argument><expr><literal type="string">"-script"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ii</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;</operator><name>argc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zScript</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <if type="elseif">else if<condition>( <expr><call><name>stringcompare</name><argument_list>(<argument><expr><literal type="string">"-log"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>ii</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;</operator><name>argc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zLog</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>ii</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <if type="elseif">else if<condition>( <expr><call><name>stringcompare</name><argument_list>(<argument><expr><literal type="string">"-logdata"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>logdata</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>

    <else>else <block>{<block_content>
      <goto>goto <name>usage</name>;</goto>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zDb</name> <operator>||</operator> <operator>!</operator><name>zScript</name> <operator>||</operator> <operator>!</operator><name>zLog</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>usage</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>readScriptFile</name><argument_list>(<argument><expr><name>zScript</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zSql</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to read script file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pInstVfs</name> <operator>=</operator> <call><name>sqlite3_instvfs_binarylog</name><argument_list>(<argument><expr><literal type="string">"logging"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zLog</name></expr></argument>, <argument><expr><name>logdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(
     <argument><expr><name>zDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_CREATE</name></expr></argument>, <argument><expr><literal type="string">"logging"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to open db: %s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>nSql</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="char">';'</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>isComplete</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>zSql</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>isComplete</name> <operator>=</operator> <call><name>sqlite3_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>isComplete</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>j</name> <operator>&amp;&amp;</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><name>j</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>prepareAndRun</name><argument_list>(<argument><expr><name>pInstVfs</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  
  <expr_stmt><expr><call><name>sqlite3_instvfs_destroy</name><argument_list>(<argument><expr><name>pInstVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
  
<label><name>usage</name>:</label>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>zUsageMsg</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return>
</block_content>}</block></function>
</unit>
