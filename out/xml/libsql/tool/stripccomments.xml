<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/tool/stripccomments.c"><comment type="block" format="doxygen">/**
   Strips C- and C++-style comments from stdin, sending the results to
   stdout. It assumes that its input is legal C-like code, and does
   only little error handling.

   It treats string literals as anything starting and ending with
   matching double OR single quotes OR backticks (for use with
   scripting languages which use those). It assumes that a quote
   character within a string which uses the same quote type is escaped
   by a backslash. It should not be used on any code which might
   contain C/C++ comments inside heredocs, and similar constructs, as
   it will strip those out.

   Usage: $0 [--keep-first|-k] &lt; input &gt; output

   The --keep-first (-k) flag tells it to retain the first comment in the
   input stream (which is often a license or attribution block). It
   may be given repeatedly, each one incrementing the number of
   retained comments by one.

   License: Public Domain
   Author: Stephan Beal (stephan@wanderinghorse.net)
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARKER</name><parameter_list>(<parameter><type><name>pfexp</name></type></parameter>)</parameter_list></cpp:macro>                                                \
  <cpp:value>do{ printf("MARKER: %s:%d:\t",__FILE__,__LINE__);                  \
    printf pfexp;                                                    \
  } while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MARKER</name><parameter_list>(<parameter><type><name>exp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(0) printf</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <block>{
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>input</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>output</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>keepFirst</name></decl>;</decl_stmt>
}</block> <decl><name>App</name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr><comment type="block">/*input*/</comment>,
  <expr><literal type="number">0</literal></expr><comment type="block">/*output*/</comment>,
  <expr><literal type="number">0</literal></expr><comment type="block">/*rc*/</comment>,
  <expr><literal type="number">0</literal></expr><comment type="block">/*keepFirst*/</comment>
}</block></expr></init></decl>;</struct>

<function><type><name>void</name></type> <name>do_it_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <enum>enum <name>states</name> <block>{
    <decl><name>S_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> <comment type="block">/* not in comment */</comment>,
    <decl><name>S_SLASH1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> <comment type="block">/* slash - possibly comment prefix */</comment>,
    <decl><name>S_CPP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> <comment type="block">/* in C++ comment */</comment>,
    <decl><name>S_C</name> <init>= <expr><literal type="number">3</literal></expr></init></decl> <comment type="block">/* in C comment */</comment>
  }</block>;</enum>
  <decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>prev</name> <init>= <expr><name>EOF</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type> <name>out</name> <init>= <expr><name><name>App</name><operator>.</operator><name>output</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>slash</name> <init>= <expr><literal type="char">'/'</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>star</name> <init>= <expr><literal type="char">'*'</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>enum</name> <name>states</name></name></type> <name>state</name> <init>= <expr><name>S_NONE</name></expr></init></decl> <comment type="block">/* current state */</comment>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>elide</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> <comment type="block">/* true if currently eliding output */</comment>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>state3Col</name> <init>= <expr><operator>-</operator><literal type="number">99</literal></expr></init></decl>
    <comment type="block">/* huge kludge for odd corner case: */</comment>
    <comment type="block">/*/ &lt;--- here. state3Col marks the source column in which a C-style
      comment starts, so that it can tell if star-slash inside a
      C-style comment is the end of the comment or is the weird corner
      case marked at the start of _this_ comment block. */</comment>;</decl_stmt>
  <for>for<control>( <init>;</init> <condition><expr><name>EOF</name> <operator>!=</operator> <operator>(</operator><name>ch</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name><name>App</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><name>prev</name> <operator>=</operator> <name>ch</name></expr><operator>,</operator>
         <expr><operator>++</operator><name>col</name></expr></incr>)</control><block>{<block_content>
    <switch>switch<condition>(<expr><name>state</name></expr>)</condition><block>{<block_content>
      <case>case <expr><name>S_NONE</name></expr>:</case>
        <if_stmt><if>if<condition>(<expr><literal type="char">'\''</literal><operator>==</operator><name>ch</name> <operator>||</operator> <literal type="char">'"'</literal><operator>==</operator><name>ch</name> <operator>||</operator> <literal type="char">'`'</literal><operator>==</operator><name>ch</name></expr>)</condition><block>{<block_content>
          <comment type="block">/* Read string literal...
             needed to properly catch comments in strings. */</comment>
          <decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>quote</name> <init>= <expr><name>ch</name></expr></init></decl>,
            <decl><type ref="prev"/><name>startLine</name> <init>= <expr><name>line</name></expr></init></decl>, <decl><type ref="prev"/><name>startCol</name> <init>= <expr><name>col</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>ch2</name></decl>, <decl><type ref="prev"/><name>escaped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>endOfString</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for<control>( <init><expr><operator>++</operator><name>col</name></expr>;</init> <condition><expr><operator>!</operator><name>endOfString</name> <operator>&amp;&amp;</operator> <name>EOF</name> <operator>!=</operator> <operator>(</operator><name>ch2</name> <operator>=</operator> <call><name>fgetc</name><argument_list>(<argument><expr><name><name>App</name><operator>.</operator><name>input</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition>
               <incr><expr><operator>++</operator><name>col</name></expr></incr> )</control><block>{<block_content>
            <switch>switch<condition>(<expr><name>ch2</name></expr>)</condition><block>{<block_content>
              <case>case <expr><literal type="char">'\\'</literal></expr>:</case> <expr_stmt><expr><name>escaped</name> <operator>=</operator> <operator>!</operator><name>escaped</name></expr>;</expr_stmt>
                <break>break;</break>
              <case>case <expr><literal type="char">'`'</literal></expr>:</case>
              <case>case <expr><literal type="char">'\''</literal></expr>:</case>
              <case>case <expr><literal type="char">'"'</literal></expr>:</case>
                <if_stmt><if>if<condition>(<expr><operator>!</operator><name>escaped</name> <operator>&amp;&amp;</operator> <name>quote</name> <operator>==</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>endOfString</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>escaped</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
              <default>default:</default>
                <expr_stmt><expr><name>escaped</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
            <if_stmt><if>if<condition>(<expr><literal type="char">'\n'</literal><operator>==</operator><name>ch2</name></expr>)</condition><block>{<block_content>
              <expr_stmt><expr><operator>++</operator><name>line</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>ch2</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <if_stmt><if>if<condition>(<expr><name>EOF</name> <operator>==</operator> <name>ch2</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unexpected EOF while reading %s literal "</literal>
                    <literal type="string">"on line %d column %d.\n"</literal></expr></argument>,
                    <argument><expr><ternary><condition><expr><operator>(</operator><literal type="char">'\''</literal><operator>==</operator><name>ch</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"char"</literal></expr> </then><else>: <expr><literal type="string">"string"</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><name>startLine</name></expr></argument>, <argument><expr><name>startCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>App</name><operator>.</operator><name>rc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <return>return;</return>
          </block_content>}</block></if></if_stmt>
          <break>break;</break>
        </block_content>}</block></if>
        <if type="elseif">else if<condition>(<expr><name>slash</name> <operator>==</operator> <name>ch</name></expr>)</condition><block>{<block_content>
          <comment type="block">/* MARKER(("state 0 ==&gt; 1 @ %d:%d\n", line, col)); */</comment>
          <expr_stmt><expr><name>state</name> <operator>=</operator> <name>S_SLASH1</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>S_SLASH1</name></expr>:</case> <comment type="block">/* 1 slash */</comment>
        <comment type="block">/* MARKER(("SLASH1 @ %d:%d App.keepFirst=%d\n",
           line, col, App.keepFirst)); */</comment>
        <switch>switch<condition>(<expr><name>ch</name></expr>)</condition><block>{<block_content>
          <case>case <expr><literal type="char">'*'</literal></expr>:</case>
            <comment type="block">/* Enter C comment */</comment>
            <if_stmt><if>if<condition>(<expr><name><name>App</name><operator>.</operator><name>keepFirst</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
              <expr_stmt><expr><name>elide</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <expr_stmt><expr><operator>--</operator><name><name>App</name><operator>.</operator><name>keepFirst</name></name></expr>;</expr_stmt>
            </block_content>}</block></if><else>else<block>{<block_content>
              <expr_stmt><expr><name>elide</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <comment type="block">/*MARKER(("state 1 ==&gt; 3 @ %d:%d\n", line, col));*/</comment>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>S_C</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>state3Col</name> <operator>=</operator> <name>col</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>elide</name></expr>)</condition><block>{<block_content>
              <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
          <case>case <expr><literal type="char">'/'</literal></expr>:</case>
            <comment type="block">/* Enter C++ comment */</comment>
            <if_stmt><if>if<condition>(<expr><name><name>App</name><operator>.</operator><name>keepFirst</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
              <expr_stmt><expr><name>elide</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <expr_stmt><expr><operator>--</operator><name><name>App</name><operator>.</operator><name>keepFirst</name></name></expr>;</expr_stmt>
            </block_content>}</block></if><else>else<block>{<block_content>
              <expr_stmt><expr><name>elide</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <comment type="block">/*MARKER(("state 1 ==&gt; 2 @ %d:%d\n", line, col));*/</comment>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>S_CPP</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>elide</name></expr>)</condition><block>{<block_content>
              <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
          <default>default:</default>
            <comment type="block">/* It wasn't a comment after all. */</comment>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <name>S_NONE</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><operator>!</operator><name>elide</name></expr>)</condition><block>{<block_content>
              <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>prev</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></switch>
        <break>break;</break>
      <case>case <expr><name>S_CPP</name></expr>:</case> <comment type="block">/* C++ comment */</comment>
        <if_stmt><if>if<condition>(<expr><literal type="char">'\n'</literal> <operator>==</operator> <name>ch</name></expr>)</condition><block>{<block_content>
          <comment type="block">/* MARKER(("state 2 ==&gt; 0 @ %d:%d\n", line, col)); */</comment>
          <expr_stmt><expr><name>state</name> <operator>=</operator> <name>S_NONE</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>elide</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>elide</name></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <case>case <expr><name>S_C</name></expr>:</case> <comment type="block">/* C comment */</comment>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><name>elide</name></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><name>ch</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>(<expr><name>slash</name> <operator>==</operator> <name>ch</name></expr>)</condition><block>{<block_content>
          <if_stmt><if>if<condition>(<expr><name>star</name> <operator>==</operator> <name>prev</name></expr>)</condition><block>{<block_content>
            <comment type="block">/* MARKER(("state 3 ==&gt; 0 @ %d:%d\n", line, col)); */</comment>
            <comment type="block">/* Corner case which breaks this: */</comment>
            <comment type="block">/*/ &lt;-- slash there */</comment>
            <comment type="block">/* That shows up twice in a piece of 3rd-party
               code i use. */</comment>
            <comment type="block">/* And thus state3Col was introduced :/ */</comment>
            <if_stmt><if>if<condition>(<expr><name>col</name><operator>!=</operator><name>state3Col</name><operator>+</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>
              <expr_stmt><expr><name>state</name> <operator>=</operator> <name>S_NONE</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>elide</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>state3Col</name> <operator>=</operator> <operator>-</operator><literal type="number">99</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"impossible!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <if_stmt><if>if<condition>(<expr><literal type="char">'\n'</literal> <operator>==</operator> <name>ch</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>line</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>state3Col</name> <operator>=</operator> <operator>-</operator><literal type="number">99</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zAppName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Strips C- and C++-style comments from stdin and sends "</literal>
          <literal type="string">"the results to stdout.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s [--keep-first|-k] &lt; input &gt; output\n"</literal></expr></argument>, <argument><expr><name>zAppName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type> <name>argv</name></decl></parameter> )</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type> <name>zArg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><literal type="char">'-'</literal><operator>==</operator><operator>*</operator><name>zArg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>++</operator><name>zArg</name></expr>;</expr_stmt></block_content></block></while>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>,<argument><expr><literal type="string">"k"</literal></expr></argument>)</argument_list></call>
        <operator>||</operator> <literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>,<argument><expr><literal type="string">"keep-first"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name><name>App</name><operator>.</operator><name>keepFirst</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>App</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>stdin</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>App</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>do_it_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><ternary><condition><expr><name><name>App</name><operator>.</operator><name>rc</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
</unit>
