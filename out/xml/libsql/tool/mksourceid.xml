<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/libsql/tool/mksourceid.c"><comment type="block">/*
** Run this program with a single argument which is the name of the
** Fossil "manifest" file for a project, and this program will emit on
** standard output the "source id" for for the program.
**
** (1)  The "source id" is the date of check-in together with the 
**      SHA3 hash of the manifest file.
**
** (2)  All individual file hashes in the manifest are verified.  If any
**      source file has changed, the SHA3 hash ends with "modified".
**
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Portable 64-bit unsigned integers */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <typedef>typedef <type><name>unsigned</name> <name>__int64</name></type> <name>u64</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>u64</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Macros to determine whether the machine is big or little endian,
** and whether or not that determination is run-time or compile-time.
**
** For best performance, an attempt is made to guess at the byte-order
** using C-preprocessor macros.  If that is unsuccessful, or if
** -DBYTEORDER=0 is set, then byte-order is determined
** at run-time.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>BYTEORDER</name></cpp:ifndef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>i386</name></expr></argument>)</argument_list></call>     <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call>   <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator>    \
     <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call>  <operator>||</operator>    \
     <call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM</name></expr></argument>)</argument_list></call>     <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86</name></expr></argument>)</argument_list></call>   <operator>||</operator>    \
     <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>BYTEORDER</name></cpp:macro>    <cpp:value>1234</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sparc</name></expr></argument>)</argument_list></call>    <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>BYTEORDER</name></cpp:macro>    <cpp:value>4321</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>BYTEORDER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<comment type="block">/*
** State structure for a SHA3 hash in progress
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>SHA3Context</name></name></type> <name>SHA3Context</name>;</typedef>
<struct>struct <name>SHA3Context</name> <block>{
  <union>union <block>{
    <decl_stmt><decl><type><name>u64</name></type> <name><name>s</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>                <comment type="block">/* Keccak state. 5x5 lines of 64 bits each */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">1600</literal></expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* ... or 1600 bytes */</comment>
  }</block> <decl><name>u</name></decl>;</union>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>nRate</name></decl>;</decl_stmt>        <comment type="block">/* Bytes of input accepted per Keccak iteration */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>nLoaded</name></decl>;</decl_stmt>      <comment type="block">/* Input bytes loaded into u.x[] so far this cycle */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>ixMask</name></decl>;</decl_stmt>       <comment type="block">/* Insert next input into u.x[nLoaded^ixMask]. */</comment>
}</block>;</struct>

<comment type="block">/*
** A single step of the Keccak mixing function for a 1600-bit state
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>KeccakF1600Step</name><parameter_list>(<parameter><decl><type><name>SHA3Context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>B0</name></decl>, <decl><type ref="prev"/><name>B1</name></decl>, <decl><type ref="prev"/><name>B2</name></decl>, <decl><type ref="prev"/><name>B3</name></decl>, <decl><type ref="prev"/><name>B4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>C0</name></decl>, <decl><type ref="prev"/><name>C1</name></decl>, <decl><type ref="prev"/><name>C2</name></decl>, <decl><type ref="prev"/><name>C3</name></decl>, <decl><type ref="prev"/><name>C4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>D0</name></decl>, <decl><type ref="prev"/><name>D1</name></decl>, <decl><type ref="prev"/><name>D2</name></decl>, <decl><type ref="prev"/><name>D3</name></decl>, <decl><type ref="prev"/><name>D4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name><name>RC</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x0000000000000001ULL</literal></expr>,  <expr><literal type="number">0x0000000000008082ULL</literal></expr>,
    <expr><literal type="number">0x800000000000808aULL</literal></expr>,  <expr><literal type="number">0x8000000080008000ULL</literal></expr>,
    <expr><literal type="number">0x000000000000808bULL</literal></expr>,  <expr><literal type="number">0x0000000080000001ULL</literal></expr>,
    <expr><literal type="number">0x8000000080008081ULL</literal></expr>,  <expr><literal type="number">0x8000000000008009ULL</literal></expr>,
    <expr><literal type="number">0x000000000000008aULL</literal></expr>,  <expr><literal type="number">0x0000000000000088ULL</literal></expr>,
    <expr><literal type="number">0x0000000080008009ULL</literal></expr>,  <expr><literal type="number">0x000000008000000aULL</literal></expr>,
    <expr><literal type="number">0x000000008000808bULL</literal></expr>,  <expr><literal type="number">0x800000000000008bULL</literal></expr>,
    <expr><literal type="number">0x8000000000008089ULL</literal></expr>,  <expr><literal type="number">0x8000000000008003ULL</literal></expr>,
    <expr><literal type="number">0x8000000000008002ULL</literal></expr>,  <expr><literal type="number">0x8000000000000080ULL</literal></expr>,
    <expr><literal type="number">0x000000000000800aULL</literal></expr>,  <expr><literal type="number">0x800000008000000aULL</literal></expr>,
    <expr><literal type="number">0x8000000080008081ULL</literal></expr>,  <expr><literal type="number">0x8000000000008080ULL</literal></expr>,
    <expr><literal type="number">0x0000000080000001ULL</literal></expr>,  <expr><literal type="number">0x8000000080008008ULL</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A00</name></cpp:macro> <cpp:value>(p-&gt;u.s[0])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A01</name></cpp:macro> <cpp:value>(p-&gt;u.s[1])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A02</name></cpp:macro> <cpp:value>(p-&gt;u.s[2])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A03</name></cpp:macro> <cpp:value>(p-&gt;u.s[3])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A04</name></cpp:macro> <cpp:value>(p-&gt;u.s[4])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A10</name></cpp:macro> <cpp:value>(p-&gt;u.s[5])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A11</name></cpp:macro> <cpp:value>(p-&gt;u.s[6])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A12</name></cpp:macro> <cpp:value>(p-&gt;u.s[7])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A13</name></cpp:macro> <cpp:value>(p-&gt;u.s[8])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A14</name></cpp:macro> <cpp:value>(p-&gt;u.s[9])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A20</name></cpp:macro> <cpp:value>(p-&gt;u.s[10])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A21</name></cpp:macro> <cpp:value>(p-&gt;u.s[11])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A22</name></cpp:macro> <cpp:value>(p-&gt;u.s[12])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A23</name></cpp:macro> <cpp:value>(p-&gt;u.s[13])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A24</name></cpp:macro> <cpp:value>(p-&gt;u.s[14])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A30</name></cpp:macro> <cpp:value>(p-&gt;u.s[15])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A31</name></cpp:macro> <cpp:value>(p-&gt;u.s[16])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A32</name></cpp:macro> <cpp:value>(p-&gt;u.s[17])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A33</name></cpp:macro> <cpp:value>(p-&gt;u.s[18])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A34</name></cpp:macro> <cpp:value>(p-&gt;u.s[19])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A40</name></cpp:macro> <cpp:value>(p-&gt;u.s[20])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A41</name></cpp:macro> <cpp:value>(p-&gt;u.s[21])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A42</name></cpp:macro> <cpp:value>(p-&gt;u.s[22])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A43</name></cpp:macro> <cpp:value>(p-&gt;u.s[23])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>A44</name></cpp:macro> <cpp:value>(p-&gt;u.s[24])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ROL64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a&lt;&lt;x)|(a&gt;&gt;(64-x)))</cpp:value></cpp:define>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>C0</name> <operator>=</operator> <name>A00</name><operator>^</operator><name>A10</name><operator>^</operator><name>A20</name><operator>^</operator><name>A30</name><operator>^</operator><name>A40</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C1</name> <operator>=</operator> <name>A01</name><operator>^</operator><name>A11</name><operator>^</operator><name>A21</name><operator>^</operator><name>A31</name><operator>^</operator><name>A41</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C2</name> <operator>=</operator> <name>A02</name><operator>^</operator><name>A12</name><operator>^</operator><name>A22</name><operator>^</operator><name>A32</name><operator>^</operator><name>A42</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C3</name> <operator>=</operator> <name>A03</name><operator>^</operator><name>A13</name><operator>^</operator><name>A23</name><operator>^</operator><name>A33</name><operator>^</operator><name>A43</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C4</name> <operator>=</operator> <name>A04</name><operator>^</operator><name>A14</name><operator>^</operator><name>A24</name><operator>^</operator><name>A34</name><operator>^</operator><name>A44</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>D0</name> <operator>=</operator> <name>C4</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D1</name> <operator>=</operator> <name>C0</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D2</name> <operator>=</operator> <name>C1</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D3</name> <operator>=</operator> <name>C2</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D4</name> <operator>=</operator> <name>C3</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>B0</name> <operator>=</operator> <operator>(</operator><name>A00</name><operator>^</operator><name>D0</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A11</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A22</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A33</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A44</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A00</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A00</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>A11</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A22</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A33</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A44</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A20</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A31</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A42</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A03</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A14</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A20</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A31</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A42</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A03</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A14</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A40</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A01</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A12</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A23</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A34</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A40</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A01</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A12</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A23</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A34</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A10</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A21</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A32</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A43</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A04</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A10</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A21</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A32</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A43</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A04</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A30</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A41</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A02</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A13</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A24</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A30</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A41</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A02</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A13</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A24</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>C0</name> <operator>=</operator> <name>A00</name><operator>^</operator><name>A20</name><operator>^</operator><name>A40</name><operator>^</operator><name>A10</name><operator>^</operator><name>A30</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C1</name> <operator>=</operator> <name>A11</name><operator>^</operator><name>A31</name><operator>^</operator><name>A01</name><operator>^</operator><name>A21</name><operator>^</operator><name>A41</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C2</name> <operator>=</operator> <name>A22</name><operator>^</operator><name>A42</name><operator>^</operator><name>A12</name><operator>^</operator><name>A32</name><operator>^</operator><name>A02</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C3</name> <operator>=</operator> <name>A33</name><operator>^</operator><name>A03</name><operator>^</operator><name>A23</name><operator>^</operator><name>A43</name><operator>^</operator><name>A13</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C4</name> <operator>=</operator> <name>A44</name><operator>^</operator><name>A14</name><operator>^</operator><name>A34</name><operator>^</operator><name>A04</name><operator>^</operator><name>A24</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>D0</name> <operator>=</operator> <name>C4</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D1</name> <operator>=</operator> <name>C0</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D2</name> <operator>=</operator> <name>C1</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D3</name> <operator>=</operator> <name>C2</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D4</name> <operator>=</operator> <name>C3</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>B0</name> <operator>=</operator> <operator>(</operator><name>A00</name><operator>^</operator><name>D0</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A31</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A12</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A43</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A24</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A00</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A00</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>A31</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A12</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A43</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A24</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A40</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A21</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A02</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A33</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A14</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A40</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A21</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A02</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A33</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A14</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A30</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A11</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A42</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A23</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A04</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A30</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A11</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A42</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A23</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A04</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A20</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A01</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A32</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A13</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A44</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A20</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A01</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A32</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A13</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A44</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A10</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A41</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A22</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A03</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A34</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A10</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A41</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A22</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A03</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A34</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>C0</name> <operator>=</operator> <name>A00</name><operator>^</operator><name>A40</name><operator>^</operator><name>A30</name><operator>^</operator><name>A20</name><operator>^</operator><name>A10</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C1</name> <operator>=</operator> <name>A31</name><operator>^</operator><name>A21</name><operator>^</operator><name>A11</name><operator>^</operator><name>A01</name><operator>^</operator><name>A41</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C2</name> <operator>=</operator> <name>A12</name><operator>^</operator><name>A02</name><operator>^</operator><name>A42</name><operator>^</operator><name>A32</name><operator>^</operator><name>A22</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C3</name> <operator>=</operator> <name>A43</name><operator>^</operator><name>A33</name><operator>^</operator><name>A23</name><operator>^</operator><name>A13</name><operator>^</operator><name>A03</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C4</name> <operator>=</operator> <name>A24</name><operator>^</operator><name>A14</name><operator>^</operator><name>A04</name><operator>^</operator><name>A44</name><operator>^</operator><name>A34</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>D0</name> <operator>=</operator> <name>C4</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D1</name> <operator>=</operator> <name>C0</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D2</name> <operator>=</operator> <name>C1</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D3</name> <operator>=</operator> <name>C2</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D4</name> <operator>=</operator> <name>C3</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>B0</name> <operator>=</operator> <operator>(</operator><name>A00</name><operator>^</operator><name>D0</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A21</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A42</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A13</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A34</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A00</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A00</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>A21</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A42</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A13</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A34</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A30</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A01</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A22</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A43</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A14</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A30</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A01</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A22</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A43</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A14</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A10</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A31</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A02</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A23</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A44</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A10</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A31</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A02</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A23</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A44</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A40</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A11</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A32</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A03</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A24</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A40</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A11</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A32</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A03</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A24</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A20</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A41</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A12</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A33</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A04</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A20</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A41</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A12</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A33</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A04</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>C0</name> <operator>=</operator> <name>A00</name><operator>^</operator><name>A30</name><operator>^</operator><name>A10</name><operator>^</operator><name>A40</name><operator>^</operator><name>A20</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C1</name> <operator>=</operator> <name>A21</name><operator>^</operator><name>A01</name><operator>^</operator><name>A31</name><operator>^</operator><name>A11</name><operator>^</operator><name>A41</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C2</name> <operator>=</operator> <name>A42</name><operator>^</operator><name>A22</name><operator>^</operator><name>A02</name><operator>^</operator><name>A32</name><operator>^</operator><name>A12</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C3</name> <operator>=</operator> <name>A13</name><operator>^</operator><name>A43</name><operator>^</operator><name>A23</name><operator>^</operator><name>A03</name><operator>^</operator><name>A33</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>C4</name> <operator>=</operator> <name>A34</name><operator>^</operator><name>A14</name><operator>^</operator><name>A44</name><operator>^</operator><name>A24</name><operator>^</operator><name>A04</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>D0</name> <operator>=</operator> <name>C4</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D1</name> <operator>=</operator> <name>C0</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D2</name> <operator>=</operator> <name>C1</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D3</name> <operator>=</operator> <name>C2</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D4</name> <operator>=</operator> <name>C3</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>C0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>B0</name> <operator>=</operator> <operator>(</operator><name>A00</name><operator>^</operator><name>D0</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A01</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A02</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A03</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A04</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A00</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A00</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>A01</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A02</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A03</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A04</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A10</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A11</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A12</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A13</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A14</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A10</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A11</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A12</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A13</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A14</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A20</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A21</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A22</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A23</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A24</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A20</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A21</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A22</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A23</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A24</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A30</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A31</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A32</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A33</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A34</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A30</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A31</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A32</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A33</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A34</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>B3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A40</name><operator>^</operator><name>D0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A41</name><operator>^</operator><name>D1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A42</name><operator>^</operator><name>D2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A43</name><operator>^</operator><name>D3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>A44</name><operator>^</operator><name>D4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>A40</name> <operator>=</operator>   <name>B0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B1</name><operator>)</operator><operator>&amp;</operator>  <name>B2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A41</name> <operator>=</operator>   <name>B1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B2</name><operator>)</operator><operator>&amp;</operator>  <name>B3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A42</name> <operator>=</operator>   <name>B2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B3</name><operator>)</operator><operator>&amp;</operator>  <name>B4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A43</name> <operator>=</operator>   <name>B3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B4</name><operator>)</operator><operator>&amp;</operator>  <name>B0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>A44</name> <operator>=</operator>   <name>B4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>B0</name><operator>)</operator><operator>&amp;</operator>  <name>B1</name> <operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Initialize a new hash.  iSize determines the size of the hash
** in bits and should be one of 224, 256, 384, or 512.  Or iSize
** can be zero to use the default hash size of 256 bits.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA3Init</name><parameter_list>(<parameter><decl><type><name>SHA3Context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iSize</name><operator>&gt;=</operator><literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>iSize</name><operator>&lt;=</operator><literal type="number">512</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1600</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>iSize</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">31</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1600</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">256</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTEORDER</name><operator>==</operator><literal type="number">1234</literal></expr></cpp:if>
  <comment type="block">/* Known to be little-endian at compile-time. No-op */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BYTEORDER</name><operator>==</operator><literal type="number">4321</literal></expr></cpp:elif>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>  <comment type="block">/* Big-endian */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><literal type="number">1</literal><operator>==</operator><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>one</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Little endian.  No byte swapping. */</comment>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Big endian.  Byte swap. */</comment>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
** Make consecutive calls to the SHA3Update function to add new content
** to the hash
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA3Update</name><parameter_list>(
  <parameter><decl><type><name>SHA3Context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTEORDER</name><operator>==</operator><literal type="number">1234</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>aData</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>+</operator><literal type="number">7</literal><operator>&lt;</operator><name>nData</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>/</operator><literal type="number">8</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>aData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>KeccakF1600Step</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nData</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BYTEORDER</name><operator>==</operator><literal type="number">1234</literal></expr></cpp:if>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name></expr>]</index></name> <operator>^=</operator> <name><name>aData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>BYTEORDER</name><operator>==</operator><literal type="number">4321</literal></expr></cpp:elif>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>^</operator><literal type="number">0x07</literal></expr>]</index></name> <operator>^=</operator> <name><name>aData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>^</operator><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name></expr>]</index></name> <operator>^=</operator> <name><name>aData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>KeccakF1600Step</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** After all content has been added, invoke SHA3Final() to compute
** the final hash.  The function returns a pointer to the binary
** hash value.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>SHA3Final</name><parameter_list>(<parameter><decl><type><name>SHA3Context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><literal type="number">0x86</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c2</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c3</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nRate</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name>i</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name>i</name><operator>^</operator><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Convert a digest into base-16.  digest should be declared as
** "unsigned char digest[20]" in the calling function.  The SHA3
** digest is stored in the first 20 bytes.  zBuf should
** be "char zBuf[41]".
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>DigestToBase16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zEncode</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ix</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>ix</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ix</name><operator>&lt;</operator><name>nByte</name></expr>;</condition> <incr><expr><name>ix</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>zBuf</name><operator>++</operator> <operator>=</operator> <name><name>zEncode</name><index>[<expr><operator>(</operator><operator>*</operator><name>digest</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>zBuf</name><operator>++</operator> <operator>=</operator> <name><name>zEncode</name><index>[<expr><operator>*</operator><name>digest</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><operator>*</operator><name>zBuf</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Compute the SHA3 checksum of a file on disk.  Store the resulting
** checksum in the blob pCksum.  pCksum is assumed to be initialized.
**
** Return the number of errors.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sha3sum_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSize</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pCksum</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHA3Context</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">10240</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>,<argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SHA3Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>fread</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DigestToBase16</name><argument_list>(<argument><expr><call><name>SHA3Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pCksum</name></expr></argument>, <argument><expr><name>iSize</name><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The SHA1 implementation below is adapted from:
**
**  $NetBSD: sha1.c,v 1.6 2009/11/06 20:31:18 joerg Exp $
**  $OpenBSD: sha1.c,v 1.9 1997/07/23 21:12:32 kstailey Exp $
**
** SHA-1 in C
** By Steve Reid &lt;steve@edmweb.com&gt;
** 100% Public Domain
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>SHA1Context</name></name></type> <name>SHA1Context</name>;</typedef>
<struct>struct <name>SHA1Context</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>count</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
 * blk0() and blk() perform the initial expand.
 * I got the idea of expanding during the round function from SSLeay
 *
 * blk0le() for little-endian and blk0be() for big-endian.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHA_ROT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>l</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &lt;&lt; (l) | (x) &gt;&gt; (r))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rol</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SHA_ROT(x,k,32-(k))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ror</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>SHA_ROT(x,32-(k),k)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk0le</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(block[i] = (ror(block[i],8)&amp;0xFF00FF00) \
    |(rol(block[i],8)&amp;0x00FF00FF))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk0be</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>block[i]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>blk</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(block[i&amp;15] = rol(block[(i+13)&amp;15]^block[(i+8)&amp;15] \
    ^block[(i+2)&amp;15]^block[i&amp;15],1))</cpp:value></cpp:define>

<comment type="block">/*
 * (R0+R1), R2, R3, R4 are the different operations (rounds) used in SHA1
 *
 * Rl0() for little-endian and Rb0() for big-endian.  Endianness is
 * determined at run-time.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rl0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>z+=((w&amp;(x^y))^y)+blk0le(i)+0x5A827999+rol(v,5);w=ror(w,2);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rb0</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>z+=((w&amp;(x^y))^y)+blk0be(i)+0x5A827999+rol(v,5);w=ror(w,2);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R1</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>z+=((w&amp;(x^y))^y)+blk(i)+0x5A827999+rol(v,5);w=ror(w,2);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R2</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>z+=(w^x^y)+blk(i)+0x6ED9EBA1+rol(v,5);w=ror(w,2);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R3</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>z+=(((w|x)&amp;y)|(w&amp;x))+blk(i)+0x8F1BBCDC+rol(v,5);w=ror(w,2);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R4</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>z+=(w^x^y)+blk(i)+0xCA62C1D6+rol(v,5);w=ror(w,2);</cpp:value></cpp:define>

<comment type="block">/*
 * Hash a single 512-bit block. This is the core of the algorithm.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>a</name></cpp:macro> <cpp:value>qq[0]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>b</name></cpp:macro> <cpp:value>qq[1]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>c</name></cpp:macro> <cpp:value>qq[2]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>d</name></cpp:macro> <cpp:value>qq[3]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>e</name></cpp:macro> <cpp:value>qq[4]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1Transform</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>qq</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* a, b, c, d, e; */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>qq</name></expr></argument>,<argument><expr><name>state</name></expr></argument>,<argument><expr><literal type="number">5</literal><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy context-&gt;state[] to working vars */</comment>
  <comment type="block">/*
  a = state[0];
  b = state[1];
  c = state[2];
  d = state[3];
  e = state[4];
  */</comment>

  <comment type="block">/* 4 rounds of 20 operations each. Loop unrolled. */</comment>
  <if_stmt><if>if<condition>( <expr><literal type="number">1</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>one</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rl0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>Rb0</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>R1</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R1</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R1</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R1</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">35</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">37</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R2</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">46</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">47</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">49</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">54</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">58</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R3</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">65</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">66</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">67</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">68</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">69</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">70</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">71</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">72</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">73</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">74</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><literal type="number">75</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">76</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">77</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">78</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>R4</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">79</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add the working vars back into context.state[] */</comment>
  <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * SHA1Init - Initialize new context
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1Init</name><parameter_list>(<parameter><decl><type><name>SHA1Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list><block>{<block_content>
    <comment type="block">/* SHA1 initialization constants */</comment>
    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEFCDAB89</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98BADCFE</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC3D2E1F0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Run your data through this.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1Update</name><parameter_list>(
  <parameter><decl><type><name>SHA1Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>
)</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&lt;</operator> <name>j</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>len</name><operator>&gt;&gt;</operator><literal type="number">29</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>=</operator> <literal type="number">64</literal><operator>-</operator><name>j</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SHA1Transform</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>( <init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">63</literal> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>SHA1Transform</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Add padding and return the message digest.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA1Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>SHA1Context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>finalcount</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>finalcount</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>count</name><index>[<expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>]</index></name>
         <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal><operator>-</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Endian independent */</comment>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\200"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">504</literal><operator>)</operator> <operator>!=</operator> <literal type="number">448</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"\0"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>finalcount</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Should cause a SHA1Transform() */</comment>

    <if_stmt><if>if <condition>(<expr><name>digest</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator>
                <operator>(</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name><operator>&gt;&gt;</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><operator>(</operator><literal type="number">3</literal><operator>-</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Compute the SHA1 checksum of a file on disk.  Store the resulting
** checksum in the blob pCksum.  pCksum is assumed to be initialized.
**
** Return the number of errors.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sha1sum_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pCksum</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHA1Context</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zResult</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">10240</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>,<argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SHA1Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init>;</init><condition>;</condition><incr/>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>fread</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>SHA1Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SHA1Final</name><argument_list>(<argument><expr><name>zResult</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DigestToBase16</name><argument_list>(<argument><expr><name>zResult</name></expr></argument>, <argument><expr><name>pCksum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Print a usage comment and quit.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, 
     <argument><expr><literal type="string">"Usage: %s manifest\n"</literal>
     <literal type="string">"Options:\n"</literal>
     <literal type="string">"   -v  Diagnostic output\n"</literal></expr></argument>
     , <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Find the first whitespace character in a string.  Set that whitespace
** to a \000 terminator and return a pointer to the next character.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>nextToken</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <while>while<condition>( <expr><operator>*</operator><name>z</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>z</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
  

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zManifest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bVerbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>allValid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHA3Context</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zDate</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zHash</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zLine</name><index>[<expr><literal type="number">20000</literal></expr>]</index></name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>bVerbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else
      <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown option \"%s\""</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zManifest</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zManifest</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>zManifest</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>zDate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zManifest</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"cannot open \"%s\" for reading\n"</literal></expr></argument>, <argument><expr><name>zManifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>SHA3Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><call><name>fgets</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>,<argument><expr><literal type="string">"# Remove this line"</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zLine</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>, <argument><expr><literal type="string">"D 20"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zDate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zLine</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zDate</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDate</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zLine</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zDate</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>zLine</name></expr></argument>, <argument><expr><literal type="string">"F "</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFilename</name> <init>= <expr><operator>&amp;</operator><name><name>zLine</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMHash</name> <init>= <expr><call><name>nextToken</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>nextToken</name><argument_list>(<argument><expr><name>zMHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zMHash</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">40</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sha1sum_file</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>, <argument><expr><name>zHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sha3sum_file</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>zHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>allValid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>bVerbose</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"hash failed: %s\n"</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zHash</name></expr></argument>, <argument><expr><name>zMHash</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>allValid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>bVerbose</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"wrong hash: %s\n"</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"... expected: %s\n"</literal></expr></argument>, <argument><expr><name>zMHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"... got:      %s\n"</literal></expr></argument>, <argument><expr><name>zHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DigestToBase16</name><argument_list>(<argument><expr><call><name>SHA3Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zHash</name></expr></argument>, <argument><expr><literal type="number">256</literal><operator>/</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>allValid</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %.60salt1\n"</literal></expr></argument>, <argument><expr><name>zDate</name></expr></argument>, <argument><expr><name>zHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s %s\n"</literal></expr></argument>, <argument><expr><name>zDate</name></expr></argument>, <argument><expr><name>zHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
