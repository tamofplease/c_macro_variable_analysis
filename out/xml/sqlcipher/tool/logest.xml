<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/tool/logest.c"><comment type="block">/*
** 2013-06-10
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains a simple command-line utility for converting from
** integers and LogEst values and back again and for doing simple
** arithmetic operations (multiple and add) on LogEst values.
**
** Usage:
**
**      ./LogEst ARGS
**
** See the showHelp() routine for a description of valid arguments.
** Examples:
**
** To convert 123 from LogEst to integer:
** 
**         ./LogEst ^123
**
** To convert 123456 from integer to LogEst:
**
**         ./LogEst 123456
**
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>short</name> <name>int</name></type> <name>LogEst</name>;</typedef>  <comment type="block">/* 10 times log2() */</comment>

<function><type><name>LogEst</name></type> <name>logEstMultiply</name><parameter_list>(<parameter><decl><type><name>LogEst</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LogEst</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><name>a</name><operator>+</operator><name>b</name></expr>;</return> </block_content>}</block></function>
<function><type><name>LogEst</name></type> <name>logEstAdd</name><parameter_list>(<parameter><decl><type><name>LogEst</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LogEst</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[]</index></name> <init>= <expr><block>{
     <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>,                         <comment type="block">/* 0,1 */</comment>
      <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>,                          <comment type="block">/* 2,3 */</comment>
      <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>,                          <comment type="block">/* 4,5 */</comment>
      <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>,                       <comment type="block">/* 6,7,8 */</comment>
      <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>,                       <comment type="block">/* 9,10,11 */</comment>
      <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>,                       <comment type="block">/* 12-14 */</comment>
      <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>,                    <comment type="block">/* 15-18 */</comment>
      <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>,              <comment type="block">/* 19-24 */</comment>
      <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,           <comment type="block">/* 25-31 */</comment>
  }</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>a</name><operator>&lt;</operator><name>b</name></expr> )</condition><block>{<block_content> <decl_stmt><decl><type><name>LogEst</name></type> <name>t</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>a</name><operator>&gt;</operator><name>b</name><operator>+</operator><literal type="number">49</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>a</name><operator>&gt;</operator><name>b</name><operator>+</operator><literal type="number">31</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>a</name><operator>+</operator><name><name>x</name><index>[<expr><name>a</name><operator>-</operator><name>b</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>LogEst</name></type> <name>logEstFromInteger</name><parameter_list>(<parameter><decl><type><name>sqlite3_uint64</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>LogEst</name></type> <name><name>a</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LogEst</name></type> <name>y</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>x</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <while>while<condition>( <expr><name>x</name><operator>&lt;</operator><literal type="number">8</literal></expr> )</condition><block>{<block_content>  <expr_stmt><expr><name>y</name> <operator>-=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></while>
  </block_content>}</block></if><else>else<block>{<block_content>
    <while>while<condition>( <expr><name>x</name><operator>&gt;</operator><literal type="number">255</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">40</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> </block_content>}</block></while>
    <while>while<condition>( <expr><name>x</name><operator>&gt;</operator><literal type="number">15</literal></expr> )</condition><block>{<block_content>  <expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name><name>a</name><index>[<expr><name>x</name><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name>y</name> <operator>-</operator> <literal type="number">10</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sqlite3_uint64</name></type> <name>logEstToInt</name><parameter_list>(<parameter><decl><type><name>LogEst</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>n</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&lt;</operator><literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>x</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&gt;</operator><literal type="number">60</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>sqlite3_uint64</name><operator>)</operator><literal type="number">0xffffffff</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>sqlite3_uint64</name><operator>)</operator><literal type="number">0xffffffff</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&gt;=</operator><literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>&lt;&lt;</operator><operator>(</operator><name>x</name><operator>-</operator><literal type="number">3</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">3</literal><operator>-</operator><name>x</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>LogEst</name></type> <name>logEstFromDouble</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LogEst</name></type> <name>e</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&lt;=</operator><literal type="number">0.0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">32768</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&lt;</operator><literal type="number">0.01</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><call><name>logEstFromDouble</name><argument_list>(<argument><expr><literal type="number">1.0</literal><operator>/</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&lt;</operator><literal type="number">1.0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>logEstFromDouble</name><argument_list>(<argument><expr><literal type="number">100.0</literal><operator>*</operator><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">66</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&lt;</operator><literal type="number">1024.0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>logEstFromInteger</name><argument_list>(<argument><expr><operator>(</operator><name>sqlite3_uint64</name><operator>)</operator><operator>(</operator><literal type="number">1024.0</literal><operator>*</operator><name>x</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">100</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>&lt;=</operator><literal type="number">2000000000.0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><call><name>logEstFromInteger</name><argument_list>(<argument><expr><operator>(</operator><name>sqlite3_uint64</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>e</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">52</literal><operator>)</operator> <operator>-</operator> <literal type="number">1022</literal></expr>;</expr_stmt>
  <return>return <expr><name>e</name><operator>*</operator><literal type="number">10</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>isInteger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <while>while<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>isFloat</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <while>while<condition>( <expr><operator>(</operator><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>)</operator> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'.'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'E'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'e'</literal>
          <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'+'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>  )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>showHelp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArgv0</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s ARGS...\n"</literal></expr></argument>, <argument><expr><name>zArgv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Arguments:\n"</literal>
    <literal type="string">"  NUM    Convert NUM from integer to LogEst and push onto the stack\n"</literal>
    <literal type="string">" ^NUM    Interpret NUM as a LogEst and push onto stack\n"</literal>
    <literal type="string">"  x      Multiple the top two elements of the stack\n"</literal>
    <literal type="string">"  +      Add the top two elements of the stack\n"</literal>
    <literal type="string">"  dup    Dupliate the top element on the stack\n"</literal>
    <literal type="string">"  inv    Take the reciprocal of the top of stack.  N = 1/N.\n"</literal>
    <literal type="string">"  log    Find the LogEst of the number on top of stack\n"</literal>
    <literal type="string">"  nlogn  Compute NlogN where N is the top of stack\n"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LogEst</name></type> <name><name>a</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>logEstAdd</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>logEstMultiply</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"dup"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>logEstFromInteger</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">33</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"nlogn"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>logEstFromInteger</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">33</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"inv"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'^'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>LogEst</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>isInteger</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>logEstFromInteger</name><argument_list>(<argument><expr><call><name>atoll</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>isFloat</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>logEstFromDouble</name><argument_list>(<argument><expr><call><name>atof</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>showHelp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><operator>-</operator><literal type="number">40</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d (%f)\n"</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.0</literal><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><call><name>logEstToInt</name><argument_list>(<argument><expr><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><literal type="number">10</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d (%f)\n"</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>logEstToInt</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1024.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">100</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d (%lld)\n"</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>logEstToInt</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>x</name> <init>= <expr><call><name>logEstToInt</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">100</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">100</literal><operator>/</operator><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d (%lld.%02lld)\n"</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name><operator>/</operator><literal type="number">100</literal></expr></argument>, <argument><expr><name>x</name><operator>%</operator><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
