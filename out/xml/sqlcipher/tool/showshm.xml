<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/tool/showshm.c"><comment type="block">/*
** A utility for printing content from the wal-index or "shm" file.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>isdigit((unsigned char)(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISPRINT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>isprint((unsigned char)(X))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* The open SHM file */</comment>

<comment type="block">/* Report an out-of-memory error and die.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>out_of_memory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Out of memory...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Read content from the file.
**
** Space to hold the content is obtained from malloc() and needs to be
** freed by the caller.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>getContent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>aData</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>out_of_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>aData</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Flags values
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FG_HEX</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>    <comment type="block">/* Show as hex */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FG_NBO</name></cpp:macro>     <cpp:value>2</cpp:value></cpp:define>    <comment type="block">/* Native byte order */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FG_PGSZ</name></cpp:macro>    <cpp:value>4</cpp:value></cpp:define>    <comment type="block">/* Show as page-size */</comment>

<comment type="block">/* Print a line of decode output showing a 4-byte integer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_decode_line</name><parameter_list>(
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,      <comment type="block">/* Content being decoded */</comment>
  <parameter><decl><type><name>int</name></type> <name>ofst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>,       <comment type="block">/* Start and size of decode */</comment>
  <parameter><decl><type><name>unsigned</name></type> <name>flg</name></decl></parameter>,              <comment type="block">/* Display flags */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>           <comment type="block">/* Message to append */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><name><name>aData</name><index>[<expr><name>ofst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="string">" %03x: %02x"</literal></expr></argument>, <argument><expr><name>ofst</name></expr></argument>, <argument><expr><name><name>aData</name><index>[<expr><name>ofst</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;=</operator><name>nByte</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" %02x"</literal></expr></argument>, <argument><expr><name><name>aData</name><index>[<expr><name>ofst</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val</name> <operator>=</operator> <name>val</name><operator>*</operator><literal type="number">256</literal> <operator>+</operator> <name><name>aData</name><index>[<expr><name>ofst</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>==</operator><literal type="number">8</literal></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" %02x"</literal></expr></argument>, <argument><expr><name><name>aData</name><index>[<expr><name>ofst</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flg</name> <operator>&amp;</operator> <name>FG_NBO</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nByte</name><operator>==</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>aData</name><operator>+</operator><name>ofst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"            "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>flg</name> <operator>&amp;</operator> <name>FG_PGSZ</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>sz</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>, <argument><expr><name>aData</name><operator>+</operator><name>ofst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"   %9d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>sz</name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">65536</literal></expr> </then><else>: <expr><name>sz</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>flg</name> <operator>&amp;</operator> <name>FG_HEX</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"  0x%08x"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nByte</name><operator>&lt;</operator><literal type="number">8</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"   %9d"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s  %s\n"</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Print an instance of the WalIndexHdr object.  ix is either 0 or 1
** to select which header to print.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_index_hdr</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ix</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>ix</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>ix</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <ternary><condition><expr><name>ix</name></expr> ?</condition><then> <expr><literal type="number">48</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">0</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>FG_NBO</name></expr></argument>,  <argument><expr><literal type="string">"Wal-index version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,       <argument><expr><literal type="string">"unused padding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>FG_NBO</name></expr></argument>,  <argument><expr><literal type="string">"transaction counter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">12</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,       <argument><expr><literal type="string">"1 when initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">13</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,       <argument><expr><literal type="string">"true if WAL cksums are bigendian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">14</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>FG_PGSZ</name></expr></argument>, <argument><expr><literal type="string">"database page size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">16</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>FG_NBO</name></expr></argument>,  <argument><expr><literal type="string">"mxFrame"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">20</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>FG_NBO</name></expr></argument>,  <argument><expr><literal type="string">"Size of database in pages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">24</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Cksum of last frame in -wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">32</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="string">"Salt values from the -wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">40</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,  <argument><expr><literal type="string">"Cksum over all prior fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Print the WalCkptInfo object
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_ckpt_info</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">96</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">0</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>FG_NBO</name></expr></argument>,  <argument><expr><literal type="string">"nBackfill"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zLabel</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zLabel</name></expr></argument>, <argument><expr><literal type="string">"aReadMark[%d]"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">4</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>FG_NBO</name></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">24</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,       <argument><expr><literal type="string">"aLock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">32</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>FG_NBO</name></expr></argument>,  <argument><expr><literal type="string">"nBackfillAttempted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_decode_line</name><argument_list>(<argument><expr><name>aData</name></expr></argument>,<argument><expr><literal type="number">36</literal><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>FG_NBO</name></expr></argument>,  <argument><expr><literal type="string">"notUsed0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"Usage: %s FILENAME\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>fd</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%s: can't open %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>getContent</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">136</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_index_hdr</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_index_hdr</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_ckpt_info</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
