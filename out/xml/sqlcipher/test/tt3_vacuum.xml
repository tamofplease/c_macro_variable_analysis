<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/test/tt3_vacuum.c"><comment type="block">/*
** 2014 December 9
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains multi-threaded tests that use shared-cache and 
** the VACUUM command.
**
** Tests:
**
**     vacuum1
**
*/</comment>


<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vacuum1_thread_writer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* Insert lots of rows. Then delete some. */</comment>
    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
        <argument><expr><literal type="string">"WITH loop(i) AS (SELECT 1 UNION ALL SELECT i+1 FROM loop WHERE i&lt;100) "</literal>
        <literal type="string">"INSERT INTO t1 SELECT randomblob(50), randomblob(2500) FROM loop"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Delete lots of rows */</comment>
    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM t1 WHERE rowid = :i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Select the rows */</comment>
    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM t1 ORDER BY x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>vacuum1_thread_vacuumer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <do>do<block>{<block_content>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition>;</do>

  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vacuum1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
     <argument><expr><literal type="string">"CREATE TABLE t1(x PRIMARY KEY, y BLOB);"</literal>
     <literal type="string">"CREATE INDEX i1 ON t1(y);"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>vacuum1_thread_writer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>vacuum1_thread_writer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>vacuum1_thread_writer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>vacuum1_thread_vacuumer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
