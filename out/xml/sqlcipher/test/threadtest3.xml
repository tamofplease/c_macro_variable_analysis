<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/test/threadtest3.c"><comment type="block">/*
** 2010-07-22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** The code in this file runs a few multi-threaded test cases using the
** SQLite library. It can be compiled to an executable on unix using the
** following command:
**
**   gcc -O2 threadtest3.c sqlite3.c -ldl -lpthread -lm
**
** Even though threadtest3.c is the only C source code file mentioned on
** the compiler command-line, #include macros are used to pull in additional
** C code files named "tt3_*.c".
**
** After compiling, run this program with an optional argument telling
** which test to run.  All tests are run if no argument is given.  The
** argument can be a glob pattern to match multiple tests.  Examples:
**
**        ./a.out                 -- Run all tests
**        ./a.out walthread3      -- Run the "walthread3" test
**        ./a.out 'wal*'          -- Run all of the wal* tests
**        ./a.out --help          -- List all available tests
**
** The exit status is non-zero if any test fails.
*/</comment>

<comment type="block">/* 
** The "Set Error Line" macro.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEL</name><parameter_list>(<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((e)-&gt;iLine = ((e)-&gt;rc ? (e)-&gt;iLine : __LINE__))</cpp:value></cpp:define>

<comment type="block">/* Database functions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>opendb</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>(SEL(w), opendb_x(w,x,y,z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>closedb</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>(SEL(y), closedb_x(y,z))</cpp:value></cpp:define>

<comment type="block">/* Functions to execute SQL */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sql_script</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(SEL(x), sql_script_x(x,y,z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>integrity_check</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(SEL(x), integrity_check_x(x,y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>execsql_i64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>(SEL(x), execsql_i64_x(x,y,__VA_ARGS__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>execsql_text</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SEL(x), execsql_text_x(x,y,z,__VA_ARGS__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>execsql</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>(SEL(x), (void)execsql_i64_x(x,y,__VA_ARGS__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sql_script_printf</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(                \
    SEL(x), sql_script_printf_x(x,y,z,__VA_ARGS__)    \
)</cpp:value></cpp:define> 

<comment type="block">/* Thread functions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>launch_thread</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(SEL(w), launch_thread_x(w,x,y,z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>join_all_threads</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(SEL(y), join_all_threads_x(y,z))</cpp:value></cpp:define>

<comment type="block">/* Timer functions */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setstoptime</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>(SEL(y), setstoptime_x(y,z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timetostop</name><parameter_list>(<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>(SEL(z), timetostop_x(z))</cpp:value></cpp:define>

<comment type="block">/* Report/clear errors. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test_error</name><parameter_list>(<parameter><type><name>z</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>test_error_x(z, sqlite3_mprintf(__VA_ARGS__))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clear_error</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>clear_error_x(y, z)</cpp:value></cpp:define>

<comment type="block">/* File-system operations */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filesize</name><parameter_list>(<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>(SEL(y), filesize_x(y,z))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>filecopy</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>(SEL(x), filecopy_x(x,y,z))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTR2INT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((intptr_t)x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INT2PTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((void*)((intptr_t)x))</cpp:value></cpp:define>

<comment type="block">/*
** End of test code/infrastructure interface macros.
*************************************************************************/</comment>




<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;process.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include> 
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include> 
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include> 
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include> 
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>O_BINARY</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"test_multiplex.h"</cpp:file></cpp:include>

<comment type="block">/* Required to link test_multiplex.c */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifndef>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3PendingByte</name> <init>= <expr><literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * This code implements the MD5 message-digest algorithm.
 * The algorithm is due to Ron Rivest.  This code was
 * written by Colin Plumb in 1993, no copyright is claimed.
 * This code is in the public domain; do with it what you wish.
 *
 * Equivalent code is available from RSA Data Security, Inc.
 * This code has been tested against that, and is equivalent,
 * except that you don't need to include two pages of legalese
 * with every copy.
 *
 * To compute the message digest of a chunk of bytes, declare an
 * MD5Context structure, pass it to MD5Init, call MD5Update as
 * needed on buffers full of bytes, and then call MD5Final, which
 * will fill a supplied 16-byte array with the digest.
 */</comment>

<comment type="block">/*
 * If compiled on a machine that doesn't have a 32-bit integer,
 * you just set "uint32" to the appropriate datatype for an
 * unsigned 32-bit integer.  For example:
 *
 *       cc -Duint32='unsigned long' md5.c
 *
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>uint32</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>uint32</name></cpp:macro> <cpp:value>unsigned int</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>MD5Context</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>isInit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32</name></type> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32</name></type> <name><name>in32</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>u</name></decl>;</union>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>MD5Context</name></name></type> <name>MD5Context</name>;</typedef>

<comment type="block">/*
 * Note: this code is harmless on little-endian machines.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>byteReverse</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>longs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>uint32</name></type> <name>t</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
          <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><operator>--</operator><name>longs</name></expr>)</condition>;</do>
</block_content>}</block></function>
<comment type="block">/* The four core functions - F1 is optimized somewhat */</comment>

<comment type="block">/* #define F1(x, y, z) (x &amp; y | ~x &amp; z) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(z ^ (x &amp; (y ^ z)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>F1(z, x, y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x ^ y ^ z)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F4</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(y ^ (x | ~z))</cpp:value></cpp:define>

<comment type="block">/* This is the central step in the MD5 algorithm. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD5STEP</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>w</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>, <parameter><type><name>data</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>( w += f(x, y, z) + data,  w = w&lt;&lt;s | w&gt;&gt;(32-s),  w += x )</cpp:value></cpp:define>

<comment type="block">/*
 * The core of the MD5 algorithm, this alters an existing MD5 hash to
 * reflect the addition of 16 longwords of new data.  MD5Update blocks
 * the data and converts bytes into longwords for this routine.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5Transform</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name><name>buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32</name></type> <name><name>in</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>register</specifier> <name>uint32</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd76aa478</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0xe8c7b756</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">0x242070db</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">0xc1bdceee</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf57c0faf</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><literal type="number">0x4787c62a</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa8304613</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfd469501</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>+</operator><literal type="number">0x698098d8</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>+</operator><literal type="number">0x8b44f7af</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator><literal type="number">0xffff5bb1</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator><literal type="number">0x895cd7be</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>+</operator><literal type="number">0x6b901122</literal></expr></argument>,  <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfd987193</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa679438e</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>+</operator><literal type="number">0x49b40821</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf61e2562</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>+</operator><literal type="number">0xc040b340</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator><literal type="number">0x265e5a51</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">0xe9b6c7aa</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd62f105d</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator><literal type="number">0x02441453</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd8a1e681</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><literal type="number">0xe7d3fbc8</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>+</operator><literal type="number">0x21e1cde6</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>+</operator><literal type="number">0xc33707d6</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf4d50d87</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>+</operator><literal type="number">0x455a14ed</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa9e3e905</literal></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfcefa3f8</literal></expr></argument>,  <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>+</operator><literal type="number">0x676f02d9</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>+</operator><literal type="number">0x8d2a4c8a</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfffa3942</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>+</operator><literal type="number">0x8771f681</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator><literal type="number">0x6d9d6122</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfde5380c</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa4beea44</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><literal type="number">0x4bdecfa9</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf6bb4b60</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator><literal type="number">0xbebfbc70</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>+</operator><literal type="number">0x289b7ec6</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">0xeaa127fa</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd4ef3085</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>+</operator><literal type="number">0x04881d05</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>+</operator><literal type="number">0xd9d4d039</literal></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>+</operator><literal type="number">0xe6db99e5</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>+</operator><literal type="number">0x1fa27cf8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">0xc4ac5665</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf4292244</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>+</operator><literal type="number">0x432aff97</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">14</literal></expr>]</index></name><operator>+</operator><literal type="number">0xab9423a7</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfc93a039</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">12</literal></expr>]</index></name><operator>+</operator><literal type="number">0x655b59c3</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><literal type="number">0x8f0ccc92</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>+</operator><literal type="number">0xffeff47d</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">0x85845dd1</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>+</operator><literal type="number">0x6fa87e4f</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>+</operator><literal type="number">0xfe2ce6e0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>+</operator><literal type="number">0xa3014314</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>+</operator><literal type="number">0x4e0811a1</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><literal type="number">0xf7537e82</literal></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">11</literal></expr>]</index></name><operator>+</operator><literal type="number">0xbd3af235</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><literal type="number">0x2ad7d2bb</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>+</operator><literal type="number">0xeb86d391</literal></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5Init</name><parameter_list>(<parameter><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>isInit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xefcdab89</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98badcfe</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Update context to reflect the concatenation of another buffer full
 * of bytes.
 */</comment>
<function><type><specifier>static</specifier> 
<name>void</name></type> <name>MD5Update</name><parameter_list>(<parameter><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>uint32</name></type> <name>t</name></decl>;</decl_stmt>

  <comment type="block">/* Update bitcount */</comment>

  <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* Carry from low to high */</comment>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>len</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>    <comment type="block">/* Bytes already in shsInfo-&gt;data */</comment>

  <comment type="block">/* Handle any leading odd-sized chunks */</comment>

  <if_stmt><if>if <condition>( <expr><name>t</name></expr> )</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name> <operator>+</operator> <name>t</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">64</literal><operator>-</operator><name>t</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <name>t</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Process data in 64-byte chunks */</comment>

  <while>while <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Handle any remaining bytes of data. */</comment>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Final wrapup - pad to 64-byte boundary with the bit pattern 
 * 1 0* (64-bit count of bits processed, MSB-first)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5Final</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <comment type="block">/* Compute number of bytes mod 64 */</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

  <comment type="block">/* Set the first char of padding to 0x80.  This is safe since there is
     always at least one byte free */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name> <operator>+</operator> <name>count</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

  <comment type="block">/* Bytes of padding needed to make 64 bytes */</comment>
  <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>count</name></expr>;</expr_stmt>

  <comment type="block">/* Pad out to 56 mod 64 */</comment>
  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
    <comment type="block">/* Two lots of padding:  Pad the first block to 64 bytes */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Now fill the next block with 56 bytes */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* Pad block to 56 bytes */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Append length in bits and transform */</comment>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in32</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in32</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bits</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* In case it is sensitive */</comment>
</block_content>}</block></function>

<comment type="block">/*
** Convert a 128-bit MD5 digest into a 32-digit base-16 number.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>MD5DigestToBase16</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <specifier>const</specifier></type> <name><name>zEncode</name><index>[]</index></name> <init>= <expr><literal type="string">"0123456789abcdef"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>zEncode</name><index>[<expr><operator>(</operator><name>a</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>zEncode</name><index>[<expr><name>a</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** During testing, the special md5sum() aggregate function is available.
** inside SQLite.  The following routines implement that function.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>md5step</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&lt;</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>isInit</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zData</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zData</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>MD5Update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zData</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>md5finalize</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>MD5Context</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5DigestToBase16</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** End of copied md5sum() code.
**************************************************************************/</comment>

<typedef>typedef <type><name>sqlite3_int64</name></type> <name>i64</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>Error</name></name></type> <name>Error</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Sqlite</name></name></type> <name>Sqlite</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Statement</name></name></type> <name>Statement</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>Threadset</name></name></type> <name>Threadset</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Thread</name></name></type> <name>Thread</name>;</typedef>

<comment type="block">/* Total number of errors in this process so far. */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nGlobalErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Error</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLine</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Sqlite</name> <block>{
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                    <comment type="block">/* Database handle */</comment>
  <decl_stmt><decl><type><name>Statement</name> <modifier>*</modifier></type><name>pCache</name></decl>;</decl_stmt>              <comment type="block">/* Linked list of cached statements */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nText</name></decl>;</decl_stmt>                      <comment type="block">/* Size of array at aText[] */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>aText</name></decl>;</decl_stmt>                   <comment type="block">/* Stored text results */</comment>
}</block>;</struct>

<struct>struct <name>Statement</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>            <comment type="block">/* Pre-compiled statement handle */</comment>
  <decl_stmt><decl><type><name>Statement</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>               <comment type="block">/* Next statement in linked-list */</comment>
}</block>;</struct>

<struct>struct <name>Thread</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iTid</name></decl>;</decl_stmt>                       <comment type="block">/* Thread number within test */</comment>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>pArg</name></decl>;</decl_stmt>                     <comment type="block">/* Pointer argument passed by caller */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
  <decl_stmt><decl><type><name>uintptr_t</name></type> <name>winTid</name></decl>;</decl_stmt>               <comment type="block">/* Thread handle */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>                  <comment type="block">/* Thread id */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xProc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>     <comment type="block">/* Thread main proc */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRes</name></decl>;</decl_stmt>                     <comment type="block">/* Value returned by xProc */</comment>
  <decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>                  <comment type="block">/* Next in this list of threads */</comment>
}</block>;</struct>

<struct>struct <name>Threadset</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iMaxTid</name></decl>;</decl_stmt>                    <comment type="block">/* Largest iTid value allocated so far */</comment>
  <decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>pThread</name></decl>;</decl_stmt>                <comment type="block">/* Linked list of threads */</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_err</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_err</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>isWarn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_SCHEMA</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>isWarn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"* - no such table: *"</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>isWarn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s: (%d) \"%s\" at line %d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>isWarn</name></expr> ?</condition><then> <expr><literal type="string">"Warning"</literal></expr> </then><else>: <expr><literal type="string">"Error"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zErr</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>isWarn</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nGlobalErr</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_and_free_err</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>print_err</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free_err</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>system_error</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSys</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>iSys</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32</name></expr></cpp:if>
  <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>iSys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strerror_r</name><argument_list>(<argument><expr><name>iSys</name></expr></argument>, <argument><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name><index>[<expr><literal type="number">511</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite_error</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, 
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFunc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
      <argument><expr><literal type="string">"sqlite3_%s() - %s (%d)"</literal></expr></argument>, <argument><expr><name>zFunc</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name>sqlite3_extended_errcode</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_error_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <name>zErr</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_error_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>busyhandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_sleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opendb_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* OUT: Database handle */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,              <comment type="block">/* Database file name */</comment>
  <parameter><decl><type><name>int</name></type> <name>bDelete</name></decl></parameter>                     <comment type="block">/* True to delete db file before opening */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name>SQLITE_OPEN_CREATE</name> <operator>|</operator> <name>SQLITE_OPEN_READWRITE</name> <operator>|</operator> <name>SQLITE_OPEN_URI</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>bDelete</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(
          <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"md5sum"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>md5step</name></expr></argument>, <argument><expr><name>md5finalize</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_busy_handler</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>busyhandler</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA synchronous=OFF"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>closedb_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>                     <comment type="block">/* OUT: Database handle */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Statement</name> <modifier>*</modifier></type><name>pIter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Statement</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>pIter</name><operator>=</operator><name><name>pDb</name><operator>-&gt;</operator><name>pCache</name></name></expr>;</init> <condition><expr><name>pIter</name></expr>;</condition> <incr><expr><name>pIter</name><operator>=</operator><name>pNext</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pDb</name><operator>-&gt;</operator><name>nText</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>aText</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>aText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>&amp;&amp;</operator> <name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Sqlite</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sql_script_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>                <comment type="block">/* SQL script to execute */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sql_script_printf_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,            <comment type="block">/* SQL printf format string */</comment>
  <parameter><decl><type><modifier>...</modifier></type></decl></parameter>                             <comment type="block">/* Printf args */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>                     <comment type="block">/* ... printf arguments */</comment>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Statement</name> <modifier>*</modifier></type><name>getSqlStatement</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>                <comment type="block">/* SQL statement */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Statement</name> <modifier>*</modifier></type><name>pRet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>pRet</name><operator>=</operator><name><name>pDb</name><operator>-&gt;</operator><name>pCache</name></name></expr>;</init> <condition><expr><name>pRet</name></expr>;</condition> <incr><expr><name>pRet</name><operator>=</operator><name><name>pRet</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><name>pRet</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Statement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRet</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"prepare_v2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pCache</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCache</name></name> <operator>=</operator> <name>pRet</name></expr>;</expr_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sqlite3_stmt</name> <modifier>*</modifier></type><name>getAndBindSqlStatement</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>                      <comment type="block">/* SQL followed by parameters */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Statement</name> <modifier>*</modifier></type><name>pStatement</name></decl>;</decl_stmt>          <comment type="block">/* The SQLite statement wrapper */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>            <comment type="block">/* The SQLite statement to return */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Used to iterate through parameters */</comment>

  <expr_stmt><expr><name>pStatement</name> <operator>=</operator> <call><name>getSqlStatement</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pStatement</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <name><name>pStatement</name><operator>-&gt;</operator><name>pStmt</name></name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><call><name>sqlite3_bind_parameter_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><call><name>sqlite3_bind_parameter_name</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>pArg</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>( <expr><name><name>zName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="char">'i'</literal></expr>:</case>
        <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>i64</name> <operator>*</operator><operator>)</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <default>default:</default>
        <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"Cannot discern type: \"%s\""</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>i64</name></type> <name>execsql_i64_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><modifier>...</modifier></type></decl></parameter>                             <comment type="block">/* SQL and pointers to parameter values */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>          <comment type="block">/* SQL statement to execute */</comment>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>                   <comment type="block">/* ... arguments */</comment>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <call><name>getAndBindSqlStatement</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pStmt</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>first</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>iRet</name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>iRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>execsql_text_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><name>int</name></type> <name>iSlot</name></decl></parameter>,                      <comment type="block">/* Db handle slot to store text in */</comment>
  <parameter><decl><type><modifier>...</modifier></type></decl></parameter>                             <comment type="block">/* SQL and pointers to parameter values */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>iSlot</name><operator>&gt;=</operator><name><name>pDb</name><operator>-&gt;</operator><name>nText</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>iSlot</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>aText</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>aText</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDb</name><operator>-&gt;</operator><name>aText</name><index>[<expr><name><name>pDb</name><operator>-&gt;</operator><name>nText</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>iSlot</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name><name>pDb</name><operator>-&gt;</operator><name>nText</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>nText</name></name> <operator>=</operator> <name>iSlot</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>          <comment type="block">/* SQL statement to execute */</comment>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>                   <comment type="block">/* ... arguments */</comment>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>iSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <call><name>getAndBindSqlStatement</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pStmt</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <while>while<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>first</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>aText</name><index>[<expr><name>iSlot</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>aText</name><index>[<expr><name>iSlot</name></expr>]</index></name> <operator>=</operator> <name>zRet</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>integrity_check_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>                     <comment type="block">/* Database handle */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Statement</name> <modifier>*</modifier></type><name>pStatement</name></decl>;</decl_stmt>        <comment type="block">/* Statement to execute */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Integrity check error */</comment>

    <expr_stmt><expr><name>pStatement</name> <operator>=</operator> <call><name>getSqlStatement</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA integrity_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pStatement</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><name><name>pStatement</name><operator>-&gt;</operator><name>pStmt</name></name></expr></init></decl>;</decl_stmt>
      <while>while<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>zErr</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%z\n%s"</literal></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name>zErr</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>zErr</name></name> <operator>=</operator> <name>zErr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>__stdcall</name></type> <name>launch_thread_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Thread</name> <operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zRes</name></name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>xProc</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iTid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>_endthreadex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* NOT REACHED */</comment>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>launch_thread_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Thread</name> <operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zRes</name></name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>xProc</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iTid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>launch_thread_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Threadset</name> <modifier>*</modifier></type><name>pThreads</name></decl></parameter>,            <comment type="block">/* Thread set */</comment>
  <parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xProc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,     <comment type="block">/* Proc to run */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>                      <comment type="block">/* Argument passed to thread proc */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iTid</name> <init>= <expr><operator>++</operator><name><name>pThreads</name><operator>-&gt;</operator><name>iMaxTid</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Thread</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Thread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Thread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iTid</name></name> <operator>=</operator> <name>iTid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pArg</name></name> <operator>=</operator> <name>pArg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>xProc</name></name> <operator>=</operator> <name>xProc</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>winTid</name></name> <operator>=</operator> <call><name>_beginthreadex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>launch_thread_main</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>winTid</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><name>errno</name></expr> ?</condition><then> <expr><name>errno</name></expr> </then><else>: <expr><name>rc</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>launch_thread_main</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>system_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pThreads</name><operator>-&gt;</operator><name>pThread</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pThreads</name><operator>-&gt;</operator><name>pThread</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>join_all_threads_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Threadset</name> <modifier>*</modifier></type><name>pThreads</name></decl></parameter>             <comment type="block">/* Thread set */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Thread</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name><name>pThreads</name><operator>-&gt;</operator><name>pThread</name></name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name>pNext</name></expr></incr>)</control><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>winTid</name></name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>while<condition>( <expr><name>rc</name><operator>==</operator><name>WAIT_IO_COMPLETION</name></expr> )</condition>;</do>
    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><operator>(</operator><name>HANDLE</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>winTid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_join</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>system_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Thread %d says: %s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iTid</name></name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>zRes</name></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"..."</literal></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>zRes</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zRes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pThreads</name><operator>-&gt;</operator><name>pThread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>THREADTEST3_STAT</name></cpp:macro> <cpp:value>_stat</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>THREADTEST3_STAT</name></cpp:macro> <cpp:value>stat</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>i64</name></type> <name>filesize_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>THREADTEST3_STAT</name></name></type> <name>sStat</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>THREADTEST3_STAT</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sStat</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iRet</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iRet</name> <operator>=</operator> <name><name>sStat</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>iRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filecopy_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFrom</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTo</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>nByte</name> <init>= <expr><call><name>filesize_x</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>zFrom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>test_error_x</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"no such file: %s"</literal></expr></argument>, <argument><expr><name>zFrom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>aBuf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>fd1</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>fd2</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>fd1</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zFrom</name></expr></argument>, <argument><expr><name>O_RDONLY</name><operator>|</operator><name>O_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>fd1</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>system_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>fd2</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zTo</name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>O_EXCL</name><operator>|</operator><name>O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>fd2</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>system_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <while>while<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>nByte</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nCopy</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>aBuf</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>nCopy</name><operator>+</operator><name>iOff</name><operator>&gt;</operator><name>nByte</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>nCopy</name> <operator>=</operator> <name>nByte</name> <operator>-</operator> <name>iOff</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>nCopy</name><operator>!=</operator><call><name>read</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>, <argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>system_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>nCopy</name><operator>!=</operator><call><name>write</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>, <argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>system_error</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>nCopy</name></expr>;</expr_stmt>
      </block_content>}</block></while>

      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* 
** Used by setstoptime() and timetostop().
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>double</name></type> <name>timelimit</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>double</name></type> <name>currentTime</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pTimelimitVfs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTimelimitVfs</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pTimelimitVfs</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pTimelimitVfs</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>pTimelimitVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>tm</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pTimelimitVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><argument_list>(<argument><expr><name>pTimelimitVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>tm</name><operator>/</operator><literal type="number">86400000.0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name><name>pTimelimitVfs</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name>pTimelimitVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>t</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setstoptime_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>,                    <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>                         <comment type="block">/* Milliseconds until "stop time" */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>currentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>timelimit</name> <operator>=</operator> <name>t</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>nMs</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">1000.0</literal><operator>*</operator><literal type="number">60.0</literal><operator>*</operator><literal type="number">60.0</literal><operator>*</operator><literal type="number">24.0</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>timetostop_x</name><parameter_list>(
  <parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>                     <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pErr</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>currentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>&gt;=</operator> <name>timelimit</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************************************
**************************************************************************
**************************************************************************
** End infrastructure. Begin tests.
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WALTHREAD1_NTHREAD</name></cpp:macro>  <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WALTHREAD3_NTHREAD</name></cpp:macro>  <cpp:value>6</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>walthread1_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Iterations so far */</comment>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azSql</name><index>[]</index></name> <init>= <expr><block>{
      <expr><literal type="string">"SELECT md5sum(x) FROM t1 WHERE rowid != (SELECT max(rowid) FROM t1)"</literal></expr>,
      <expr><literal type="string">"SELECT x FROM t1 WHERE rowid = (SELECT max(rowid) FROM t1)"</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z3</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>integrity_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>z1</name> <operator>=</operator> <call><name>execsql_text</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>azSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>z2</name> <operator>=</operator> <call><name>execsql_text</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>azSql</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>z3</name> <operator>=</operator> <call><name>execsql_text</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>azSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>test_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"Failed read: %s %s %s"</literal></expr></argument>, <argument><expr><name>z1</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><name>z3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>,
        <argument><expr><literal type="string">"BEGIN;"</literal>
          <literal type="string">"INSERT INTO t1 VALUES(randomblob(100));"</literal>
          <literal type="string">"INSERT INTO t1 VALUES(randomblob(100));"</literal>
          <literal type="string">"INSERT INTO t1 SELECT md5sum(x) FROM t1;"</literal>
        <literal type="string">"COMMIT;"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nIter</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d iterations"</literal></expr></argument>, <argument><expr><name>nIter</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>walthread1_ckpt_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCkpt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Checkpoints so far */</comment>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_sleep</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA wal_checkpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>err</name><operator>.</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nCkpt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d checkpoints"</literal></expr></argument>, <argument><expr><name>nCkpt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walthread1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>        <comment type="block">/* Test threads */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Iterator variable */</comment>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>,
      <argument><expr><literal type="string">"PRAGMA journal_mode = WAL;"</literal>
      <literal type="string">"CREATE TABLE t1(x PRIMARY KEY);"</literal>
      <literal type="string">"INSERT INTO t1 VALUES(randomblob(100));"</literal>
      <literal type="string">"INSERT INTO t1 VALUES(randomblob(100));"</literal>
      <literal type="string">"INSERT INTO t1 SELECT md5sum(x) FROM t1;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>WALTHREAD1_NTHREAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread1_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread1_ckpt_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>walthread2_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>anTrans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>        <comment type="block">/* Number of WAL and Rollback transactions */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iArg</name> <init>= <expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zJournal</name> <init>= <expr><literal type="string">"PRAGMA journal_mode = WAL"</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>iArg</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>zJournal</name> <operator>=</operator> <literal type="string">"PRAGMA journal_mode = DELETE"</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>

  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>journal_exists</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>wal_exists</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>zJournal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clear_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>SQLITE_BUSY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO t1 VALUES(NULL, randomblob(100))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>journal_exists</name> <operator>=</operator> <operator>(</operator><call><name>filesize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"test.db-journal"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>wal_exists</name> <operator>=</operator> <operator>(</operator><call><name>filesize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"test.db-wal"</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>journal_exists</name><operator>+</operator><name>wal_exists</name><operator>)</operator><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>test_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"File system looks incorrect (%d, %d)"</literal></expr></argument>, 
          <argument><expr><name>journal_exists</name></expr></argument>, <argument><expr><name>wal_exists</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>anTrans</name><index>[<expr><name>journal_exists</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>integrity_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"W %d R %d"</literal></expr></argument>, <argument><expr><name><name>anTrans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>anTrans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walthread2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE t1(x INTEGER PRIMARY KEY, y UNIQUE)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread2_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread2_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread2_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread2_thread</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>walthread3_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iNextWrite</name></decl>;</decl_stmt>                 <comment type="block">/* Next value this thread will write */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iArg</name> <init>= <expr><call><name>PTR2INT</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA wal_autocheckpoint = 10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>iNextWrite</name> <operator>=</operator> <name>iArg</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>sum1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>sum2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* True to stop executing (test timed out) */</comment>

    <while>while<condition>( <expr><literal type="number">0</literal><operator>==</operator><operator>(</operator><name>stop</name> <operator>=</operator> <call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iMax</name> <init>= <expr><call><name>execsql_i64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT max(cnt) FROM t1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>iMax</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>iNextWrite</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if<condition>( <expr><name>stop</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>sum1</name> <operator>=</operator> <call><name>execsql_i64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT sum(cnt) FROM t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum2</name> <operator>=</operator> <call><name>execsql_i64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT sum(sum1) FROM t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execsql_i64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
        <argument><expr><literal type="string">"INSERT INTO t1 VALUES(:iNextWrite, :iSum1, :iSum2)"</literal></expr></argument>,
        <argument><expr><operator>&amp;</operator><name>iNextWrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sum1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sum2</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>integrity_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>iNextWrite</name> <operator>+=</operator> <name>WALTHREAD3_NTHREAD</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walthread3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
      <argument><expr><literal type="string">"PRAGMA journal_mode = WAL;"</literal>
      <literal type="string">"CREATE TABLE t1(cnt PRIMARY KEY, sum1, sum2);"</literal>
      <literal type="string">"CREATE INDEX i1 ON t1(sum1);"</literal>
      <literal type="string">"CREATE INDEX i2 ON t1(sum2);"</literal>
      <literal type="string">"INSERT INTO t1 VALUES(0, 0, 0);"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>WALTHREAD3_NTHREAD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread3_thread</name></expr></argument>, <argument><expr><call><name>INT2PTR</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>walthread4_reader_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>integrity_check</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>walthread4_writer_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRow</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA wal_autocheckpoint = 15;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>execsql_i64</name><argument_list>(
        <argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"REPLACE INTO t1 VALUES(:iRow, randomblob(300))"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRow</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iRow</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iRow</name><operator>==</operator><literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iRow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>walthread4</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
      <argument><expr><literal type="string">"PRAGMA journal_mode = WAL;"</literal>
      <literal type="string">"CREATE TABLE t1(a INTEGER PRIMARY KEY, b UNIQUE);"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread4_reader_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread4_writer_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>walthread5_thread</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>nRow</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nRow</name> <operator>=</operator> <call><name>execsql_i64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT count(*) FROM t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>nRow</name><operator>!=</operator><literal type="number">65536</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>test_error</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"Bad row count: %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>walthread5</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
      <argument><expr><literal type="string">"PRAGMA wal_autocheckpoint = 0;"</literal>
      <literal type="string">"PRAGMA page_size = 1024;"</literal>
      <literal type="string">"PRAGMA journal_mode = WAL;"</literal>
      <literal type="string">"CREATE TABLE t1(x);"</literal>
      <literal type="string">"BEGIN;"</literal>
      <literal type="string">"INSERT INTO t1 VALUES(randomblob(900));"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*     2 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*     4 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*     8 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*    16 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*    32 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*    64 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*   128 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*   256 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*   512 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*  1024 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*  2048 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*  4096 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /*  8192 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /* 16384 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /* 32768 */"</literal>
      <literal type="string">"INSERT INTO t1 SELECT randomblob(900) FROM t1;      /* 65536 */"</literal>
      <literal type="string">"COMMIT;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>filecopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="string">"test_sv.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>filecopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"test.db-wal"</literal></expr></argument>, <argument><expr><literal type="string">"test_sv.db-wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>filecopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"test_sv.db"</literal></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>filecopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"test_sv.db-wal"</literal></expr></argument>, <argument><expr><literal type="string">"test.db-wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>err</name><operator>.</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  WAL file is %d bytes,"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>filesize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>,<argument><expr><literal type="string">"test.db-wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" DB file is %d.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>filesize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>,<argument><expr><literal type="string">"test.db"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread5_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread5_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread5_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread5_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>walthread5_thread</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>err</name><operator>.</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"  WAL file is %d bytes,"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>filesize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>,<argument><expr><literal type="string">"test.db-wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" DB file is %d.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>filesize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>,<argument><expr><literal type="string">"test.db"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*------------------------------------------------------------------------
** Test case "cgt_pager_1"
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CALLGRINDTEST1_NROW</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cgt_pager_1_populate</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zInsert</name> <init>= <expr><literal type="string">"INSERT INTO t1 VALUES(:iRow, zeroblob(:iBlob))"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRow</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>iRow</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iRow</name><operator>&lt;=</operator><name>CALLGRINDTEST1_NROW</name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iBlob</name> <init>= <expr><literal type="number">600</literal> <operator>+</operator> <operator>(</operator><name>iRow</name><operator>%</operator><literal type="number">300</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zInsert</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cgt_pager_1_update</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUpdate</name> <init>= <expr><literal type="string">"UPDATE t1 SET b = zeroblob(:iBlob) WHERE a = :iRow"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRow</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>iRow</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iRow</name><operator>&lt;=</operator><name>CALLGRINDTEST1_NROW</name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iBlob</name> <init>= <expr><literal type="number">600</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>iRow</name><operator>+</operator><literal type="number">100</literal><operator>)</operator><operator>%</operator><literal type="number">300</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zUpdate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iBlob</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cgt_pager_1_read</name><parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type><name>pErr</name></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRow</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>iRow</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iRow</name><operator>&lt;=</operator><name>CALLGRINDTEST1_NROW</name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM t1 WHERE a = :iRow"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><name>pErr</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cgt_pager_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xSub</name>)<parameter_list>(<parameter><decl><type><name>Error</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Sqlite</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>,
      <argument><expr><literal type="string">"PRAGMA cache_size = 2000;"</literal>
      <literal type="string">"PRAGMA page_size = 1024;"</literal>
      <literal type="string">"CREATE TABLE t1(a INTEGER PRIMARY KEY, b BLOB);"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>xSub</name> <operator>=</operator> <name>cgt_pager_1_populate</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>xSub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>xSub</name> <operator>=</operator> <name>cgt_pager_1_update</name></expr>;</expr_stmt>   <expr_stmt><expr><call><name>xSub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>xSub</name> <operator>=</operator> <name>cgt_pager_1_read</name></expr>;</expr_stmt>     <expr_stmt><expr><call><name>xSub</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*------------------------------------------------------------------------
** Test case "dynamic_triggers"
**
**   Two threads executing statements that cause deeply nested triggers
**   to fire. And one thread busily creating and deleting triggers. This
**   is an attempt to find a bug reported to us.
*/</comment>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dynamic_triggers_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nDrop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCreate</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(
        <argument><expr><literal type="string">"CREATE TRIGGER itr%d BEFORE INSERT ON t%d BEGIN "</literal>
          <literal type="string">"INSERT INTO t%d VALUES(new.x, new.y);"</literal>
        <literal type="string">"END;"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>
      )</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nCreate</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(
        <argument><expr><literal type="string">"CREATE TRIGGER dtr%d BEFORE DELETE ON t%d BEGIN "</literal>
          <literal type="string">"DELETE FROM t%d WHERE x = old.x; "</literal>
        <literal type="string">"END;"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>
      )</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nCreate</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"DROP TRIGGER itr%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nDrop</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"DROP TRIGGER dtr%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nDrop</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d created, %d dropped"</literal></expr></argument>, <argument><expr><name>nCreate</name></expr></argument>, <argument><expr><name>nDrop</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>dynamic_triggers_2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* Error code and message */</comment>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>                <comment type="block">/* SQLite database connection */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nInsert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nDelete</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>timetostop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>iVal</name> <operator>=</operator> <operator>(</operator><name>iVal</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">100</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"INSERT INTO t1 VALUES(:iX, :iY+1)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nInsert</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block> while<condition>( <expr><name>iVal</name></expr> )</condition>;</do>

    <do>do <block>{<block_content>
      <expr_stmt><expr><name>iVal</name> <operator>=</operator> <operator>(</operator><name>iVal</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">100</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM t1 WHERE x = :iX"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nDelete</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block> while<condition>( <expr><name>iVal</name></expr> )</condition>;</do>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d inserts, %d deletes"</literal></expr></argument>, <argument><expr><name>nInsert</name></expr></argument>, <argument><expr><name>nDelete</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dynamic_triggers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nMs</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Error</name></type> <name>err</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Sqlite</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Threadset</name></type> <name>threads</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>opendb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, <argument><expr><literal type="string">"test.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sql_script</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>, 
      <argument><expr><literal type="string">"PRAGMA page_size = 1024;"</literal>
      <literal type="string">"PRAGMA journal_mode = WAL;"</literal>
      <literal type="string">"CREATE TABLE t1(x, y);"</literal>
      <literal type="string">"CREATE TABLE t2(x, y);"</literal>
      <literal type="string">"CREATE TABLE t3(x, y);"</literal>
      <literal type="string">"CREATE TABLE t4(x, y);"</literal>
      <literal type="string">"CREATE TABLE t5(x, y);"</literal>
      <literal type="string">"CREATE TABLE t6(x, y);"</literal>
      <literal type="string">"CREATE TABLE t7(x, y);"</literal>
      <literal type="string">"CREATE TABLE t8(x, y);"</literal>
      <literal type="string">"CREATE TABLE t9(x, y);"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>closedb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setstoptime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>dynamic_triggers_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>dynamic_triggers_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlite3_sleep</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>dynamic_triggers_2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>launch_thread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>, <argument><expr><name>dynamic_triggers_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>join_all_threads</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>print_and_free_err</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tt3_checkpoint.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tt3_index.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tt3_lookaside1.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tt3_vacuum.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tt3_stress.c"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tt3_shared.c"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>ThreadTest</name> <block>{
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xTest</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>   <comment type="block">/* Routine for running this test */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTest</name></decl>;</decl_stmt>    <comment type="block">/* Name of this test */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nMs</name></decl>;</decl_stmt>              <comment type="block">/* How long to run this test, in milliseconds */</comment>
  }</block> <decl><name><name>aTest</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><name>walthread1</name></expr>, <expr><literal type="string">"walthread1"</literal></expr>, <expr><literal type="number">20000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>walthread2</name></expr>, <expr><literal type="string">"walthread2"</literal></expr>, <expr><literal type="number">20000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>walthread3</name></expr>, <expr><literal type="string">"walthread3"</literal></expr>, <expr><literal type="number">20000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>walthread4</name></expr>, <expr><literal type="string">"walthread4"</literal></expr>, <expr><literal type="number">20000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>walthread5</name></expr>, <expr><literal type="string">"walthread5"</literal></expr>,  <expr><literal type="number">1000</literal></expr> }</block></expr>,
    
    <expr><block>{ <expr><name>cgt_pager_1</name></expr>,      <expr><literal type="string">"cgt_pager_1"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>dynamic_triggers</name></expr>, <expr><literal type="string">"dynamic_triggers"</literal></expr>, <expr><literal type="number">20000</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>checkpoint_starvation_1</name></expr>, <expr><literal type="string">"checkpoint_starvation_1"</literal></expr>, <expr><literal type="number">10000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>checkpoint_starvation_2</name></expr>, <expr><literal type="string">"checkpoint_starvation_2"</literal></expr>, <expr><literal type="number">10000</literal></expr> }</block></expr>,

    <expr><block>{ <expr><name>create_drop_index_1</name></expr>, <expr><literal type="string">"create_drop_index_1"</literal></expr>, <expr><literal type="number">10000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>lookaside1</name></expr>,          <expr><literal type="string">"lookaside1"</literal></expr>, <expr><literal type="number">10000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>vacuum1</name></expr>,             <expr><literal type="string">"vacuum1"</literal></expr>, <expr><literal type="number">10000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress1</name></expr>,             <expr><literal type="string">"stress1"</literal></expr>, <expr><literal type="number">10000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>stress2</name></expr>,             <expr><literal type="string">"stress2"</literal></expr>, <expr><literal type="number">60000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><name>shared1</name></expr>,             <expr><literal type="string">"shared1"</literal></expr>, <expr><literal type="number">10000</literal></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name><name>substArgv</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"*"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>iArg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nTestfound</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MULTITHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>argc</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>argv</name> <operator>=</operator> <name>substArgv</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Loop through the command-line arguments to ensure that each argument
  ** selects at least one test. If not, assume there is a typo on the 
  ** command-line and bail out with the usage message.  */</comment>
  <for>for<control>(<init><expr><name>iArg</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iArg</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>iArg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>iArg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"-multiplexor"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* Install the multiplexor VFS as the default */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_multiplex_initialize</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to install multiplexor VFS (%d)\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="number">253</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <else>else <block>{<block_content>
        <goto>goto <name>usage</name>;</goto>
      </block_content>}</block></else></if_stmt>

      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aTest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_strglob</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zTest</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aTest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>usage</name>;</goto></block_content></block></if></if_stmt>   
  </block_content>}</block></for>

  <for>for<control>(<init><expr><name>iArg</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iArg</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>iArg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>argv</name><index>[<expr><name>iArg</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aTest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zTest</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3_strglob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>iArg</name></expr>]</index></name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Running %s for %d seconds...\n"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nMs</name><operator>/</operator><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>xTest</name><argument_list>(<argument><expr><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nTestfound</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>nTestfound</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>usage</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d errors out of %d tests\n"</literal></expr></argument>, <argument><expr><name>nGlobalErr</name></expr></argument>, <argument><expr><name>nTestfound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>nGlobalErr</name><operator>&gt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">255</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>

 <label><name>usage</name>:</label>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: %s [-multiplexor] [testname|testprefix*]...\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Available tests are:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aTest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   %s\n"</literal></expr></argument>, <argument><expr><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">254</literal></expr>;</return>
</block_content>}</block></function>
</unit>
