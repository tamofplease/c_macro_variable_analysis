<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/test/startup.c"><comment type="block">/*
** 2021-01-01
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** 
** This file implements a program used to measure the start-up performance
** of SQLite.
**
** To use:
**
**     ./startup init
**     valgrind --tool=cachegrind ./startup run
**
**
** The "./startup init" command creates the test database file named
** "startup.db".  The performance test is run by the "./startup run"
** command.  That command does nothing but open the database file and
** parse the entire schema.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zHelp</name><index>[]</index></name> <init>=
  <expr><literal type="string">"Usage: %s COMMAND\n"</literal>
  <literal type="string">"Commands:\n"</literal>
  <literal type="string">"  init                Initialized the startup.db database file\n"</literal>
  <literal type="string">"  run                 Run the startup performance test\n"</literal>
  <literal type="string">"Options:\n"</literal>
  <literal type="string">"  --dbname NAME       Set the name of the test database file\n"</literal>
  <literal type="string">"  --heap SZ MIN       Memory allocator uses SZ bytes &amp; min allocation MIN\n"</literal>
  <literal type="string">"  --stats             Show statistics at the end\n"</literal></expr></init></decl>
<comment type="block">/* TBD
  "  --journal M         Set the journal_mode to M\n"
  "  --lookaside N SZ    Configure lookaside for N slots of SZ bytes each\n"
  "  --mmap SZ           MMAP the first SZ bytes of the database file\n"
  "  --multithread       Set multithreaded mode\n"
  "  --nomemstat         Disable memory statistics\n"
  "  --pagesize N        Set the page size to N\n"
  "  --pcache N SZ       Configure N pages of pagecache each of size SZ bytes\n"
  "  --serialized        Set serialized threading mode\n"
  "  --singlethread      Set single-threaded mode - disables all mutexing\n"
  "  --utf16be           Set text encoding to UTF-16BE\n"
  "  --utf16le           Set text encoding to UTF-16LE\n"
  "  --utf8              Set text encoding to UTF-8\n"
*/</comment>
;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>zHelp</name></expr></argument>, <argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The test schema is derived from the Fossil repository for SQLite itself.
** The schema covers the repository, the local checkout database, and
** the global configuration database.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zTestSchema</name><index>[]</index></name> <init>= 
  <expr><literal type="string">"CREATE TABLE repo_blob(\n"</literal>
  <literal type="string">"  rid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  rcvid INTEGER,\n"</literal>
  <literal type="string">"  size INTEGER,\n"</literal>
  <literal type="string">"  uuid TEXT UNIQUE NOT NULL,\n"</literal>
  <literal type="string">"  content BLOB,\n"</literal>
  <literal type="string">"  CHECK( length(uuid)&gt;=40 AND rid&gt;0 )\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_delta(\n"</literal>
  <literal type="string">"  rid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  srcid INTEGER NOT NULL REFERENCES blob\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_rcvfrom(\n"</literal>
  <literal type="string">"  rcvid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  uid INTEGER REFERENCES user,\n"</literal>
  <literal type="string">"  mtime DATETIME,\n"</literal>
  <literal type="string">"  nonce TEXT UNIQUE,\n"</literal>
  <literal type="string">"  ipaddr TEXT\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_private(rid INTEGER PRIMARY KEY);\n"</literal>
  <literal type="string">"CREATE TABLE repo_accesslog(\n"</literal>
  <literal type="string">"  uname TEXT,\n"</literal>
  <literal type="string">"  ipaddr TEXT,\n"</literal>
  <literal type="string">"  success BOOLEAN,\n"</literal>
  <literal type="string">"  mtime TIMESTAMP);\n"</literal>
  <literal type="string">"CREATE TABLE repo_user(\n"</literal>
  <literal type="string">"  uid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  login TEXT UNIQUE,\n"</literal>
  <literal type="string">"  pw TEXT,\n"</literal>
  <literal type="string">"  cap TEXT,\n"</literal>
  <literal type="string">"  cookie TEXT,\n"</literal>
  <literal type="string">"  ipaddr TEXT,\n"</literal>
  <literal type="string">"  cexpire DATETIME,\n"</literal>
  <literal type="string">"  info TEXT,\n"</literal>
  <literal type="string">"  mtime DATE,\n"</literal>
  <literal type="string">"  photo BLOB\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_reportfmt(\n"</literal>
  <literal type="string">"   rn INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"   owner TEXT,\n"</literal>
  <literal type="string">"   title TEXT UNIQUE,\n"</literal>
  <literal type="string">"   mtime INTEGER,\n"</literal>
  <literal type="string">"   cols TEXT,\n"</literal>
  <literal type="string">"   sqlcode TEXT\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_sqlite_stat2(tbl,idx,sampleno,sample);\n"</literal>
  <literal type="string">"CREATE TABLE repo_sqlite_stat1(tbl,idx,stat);\n"</literal>
  <literal type="string">"CREATE TABLE repo_sqlite_stat3(tbl,idx,neq,nlt,ndlt,sample);\n"</literal>
  <literal type="string">"CREATE TABLE repo_config(\n"</literal>
  <literal type="string">"  name TEXT PRIMARY KEY NOT NULL,\n"</literal>
  <literal type="string">"  value CLOB, mtime INTEGER,\n"</literal>
  <literal type="string">"  CHECK( typeof(name)='text' AND length(name)&gt;=1 )\n"</literal>
  <literal type="string">") WITHOUT ROWID;\n"</literal>
  <literal type="string">"CREATE TABLE repo_shun(uuid PRIMARY KEY,\n"</literal>
  <literal type="string">"  mtime INTEGER,\n"</literal>
  <literal type="string">"  scom TEXT) WITHOUT ROWID;\n"</literal>
  <literal type="string">"CREATE TABLE repo_concealed(\n"</literal>
  <literal type="string">"  hash TEXT PRIMARY KEY,\n"</literal>
  <literal type="string">"  content TEXT\n"</literal>
  <literal type="string">", mtime INTEGER) WITHOUT ROWID;\n"</literal>
  <literal type="string">"CREATE TABLE repo_admin_log(\n"</literal>
  <literal type="string">" id INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">" time INTEGER, -- Seconds since 1970\n"</literal>
  <literal type="string">" page TEXT,    -- path of page\n"</literal>
  <literal type="string">" who TEXT,     -- User who made the change\n"</literal>
  <literal type="string">"  what TEXT     -- What changed\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_unversioned(\n"</literal>
  <literal type="string">"  name TEXT PRIMARY KEY,\n"</literal>
  <literal type="string">"  rcvid INTEGER,\n"</literal>
  <literal type="string">"  mtime DATETIME,\n"</literal>
  <literal type="string">"  hash TEXT,\n"</literal>
  <literal type="string">"  sz INTEGER,\n"</literal>
  <literal type="string">"  encoding INT,\n"</literal>
  <literal type="string">"  content BLOB\n"</literal>
  <literal type="string">") WITHOUT ROWID;\n"</literal>
  <literal type="string">"CREATE TABLE repo_subscriber(\n"</literal>
  <literal type="string">"  subscriberId INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  subscriberCode BLOB DEFAULT (randomblob(32)) UNIQUE,\n"</literal>
  <literal type="string">"  semail TEXT UNIQUE COLLATE nocase,\n"</literal>
  <literal type="string">"  suname TEXT,\n"</literal>
  <literal type="string">"  sverified BOOLEAN DEFAULT true,\n"</literal>
  <literal type="string">"  sdonotcall BOOLEAN,\n"</literal>
  <literal type="string">"  sdigest BOOLEAN,\n"</literal>
  <literal type="string">"  ssub TEXT,\n"</literal>
  <literal type="string">"  sctime INTDATE,\n"</literal>
  <literal type="string">"  mtime INTDATE,\n"</literal>
  <literal type="string">"  smip TEXT\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_pending_alert(\n"</literal>
  <literal type="string">"  eventid TEXT PRIMARY KEY,\n"</literal>
  <literal type="string">"  sentSep BOOLEAN DEFAULT false,\n"</literal>
  <literal type="string">"  sentDigest BOOLEAN DEFAULT false\n"</literal>
  <literal type="string">", sentMod BOOLEAN DEFAULT false) WITHOUT ROWID;\n"</literal>
  <literal type="string">"CREATE INDEX repo_delta_i1 ON repo_delta(srcid);\n"</literal>
  <literal type="string">"CREATE INDEX repo_blob_rcvid ON repo_blob(rcvid);\n"</literal>
  <literal type="string">"CREATE INDEX repo_subscriberUname\n"</literal>
  <literal type="string">"  ON repo_subscriber(suname) WHERE suname IS NOT NULL;\n"</literal>
  <literal type="string">"CREATE VIEW repo_artifact(rid,rcvid,size,atype,srcid,hash,content) AS\n"</literal>
  <literal type="string">"     SELECT blob.rid,rcvid,size,1,srcid,uuid,content\n"</literal>
  <literal type="string">"       FROM repo_blob LEFT JOIN repo_delta ON (blob.rid=delta.rid);\n"</literal>
  <literal type="string">"CREATE TABLE repo_filename(\n"</literal>
  <literal type="string">"  fnid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  name TEXT UNIQUE\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_mlink(\n"</literal>
  <literal type="string">"  mid INTEGER,\n"</literal>
  <literal type="string">"  fid INTEGER,\n"</literal>
  <literal type="string">"  pmid INTEGER,\n"</literal>
  <literal type="string">"  pid INTEGER,\n"</literal>
  <literal type="string">"  fnid INTEGER REFERENCES filename,\n"</literal>
  <literal type="string">"  pfnid INTEGER,\n"</literal>
  <literal type="string">"  mperm INTEGER,\n"</literal>
  <literal type="string">"  isaux BOOLEAN DEFAULT 0\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE INDEX repo_mlink_i1 ON repo_mlink(mid);\n"</literal>
  <literal type="string">"CREATE INDEX repo_mlink_i2 ON repo_mlink(fnid);\n"</literal>
  <literal type="string">"CREATE INDEX repo_mlink_i3 ON repo_mlink(fid);\n"</literal>
  <literal type="string">"CREATE INDEX repo_mlink_i4 ON repo_mlink(pid);\n"</literal>
  <literal type="string">"CREATE TABLE repo_plink(\n"</literal>
  <literal type="string">"  pid INTEGER REFERENCES blob,\n"</literal>
  <literal type="string">"  cid INTEGER REFERENCES blob,\n"</literal>
  <literal type="string">"  isprim BOOLEAN,\n"</literal>
  <literal type="string">"  mtime DATETIME,\n"</literal>
  <literal type="string">"  baseid INTEGER REFERENCES blob,\n"</literal>
  <literal type="string">"  UNIQUE(pid, cid)\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE INDEX repo_plink_i2 ON repo_plink(cid,pid);\n"</literal>
  <literal type="string">"CREATE TABLE repo_leaf(rid INTEGER PRIMARY KEY);\n"</literal>
  <literal type="string">"CREATE TABLE repo_event(\n"</literal>
  <literal type="string">"  type TEXT,\n"</literal>
  <literal type="string">"  mtime DATETIME,\n"</literal>
  <literal type="string">"  objid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  tagid INTEGER,\n"</literal>
  <literal type="string">"  uid INTEGER REFERENCES user,\n"</literal>
  <literal type="string">"  bgcolor TEXT,\n"</literal>
  <literal type="string">"  euser TEXT,\n"</literal>
  <literal type="string">"  user TEXT,\n"</literal>
  <literal type="string">"  ecomment TEXT,\n"</literal>
  <literal type="string">"  comment TEXT,\n"</literal>
  <literal type="string">"  brief TEXT,\n"</literal>
  <literal type="string">"  omtime DATETIME\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE INDEX repo_event_i1 ON repo_event(mtime);\n"</literal>
  <literal type="string">"CREATE TABLE repo_phantom(\n"</literal>
  <literal type="string">"  rid INTEGER PRIMARY KEY\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_orphan(\n"</literal>
  <literal type="string">"  rid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  baseline INTEGER\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE INDEX repo_orphan_baseline ON repo_orphan(baseline);\n"</literal>
  <literal type="string">"CREATE TABLE repo_unclustered(\n"</literal>
  <literal type="string">"  rid INTEGER PRIMARY KEY\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_unsent(\n"</literal>
  <literal type="string">"  rid INTEGER PRIMARY KEY\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_tag(\n"</literal>
  <literal type="string">"  tagid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  tagname TEXT UNIQUE\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_tagxref(\n"</literal>
  <literal type="string">"  tagid INTEGER REFERENCES tag,\n"</literal>
  <literal type="string">"  tagtype INTEGER,\n"</literal>
  <literal type="string">"  srcid INTEGER REFERENCES blob,\n"</literal>
  <literal type="string">"  origid INTEGER REFERENCES blob,\n"</literal>
  <literal type="string">"  value TEXT,\n"</literal>
  <literal type="string">"  mtime TIMESTAMP,\n"</literal>
  <literal type="string">"  rid INTEGER REFERENCE blob,\n"</literal>
  <literal type="string">"  UNIQUE(rid, tagid)\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE INDEX repo_tagxref_i1 ON repo_tagxref(tagid, mtime);\n"</literal>
  <literal type="string">"CREATE TABLE repo_backlink(\n"</literal>
  <literal type="string">"  target TEXT,\n"</literal>
  <literal type="string">"  srctype INT,\n"</literal>
  <literal type="string">"  srcid INT,\n"</literal>
  <literal type="string">"  mtime TIMESTAMP,\n"</literal>
  <literal type="string">"  UNIQUE(target, srctype, srcid)\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE INDEX repo_backlink_src ON repo_backlink(srcid, srctype);\n"</literal>
  <literal type="string">"CREATE TABLE repo_attachment(\n"</literal>
  <literal type="string">"  attachid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  isLatest BOOLEAN DEFAULT 0,\n"</literal>
  <literal type="string">"  mtime TIMESTAMP,\n"</literal>
  <literal type="string">"  src TEXT,\n"</literal>
  <literal type="string">"  target TEXT,\n"</literal>
  <literal type="string">"  filename TEXT,\n"</literal>
  <literal type="string">"  comment TEXT,\n"</literal>
  <literal type="string">"  user TEXT\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE INDEX repo_attachment_idx1\n"</literal>
  <literal type="string">" ON repo_attachment(target, filename, mtime);\n"</literal>
  <literal type="string">"CREATE INDEX repo_attachment_idx2 ON repo_attachment(src);\n"</literal>
  <literal type="string">"CREATE TABLE repo_cherrypick(\n"</literal>
  <literal type="string">"  parentid INT,\n"</literal>
  <literal type="string">"  childid INT,\n"</literal>
  <literal type="string">"  isExclude BOOLEAN DEFAULT false,\n"</literal>
  <literal type="string">"  PRIMARY KEY(parentid, childid)\n"</literal>
  <literal type="string">") WITHOUT ROWID;\n"</literal>
  <literal type="string">"CREATE INDEX repo_cherrypick_cid ON repo_cherrypick(childid);\n"</literal>
  <literal type="string">"CREATE TABLE repo_ticket(\n"</literal>
  <literal type="string">"  -- Do not change any column that begins with tkt_\n"</literal>
  <literal type="string">"  tkt_id INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  tkt_uuid TEXT UNIQUE,\n"</literal>
  <literal type="string">"  tkt_mtime DATE,\n"</literal>
  <literal type="string">"  tkt_ctime DATE,\n"</literal>
  <literal type="string">"  -- Add as many fields as required below this line\n"</literal>
  <literal type="string">"  type TEXT,\n"</literal>
  <literal type="string">"  status TEXT,\n"</literal>
  <literal type="string">"  subsystem TEXT,\n"</literal>
  <literal type="string">"  priority TEXT,\n"</literal>
  <literal type="string">"  severity TEXT,\n"</literal>
  <literal type="string">"  foundin TEXT,\n"</literal>
  <literal type="string">"  private_contact TEXT,\n"</literal>
  <literal type="string">"  resolution TEXT,\n"</literal>
  <literal type="string">"  title TEXT,\n"</literal>
  <literal type="string">"  comment TEXT\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE repo_ticketchng(\n"</literal>
  <literal type="string">"  -- Do not change any column that begins with tkt_\n"</literal>
  <literal type="string">"  tkt_id INTEGER REFERENCES ticket,\n"</literal>
  <literal type="string">"  tkt_rid INTEGER REFERENCES blob,\n"</literal>
  <literal type="string">"  tkt_mtime DATE,\n"</literal>
  <literal type="string">"  -- Add as many fields as required below this line\n"</literal>
  <literal type="string">"  login TEXT,\n"</literal>
  <literal type="string">"  username TEXT,\n"</literal>
  <literal type="string">"  mimetype TEXT,\n"</literal>
  <literal type="string">"  icomment TEXT\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE INDEX repo_ticketchng_idx1 ON repo_ticketchng(tkt_id, tkt_mtime);\n"</literal>
  <literal type="string">"CREATE TRIGGER repo_alert_trigger1\n"</literal>
  <literal type="string">"AFTER INSERT ON repo_event BEGIN\n"</literal>
  <literal type="string">"  INSERT INTO repo_pending_alert(eventid)\n"</literal>
  <literal type="string">"    SELECT printf('%.1c%d',new.type,new.objid) WHERE true\n"</literal>
  <literal type="string">"    ON CONFLICT(eventId) DO NOTHING;\n"</literal>
  <literal type="string">"END;\n"</literal>
  <literal type="string">"CREATE TABLE repo_vcache(\n"</literal>
  <literal type="string">"  vid INTEGER,         -- check-in ID\n"</literal>
  <literal type="string">"  fname TEXT,          -- filename\n"</literal>
  <literal type="string">"  rid INTEGER,         -- artifact ID\n"</literal>
  <literal type="string">"  PRIMARY KEY(vid,fname)\n"</literal>
  <literal type="string">") WITHOUT ROWID;\n"</literal>
  <literal type="string">"CREATE TABLE localdb_vvar(\n"</literal>
  <literal type="string">"  name TEXT PRIMARY KEY NOT NULL,\n"</literal>
  <literal type="string">"  value CLOB,\n"</literal>
  <literal type="string">"  CHECK( typeof(name)='text' AND length(name)&gt;=1 )\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE localdb_vfile(\n"</literal>
  <literal type="string">"  id INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  vid INTEGER REFERENCES blob,\n"</literal>
  <literal type="string">"  chnged INT DEFAULT 0,\n"</literal>
  <literal type="string">"  deleted BOOLEAN DEFAULT 0,\n"</literal>
  <literal type="string">"  isexe BOOLEAN,\n"</literal>
  <literal type="string">"  islink BOOLEAN,\n"</literal>
  <literal type="string">"  rid INTEGER,\n"</literal>
  <literal type="string">"  mrid INTEGER,\n"</literal>
  <literal type="string">"  mtime INTEGER,\n"</literal>
  <literal type="string">"  pathname TEXT,\n"</literal>
  <literal type="string">"  origname TEXT, mhash,\n"</literal>
  <literal type="string">"  UNIQUE(pathname,vid)\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE localdb_sqlite_stat1(tbl,idx,stat);\n"</literal>
  <literal type="string">"CREATE TABLE localdb_vcache(\n"</literal>
  <literal type="string">"  vid INTEGER,         -- check-in ID\n"</literal>
  <literal type="string">"  fname TEXT,          -- filename\n"</literal>
  <literal type="string">"  rid INTEGER,         -- artifact ID\n"</literal>
  <literal type="string">"  PRIMARY KEY(vid,fname)\n"</literal>
  <literal type="string">") WITHOUT ROWID;\n"</literal>
  <literal type="string">"CREATE TABLE localdb_stash(\n"</literal>
  <literal type="string">"  stashid INTEGER PRIMARY KEY,\n"</literal>
  <literal type="string">"  vid INTEGER,\n"</literal>
  <literal type="string">"  hash TEXT,\n"</literal>
  <literal type="string">"  comment TEXT,\n"</literal>
  <literal type="string">"  ctime TIMESTAMP\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE localdb_stashfile(\n"</literal>
  <literal type="string">"  stashid INTEGER REFERENCES stash,\n"</literal>
  <literal type="string">"  isAdded BOOLEAN,\n"</literal>
  <literal type="string">"  isRemoved BOOLEAN,\n"</literal>
  <literal type="string">"  isExec BOOLEAN,\n"</literal>
  <literal type="string">"  isLink BOOLEAN,\n"</literal>
  <literal type="string">"  rid INTEGER,\n"</literal>
  <literal type="string">"  hash TEXT,\n"</literal>
  <literal type="string">"  origname TEXT,\n"</literal>
  <literal type="string">"  newname TEXT,\n"</literal>
  <literal type="string">"  delta BLOB,\n"</literal>
  <literal type="string">"  PRIMARY KEY(newname, stashid)\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE localdb_vmerge(\n"</literal>
  <literal type="string">"  id INTEGER REFERENCES vfile,\n"</literal>
  <literal type="string">"  merge INTEGER,\n"</literal>
  <literal type="string">"  mhash TEXT\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE UNIQUE INDEX localdb_vmergex1 ON localdb_vmerge(id,mhash);\n"</literal>
  <literal type="string">"CREATE TRIGGER localdb_vmerge_ck1 AFTER INSERT ON localdb_vmerge\n"</literal>
  <literal type="string">"WHEN new.mhash IS NULL BEGIN\n"</literal>
  <literal type="string">"  SELECT raise(FAIL,\n"</literal>
  <literal type="string">"  'trying to update a newer checkout with an older version of Fossil');\n"</literal>
  <literal type="string">"END;\n"</literal>
  <literal type="string">"CREATE TABLE configdb_global_config(\n"</literal>
  <literal type="string">"  name TEXT PRIMARY KEY,\n"</literal>
  <literal type="string">"  value TEXT\n"</literal>
  <literal type="string">");\n"</literal>
  <literal type="string">"CREATE TABLE configdb_sqlite_stat1(tbl,idx,stat);\n"</literal></expr></init></decl>
;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__linux__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Attempt to display I/O stats on Linux using /proc/PID/io
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>displayLinuxIoStats</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>z</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"/proc/%d/io"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><call><name>fgets</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDesc</name></decl>;</decl_stmt>
    }</block> <decl><name><name>aTrans</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr><literal type="string">"rchar: "</literal></expr>,                  <expr><literal type="string">"Bytes received by read():"</literal></expr> }</block></expr>,
      <expr><block>{ <expr><literal type="string">"wchar: "</literal></expr>,                  <expr><literal type="string">"Bytes sent to write():"</literal></expr>    }</block></expr>,
      <expr><block>{ <expr><literal type="string">"syscr: "</literal></expr>,                  <expr><literal type="string">"Read() system calls:"</literal></expr>      }</block></expr>,
      <expr><block>{ <expr><literal type="string">"syscw: "</literal></expr>,                  <expr><literal type="string">"Write() system calls:"</literal></expr>     }</block></expr>,
      <expr><block>{ <expr><literal type="string">"read_bytes: "</literal></expr>,             <expr><literal type="string">"Bytes rcvd from storage:"</literal></expr>  }</block></expr>,
      <expr><block>{ <expr><literal type="string">"write_bytes: "</literal></expr>,            <expr><literal type="string">"Bytes sent to storage:"</literal></expr>    }</block></expr>,
      <expr><block>{ <expr><literal type="string">"cancelled_write_bytes: "</literal></expr>,  <expr><literal type="string">"Cancelled write bytes:"</literal></expr>    }</block></expr>,
    }</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aTrans</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aTrans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>aTrans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>aTrans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zPattern</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"-- %-28s %s"</literal></expr></argument>, <argument><expr><name><name>aTrans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>   
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Return the value of a hexadecimal digit.  Return -1 if the input
** is not a hex digit.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hexDigitValue</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'f'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'F'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Interpret zArg as an integer value, possibly with suffixes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>integerValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSuffix</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>iMult</name></decl>;</decl_stmt> }</block> <decl><name><name>aMult</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"KiB"</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"MiB"</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"GiB"</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"KB"</literal></expr>,  <expr><literal type="number">1000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"MB"</literal></expr>,  <expr><literal type="number">1000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"GB"</literal></expr>,  <expr><literal type="number">1000000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"K"</literal></expr>,   <expr><literal type="number">1000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"M"</literal></expr>,   <expr><literal type="number">1000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"G"</literal></expr>,   <expr><literal type="number">1000000000</literal></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isNeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>isNeg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>zArg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>x</name> <operator>=</operator> <call><name>hexDigitValue</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if><else>else<block>{<block_content>
    <while>while<condition>( <expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aMult</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aMult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>aMult</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zSuffix</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>*=</operator> <name><name>aMult</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iMult</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>v</name><operator>&gt;</operator><literal type="number">0x7fffffff</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: parameter too large - max 2147483648\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>isNeg</name></expr>?</condition><then> <expr><operator>-</operator><name>v</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCmd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bAutovac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>showStats</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbName</name> <init>= <expr><literal type="string">"./startup.db"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mnHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>zCmd</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zCmd</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"-autovacuum"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>bAutovac</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
    if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"-dbname"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: missing argument on \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>zDbName</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
    if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"-heap"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>nHeap</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mnHeap</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
    if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"-stats"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
       <expr_stmt><expr><name>showStats</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: unknown option \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>zCmd</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: no COMMAND specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>, <argument><expr><literal type="string">"run"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nHeap</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pHeap</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nHeap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pHeap</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: cannot allocate %d-byte heap\n"</literal></expr></argument>, <argument><expr><name>nHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_HEAP</name></expr></argument>, <argument><expr><name>pHeap</name></expr></argument>, <argument><expr><name>nHeap</name></expr></argument>, <argument><expr><name>mnHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: heap configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name>zDbName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SQLite error: %s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA synchronous"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>zErr</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: %s\n"</literal></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>showStats</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iCur</name></decl>, <decl><type ref="prev"/><name>iHi</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Lookaside Slots Used:        %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Successful lookasides:       %d\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Lookaside size faults:       %d\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Lookaside OOM faults:        %d\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Pager Heap Usage:            %d bytes\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_HIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Page cache hits:             %d\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_MISS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Page cache misses:           %d\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Page cache writes:           %d\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_SCHEMA_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Schema Heap Usage:           %d bytes\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_STMT_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Statement Heap Usage:        %d bytes\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Global memory usage statistics printed after the database connection
    ** has closed.  Memory usage should be zero at this point. */</comment>
    <if_stmt><if>if<condition>( <expr><name>showStats</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iCur</name></decl>, <decl><type ref="prev"/><name>iHi</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MEMORY_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Memory Used (bytes):         %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MALLOC_COUNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Outstanding Allocations:     %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_PAGECACHE_OVERFLOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Pcache Overflow Bytes:       %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MALLOC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Largest Allocation:          %d bytes\n"</literal></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_PAGECACHE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Largest Pcache Allocation:   %d bytes\n"</literal></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__linux__</name></cpp:ifdef>
      <expr_stmt><expr><call><name>displayLinuxIoStats</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>, <argument><expr><literal type="string">"init"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zAux</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zAux</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s-journal"</literal></expr></argument>, <argument><expr><name>zDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zAux</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s-wal"</literal></expr></argument>, <argument><expr><name>zDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zAux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name>zDbName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SQLite error: %s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zTestSchema</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>zErr</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ERROR: %s\n"</literal></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
