<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/test/speedtest1.c"><comment type="block">/*
** A program for performance testing.
**
** The available command-line options are described below:
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zHelp</name><index>[]</index></name> <init>=
  <expr><literal type="string">"Usage: %s [--options] DATABASE\n"</literal>
  <literal type="string">"Options:\n"</literal>
  <literal type="string">"  --autovacuum        Enable AUTOVACUUM mode\n"</literal>
  <literal type="string">"  --cachesize N       Set the cache size to N\n"</literal>
  <literal type="string">"  --checkpoint        Run PRAGMA wal_checkpoint after each test case\n"</literal>
  <literal type="string">"  --exclusive         Enable locking_mode=EXCLUSIVE\n"</literal>
  <literal type="string">"  --explain           Like --sqlonly but with added EXPLAIN keywords\n"</literal>
  <literal type="string">"  --heap SZ MIN       Memory allocator uses SZ bytes &amp; min allocation MIN\n"</literal>
  <literal type="string">"  --incrvacuum        Enable incremenatal vacuum mode\n"</literal>
  <literal type="string">"  --journal M         Set the journal_mode to M\n"</literal>
  <literal type="string">"  --key KEY           Set the encryption key to KEY\n"</literal>
  <literal type="string">"  --lookaside N SZ    Configure lookaside for N slots of SZ bytes each\n"</literal>
  <literal type="string">"  --memdb             Use an in-memory database\n"</literal>
  <literal type="string">"  --mmap SZ           MMAP the first SZ bytes of the database file\n"</literal>
  <literal type="string">"  --multithread       Set multithreaded mode\n"</literal>
  <literal type="string">"  --nomemstat         Disable memory statistics\n"</literal>
  <literal type="string">"  --nosync            Set PRAGMA synchronous=OFF\n"</literal>
  <literal type="string">"  --notnull           Add NOT NULL constraints to table columns\n"</literal>
  <literal type="string">"  --output FILE       Store SQL output in FILE\n"</literal>
  <literal type="string">"  --pagesize N        Set the page size to N\n"</literal>
  <literal type="string">"  --pcache N SZ       Configure N pages of pagecache each of size SZ bytes\n"</literal>
  <literal type="string">"  --primarykey        Use PRIMARY KEY instead of UNIQUE where appropriate\n"</literal>
  <literal type="string">"  --repeat N          Repeat each SELECT N times (default: 1)\n"</literal>
  <literal type="string">"  --reprepare         Reprepare each statement upon every invocation\n"</literal>
  <literal type="string">"  --reserve N         Reserve N bytes on each database page\n"</literal>
  <literal type="string">"  --serialized        Set serialized threading mode\n"</literal>
  <literal type="string">"  --singlethread      Set single-threaded mode - disables all mutexing\n"</literal>
  <literal type="string">"  --sqlonly           No-op.  Only show the SQL that would have been run.\n"</literal>
  <literal type="string">"  --shrink-memory     Invoke sqlite3_db_release_memory() frequently.\n"</literal>
  <literal type="string">"  --size N            Relative test size.  Default=100\n"</literal>
  <literal type="string">"  --strict            Use STRICT table where appropriate\n"</literal>
  <literal type="string">"  --stats             Show statistics at the end\n"</literal>
  <literal type="string">"  --temp N            N from 0 to 9.  0: no temp table. 9: all temp tables\n"</literal>
  <literal type="string">"  --testset T         Run test-set T (main, cte, rtree, orm, fp, debug)\n"</literal>
  <literal type="string">"  --trace             Turn on SQL tracing\n"</literal>
  <literal type="string">"  --threads N         Use up to N threads for sorting\n"</literal>
  <literal type="string">"  --utf16be           Set text encoding to UTF-16BE\n"</literal>
  <literal type="string">"  --utf16le           Set text encoding to UTF-16LE\n"</literal>
  <literal type="string">"  --verify            Run additional verification steps.\n"</literal>
  <literal type="string">"  --without-rowid     Use WITHOUT ROWID where appropriate\n"</literal></expr></init></decl>
;</decl_stmt>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;io.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISSPACE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isspace((unsigned char)(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISDIGIT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>isdigit((unsigned char)(X))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&lt;</operator><literal type="number">3005000</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_int64</name></cpp:macro> <cpp:value>sqlite_int64</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>sqlite3_uint64</name></type> <name>u64</name>;</typedef>

<comment type="block">/*
** State structure for a Hash hash in progress
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>HashContext</name></name></type> <name>HashContext</name>;</typedef>
<struct>struct <name>HashContext</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>isInit</name></decl>;</decl_stmt>          <comment type="block">/* True if initialized */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>            <comment type="block">/* State variables */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>          <comment type="block">/* State variables */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>r</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>           <comment type="block">/* Result */</comment>
}</block>;</struct>


<comment type="block">/* All global state is held in this structure */</comment>
<struct><specifier>static</specifier> struct <name>Global</name> <block>{
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>               <comment type="block">/* The open database connection */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>       <comment type="block">/* Current SQL statement */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iStart</name></decl>;</decl_stmt>      <comment type="block">/* Start-time for the current test */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iTotal</name></decl>;</decl_stmt>      <comment type="block">/* Total time */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bWithoutRowid</name></decl>;</decl_stmt>         <comment type="block">/* True for --without-rowid */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bReprepare</name></decl>;</decl_stmt>            <comment type="block">/* True to reprepare the SQL on each rerun */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bSqlOnly</name></decl>;</decl_stmt>              <comment type="block">/* True to print the SQL once only */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bExplain</name></decl>;</decl_stmt>              <comment type="block">/* Print SQL with EXPLAIN prefix */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bVerify</name></decl>;</decl_stmt>               <comment type="block">/* Try to verify that results are correct */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bMemShrink</name></decl>;</decl_stmt>            <comment type="block">/* Call sqlite3_db_release_memory() often */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eTemp</name></decl>;</decl_stmt>                 <comment type="block">/* 0: no TEMP.  9: always TEMP. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szTest</name></decl>;</decl_stmt>                <comment type="block">/* Scale factor for test iterations */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRepeat</name></decl>;</decl_stmt>               <comment type="block">/* Repeat selects this many times */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doCheckpoint</name></decl>;</decl_stmt>          <comment type="block">/* Run PRAGMA wal_checkpoint after each trans */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nReserve</name></decl>;</decl_stmt>              <comment type="block">/* Reserve bytes */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zWR</name></decl>;</decl_stmt>           <comment type="block">/* Might be WITHOUT ROWID */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zNN</name></decl>;</decl_stmt>           <comment type="block">/* Might be NOT NULL */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPK</name></decl>;</decl_stmt>           <comment type="block">/* Might be UNIQUE or PRIMARY KEY */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>         <comment type="block">/* Pseudo-random number generator state */</comment>
  <decl_stmt><decl><type><name>u64</name></type> <name>nResByte</name></decl>;</decl_stmt>              <comment type="block">/* Total number of result bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nResult</name></decl>;</decl_stmt>               <comment type="block">/* Size of the current result */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zResult</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>;</decl_stmt>        <comment type="block">/* Text of the current result */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SPEEDTEST_OMIT_HASH</name></cpp:ifndef>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>hashFile</name></decl>;</decl_stmt>            <comment type="block">/* Store all hash results in this file */</comment>
  <decl_stmt><decl><type><name>HashContext</name></type> <name>hash</name></decl>;</decl_stmt>          <comment type="block">/* Hash of all output */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block> <decl><name>g</name></decl>;</struct>

<comment type="block">/* Return " TEMP" or "", as appropriate for creating a table.
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>isTemp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><ternary><condition><expr><name><name>g</name><operator>.</operator><name>eTemp</name></name><operator>&gt;=</operator><name>N</name></expr> ?</condition><then> <expr><literal type="string">" TEMP"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Print an error message and exit */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fatal_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SPEEDTEST_OMIT_HASH</name></cpp:ifndef>
<comment type="block" format="doxygen">/****************************************************************************
** Hash algorithm used to verify that compilation is not miscompiled
** in such a was as to generate an incorrect result.
*/</comment>

<comment type="block">/*
** Initialize a new hash.  iSize determines the size of the hash
** in bits and should be one of 224, 256, 384, or 512.  Or iSize
** can be zero to use the default hash size of 256 bits.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>HashInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>j</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">256</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
** Make consecutive calls to the HashUpdate function to add new content
** to the hash
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>HashUpdate</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name> <init>= <expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>i</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>j</name> <init>= <expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>j</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>hashFile</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nData</name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>hashFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>nData</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>aData</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>j</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** After all content has been added, invoke HashFinal() to compute
** the final hash.  The hash result is stored in g.hash.r[].
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>HashFinal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>i</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>j</name></name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>+=</operator> <name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>r</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>s</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/* End of the Hash hashing logic
*****************************************************************************/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SPEEDTEST_OMIT_HASH */</comment>

<comment type="block">/*
** Return the value of a hexadecimal digit.  Return -1 if the input
** is not a hex digit.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>hexDigitValue</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'f'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'F'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Provide an alternative to sqlite3_stricmp() in older versions of
** SQLite */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&lt;</operator><literal type="number">3007011</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_stricmp</name></cpp:macro> <cpp:value>strcmp</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Interpret zArg as an integer value, possibly with suffixes.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>integerValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSuffix</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>iMult</name></decl>;</decl_stmt> }</block> <decl><name><name>aMult</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"KiB"</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"MiB"</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"GiB"</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"KB"</literal></expr>,  <expr><literal type="number">1000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"MB"</literal></expr>,  <expr><literal type="number">1000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"GB"</literal></expr>,  <expr><literal type="number">1000000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"K"</literal></expr>,   <expr><literal type="number">1000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"M"</literal></expr>,   <expr><literal type="number">1000000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"G"</literal></expr>,   <expr><literal type="number">1000000000</literal></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isNeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>isNeg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>zArg</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>x</name> <operator>=</operator> <call><name>hexDigitValue</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if><else>else<block>{<block_content>
    <while>while<condition>( <expr><call><name>isdigit</name><argument_list>(<argument><expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zArg</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aMult</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aMult</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>aMult</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zSuffix</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>v</name> <operator>*=</operator> <name><name>aMult</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iMult</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>v</name><operator>&gt;</operator><literal type="number">0x7fffffff</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"parameter too large - max 2147483648"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>isNeg</name></expr>?</condition><then> <expr><operator>-</operator><name>v</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the current wall-clock time, in milliseconds */</comment>
<function><type><name>sqlite3_int64</name></type> <name>speedtest1_timestamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&lt;</operator><literal type="number">3005000</literal></expr></cpp:if>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name> <modifier>*</modifier></type><name>clockVfs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>t</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>clockVfs</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>clockVfs</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007000</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name><name>clockVfs</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><argument_list>(<argument><expr><name>clockVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>clockVfs</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name>clockVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">86400000.0</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>t</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Return a pseudo-random unsigned integer */</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>speedtest1_random</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator><name><name>g</name><operator>.</operator><name>x</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><operator>~</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>x</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xd0000001</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>y</name></name><operator>*</operator><literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
  <return>return <expr><name><name>g</name><operator>.</operator><name>x</name></name> <operator>^</operator> <name><name>g</name><operator>.</operator><name>y</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Map the value in within the range of 1...limit into another
** number in a way that is chatic and invertable.
*/</comment>
<function><type><name>unsigned</name></type> <name>swizzle</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>limit</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>limit</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>out</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>in</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>limit</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Round up a number so that it is a power of two minus one
*/</comment>
<function><type><name>unsigned</name></type> <name>roundup_allones</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>limit</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>m</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>m</name><operator>&lt;</operator><name>limit</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>m</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The speedtest1_numbername procedure below converts its argment (an integer)
** into a string which is the English-language name for that number.
** The returned string should be freed with sqlite3_free().
**
** Example:
**
**     speedtest1_numbername(123)   -&gt;  "one hundred twenty three"
*/</comment>
<function><type><name>int</name></type> <name>speedtest1_numbername</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ones</name><index>[]</index></name> <init>= <expr><block>{  <expr><literal type="string">"zero"</literal></expr>, <expr><literal type="string">"one"</literal></expr>, <expr><literal type="string">"two"</literal></expr>, <expr><literal type="string">"three"</literal></expr>, <expr><literal type="string">"four"</literal></expr>, <expr><literal type="string">"five"</literal></expr>, 
                  <expr><literal type="string">"six"</literal></expr>, <expr><literal type="string">"seven"</literal></expr>, <expr><literal type="string">"eight"</literal></expr>, <expr><literal type="string">"nine"</literal></expr>, <expr><literal type="string">"ten"</literal></expr>, <expr><literal type="string">"eleven"</literal></expr>, <expr><literal type="string">"twelve"</literal></expr>, 
                  <expr><literal type="string">"thirteen"</literal></expr>, <expr><literal type="string">"fourteen"</literal></expr>, <expr><literal type="string">"fifteen"</literal></expr>, <expr><literal type="string">"sixteen"</literal></expr>, <expr><literal type="string">"seventeen"</literal></expr>,
                  <expr><literal type="string">"eighteen"</literal></expr>, <expr><literal type="string">"nineteen"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>tens</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"ten"</literal></expr>, <expr><literal type="string">"twenty"</literal></expr>, <expr><literal type="string">"thirty"</literal></expr>, <expr><literal type="string">"forty"</literal></expr>,
                 <expr><literal type="string">"fifty"</literal></expr>, <expr><literal type="string">"sixty"</literal></expr>, <expr><literal type="string">"seventy"</literal></expr>, <expr><literal type="string">"eighty"</literal></expr>, <expr><literal type="string">"ninety"</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">1000000000</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">1000000000</literal></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">" billion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">1000000</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">1000000</literal></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">" million"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">1000</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">" thousand"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">100</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"%s hundred"</literal></expr></argument>, <argument><expr><name><name>ones</name><index>[<expr><name>n</name><operator>/</operator><literal type="number">100</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><literal type="number">20</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>tens</name><index>[<expr><name>n</name><operator>/</operator><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>ones</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nOut</name><operator>-</operator><name>i</name></expr></argument>, <argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Start a new test case */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMEWIDTH</name></cpp:macro> <cpp:value>60</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zDots</name><index>[]</index></name> <init>=
  <expr><literal type="string">"......................................................................."</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>speedtest1_begin_test</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iTestNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTestName</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zTestName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zTestName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zTestName</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><name>NAMEWIDTH</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>zName</name><index>[<expr><name>NAMEWIDTH</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>NAMEWIDTH</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"/* %4d - %s%.*s */\n"</literal></expr></argument>, <argument><expr><name>iTestNum</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>NAMEWIDTH</name><operator>-</operator><name>n</name></expr></argument>, <argument><expr><name>zDots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4d - %s%.*s "</literal></expr></argument>, <argument><expr><name>iTestNum</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>NAMEWIDTH</name><operator>-</operator><name>n</name></expr></argument>, <argument><expr><name>zDots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nResult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iStart</name></name> <operator>=</operator> <call><name>speedtest1_timestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0xad131d0b</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0x44f9eac8</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Forward reference */</comment>
<function_decl><type><name>void</name></type> <name>speedtest1_exec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Complete a test case */</comment>
<function><type><name>void</name></type> <name>speedtest1_end_test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iElapseTime</name> <init>= <expr><call><name>speedtest1_timestamp</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>g</name><operator>.</operator><name>iStart</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>doCheckpoint</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA wal_checkpoint;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>iTotal</name></name> <operator>+=</operator> <name>iElapseTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%4d.%03ds\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iElapseTime</name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iElapseTime</name><operator>%</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Report end of testing */</comment>
<function><type><name>void</name></type> <name>speedtest1_final</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"       TOTAL%.*s %4d.%03ds\n"</literal></expr></argument>, <argument><expr><name>NAMEWIDTH</name><operator>-</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>zDots</name></expr></argument>,
           <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>iTotal</name></name><operator>/</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>g</name><operator>.</operator><name>iTotal</name></name><operator>%</operator><literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bVerify</name></name></expr> )</condition><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SPEEDTEST_OMIT_HASH</name></cpp:ifndef>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Verification Hash: %llu "</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>nResByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SPEEDTEST_OMIT_HASH</name></cpp:ifndef>
    <expr_stmt><expr><call><name>HashUpdate</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HashFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>hash</name><operator>.</operator><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>hashFile</name></name> <operator>&amp;&amp;</operator> <name><name>g</name><operator>.</operator><name>hashFile</name></name><operator>!=</operator><name>stdout</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>hashFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Print an SQL statement to standard output */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>printSql</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zSql</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">';'</literal> <operator>||</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bExplain</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"EXPLAIN "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s;\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bExplain</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007017</literal></expr></cpp:if> 
   <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"CREATE *"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
     <operator>||</operator> <call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"DROP *"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
     <operator>||</operator> <call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"ALTER *"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
      <operator>)</operator></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.*s;\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Shrink memory used, if appropriate and if the SQLite version is capable
** of doing so.
*/</comment>
<function><type><name>void</name></type> <name>speedtest1_shrink_memory</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007010</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bMemShrink</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_db_release_memory</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/* Run SQL */</comment>
<function><type><name>void</name></type> <name>speedtest1_exec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printSql</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zErrMsg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"SQL error: %s\n%s\n"</literal></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"exec error: %s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_shrink_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Run SQL and return the first column of the first row as a string.  The
** returned string is obtained from sqlite_malloc() and must be freed by
** the caller.
*/</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>speedtest1_once</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zResult</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printSql</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"SQL error: %s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zResult</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_shrink_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zResult</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Prepare an SQL statement */</comment>
<function><type><name>void</name></type> <name>speedtest1_prepare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printSql</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"SQL error: %s\n"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Run an SQL statement previously prepared */</comment>
<function><type><name>void</name></type> <name>speedtest1_run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nResult</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="string">"nil"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SPEEDTEST_OMIT_HASH</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bVerify</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zPrefix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>zPrefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>zPrefix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"-IFTBN"</literal><index>[<expr><name>eType</name></expr>]</index></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>nResByte</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>HashUpdate</name><argument_list>(<argument><expr><name>zPrefix</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>HashUpdate</name><argument_list>(<argument><expr><name>zPrefix</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>SQLITE_FLOAT</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* Omit the value of floating-point results from the verification
          ** hash.  The only thing we record is the fact that the result was
          ** a floating-point value. */</comment>
          <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nResByte</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>eType</name><operator>==</operator><name>SQLITE_BLOB</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>nBlob</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>iBlob</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zChar</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aBlob</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <for>for<control>(<init><expr><name>iBlob</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iBlob</name><operator>&lt;</operator><name>nBlob</name></expr>;</condition> <incr><expr><name>iBlob</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><name><name>zChar</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0123456789abcdef"</literal><index>[<expr><name><name>aBlob</name><index>[<expr><name>iBlob</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>zChar</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0123456789abcdef"</literal><index>[<expr><name><name>aBlob</name><index>[<expr><name>iBlob</name></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal></expr>]</index></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HashUpdate</name><argument_list>(<argument><expr><name>zChar</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nResByte</name></name> <operator>+=</operator> <name>nBlob</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>HashUpdate</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nResByte</name></name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>nResult</name></name><operator>+</operator><name>len</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>nResult</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zResult</name><index>[<expr><name><name>g</name><operator>.</operator><name>nResult</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name> <operator>+</operator> <name><name>g</name><operator>.</operator><name>nResult</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nResult</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006001</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bReprepare</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>speedtest1_shrink_memory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
<comment type="block">/* The sqlite3_trace() callback function */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>traceCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>zSql</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">';'</literal> <operator>||</operator> <call><name>ISSPACE</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,<argument><expr><literal type="string">"%.*s;\n"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_DEPRECATED */</comment>

<comment type="block">/* Substitute random() function that gives the same random
** sequence on each run, for repeatability. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>randomFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>NotUsed</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>NotUsed2</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><call><name>speedtest1_random</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Estimate the square root of an integer */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>est_square_root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>y0</name> <init>= <expr><name>x</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>y1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y0</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>y1</name> <operator>=</operator> <operator>(</operator><name>y0</name> <operator>+</operator> <name>x</name><operator>/</operator><name>y0</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>y1</name><operator>==</operator><name>y0</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>y0</name> <operator>=</operator> <name>y1</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>y0</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&lt;</operator><literal type="number">3005004</literal></expr></cpp:if>
<comment type="block">/*
** An implementation of group_concat().  Used only when testing older
** versions of SQLite that lack the built-in group_concat().
*/</comment>
<struct>struct <name>groupConcat</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nUsed</name></decl>;</decl_stmt>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type> <name>groupAppend</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>groupConcat</name></name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name><operator>+</operator><name>n</name> <operator>&gt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z2</name> <init>= <expr><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>z2</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name>z2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>z</name></name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>groupStep</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>groupConcat</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>, <decl><type ref="prev"/><name>nSep</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>argc</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>argc</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>p</name><operator>=</operator> <operator>(</operator>struct <name>groupConcat</name><operator>*</operator><operator>)</operator><call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>firstTerm</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name><operator>==</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>firstTerm</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zSep</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSep</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>zSep</name> <operator>=</operator> <literal type="string">","</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSep</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>nSep</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>groupAppend</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSep</name></expr></argument>, <argument><expr><name>nSep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zVal</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nVal</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zVal</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>groupAppend</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>groupFinal</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>groupConcat</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>z</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>z</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The main and default testset
*/</comment>
<function><type><name>void</name></type> <name>testset_main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                        <comment type="block">/* Loop counter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>                        <comment type="block">/* iteration count */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>sz</name></decl>;</decl_stmt>                       <comment type="block">/* Size of the tables */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>maxb</name></decl>;</decl_stmt>                     <comment type="block">/* Maximum swizzled value */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>x1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* Parameters */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Length of the zNum[] string */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zNum</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>              <comment type="block">/* A number name */</comment>

  <expr_stmt><expr><name>sz</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">500</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zNum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>maxb</name> <operator>=</operator> <call><name>roundup_allones</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"%d INSERTs into table with no index"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE%s TABLE z1(a INTEGER %s, b INTEGER %s, c TEXT %s);"</literal></expr></argument>,
                  <argument><expr><call><name>isTemp</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO z1 VALUES(?1,?2,?3); --  %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"%d ordered INSERTS with one index/PK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
     <argument><expr><literal type="string">"CREATE%s TABLE z2(a INTEGER %s %s, b INTEGER %s, c TEXT %s) %s"</literal></expr></argument>,
     <argument><expr><call><name>isTemp</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zPK</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO z2 VALUES(?1,?2,?3); -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="string">"%d unordered INSERTS with one index/PK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
      <argument><expr><literal type="string">"CREATE%s TABLE t3(a INTEGER %s %s, b INTEGER %s, c TEXT %s) %s"</literal></expr></argument>,
      <argument><expr><call><name>isTemp</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zPK</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t3 VALUES(?1,?2,?3); -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&lt;</operator><literal type="number">3005004</literal></expr></cpp:if>
  <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"group_concat"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                          <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>groupStep</name></expr></argument>, <argument><expr><name>groupFinal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, numeric BETWEEN, unindexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)), group_concat(c) FROM z1\n"</literal>
    <literal type="string">" WHERE b BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name><name>g</name><operator>.</operator><name>nRepeat</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, LIKE, unindexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)), group_concat(c) FROM z1\n"</literal>
    <literal type="string">" WHERE c LIKE ?1; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name><name>g</name><operator>.</operator><name>nRepeat</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zNum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>zNum</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">142</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS w/ORDER BY, unindexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT a, b, c FROM z1 WHERE c LIKE ?1\n"</literal>
    <literal type="string">" ORDER BY a; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name><name>g</name><operator>.</operator><name>nRepeat</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zNum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>zNum</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <comment type="block">/* g.szTest/5; */</comment>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">145</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS w/ORDER BY and LIMIT, unindexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT a, b, c FROM z1 WHERE c LIKE ?1\n"</literal>
    <literal type="string">" ORDER BY a LIMIT 10; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name><name>g</name><operator>.</operator><name>nRepeat</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zNum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>zNum</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'%'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zNum</name><index>[<expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX five times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE UNIQUE INDEX t1b ON z1(b);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t1c ON z1(c);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE UNIQUE INDEX t2b ON z2(b);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t2c ON z2(c DESC);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t3bc ON t3(b,c);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, numeric BETWEEN, indexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)), group_concat(a) FROM z1\n"</literal>
    <literal type="string">" WHERE b BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name><name>g</name><operator>.</operator><name>nRepeat</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">161</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, numeric BETWEEN, PK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)), group_concat(a) FROM z2\n"</literal>
    <literal type="string">" WHERE a BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name><name>g</name><operator>.</operator><name>nRepeat</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">170</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS, text BETWEEN, indexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT count(*), avg(b), sum(length(c)), group_concat(a) FROM z1\n"</literal>
    <literal type="string">" WHERE c BETWEEN ?1 AND (?1||'~'); -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name><name>g</name><operator>.</operator><name>nRepeat</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">180</literal></expr></argument>, <argument><expr><literal type="string">"%d INSERTS with three indexes"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
    <argument><expr><literal type="string">"CREATE%s TABLE t4(\n"</literal>
    <literal type="string">"  a INTEGER %s %s,\n"</literal>
    <literal type="string">"  b INTEGER %s,\n"</literal>
    <literal type="string">"  c TEXT %s\n"</literal>
    <literal type="string">") %s"</literal></expr></argument>,
    <argument><expr><call><name>isTemp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zPK</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t4b ON t4(b)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t4c ON t4(c)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t4 SELECT * FROM z1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">190</literal></expr></argument>, <argument><expr><literal type="string">"DELETE and REFILL one table"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM z2;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO z2 SELECT * FROM z1;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">210</literal></expr></argument>, <argument><expr><literal type="string">"ALTER TABLE ADD COLUMN, and query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE z2 ADD COLUMN d INT DEFAULT 123"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"SELECT sum(d) FROM z2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">230</literal></expr></argument>, <argument><expr><literal type="string">"%d UPDATES, numeric BETWEEN, indexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"UPDATE z2 SET d=b*2 WHERE b BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">240</literal></expr></argument>, <argument><expr><literal type="string">"%d UPDATES of individual rows"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"UPDATE z2 SET d=b*3 WHERE a=?1; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>, <argument><expr><literal type="string">"One big UPDATE of the whole %d-row table"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"UPDATE z2 SET d=b*4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">260</literal></expr></argument>, <argument><expr><literal type="string">"Query added column after filling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"SELECT sum(d) FROM z2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>



  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">270</literal></expr></argument>, <argument><expr><literal type="string">"%d DELETEs, numeric BETWEEN, indexed"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"DELETE FROM z2 WHERE b BETWEEN ?1 AND ?2; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>maxb</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>sz</name><operator>/</operator><literal type="number">5000</literal> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">280</literal></expr></argument>, <argument><expr><literal type="string">"%d DELETEs of individual rows"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"DELETE FROM t3 WHERE a=?1; -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">290</literal></expr></argument>, <argument><expr><literal type="string">"Refill two %d-row tables using REPLACE"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"REPLACE INTO z2(a,b,c) SELECT a,b,c FROM z1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"REPLACE INTO t3(a,b,c) SELECT a,b,c FROM z1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="string">"Refill a %d-row table using (b&amp;1)==(a&amp;1)"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM z2;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO z2(a,b,c)\n"</literal>
                  <literal type="string">" SELECT a,b,c FROM z1  WHERE (b&amp;1)==(a&amp;1);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO z2(a,b,c)\n"</literal>
                  <literal type="string">" SELECT a,b,c FROM z1  WHERE (b&amp;1)&lt;&gt;(a&amp;1);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>sz</name><operator>/</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">310</literal></expr></argument>, <argument><expr><literal type="string">"%d four-ways joins"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT z1.c FROM z1, z2, t3, t4\n"</literal>
    <literal type="string">" WHERE t4.a BETWEEN ?1 AND ?2\n"</literal>
    <literal type="string">"   AND t3.a=t4.b\n"</literal>
    <literal type="string">"   AND z2.a=t3.b\n"</literal>
    <literal type="string">"   AND z1.c=z2.c"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>sz</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10</literal> <operator>+</operator> <name>x1</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">320</literal></expr></argument>, <argument><expr><literal type="string">"subquery in result set"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT sum(a), max(c),\n"</literal>
    <literal type="string">"       avg((SELECT a FROM z2 WHERE 5+z2.b=z1.b) AND rowid&lt;?1), max(c)\n"</literal>
    <literal type="string">" FROM z1 WHERE rowid&lt;?1;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>est_square_root</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>szTest</name></name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>sz</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">700</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zNum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>maxb</name> <operator>=</operator> <call><name>roundup_allones</name><argument_list>(<argument><expr><name>sz</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"%d REPLACE ops on an IPK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE%s TABLE t5(a INTEGER PRIMARY KEY, b %s);"</literal></expr></argument>,
                  <argument><expr><call><name>isTemp</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"REPLACE INTO t5 VALUES(?1,?2); --  %d times"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">410</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS on an IPK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT b FROM t5 WHERE a=?1; --  %d times"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>sz</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">700</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zNum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>maxb</name> <operator>=</operator> <call><name>roundup_allones</name><argument_list>(<argument><expr><name>sz</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="string">"%d REPLACE on TEXT PK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE%s TABLE t6(a TEXT PRIMARY KEY, b %s)%s;"</literal></expr></argument>,
                  <argument><expr><call><name>isTemp</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>,
                  <argument><expr><ternary><condition><expr><call><name>sqlite3_libversion_number</name><argument_list>()</argument_list></call><operator>&gt;=</operator><literal type="number">3008002</literal></expr> ?</condition><then> <expr><literal type="string">"WITHOUT ROWID"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"REPLACE INTO t6 VALUES(?1,?2); --  %d times"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">510</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECTS on a TEXT PK"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT b FROM t6 WHERE a=?1; --  %d times"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>maxb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">520</literal></expr></argument>, <argument><expr><literal type="string">"%d SELECT DISTINCT"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"SELECT DISTINCT b FROM t5;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"SELECT DISTINCT b FROM t6;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">980</literal></expr></argument>, <argument><expr><literal type="string">"PRAGMA integrity_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA integrity_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">990</literal></expr></argument>, <argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"ANALYZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** A testset for common table expressions.  This exercises code
** for views, subqueries, co-routines, etc.
*/</comment>
<function><type><name>void</name></type> <name>testset_cte</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azPuzzle</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* Easy */</comment>
    <expr><literal type="string">"534...9.."</literal>
    <literal type="string">"67.195..."</literal>
    <literal type="string">".98....6."</literal>
    <literal type="string">"8...6...3"</literal>
    <literal type="string">"4..8.3..1"</literal>
    <literal type="string">"....2...6"</literal>
    <literal type="string">".6....28."</literal>
    <literal type="string">"...419..5"</literal>
    <literal type="string">"...28..79"</literal></expr>,

    <comment type="block">/* Medium */</comment>
    <expr><literal type="string">"53....9.."</literal>
    <literal type="string">"6..195..."</literal>
    <literal type="string">".98....6."</literal>
    <literal type="string">"8...6...3"</literal>
    <literal type="string">"4..8.3..1"</literal>
    <literal type="string">"....2...6"</literal>
    <literal type="string">".6....28."</literal>
    <literal type="string">"...419..5"</literal>
    <literal type="string">"....8..79"</literal></expr>,

    <comment type="block">/* Hard */</comment>
    <expr><literal type="string">"53......."</literal>
    <literal type="string">"6..195..."</literal>
    <literal type="string">".98....6."</literal>
    <literal type="string">"8...6...3"</literal>
    <literal type="string">"4..8.3..1"</literal>
    <literal type="string">"....2...6"</literal>
    <literal type="string">".6....28."</literal>
    <literal type="string">"...419..5"</literal>
    <literal type="string">"....8..79"</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPuz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>rSpacing</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nElem</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>szTest</name></name><operator>&lt;</operator><literal type="number">25</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zPuz</name> <operator>=</operator> <name><name>azPuzzle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>g</name><operator>.</operator><name>szTest</name></name><operator>&lt;</operator><literal type="number">70</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zPuz</name> <operator>=</operator> <name><name>azPuzzle</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zPuz</name> <operator>=</operator> <name><name>azPuzzle</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"Sudoku with recursive 'digits'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"WITH RECURSIVE\n"</literal>
    <literal type="string">"  input(sud) AS (VALUES(?1)),\n"</literal>
    <literal type="string">"  digits(z,lp) AS (\n"</literal>
    <literal type="string">"    VALUES('1', 1)\n"</literal>
    <literal type="string">"    UNION ALL\n"</literal>
    <literal type="string">"    SELECT CAST(lp+1 AS TEXT), lp+1 FROM digits WHERE lp&lt;9\n"</literal>
    <literal type="string">"  ),\n"</literal>
    <literal type="string">"  x(s, ind) AS (\n"</literal>
    <literal type="string">"    SELECT sud, instr(sud, '.') FROM input\n"</literal>
    <literal type="string">"    UNION ALL\n"</literal>
    <literal type="string">"    SELECT\n"</literal>
    <literal type="string">"      substr(s, 1, ind-1) || z || substr(s, ind+1),\n"</literal>
    <literal type="string">"      instr( substr(s, 1, ind-1) || z || substr(s, ind+1), '.' )\n"</literal>
    <literal type="string">"     FROM x, digits AS z\n"</literal>
    <literal type="string">"    WHERE ind&gt;0\n"</literal>
    <literal type="string">"      AND NOT EXISTS (\n"</literal>
    <literal type="string">"            SELECT 1\n"</literal>
    <literal type="string">"              FROM digits AS lp\n"</literal>
    <literal type="string">"             WHERE z.z = substr(s, ((ind-1)/9)*9 + lp, 1)\n"</literal>
    <literal type="string">"                OR z.z = substr(s, ((ind-1)%%9) + (lp-1)*9 + 1, 1)\n"</literal>
    <literal type="string">"                OR z.z = substr(s, (((ind-1)/3) %% 3) * 3\n"</literal>
    <literal type="string">"                        + ((ind-1)/27) * 27 + lp\n"</literal>
    <literal type="string">"                        + ((lp-1) / 3) * 6, 1)\n"</literal>
    <literal type="string">"         )\n"</literal>
    <literal type="string">"  )\n"</literal>
    <literal type="string">"SELECT s FROM x WHERE ind=0;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zPuz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"Sudoku with VALUES 'digits'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"WITH RECURSIVE\n"</literal>
    <literal type="string">"  input(sud) AS (VALUES(?1)),\n"</literal>
    <literal type="string">"  digits(z,lp) AS (VALUES('1',1),('2',2),('3',3),('4',4),('5',5),\n"</literal>
    <literal type="string">"                         ('6',6),('7',7),('8',8),('9',9)),\n"</literal>
    <literal type="string">"  x(s, ind) AS (\n"</literal>
    <literal type="string">"    SELECT sud, instr(sud, '.') FROM input\n"</literal>
    <literal type="string">"    UNION ALL\n"</literal>
    <literal type="string">"    SELECT\n"</literal>
    <literal type="string">"      substr(s, 1, ind-1) || z || substr(s, ind+1),\n"</literal>
    <literal type="string">"      instr( substr(s, 1, ind-1) || z || substr(s, ind+1), '.' )\n"</literal>
    <literal type="string">"     FROM x, digits AS z\n"</literal>
    <literal type="string">"    WHERE ind&gt;0\n"</literal>
    <literal type="string">"      AND NOT EXISTS (\n"</literal>
    <literal type="string">"            SELECT 1\n"</literal>
    <literal type="string">"              FROM digits AS lp\n"</literal>
    <literal type="string">"             WHERE z.z = substr(s, ((ind-1)/9)*9 + lp, 1)\n"</literal>
    <literal type="string">"                OR z.z = substr(s, ((ind-1)%%9) + (lp-1)*9 + 1, 1)\n"</literal>
    <literal type="string">"                OR z.z = substr(s, (((ind-1)/3) %% 3) * 3\n"</literal>
    <literal type="string">"                        + ((ind-1)/27) * 27 + lp\n"</literal>
    <literal type="string">"                        + ((lp-1) / 3) * 6, 1)\n"</literal>
    <literal type="string">"         )\n"</literal>
    <literal type="string">"  )\n"</literal>
    <literal type="string">"SELECT s FROM x WHERE ind=0;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zPuz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rSpacing</name> <operator>=</operator> <literal type="number">5.0</literal><operator>/</operator><name><name>g</name><operator>.</operator><name>szTest</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><literal type="string">"Mandelbrot Set with spacing=%f"</literal></expr></argument>, <argument><expr><name>rSpacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
   <argument><expr><literal type="string">"WITH RECURSIVE \n"</literal>
   <literal type="string">"  xaxis(x) AS (VALUES(-2.0) UNION ALL SELECT x+?1 FROM xaxis WHERE x&lt;1.2),\n"</literal>
   <literal type="string">"  yaxis(y) AS (VALUES(-1.0) UNION ALL SELECT y+?2 FROM yaxis WHERE y&lt;1.0),\n"</literal>
   <literal type="string">"  m(iter, cx, cy, x, y) AS (\n"</literal>
   <literal type="string">"    SELECT 0, x, y, 0.0, 0.0 FROM xaxis, yaxis\n"</literal>
   <literal type="string">"    UNION ALL\n"</literal>
   <literal type="string">"    SELECT iter+1, cx, cy, x*x-y*y + cx, 2.0*x*y + cy FROM m \n"</literal>
   <literal type="string">"     WHERE (x*x + y*y) &lt; 4.0 AND iter&lt;28\n"</literal>
   <literal type="string">"  ),\n"</literal>
   <literal type="string">"  m2(iter, cx, cy) AS (\n"</literal>
   <literal type="string">"    SELECT max(iter), cx, cy FROM m GROUP BY cx, cy\n"</literal>
   <literal type="string">"  ),\n"</literal>
   <literal type="string">"  a(t) AS (\n"</literal>
   <literal type="string">"    SELECT group_concat( substr(' .+*#', 1+min(iter/7,4), 1), '') \n"</literal>
   <literal type="string">"    FROM m2 GROUP BY cy\n"</literal>
   <literal type="string">"  )\n"</literal>
   <literal type="string">"SELECT group_concat(rtrim(t),x'0a') FROM a;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rSpacing</name><operator>*</operator><literal type="number">.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>rSpacing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nElem</name> <operator>=</operator> <literal type="number">10000</literal><operator>*</operator><name><name>g</name><operator>.</operator><name>szTest</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="string">"EXCEPT operator on %d-element tables"</literal></expr></argument>, <argument><expr><name>nElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"WITH RECURSIVE \n"</literal>
    <literal type="string">"  z1(x) AS (VALUES(2) UNION ALL SELECT x+2 FROM z1 WHERE x&lt;%d),\n"</literal>
    <literal type="string">"  z2(y) AS (VALUES(3) UNION ALL SELECT y+3 FROM z2 WHERE y&lt;%d)\n"</literal>
    <literal type="string">"SELECT count(x), avg(x) FROM (\n"</literal>
    <literal type="string">"  SELECT x FROM z1 EXCEPT SELECT y FROM z2 ORDER BY 1\n"</literal>
    <literal type="string">");"</literal></expr></argument>,
    <argument><expr><name>nElem</name></expr></argument>, <argument><expr><name>nElem</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Compute a pseudo-random floating point ascii number.
*/</comment>
<function><type><name>void</name></type> <name>speedtest1_random_ascii_fp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zFP</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>speedtest1_random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>speedtest1_random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>z</name> <operator>=</operator> <name>y</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>z</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>-</operator><name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>,<argument><expr><name>zFP</name></expr></argument>,<argument><expr><literal type="string">"%d.%de%d"</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><name>x</name><operator>%</operator><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** A testset for floating-point numbers.
*/</comment>
<function><type><name>void</name></type> <name>testset_fp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zFP1</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zFP2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">5000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"Fill a table with %d FP values"</literal></expr></argument>, <argument><expr><name>n</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE%s TABLE z1(a REAL %s, b REAL %s);"</literal></expr></argument>,
                  <argument><expr><call><name>isTemp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>, <argument><expr><name><name>g</name><operator>.</operator><name>zNN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO z1 VALUES(?1,?2); -- %d times"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_random_ascii_fp</name><argument_list>(<argument><expr><name>zFP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_random_ascii_fp</name><argument_list>(<argument><expr><name>zFP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zFP1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zFP2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>/</operator><literal type="number">25</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"%d range queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT sum(b) FROM z1 WHERE a BETWEEN ?1 AND ?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_random_ascii_fp</name><argument_list>(<argument><expr><name>zFP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_random_ascii_fp</name><argument_list>(<argument><expr><name>zFP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zFP1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zFP2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX three times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t1a ON z1(a);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t1b ON z1(b);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX t1ab ON z1(a,b);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>/</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="string">"%d indexed range queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT sum(b) FROM z1 WHERE a BETWEEN ?1 AND ?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_random_ascii_fp</name><argument_list>(<argument><expr><name>zFP1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_random_ascii_fp</name><argument_list>(<argument><expr><name>zFP2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zFP1</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zFP2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">5000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="string">"%d calls to round()"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"SELECT sum(round(a,2)+round(b,4)) FROM z1;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="string">"%d printf() calls"</literal></expr></argument>, <argument><expr><name>n</name><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
    <argument><expr><literal type="string">"WITH c(fmt) AS (VALUES('%%g'),('%%e'),('%%!g'),('%%.20f'))"</literal>
    <literal type="string">"SELECT sum(printf(fmt,a)) FROM z1, c"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifdef>
<comment type="block">/* Generate two numbers between 1 and mx.  The first number is less than
** the second.  Usually the numbers are near each other but can sometimes
** be far apart.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>twoCoords</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>,                   <comment type="block">/* Parameters adjusting sizes */</comment>
  <parameter><decl><type><name>unsigned</name></type> <name>mx</name></decl></parameter>,                      <comment type="block">/* Range of 1..mx */</comment>
  <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pX0</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pX1</name></decl></parameter>      <comment type="block">/* OUT: write results here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>span</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>span</name> <operator>=</operator> <name>mx</name><operator>/</operator><literal type="number">100</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>span</name> <operator>*=</operator> <name>p1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>p2</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>span</name> <operator>=</operator> <name>mx</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>span</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x0</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><operator>(</operator><name>mx</name><operator>-</operator><name>d</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x1</name> <operator>=</operator> <name>x0</name> <operator>+</operator> <name>d</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pX0</name> <operator>=</operator> <name>x0</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pX1</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifdef>
<comment type="block">/* The following routine is an R-Tree geometry callback.  It returns
** true if the object overlaps a slice on the Y coordinate between the
** two values given as arguments.  In other words
**
**     SELECT count(*) FROM rt1 WHERE id MATCH xslice(10,20);
**
** Is the same as saying:
**
**     SELECT count(*) FROM rt1 WHERE y1&gt;=10 AND y0&lt;=20;
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>xsliceGeometryCallback</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_rtree_geometry</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nCoord</name></decl></parameter>,
  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>aCoord</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <name><name>aCoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>aCoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_RTREE */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifdef>
<comment type="block">/*
** A testset for the R-Tree virtual table
*/</comment>
<function><type><name>void</name></type> <name>testset_rtree</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>mxCoord</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>z0</name></decl>, <decl><type ref="prev"/><name>z1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>iStep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>mxRowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aCheck</name> <init>= <expr><call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">500</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>mxCoord</name> <operator>=</operator> <literal type="number">15000</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>mxRowid</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">500</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"%d INSERTs into an r-tree"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE VIRTUAL TABLE rt1 USING rtree(id,x0,x1,y0,y1,z0,z1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO rt1(id,x0,x1,y0,y1,z0,z1)"</literal>
                     <literal type="string">"VALUES(?1,?2,?3,?4,?5,?6,?7)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>twoCoords</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>mxCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>twoCoords</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>mxCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>twoCoords</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>mxCoord</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z0</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>z0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>z1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><literal type="string">"Copy from rtree to a regular table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE z1(id INTEGER PRIMARY KEY,x0,x1,y0,y1,z0,z1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO z1 SELECT * FROM rt1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">200</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"%d one-dimensional intersect slice queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM rt1 WHERE x0&gt;=?1 AND x1&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bVerify</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">200</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">111</literal></expr></argument>, <argument><expr><literal type="string">"Verify result from 1-D intersect slice queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM z1 WHERE x0&gt;=?1 AND x1&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"Count disagree step %d: %d..%d.  %d vs %d"</literal></expr></argument>,
                    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">200</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="string">"%d one-dimensional overlap slice queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM rt1 WHERE y1&gt;=?1 AND y0&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bVerify</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">200</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">121</literal></expr></argument>, <argument><expr><literal type="string">"Verify result from 1-D overlap slice queries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM z1 WHERE y1&gt;=?1 AND y0&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"Count disagree step %d: %d..%d.  %d vs %d"</literal></expr></argument>,
                    <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">200</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">125</literal></expr></argument>, <argument><expr><literal type="string">"%d custom geometry callback queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_rtree_geometry_callback</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"xslice"</literal></expr></argument>, <argument><expr><name>xsliceGeometryCallback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM rt1 WHERE id MATCH xslice(?1,?2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"Count disagree step %d: %d..%d.  %d vs %d"</literal></expr></argument>,
                  <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>, <argument><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">400</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="string">"%d three-dimensional intersect box queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM rt1 WHERE x1&gt;=?1 AND x0&lt;=?2"</literal>
                     <literal type="string">" AND y1&gt;=?1 AND y0&lt;=?2 AND z1&gt;=?1 AND z0&lt;=?2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">500</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="string">"%d rowid queries"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM rt1 WHERE id=?1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">50</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="string">"%d UPDATEs using rowid"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"UPDATE rt1 SET x0=x0+100, x1=x1+100 WHERE id=?1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>*</operator><literal type="number">251</literal><operator>)</operator><operator>%</operator><name>mxRowid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">155</literal></expr></argument>, <argument><expr><literal type="string">"%d UPDATEs using one-dimensional overlap"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"UPDATE rt1 SET x0=x0-100, x1=x1-100"</literal>
                     <literal type="string">" WHERE y1&gt;=?1 AND y0&lt;=?1+5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">50</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="string">"%d DELETEs using rowid"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM rt1 WHERE id=?1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>*</operator><literal type="number">257</literal><operator>)</operator><operator>%</operator><name>mxRowid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">165</literal></expr></argument>, <argument><expr><literal type="string">"%d DELETEs using one-dimensional overlap"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM rt1 WHERE y1&gt;=?1 AND y0&lt;=?1+5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iStep</name> <operator>=</operator> <name>mxCoord</name><operator>/</operator><name>n</name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>*</operator><name>iStep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aCheck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">170</literal></expr></argument>, <argument><expr><literal type="string">"Restore deleted entries using INSERT OR IGNORE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT OR IGNORE INTO rt1 SELECT * FROM z1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_RTREE */</comment>

<comment type="block">/*
** A testset that does key/value storage on tables with many columns.
** This is the kind of workload generated by ORMs such as CoreData.
*/</comment>
<function><type><name>void</name></type> <name>testset_orm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>nRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zNum</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>              <comment type="block">/* A number name */</comment>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>zType</name><index>[]</index></name> <init>=   <comment type="block">/* Types for all non-PK columns, in order */</comment>
    <expr><literal type="string">"IBBIIITIVVITBTBFBFITTFBTBVBVIFTBBFITFFVBIFIVBVVVBTVTIBBFFIVIBTB"</literal>
    <literal type="string">"TVTTFTVTVFFIITIFBITFTTFFFVBIIBTTITFTFFVVVFIIITVBBVFFTVVB"</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>nRow</name> <operator>=</operator> <name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"Fill %d rows"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
    <argument><expr><literal type="string">"BEGIN;"</literal>
    <literal type="string">"CREATE TABLE ZLOOKSLIKECOREDATA ("</literal>
    <literal type="string">"  ZPK INTEGER PRIMARY KEY,"</literal>
    <literal type="string">"  ZTERMFITTINGHOUSINGCOMMAND INTEGER,"</literal>
    <literal type="string">"  ZBRIEFGOBYDODGERHEIGHT BLOB,"</literal>
    <literal type="string">"  ZCAPABLETRIPDOORALMOND BLOB,"</literal>
    <literal type="string">"  ZDEPOSITPAIRCOLLEGECOMET INTEGER,"</literal>
    <literal type="string">"  ZFRAMEENTERSIMPLEMOUTH INTEGER,"</literal>
    <literal type="string">"  ZHOPEFULGATEHOLECHALK INTEGER,"</literal>
    <literal type="string">"  ZSLEEPYUSERGRANDBOWL TIMESTAMP,"</literal>
    <literal type="string">"  ZDEWPEACHCAREERCELERY INTEGER,"</literal>
    <literal type="string">"  ZHANGERLITHIUMDINNERMEET VARCHAR,"</literal>
    <literal type="string">"  ZCLUBRELEASELIZARDADVICE VARCHAR,"</literal>
    <literal type="string">"  ZCHARGECLICKHUMANEHIRE INTEGER,"</literal>
    <literal type="string">"  ZFINGERDUEPIZZAOPTION TIMESTAMP,"</literal>
    <literal type="string">"  ZFLYINGDOCTORTABLEMELODY BLOB,"</literal>
    <literal type="string">"  ZLONGFINLEAVEIMAGEOIL TIMESTAMP,"</literal>
    <literal type="string">"  ZFAMILYVISUALOWNERMATTER BLOB,"</literal>
    <literal type="string">"  ZGOLDYOUNGINITIALNOSE FLOAT,"</literal>
    <literal type="string">"  ZCAUSESALAMITERMCYAN BLOB,"</literal>
    <literal type="string">"  ZSPREADMOTORBISCUITBACON FLOAT,"</literal>
    <literal type="string">"  ZGIFTICEFISHGLUEHAIR INTEGER,"</literal>
    <literal type="string">"  ZNOTICEPEARPOLICYJUICE TIMESTAMP,"</literal>
    <literal type="string">"  ZBANKBUFFALORECOVERORBIT TIMESTAMP,"</literal>
    <literal type="string">"  ZLONGDIETESSAYNATURE FLOAT,"</literal>
    <literal type="string">"  ZACTIONRANGEELEGANTNEUTRON BLOB,"</literal>
    <literal type="string">"  ZCADETBRIGHTPLANETBANK TIMESTAMP,"</literal>
    <literal type="string">"  ZAIRFORGIVEHEADFROG BLOB,"</literal>
    <literal type="string">"  ZSHARKJUSTFRUITMOVIE VARCHAR,"</literal>
    <literal type="string">"  ZFARMERMORNINGMIRRORCONCERN BLOB,"</literal>
    <literal type="string">"  ZWOODPOETRYCOBBLERBENCH VARCHAR,"</literal>
    <literal type="string">"  ZHAFNIUMSCRIPTSALADMOTOR INTEGER,"</literal>
    <literal type="string">"  ZPROBLEMCLUBPOPOVERJELLY FLOAT,"</literal>
    <literal type="string">"  ZEIGHTLEADERWORKERMOST TIMESTAMP,"</literal>
    <literal type="string">"  ZGLASSRESERVEBARIUMMEAL BLOB,"</literal>
    <literal type="string">"  ZCLAMBITARUGULAFAJITA BLOB,"</literal>
    <literal type="string">"  ZDECADEJOYOUSWAVEHABIT FLOAT,"</literal>
    <literal type="string">"  ZCOMPANYSUMMERFIBERELF INTEGER,"</literal>
    <literal type="string">"  ZTREATTESTQUILLCHARGE TIMESTAMP,"</literal>
    <literal type="string">"  ZBROWBALANCEKEYCHOWDER FLOAT,"</literal>
    <literal type="string">"  ZPEACHCOPPERDINNERLAKE FLOAT,"</literal>
    <literal type="string">"  ZDRYWALLBEYONDBROWNBOWL VARCHAR,"</literal>
    <literal type="string">"  ZBELLYCRASHITEMLACK BLOB,"</literal>
    <literal type="string">"  ZTENNISCYCLEBILLOFFICER INTEGER,"</literal>
    <literal type="string">"  ZMALLEQUIPTHANKSGLUE FLOAT,"</literal>
    <literal type="string">"  ZMISSREPLYHUMANLIVING INTEGER,"</literal>
    <literal type="string">"  ZKIWIVISUALPRIDEAPPLE VARCHAR,"</literal>
    <literal type="string">"  ZWISHHITSKINMOTOR BLOB,"</literal>
    <literal type="string">"  ZCALMRACCOONPROGRAMDEBIT VARCHAR,"</literal>
    <literal type="string">"  ZSHINYASSISTLIVINGCRAB VARCHAR,"</literal>
    <literal type="string">"  ZRESOLVEWRISTWRAPAPPLE VARCHAR,"</literal>
    <literal type="string">"  ZAPPEALSIMPLESECONDHOUSING BLOB,"</literal>
    <literal type="string">"  ZCORNERANCHORTAPEDIVER TIMESTAMP,"</literal>
    <literal type="string">"  ZMEMORYREQUESTSOURCEBIG VARCHAR,"</literal>
    <literal type="string">"  ZTRYFACTKEEPMILK TIMESTAMP,"</literal>
    <literal type="string">"  ZDIVERPAINTLEATHEREASY INTEGER,"</literal>
    <literal type="string">"  ZSORTMISTYQUOTECABBAGE BLOB,"</literal>
    <literal type="string">"  ZTUNEGASBUFFALOCAPITAL BLOB,"</literal>
    <literal type="string">"  ZFILLSTOPLAWJOYFUL FLOAT,"</literal>
    <literal type="string">"  ZSTEELCAREFULPLATENUMBER FLOAT,"</literal>
    <literal type="string">"  ZGIVEVIVIDDIVINEMEANING INTEGER,"</literal>
    <literal type="string">"  ZTREATPACKFUTURECONVERT VARCHAR,"</literal>
    <literal type="string">"  ZCALMLYGEMFINISHEFFECT INTEGER,"</literal>
    <literal type="string">"  ZCABBAGESOCKEASEMINUTE BLOB,"</literal>
    <literal type="string">"  ZPLANETFAMILYPUREMEMORY TIMESTAMP,"</literal>
    <literal type="string">"  ZMERRYCRACKTRAINLEADER BLOB,"</literal>
    <literal type="string">"  ZMINORWAYPAPERCLASSY TIMESTAMP,"</literal>
    <literal type="string">"  ZEAGLELINEMINEMAIL VARCHAR,"</literal>
    <literal type="string">"  ZRESORTYARDGREENLET TIMESTAMP,"</literal>
    <literal type="string">"  ZYARDOREGANOVIVIDJEWEL TIMESTAMP,"</literal>
    <literal type="string">"  ZPURECAKEVIVIDNEATLY FLOAT,"</literal>
    <literal type="string">"  ZASKCONTACTMONITORFUN TIMESTAMP,"</literal>
    <literal type="string">"  ZMOVEWHOGAMMAINCH VARCHAR,"</literal>
    <literal type="string">"  ZLETTUCEBIRDMEETDEBATE TIMESTAMP,"</literal>
    <literal type="string">"  ZGENENATURALHEARINGKITE VARCHAR,"</literal>
    <literal type="string">"  ZMUFFINDRYERDRAWFORTUNE FLOAT,"</literal>
    <literal type="string">"  ZGRAYSURVEYWIRELOVE FLOAT,"</literal>
    <literal type="string">"  ZPLIERSPRINTASKOREGANO INTEGER,"</literal>
    <literal type="string">"  ZTRAVELDRIVERCONTESTLILY INTEGER,"</literal>
    <literal type="string">"  ZHUMORSPICESANDKIDNEY TIMESTAMP,"</literal>
    <literal type="string">"  ZARSENICSAMPLEWAITMUON INTEGER,"</literal>
    <literal type="string">"  ZLACEADDRESSGROUNDCAREFUL FLOAT,"</literal>
    <literal type="string">"  ZBAMBOOMESSWASABIEVENING BLOB,"</literal>
    <literal type="string">"  ZONERELEASEAVERAGENURSE INTEGER,"</literal>
    <literal type="string">"  ZRADIANTWHENTRYCARD TIMESTAMP,"</literal>
    <literal type="string">"  ZREWARDINSIDEMANGOINTENSE FLOAT,"</literal>
    <literal type="string">"  ZNEATSTEWPARTIRON TIMESTAMP,"</literal>
    <literal type="string">"  ZOUTSIDEPEAHENCOUNTICE TIMESTAMP,"</literal>
    <literal type="string">"  ZCREAMEVENINGLIPBRANCH FLOAT,"</literal>
    <literal type="string">"  ZWHALEMATHAVOCADOCOPPER FLOAT,"</literal>
    <literal type="string">"  ZLIFEUSELEAFYBELL FLOAT,"</literal>
    <literal type="string">"  ZWEALTHLINENGLEEFULDAY VARCHAR,"</literal>
    <literal type="string">"  ZFACEINVITETALKGOLD BLOB,"</literal>
    <literal type="string">"  ZWESTAMOUNTAFFECTHEARING INTEGER,"</literal>
    <literal type="string">"  ZDELAYOUTCOMEHORNAGENCY INTEGER,"</literal>
    <literal type="string">"  ZBIGTHINKCONVERTECONOMY BLOB,"</literal>
    <literal type="string">"  ZBASEGOUDAREGULARFORGIVE TIMESTAMP,"</literal>
    <literal type="string">"  ZPATTERNCLORINEGRANDCOLBY TIMESTAMP,"</literal>
    <literal type="string">"  ZCYANBASEFEEDADROIT INTEGER,"</literal>
    <literal type="string">"  ZCARRYFLOORMINNOWDRAGON TIMESTAMP,"</literal>
    <literal type="string">"  ZIMAGEPENCILOTHERBOTTOM FLOAT,"</literal>
    <literal type="string">"  ZXENONFLIGHTPALEAPPLE TIMESTAMP,"</literal>
    <literal type="string">"  ZHERRINGJOKEFEATUREHOPEFUL FLOAT,"</literal>
    <literal type="string">"  ZCAPYEARLYRIVETBRUSH FLOAT,"</literal>
    <literal type="string">"  ZAGEREEDFROGBASKET VARCHAR,"</literal>
    <literal type="string">"  ZUSUALBODYHALIBUTDIAMOND VARCHAR,"</literal>
    <literal type="string">"  ZFOOTTAPWORDENTRY VARCHAR,"</literal>
    <literal type="string">"  ZDISHKEEPBLESTMONITOR FLOAT,"</literal>
    <literal type="string">"  ZBROADABLESOLIDCASUAL INTEGER,"</literal>
    <literal type="string">"  ZSQUAREGLEEFULCHILDLIGHT INTEGER,"</literal>
    <literal type="string">"  ZHOLIDAYHEADPONYDETAIL INTEGER,"</literal>
    <literal type="string">"  ZGENERALRESORTSKYOPEN TIMESTAMP,"</literal>
    <literal type="string">"  ZGLADSPRAYKIDNEYGUPPY VARCHAR,"</literal>
    <literal type="string">"  ZSWIMHEAVYMENTIONKIND BLOB,"</literal>
    <literal type="string">"  ZMESSYSULFURDREAMFESTIVE BLOB,"</literal>
    <literal type="string">"  ZSKYSKYCLASSICBRIEF VARCHAR,"</literal>
    <literal type="string">"  ZDILLASKHOKILEMON FLOAT,"</literal>
    <literal type="string">"  ZJUNIORSHOWPRESSNOVA FLOAT,"</literal>
    <literal type="string">"  ZSIZETOEAWARDFRESH TIMESTAMP,"</literal>
    <literal type="string">"  ZKEYFAILAPRICOTMETAL VARCHAR,"</literal>
    <literal type="string">"  ZHANDYREPAIRPROTONAIRPORT VARCHAR,"</literal>
    <literal type="string">"  ZPOSTPROTEINHANDLEACTOR BLOB"</literal>
    <literal type="string">");"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"INSERT INTO ZLOOKSLIKECOREDATA(ZPK,ZAIRFORGIVEHEADFROG,"</literal>
    <literal type="string">"ZGIFTICEFISHGLUEHAIR,ZDELAYOUTCOMEHORNAGENCY,ZSLEEPYUSERGRANDBOWL,"</literal>
    <literal type="string">"ZGLASSRESERVEBARIUMMEAL,ZBRIEFGOBYDODGERHEIGHT,"</literal>
    <literal type="string">"ZBAMBOOMESSWASABIEVENING,ZFARMERMORNINGMIRRORCONCERN,"</literal>
    <literal type="string">"ZTREATPACKFUTURECONVERT,ZCAUSESALAMITERMCYAN,ZCALMRACCOONPROGRAMDEBIT,"</literal>
    <literal type="string">"ZHOLIDAYHEADPONYDETAIL,ZWOODPOETRYCOBBLERBENCH,ZHAFNIUMSCRIPTSALADMOTOR,"</literal>
    <literal type="string">"ZUSUALBODYHALIBUTDIAMOND,ZOUTSIDEPEAHENCOUNTICE,ZDIVERPAINTLEATHEREASY,"</literal>
    <literal type="string">"ZWESTAMOUNTAFFECTHEARING,ZSIZETOEAWARDFRESH,ZDEWPEACHCAREERCELERY,"</literal>
    <literal type="string">"ZSTEELCAREFULPLATENUMBER,ZCYANBASEFEEDADROIT,ZCALMLYGEMFINISHEFFECT,"</literal>
    <literal type="string">"ZHANDYREPAIRPROTONAIRPORT,ZGENENATURALHEARINGKITE,ZBROADABLESOLIDCASUAL,"</literal>
    <literal type="string">"ZPOSTPROTEINHANDLEACTOR,ZLACEADDRESSGROUNDCAREFUL,ZIMAGEPENCILOTHERBOTTOM,"</literal>
    <literal type="string">"ZPROBLEMCLUBPOPOVERJELLY,ZPATTERNCLORINEGRANDCOLBY,ZNEATSTEWPARTIRON,"</literal>
    <literal type="string">"ZAPPEALSIMPLESECONDHOUSING,ZMOVEWHOGAMMAINCH,ZTENNISCYCLEBILLOFFICER,"</literal>
    <literal type="string">"ZSHARKJUSTFRUITMOVIE,ZKEYFAILAPRICOTMETAL,ZCOMPANYSUMMERFIBERELF,"</literal>
    <literal type="string">"ZTERMFITTINGHOUSINGCOMMAND,ZRESORTYARDGREENLET,ZCABBAGESOCKEASEMINUTE,"</literal>
    <literal type="string">"ZSQUAREGLEEFULCHILDLIGHT,ZONERELEASEAVERAGENURSE,ZBIGTHINKCONVERTECONOMY,"</literal>
    <literal type="string">"ZPLIERSPRINTASKOREGANO,ZDECADEJOYOUSWAVEHABIT,ZDRYWALLBEYONDBROWNBOWL,"</literal>
    <literal type="string">"ZCLUBRELEASELIZARDADVICE,ZWHALEMATHAVOCADOCOPPER,ZBELLYCRASHITEMLACK,"</literal>
    <literal type="string">"ZLETTUCEBIRDMEETDEBATE,ZCAPABLETRIPDOORALMOND,ZRADIANTWHENTRYCARD,"</literal>
    <literal type="string">"ZCAPYEARLYRIVETBRUSH,ZAGEREEDFROGBASKET,ZSWIMHEAVYMENTIONKIND,"</literal>
    <literal type="string">"ZTRAVELDRIVERCONTESTLILY,ZGLADSPRAYKIDNEYGUPPY,ZBANKBUFFALORECOVERORBIT,"</literal>
    <literal type="string">"ZFINGERDUEPIZZAOPTION,ZCLAMBITARUGULAFAJITA,ZLONGFINLEAVEIMAGEOIL,"</literal>
    <literal type="string">"ZLONGDIETESSAYNATURE,ZJUNIORSHOWPRESSNOVA,ZHOPEFULGATEHOLECHALK,"</literal>
    <literal type="string">"ZDEPOSITPAIRCOLLEGECOMET,ZWEALTHLINENGLEEFULDAY,ZFILLSTOPLAWJOYFUL,"</literal>
    <literal type="string">"ZTUNEGASBUFFALOCAPITAL,ZGRAYSURVEYWIRELOVE,ZCORNERANCHORTAPEDIVER,"</literal>
    <literal type="string">"ZREWARDINSIDEMANGOINTENSE,ZCADETBRIGHTPLANETBANK,ZPLANETFAMILYPUREMEMORY,"</literal>
    <literal type="string">"ZTREATTESTQUILLCHARGE,ZCREAMEVENINGLIPBRANCH,ZSKYSKYCLASSICBRIEF,"</literal>
    <literal type="string">"ZARSENICSAMPLEWAITMUON,ZBROWBALANCEKEYCHOWDER,ZFLYINGDOCTORTABLEMELODY,"</literal>
    <literal type="string">"ZHANGERLITHIUMDINNERMEET,ZNOTICEPEARPOLICYJUICE,ZSHINYASSISTLIVINGCRAB,"</literal>
    <literal type="string">"ZLIFEUSELEAFYBELL,ZFACEINVITETALKGOLD,ZGENERALRESORTSKYOPEN,"</literal>
    <literal type="string">"ZPURECAKEVIVIDNEATLY,ZKIWIVISUALPRIDEAPPLE,ZMESSYSULFURDREAMFESTIVE,"</literal>
    <literal type="string">"ZCHARGECLICKHUMANEHIRE,ZHERRINGJOKEFEATUREHOPEFUL,ZYARDOREGANOVIVIDJEWEL,"</literal>
    <literal type="string">"ZFOOTTAPWORDENTRY,ZWISHHITSKINMOTOR,ZBASEGOUDAREGULARFORGIVE,"</literal>
    <literal type="string">"ZMUFFINDRYERDRAWFORTUNE,ZACTIONRANGEELEGANTNEUTRON,ZTRYFACTKEEPMILK,"</literal>
    <literal type="string">"ZPEACHCOPPERDINNERLAKE,ZFRAMEENTERSIMPLEMOUTH,ZMERRYCRACKTRAINLEADER,"</literal>
    <literal type="string">"ZMEMORYREQUESTSOURCEBIG,ZCARRYFLOORMINNOWDRAGON,ZMINORWAYPAPERCLASSY,"</literal>
    <literal type="string">"ZDILLASKHOKILEMON,ZRESOLVEWRISTWRAPAPPLE,ZASKCONTACTMONITORFUN,"</literal>
    <literal type="string">"ZGIVEVIVIDDIVINEMEANING,ZEIGHTLEADERWORKERMOST,ZMISSREPLYHUMANLIVING,"</literal>
    <literal type="string">"ZXENONFLIGHTPALEAPPLE,ZSORTMISTYQUOTECABBAGE,ZEAGLELINEMINEMAIL,"</literal>
    <literal type="string">"ZFAMILYVISUALOWNERMATTER,ZSPREADMOTORBISCUITBACON,ZDISHKEEPBLESTMONITOR,"</literal>
    <literal type="string">"ZMALLEQUIPTHANKSGLUE,ZGOLDYOUNGINITIALNOSE,ZHUMORSPICESANDKIDNEY)"</literal>
    <literal type="string">"VALUES(?1,?26,?20,?93,?8,?33,?3,?81,?28,?60,?18,?47,?109,?29,?30,?104,?86,"</literal>
    <literal type="string">"?54,?92,?117,?9,?58,?97,?61,?119,?73,?107,?120,?80,?99,?31,?96,?85,?50,?71,"</literal>
    <literal type="string">"?42,?27,?118,?36,?2,?67,?62,?108,?82,?94,?76,?35,?40,?11,?88,?41,?72,?4,"</literal>
    <literal type="string">"?83,?102,?103,?112,?77,?111,?22,?13,?34,?15,?23,?116,?7,?5,?90,?57,?56,"</literal>
    <literal type="string">"?75,?51,?84,?25,?63,?37,?87,?114,?79,?38,?14,?10,?21,?48,?89,?91,?110,"</literal>
    <literal type="string">"?69,?45,?113,?12,?101,?68,?105,?46,?95,?74,?24,?53,?39,?6,?64,?52,?98,"</literal>
    <literal type="string">"?65,?115,?49,?70,?59,?32,?44,?100,?55,?66,?16,?19,?106,?43,?17,?78);"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name><operator>%</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name><operator>^</operator><literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zType</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <switch>switch<condition>( <expr><name><name>zType</name><index>[<expr><name>j</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <case>case <expr><literal type="char">'I'</literal></expr>:</case>
        <case>case <expr><literal type="char">'T'</literal></expr>:</case>
          <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'F'</literal></expr>:</case>
          <expr_stmt><expr><call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'V'</literal></expr>:</case>
        <case>case <expr><literal type="char">'B'</literal></expr>:</case>
          <expr_stmt><expr><call><name>sqlite3_bind_text64</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                              <argument><expr><name>SQLITE_STATIC</name></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name><operator>*</operator><literal type="number">250</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"Query %d rows by rowid"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
    <argument><expr><literal type="string">"SELECT ZCYANBASEFEEDADROIT,ZJUNIORSHOWPRESSNOVA,ZCAUSESALAMITERMCYAN,"</literal>
    <literal type="string">"ZHOPEFULGATEHOLECHALK,ZHUMORSPICESANDKIDNEY,ZSWIMHEAVYMENTIONKIND,"</literal>
    <literal type="string">"ZMOVEWHOGAMMAINCH,ZAPPEALSIMPLESECONDHOUSING,ZHAFNIUMSCRIPTSALADMOTOR,"</literal>
    <literal type="string">"ZNEATSTEWPARTIRON,ZLONGFINLEAVEIMAGEOIL,ZDEWPEACHCAREERCELERY,"</literal>
    <literal type="string">"ZXENONFLIGHTPALEAPPLE,ZCALMRACCOONPROGRAMDEBIT,ZUSUALBODYHALIBUTDIAMOND,"</literal>
    <literal type="string">"ZTRYFACTKEEPMILK,ZWEALTHLINENGLEEFULDAY,ZLONGDIETESSAYNATURE,"</literal>
    <literal type="string">"ZLIFEUSELEAFYBELL,ZTREATPACKFUTURECONVERT,ZMEMORYREQUESTSOURCEBIG,"</literal>
    <literal type="string">"ZYARDOREGANOVIVIDJEWEL,ZDEPOSITPAIRCOLLEGECOMET,ZSLEEPYUSERGRANDBOWL,"</literal>
    <literal type="string">"ZBRIEFGOBYDODGERHEIGHT,ZCLUBRELEASELIZARDADVICE,ZCAPABLETRIPDOORALMOND,"</literal>
    <literal type="string">"ZDRYWALLBEYONDBROWNBOWL,ZASKCONTACTMONITORFUN,ZKIWIVISUALPRIDEAPPLE,"</literal>
    <literal type="string">"ZNOTICEPEARPOLICYJUICE,ZPEACHCOPPERDINNERLAKE,ZSTEELCAREFULPLATENUMBER,"</literal>
    <literal type="string">"ZGLADSPRAYKIDNEYGUPPY,ZCOMPANYSUMMERFIBERELF,ZTENNISCYCLEBILLOFFICER,"</literal>
    <literal type="string">"ZIMAGEPENCILOTHERBOTTOM,ZWESTAMOUNTAFFECTHEARING,ZDIVERPAINTLEATHEREASY,"</literal>
    <literal type="string">"ZSKYSKYCLASSICBRIEF,ZMESSYSULFURDREAMFESTIVE,ZMERRYCRACKTRAINLEADER,"</literal>
    <literal type="string">"ZBROADABLESOLIDCASUAL,ZGLASSRESERVEBARIUMMEAL,ZTUNEGASBUFFALOCAPITAL,"</literal>
    <literal type="string">"ZBANKBUFFALORECOVERORBIT,ZTREATTESTQUILLCHARGE,ZBAMBOOMESSWASABIEVENING,"</literal>
    <literal type="string">"ZREWARDINSIDEMANGOINTENSE,ZEAGLELINEMINEMAIL,ZCALMLYGEMFINISHEFFECT,"</literal>
    <literal type="string">"ZKEYFAILAPRICOTMETAL,ZFINGERDUEPIZZAOPTION,ZCADETBRIGHTPLANETBANK,"</literal>
    <literal type="string">"ZGOLDYOUNGINITIALNOSE,ZMISSREPLYHUMANLIVING,ZEIGHTLEADERWORKERMOST,"</literal>
    <literal type="string">"ZFRAMEENTERSIMPLEMOUTH,ZBIGTHINKCONVERTECONOMY,ZFACEINVITETALKGOLD,"</literal>
    <literal type="string">"ZPOSTPROTEINHANDLEACTOR,ZHERRINGJOKEFEATUREHOPEFUL,ZCABBAGESOCKEASEMINUTE,"</literal>
    <literal type="string">"ZMUFFINDRYERDRAWFORTUNE,ZPROBLEMCLUBPOPOVERJELLY,ZGIVEVIVIDDIVINEMEANING,"</literal>
    <literal type="string">"ZGENENATURALHEARINGKITE,ZGENERALRESORTSKYOPEN,ZLETTUCEBIRDMEETDEBATE,"</literal>
    <literal type="string">"ZBASEGOUDAREGULARFORGIVE,ZCHARGECLICKHUMANEHIRE,ZPLANETFAMILYPUREMEMORY,"</literal>
    <literal type="string">"ZMINORWAYPAPERCLASSY,ZCAPYEARLYRIVETBRUSH,ZSIZETOEAWARDFRESH,"</literal>
    <literal type="string">"ZARSENICSAMPLEWAITMUON,ZSQUAREGLEEFULCHILDLIGHT,ZSHINYASSISTLIVINGCRAB,"</literal>
    <literal type="string">"ZCORNERANCHORTAPEDIVER,ZDECADEJOYOUSWAVEHABIT,ZTRAVELDRIVERCONTESTLILY,"</literal>
    <literal type="string">"ZFLYINGDOCTORTABLEMELODY,ZSHARKJUSTFRUITMOVIE,ZFAMILYVISUALOWNERMATTER,"</literal>
    <literal type="string">"ZFARMERMORNINGMIRRORCONCERN,ZGIFTICEFISHGLUEHAIR,ZOUTSIDEPEAHENCOUNTICE,"</literal>
    <literal type="string">"ZSPREADMOTORBISCUITBACON,ZWISHHITSKINMOTOR,ZHOLIDAYHEADPONYDETAIL,"</literal>
    <literal type="string">"ZWOODPOETRYCOBBLERBENCH,ZAIRFORGIVEHEADFROG,ZBROWBALANCEKEYCHOWDER,"</literal>
    <literal type="string">"ZDISHKEEPBLESTMONITOR,ZCLAMBITARUGULAFAJITA,ZPLIERSPRINTASKOREGANO,"</literal>
    <literal type="string">"ZRADIANTWHENTRYCARD,ZDELAYOUTCOMEHORNAGENCY,ZPURECAKEVIVIDNEATLY,"</literal>
    <literal type="string">"ZPATTERNCLORINEGRANDCOLBY,ZHANDYREPAIRPROTONAIRPORT,ZAGEREEDFROGBASKET,"</literal>
    <literal type="string">"ZSORTMISTYQUOTECABBAGE,ZFOOTTAPWORDENTRY,ZRESOLVEWRISTWRAPAPPLE,"</literal>
    <literal type="string">"ZDILLASKHOKILEMON,ZFILLSTOPLAWJOYFUL,ZACTIONRANGEELEGANTNEUTRON,"</literal>
    <literal type="string">"ZRESORTYARDGREENLET,ZCREAMEVENINGLIPBRANCH,ZWHALEMATHAVOCADOCOPPER,"</literal>
    <literal type="string">"ZGRAYSURVEYWIRELOVE,ZBELLYCRASHITEMLACK,ZHANGERLITHIUMDINNERMEET,"</literal>
    <literal type="string">"ZCARRYFLOORMINNOWDRAGON,ZMALLEQUIPTHANKSGLUE,ZTERMFITTINGHOUSINGCOMMAND,"</literal>
    <literal type="string">"ZONERELEASEAVERAGENURSE,ZLACEADDRESSGROUNDCAREFUL"</literal>
    <literal type="string">" FROM ZLOOKSLIKECOREDATA WHERE ZPK=?1;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>speedtest1_random</name><argument_list>()</argument_list></call><operator>%</operator><name>nRow</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
*/</comment>
<function><type><name>void</name></type> <name>testset_trigger</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>, <decl><type ref="prev"/><name>ii</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zNum</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>              <comment type="block">/* A number name */</comment>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NROW</name>  <init>= <expr><literal type="number">500</literal><operator>*</operator><name><name>g</name><operator>.</operator><name>szTest</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NROW2</name> <init>= <expr><literal type="number">100</literal><operator>*</operator><name><name>g</name><operator>.</operator><name>szTest</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
      <argument><expr><literal type="string">"BEGIN;"</literal>
      <literal type="string">"CREATE TABLE z1(rowid INTEGER PRIMARY KEY, i INTEGER, t TEXT);"</literal>
      <literal type="string">"CREATE TABLE z2(rowid INTEGER PRIMARY KEY, i INTEGER, t TEXT);"</literal>
      <literal type="string">"CREATE TABLE t3(rowid INTEGER PRIMARY KEY, i INTEGER, t TEXT);"</literal>
      <literal type="string">"CREATE VIEW v1 AS SELECT rowid, i, t FROM z1;"</literal>
      <literal type="string">"CREATE VIEW v2 AS SELECT rowid, i, t FROM z2;"</literal>
      <literal type="string">"CREATE VIEW v3 AS SELECT rowid, i, t FROM t3;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t%d VALUES(NULL,?1,?2)"</literal></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>NROW</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>x1</name> <init>= <expr><call><name>speedtest1_random</name><argument_list>()</argument_list></call> <operator>%</operator> <name>NROW</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
      <argument><expr><literal type="string">"CREATE INDEX i1 ON z1(t);"</literal>
      <literal type="string">"CREATE INDEX i2 ON z2(t);"</literal>
      <literal type="string">"CREATE INDEX i3 ON t3(t);"</literal>
      <literal type="string">"COMMIT;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-join1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
      <argument><expr><literal type="string">"SELECT * FROM z1, z2, t3 WHERE z1.oid = z2.oid AND z2.oid = t3.oid"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-join2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(
      <argument><expr><literal type="string">"SELECT * FROM z1, z2, t3 WHERE z1.t = z2.t AND z2.t = t3.t"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">120</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-view1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM v%d WHERE rowid = ?"</literal></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>NROW2</name></expr>;</condition> <incr><expr><name>ii</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ii</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-table1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM t%d WHERE rowid = ?"</literal></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>NROW2</name></expr>;</condition> <incr><expr><name>ii</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ii</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">140</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-table1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM t%d WHERE rowid = ?"</literal></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>NROW2</name></expr>;</condition> <incr><expr><name>ii</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ii</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-subselect1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"SELECT "</literal>
      <literal type="string">"(SELECT t FROM z1 WHERE rowid = ?1),"</literal>
      <literal type="string">"(SELECT t FROM z2 WHERE rowid = ?1),"</literal>
      <literal type="string">"(SELECT t FROM t3 WHERE rowid = ?1)"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;</operator><name>NROW2</name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>jj</name><operator>*</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">160</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-rowid-update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"UPDATE z1 SET i=i+1 WHERE rowid=?1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;</operator><name>NROW2</name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE t5(t TEXT PRIMARY KEY, i INTEGER);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">170</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-insert-ignore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"INSERT OR IGNORE INTO t5 SELECT t, i FROM z1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
      <argument><expr><literal type="string">"CREATE TABLE log(op TEXT, r INTEGER, i INTEGER, t TEXT);"</literal>
      <literal type="string">"CREATE TABLE t4(rowid INTEGER PRIMARY KEY, i INTEGER, t TEXT);"</literal>
      <literal type="string">"CREATE TRIGGER t4_trigger1 AFTER INSERT ON t4 BEGIN"</literal>
      <literal type="string">"  INSERT INTO log VALUES('INSERT INTO t4', new.rowid, new.i, new.t);"</literal>
      <literal type="string">"END;"</literal>
      <literal type="string">"CREATE TRIGGER t4_trigger2 AFTER UPDATE ON t4 BEGIN"</literal>
      <literal type="string">"  INSERT INTO log VALUES('UPDATE OF t4', new.rowid, new.i, new.t);"</literal>
      <literal type="string">"END;"</literal>
      <literal type="string">"CREATE TRIGGER t4_trigger3 AFTER DELETE ON t4 BEGIN"</literal>
      <literal type="string">"  INSERT INTO log VALUES('DELETE OF t4', old.rowid, old.i, old.t);"</literal>
      <literal type="string">"END;"</literal>
      <literal type="string">"BEGIN;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">180</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-trigger1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t4 VALUES(NULL, ?1, ?2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;</operator><name>NROW2</name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>jj</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
  ** Note: Of the queries, only half actually update a row. This property
  ** was copied over from speed4p.test, where it was probably introduced
  ** inadvertantly.
  */</comment>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">190</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-trigger2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"UPDATE t4 SET i = ?1, t = ?2 WHERE rowid = ?3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;=</operator><name>NROW2</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>jj</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>jj</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>jj</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
  ** Note: Same again.
  */</comment>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-trigger3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM t4 WHERE rowid = ?1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;=</operator><name>NROW2</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>jj</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>jj</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
  ** The following block contains the same tests as the above block that
  ** tests triggers, with one crucial difference: no triggers are defined.
  ** So the difference in speed between these tests and the preceding ones
  ** is the amount of time taken to compile and execute the trigger programs.
  */</comment>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(
      <argument><expr><literal type="string">"DROP TABLE t4;"</literal>
      <literal type="string">"DROP TABLE log;"</literal>
      <literal type="string">"VACUUM;"</literal>
      <literal type="string">"CREATE TABLE t4(rowid INTEGER PRIMARY KEY, i INTEGER, t TEXT);"</literal>
      <literal type="string">"BEGIN;"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">210</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-notrigger1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"INSERT INTO t4 VALUES(NULL, ?1, ?2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;</operator><name>NROW2</name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>jj</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">210</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-notrigger2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"UPDATE t4 SET i = ?1, t = ?2 WHERE rowid = ?3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;=</operator><name>NROW2</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>jj</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>jj</name><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>jj</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>jj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">220</literal></expr></argument>, <argument><expr><literal type="string">"speed4p-notrigger3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_prepare</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM t4 WHERE rowid = ?1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;=</operator><name>NROW2</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>jj</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>pStmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>jj</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_run</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** A testset used for debugging speedtest1 itself.
*/</comment>
<function><type><name>void</name></type> <name>testset_debug1</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zNum</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>              <comment type="block">/* A number name */</comment>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>g</name><operator>.</operator><name>szTest</name></name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>swizzle</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>speedtest1_numbername</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zNum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%5d %5d %5d %s\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>, <argument><expr><name>zNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__linux__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Attempt to display I/O stats on Linux using /proc/PID/io
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>displayLinuxIoStats</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>z</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"/proc/%d/io"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><call><name>fgets</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDesc</name></decl>;</decl_stmt>
    }</block> <decl><name><name>aTrans</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr><literal type="string">"rchar: "</literal></expr>,                  <expr><literal type="string">"Bytes received by read():"</literal></expr> }</block></expr>,
      <expr><block>{ <expr><literal type="string">"wchar: "</literal></expr>,                  <expr><literal type="string">"Bytes sent to write():"</literal></expr>    }</block></expr>,
      <expr><block>{ <expr><literal type="string">"syscr: "</literal></expr>,                  <expr><literal type="string">"Read() system calls:"</literal></expr>      }</block></expr>,
      <expr><block>{ <expr><literal type="string">"syscw: "</literal></expr>,                  <expr><literal type="string">"Write() system calls:"</literal></expr>     }</block></expr>,
      <expr><block>{ <expr><literal type="string">"read_bytes: "</literal></expr>,             <expr><literal type="string">"Bytes rcvd from storage:"</literal></expr>  }</block></expr>,
      <expr><block>{ <expr><literal type="string">"write_bytes: "</literal></expr>,            <expr><literal type="string">"Bytes sent to storage:"</literal></expr>    }</block></expr>,
      <expr><block>{ <expr><literal type="string">"cancelled_write_bytes: "</literal></expr>,  <expr><literal type="string">"Cancelled write bytes:"</literal></expr>    }</block></expr>,
    }</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aTrans</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aTrans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>aTrans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zPattern</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>aTrans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zPattern</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"-- %-28s %s"</literal></expr></argument>, <argument><expr><name><name>aTrans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zDesc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>   
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&lt;</operator><literal type="number">3006018</literal></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3_sourceid</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"(before 3.6.18)"</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_CKSUMVFS_STATIC</name></expr></cpp:if>
<function_decl><type><name>int</name></type> <name>sqlite3_register_cksumvfs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xCompileOptions</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azVal</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azCol</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Compile option: %s\n"</literal></expr></argument>, <argument><expr><name><name>azVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>doAutovac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* True for --autovacuum */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>cacheSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Desired cache size.  0 means default */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doExclusive</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* True for --exclusive */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mnHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* Heap size from --heap */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doIncrvac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* True for --incrvacuum */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zJMode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* Journal mode */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* Encryption key */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nLook</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>szLook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* --lookaside configuration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>noSync</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* True for --nosync */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* Desired page size.  0 means default */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>szPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><comment type="block">/* --pcache configuration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* True if --pcache is seen */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>showStats</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* True for --stats */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nThread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* --threads value */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>mmapSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* How big of a memory map to use */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>memDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                <comment type="block">/* --memdb.  Use an in-memory database */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTSet</name> <init>= <expr><literal type="string">"main"</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* Which --testset torun */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>doTrace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* True for --trace */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEncoding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* --utf16be or --utf16le */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* Name of the test database */</comment>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHeap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Allocated heap space */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pLook</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Allocated lookaside space */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pPCache</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Allocated storage for pcache */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCur</name></decl>, <decl><type ref="prev"/><name>iHi</name></decl>;</decl_stmt>                <comment type="block">/* Stats values, current and "highwater" */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                        <comment type="block">/* Loop counter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                       <comment type="block">/* API return code */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_CKSUMVFS_STATIC</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sqlite3_register_cksumvfs</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Display the version of SQLite being tested */</comment>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Speedtest1 for SQLite %s %.48s\n"</literal></expr></argument>,
         <argument><expr><call><name>sqlite3_libversion</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>sqlite3_sourceid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Process command-line arguments */</comment>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zWR</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zNN</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zPK</name></name> <operator>=</operator> <literal type="string">"UNIQUE"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>szTest</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nRepeat</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
      <do>do<block>{<block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block>while<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition>;</do>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"autovacuum"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>doAutovac</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"cachesize"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>cacheSize</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"exclusive"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>doExclusive</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"checkpoint"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>doCheckpoint</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"explain"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bExplain</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"heap"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nHeap</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mnHeap</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"incrvacuum"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>doIncrvac</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"journal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zJMode</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zKey</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"lookaside"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nLook</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>szLook</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"memdb"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>memDb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006000</literal></expr></cpp:if>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"multithread"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MULTITHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"nomemstat"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MEMSTATUS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007017</literal></expr></cpp:if>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"mmap"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>mmapSize</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"nosync"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>noSync</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"notnull"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zNN</name></name> <operator>=</operator> <literal type="string">"NOT NULL"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SPEEDTEST_OMIT_HASH</name></cpp:ifdef>
        <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"The --output option is not supported with"</literal>
                    <literal type="string">" -DSPEEDTEST_OMIT_HASH\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hashFile</name></name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>g</name><operator>.</operator><name>hashFile</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>hashFile</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"cannot open \"%s\" for writing\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"pagesize"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pageSize</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"pcache"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nPCache</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>szPCache</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>doPCache</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"primarykey"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zPK</name></name> <operator>=</operator> <literal type="string">"PRIMARY KEY"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"repeat"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing arguments on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nRepeat</name></name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"reprepare"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bReprepare</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006000</literal></expr></cpp:if>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"serialized"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_SERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"singlethread"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_SINGLETHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"sqlonly"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bSqlOnly</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"shrink-memory"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bMemShrink</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>szTest</name></name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"stats"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>showStats</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"temp"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;</operator><literal type="char">'0'</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;</operator><literal type="char">'9'</literal> <operator>||</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"argument to --temp should be integer between 0 and 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>eTemp</name></name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"testset"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zTSet</name> <operator>=</operator> <name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"trace"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>doTrace</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"threads"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nThread</name> <operator>=</operator> <call><name>integerValue</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"utf16le"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zEncoding</name> <operator>=</operator> <literal type="string">"utf16le"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"utf16be"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zEncoding</name> <operator>=</operator> <literal type="string">"utf16be"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"verify"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>bVerify</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SPEEDTEST_OMIT_HASH</name></cpp:ifndef>
        <expr_stmt><expr><call><name>HashInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"reserve"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>argc</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"missing argument on %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>nReserve</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"without-rowid"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>,<argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* no-op */</comment>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>,<argument><expr><literal type="string">"STRICT"</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zWR</name></name> <operator>=</operator> <literal type="string">"WITHOUT ROWID,STRICT"</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zWR</name></name> <operator>=</operator> <literal type="string">"WITHOUT ROWID"</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zPK</name></name> <operator>=</operator> <literal type="string">"PRIMARY KEY"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"strict"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>,<argument><expr><literal type="string">"STRICT"</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <comment type="block">/* no-op */</comment>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>zWR</name></name></expr></argument>,<argument><expr><literal type="string">"WITHOUT"</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zWR</name></name> <operator>=</operator> <literal type="string">"WITHOUT ROWID,STRICT"</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>g</name><operator>.</operator><name>zWR</name></name> <operator>=</operator> <literal type="string">"STRICT"</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>zHelp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"unknown option: %s\nUse \"%s -?\" for help\n"</literal></expr></argument>,
                    <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zDbName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zDbName</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"surplus argument: %s\nUse \"%s -?\" for help\n"</literal></expr></argument>,
                  <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>zDbName</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006001</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name>nHeap</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pHeap</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nHeap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pHeap</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"cannot allocate %d-byte heap\n"</literal></expr></argument>, <argument><expr><name>nHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_HEAP</name></expr></argument>, <argument><expr><name>pHeap</name></expr></argument>, <argument><expr><name>nHeap</name></expr></argument>, <argument><expr><name>mnHeap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"heap configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>doPCache</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>nPCache</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>szPCache</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pPCache</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nPCache</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szPCache</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pPCache</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"cannot allocate %lld-byte pcache\n"</literal></expr></argument>,
                                   <argument><expr><name>nPCache</name><operator>*</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>szPCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_PAGECACHE</name></expr></argument>, <argument><expr><name>pPCache</name></expr></argument>, <argument><expr><name>szPCache</name></expr></argument>, <argument><expr><name>nPCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"pcache configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLook</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_LOOKASIDE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open the database and the input file */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_open</name><argument_list>(<argument><expr><ternary><condition><expr><name>memDb</name></expr> ?</condition><then> <expr><literal type="string">":memory:"</literal></expr> </then><else>: <expr><name>zDbName</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"Cannot open database file: %s\n"</literal></expr></argument>, <argument><expr><name>zDbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006001</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name>nLook</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>szLook</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pLook</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>nLook</name><operator>*</operator><name>szLook</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_db_config</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBCONFIG_LOOKASIDE</name></expr></argument>,<argument><expr><name>pLook</name></expr></argument>,<argument><expr><name>szLook</name></expr></argument>,<argument><expr><name>nLook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"lookaside configuration failed: %d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>nReserve</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SQLITE_FCNTL_RESERVE_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>g</name><operator>.</operator><name>nReserve</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set database connection options */</comment>
  <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"random"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>randomFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><name>doTrace</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_trace</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>traceCallback</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name>memDb</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA temp_store=memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>mmapSize</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA mmap_size=%d"</literal></expr></argument>, <argument><expr><name>mmapSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA threads=%d"</literal></expr></argument>, <argument><expr><name>nThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zKey</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA key('%s')"</literal></expr></argument>, <argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zEncoding</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA encoding=%s"</literal></expr></argument>, <argument><expr><name>zEncoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>doAutovac</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA auto_vacuum=FULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>doIncrvac</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA auto_vacuum=INCREMENTAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pageSize</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA page_size=%d"</literal></expr></argument>, <argument><expr><name>pageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>cacheSize</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cache_size=%d"</literal></expr></argument>, <argument><expr><name>cacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>noSync</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA synchronous=OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>doExclusive</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA locking_mode=EXCLUSIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zJMode</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><literal type="string">"PRAGMA journal_mode=%s"</literal></expr></argument>, <argument><expr><name>zJMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>bExplain</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">".explain\n.echo on\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <do>do<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zThisTest</name> <init>= <expr><name>zTSet</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zComma</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>zThisTest</name></expr></argument>,<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zComma</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>zComma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zTSet</name> <operator>=</operator> <name>zComma</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zTSet</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>g</name><operator>.</operator><name>iTotal</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <name>zComma</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"       Begin testset \"%s\"\n"</literal></expr></argument>, <argument><expr><name>zThisTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zThisTest</name></expr></argument>,<argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testset_main</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zThisTest</name></expr></argument>,<argument><expr><literal type="string">"debug1"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testset_debug1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zThisTest</name></expr></argument>,<argument><expr><literal type="string">"orm"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testset_orm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zThisTest</name></expr></argument>,<argument><expr><literal type="string">"cte"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testset_cte</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zThisTest</name></expr></argument>,<argument><expr><literal type="string">"fp"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testset_fp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zThisTest</name></expr></argument>,<argument><expr><literal type="string">"trigger"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testset_trigger</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zThisTest</name></expr></argument>,<argument><expr><literal type="string">"rtree"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifdef>
      <expr_stmt><expr><call><name>testset_rtree</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">147</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"compile with -DSQLITE_ENABLE_RTREE to enable "</literal>
                  <literal type="string">"the R-Tree tests\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fatal_error</name><argument_list>(<argument><expr><literal type="string">"unknown testset: \"%s\"\n"</literal>
                  <literal type="string">"Choices: cte debug1 fp main orm rtree trigger\n"</literal></expr></argument>,
                   <argument><expr><name>zThisTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>zTSet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>zObj</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>speedtest1_begin_test</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><literal type="string">"Reset the database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zObj</name> <operator>=</operator> <call><name>speedtest1_once</name><argument_list>(
             <argument><expr><literal type="string">"SELECT name FROM main.sqlite_master"</literal>
             <literal type="string">" WHERE sql LIKE 'CREATE %%TABLE%%'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zObj</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"DROP TABLE main.\"%w\""</literal></expr></argument>, <argument><expr><name>zObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zObj</name> <operator>=</operator> <call><name>speedtest1_once</name><argument_list>(
             <argument><expr><literal type="string">"SELECT name FROM temp.sqlite_master"</literal>
             <literal type="string">" WHERE sql LIKE 'CREATE %%TABLE%%'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zObj</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"DROP TABLE main.\"%w\""</literal></expr></argument>, <argument><expr><name>zObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>speedtest1_exec</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><call><name>speedtest1_end_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>while<condition>( <expr><name><name>zTSet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition>;</do>
  <expr_stmt><expr><call><name>speedtest1_final</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>showStats</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA compile_options"</literal></expr></argument>, <argument><expr><name>xCompileOptions</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Database connection statistics printed after both prepared statements
  ** have been finalized */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007009</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><name>showStats</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Lookaside Slots Used:        %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Successful lookasides:       %d\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Lookaside size faults:       %d\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Lookaside OOM faults:        %d\n"</literal></expr></argument>, <argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Pager Heap Usage:            %d bytes\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_HIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Page cache hits:             %d\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_MISS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Page cache misses:           %d\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007012</literal></expr></cpp:if>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_CACHE_WRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Page cache writes:           %d\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_SCHEMA_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Schema Heap Usage:           %d bytes\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>, <argument><expr><name>SQLITE_DBSTATUS_STMT_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Statement Heap Usage:        %d bytes\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>g</name><operator>.</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3006001</literal></expr></cpp:if>
  <comment type="block">/* Global memory usage statistics printed after the database connection
  ** has closed.  Memory usage should be zero at this point. */</comment>
  <if_stmt><if>if<condition>( <expr><name>showStats</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MEMORY_USED</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Memory Used (bytes):         %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name><operator>&gt;=</operator><literal type="number">3007000</literal></expr></cpp:if>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MALLOC_COUNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Outstanding Allocations:     %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_PAGECACHE_OVERFLOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Pcache Overflow Bytes:       %d (max %d)\n"</literal></expr></argument>, <argument><expr><name>iCur</name></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_MALLOC_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Largest Allocation:          %d bytes\n"</literal></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name>SQLITE_STATUS_PAGECACHE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-- Largest Pcache Allocation:   %d bytes\n"</literal></expr></argument>,<argument><expr><name>iHi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__linux__</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>showStats</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>displayLinuxIoStats</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Release memory */</comment>
  <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pLook</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pPCache</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pHeap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
