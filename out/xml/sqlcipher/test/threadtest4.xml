<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/test/threadtest4.c"><comment type="block">/*
** 2014-12-11
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file implements a simple standalone program used to stress the
** SQLite library when accessing the same set of databases simultaneously
** from multiple threads in shared-cache mode.
**
** This test program runs on unix-like systems only.  It uses pthreads.
** To compile:
**
**     gcc -g -Wall -I. threadtest4.c sqlite3.c -ldl -lpthread
**
** To run:
**
**     ./a.out 10
**
** The argument is the number of threads.  There are also options, such
** as -wal and -multithread and -serialized.
**
** Consider also compiling with clang instead of gcc and adding the
** -fsanitize=thread option.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sched.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** An instance of the following structure is passed into each worker
** thread.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>WorkerInfo</name></name></type> <name>WorkerInfo</name>;</typedef>
<struct>struct <name>WorkerInfo</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>;</decl_stmt>                    <comment type="block">/* Thread ID */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nWorker</name></decl>;</decl_stmt>                <comment type="block">/* Total number of workers */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>wkrFlags</name></decl>;</decl_stmt>          <comment type="block">/* Flags */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>mainDb</name></decl>;</decl_stmt>            <comment type="block">/* Database connection of the main thread */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                <comment type="block">/* Database connection of this thread */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nErr</name></decl>;</decl_stmt>                   <comment type="block">/* Number of errors seen by this thread */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTest</name></decl>;</decl_stmt>                  <comment type="block">/* Number of tests run by this thread */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl>;</decl_stmt>                 <comment type="block">/* Message returned by this thread */</comment>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>id</name></decl>;</decl_stmt>               <comment type="block">/* Thread id */</comment>
  <decl_stmt><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>pWrMutex</name></decl>;</decl_stmt>  <comment type="block">/* Hold this mutex while writing */</comment>
}</block>;</struct>

<comment type="block">/*
** Allowed values for WorkerInfo.wkrFlags
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT4_SERIALIZED</name></cpp:macro>    <cpp:value>0x0000001</cpp:value></cpp:define>   <comment type="block">/* The --serialized option is used */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT4_WAL</name></cpp:macro>           <cpp:value>0x0000002</cpp:value></cpp:define>   <comment type="block">/* WAL mode in use */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TT4_TRACE</name></cpp:macro>         <cpp:value>0x0000004</cpp:value></cpp:define>   <comment type="block">/* Trace activity */</comment>


<comment type="block">/*
** Report an OOM error and die if the argument is NULL
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>check_oom</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Allocate memory.  If the allocation fails, print an error message and
** kill the process.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>safe_malloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><ternary><condition><expr><name>sz</name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>sz</name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>check_oom</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Print a trace message for a worker
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_trace</name><parameter_list>(<parameter><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMsg</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>wkrFlags</name></name> <operator>&amp;</operator> <name>TT4_TRACE</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zMsg</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check_oom</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TRACE(%02d): %s\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Prepare a single SQL query
*/</comment>
<function><type><specifier>static</specifier> <name>sqlite3_stmt</name> <modifier>*</modifier></type><name>prep_sql</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check_oom</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SQL error (%d,%d): %s\nWhile preparing: [%s]\n"</literal></expr></argument>,
            <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_extended_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pStmt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Run a SQL statements.  Panic if unable.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>run_sql</name><parameter_list>(<parameter><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRetry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check_oom</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SQL error (%d,%d): %s\nWhile preparing: [%s]\n"</literal></expr></argument>,
            <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_extended_errcode</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>worker_trace</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"running [%s]"</literal></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>rc</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator><operator>==</operator><name>SQLITE_BUSY</name> <operator>||</operator> <operator>(</operator><name>rc</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator><operator>==</operator><name>SQLITE_LOCKED</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nRetry</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nRetry</name><operator>&lt;</operator><literal type="number">10</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>worker_trace</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"retry %d for [%s]"</literal></expr></argument>, <argument><expr><name>nRetry</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Deadlock in thread %d while running [%s]\n"</literal></expr></argument>,
                <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"SQL error (%d,%d): %s\nWhile running [%s]\n"</literal></expr></argument>,
              <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>sqlite3_extended_errcode</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Open the database connection for WorkerInfo.  The order in which
** the files are opened is a function of the tid value.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_open_connection</name><parameter_list>(<parameter><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCnt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aOrder</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
    <expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name> <operator>+</operator> <name>iCnt</name><operator>)</operator> <operator>%</operator> <literal type="number">6</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>zFile</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"tt4-test%d.db"</literal></expr></argument>, <argument><expr><name><name>aOrder</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check_oom</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>worker_trace</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"open %s"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open_v2</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,
                       <argument><expr><name>SQLITE_OPEN_READWRITE</name><operator>|</operator><name>SQLITE_OPEN_SHAREDCACHE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sqlite_open_v2(%s) failed on thread %d\n"</literal></expr></argument>,
            <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA read_uncommitted=ON;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_busy_timeout</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA synchronous=OFF;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ATTACH 'tt4-test%d.db' AS aux1"</literal></expr></argument>, <argument><expr><name><name>aOrder</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ATTACH 'tt4-test%d.db' AS aux2"</literal></expr></argument>, <argument><expr><name><name>aOrder</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Close the worker database connection
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_close_connection</name><parameter_list>(<parameter><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>worker_trace</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Delete all content in the three databases associated with a
** single thread.  Make this happen all in a single transaction if
** inTrans is true, or separately for each database if inTrans is
** false.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_delete_all_content</name><parameter_list>(<parameter><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inTrans</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>inTrans</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM t1 WHERE tid=%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM t2 WHERE tid=%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM t3 WHERE tid=%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM t1 WHERE tid=%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM t2 WHERE tid=%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"DELETE FROM t3 WHERE tid=%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Create rows mn through mx in table iTab for the given worker
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_add_content</name><parameter_list>(<parameter><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iTab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTabDef</name></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>iTab</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><name>zTabDef</name> <operator>=</operator> <literal type="string">"t1(tid,sp,a,b,c)"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><name>zTabDef</name> <operator>=</operator> <literal type="string">"t2(tid,sp,d,e,f)"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><name>zTabDef</name> <operator>=</operator> <literal type="string">"t3(tid,sp,x,y,z)"</literal></expr>;</expr_stmt>  <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
     <argument><expr><literal type="string">"WITH RECURSIVE\n"</literal>
     <literal type="string">" c(i) AS (VALUES(%d) UNION ALL SELECT i+1 FROM c WHERE i&lt;%d)\n"</literal>
     <literal type="string">"INSERT INTO %s SELECT %d, zeroblob(3000), i, printf('%%d',i), i FROM c;"</literal></expr></argument>,
     <argument><expr><name>mn</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>zTabDef</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Set an error message on a worker
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>worker_error</name><parameter_list>(<parameter><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nErr</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zMsg</name></name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Each thread runs the following function.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>worker_thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>WorkerInfo</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOuter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"worker %d startup\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>iOuter</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iOuter</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nWorker</name></name></expr>;</condition> <incr><expr><name>iOuter</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>worker_open_connection</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iOuter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>worker_add_content</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">100</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name><operator>+</operator><name>iOuter</name><operator>)</operator><operator>%</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>worker_add_content</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">100</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name><operator>+</operator><name>iOuter</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>worker_add_content</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>i</name><operator>*</operator><literal type="number">100</literal><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">100</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name><operator>+</operator><name>iOuter</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <call><name>prep_sql</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"SELECT count(a) FROM t1 WHERE tid=%d"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>worker_trace</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"query [%s]"</literal></expr></argument>, <argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>worker_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Failed to step: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">400</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>worker_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Wrong result: %d"</literal></expr></argument>, <argument><expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nErr</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name>iOuter</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name><operator>)</operator><operator>%</operator><literal type="number">3</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_db_release_memory</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"BEGIN;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"UPDATE t1 SET c=NULL WHERE a=55"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"UPDATE t2 SET f=NULL WHERE d=42"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"UPDATE t3 SET z=NULL WHERE x=31"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ROLLBACK;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <if_stmt><if>if<condition>( <expr><name>iOuter</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWrMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <call><name>prep_sql</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,
       <argument><expr><literal type="string">"SELECT t1.rowid, t2.rowid, t3.rowid"</literal>
       <literal type="string">"  FROM t1, t2, t3"</literal>
       <literal type="string">" WHERE t1.tid=%d AND t2.tid=%d AND t3.tid=%d"</literal>
       <literal type="string">"   AND t1.a&lt;&gt;t2.d AND t2.d&lt;&gt;t3.x"</literal>
       <literal type="string">" ORDER BY 1, 2, 3"</literal></expr></argument>
       ,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>worker_trace</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"query [%s]"</literal></expr></argument>, <argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nWorker</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>worker_error</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"Failed to step: %s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nErr</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>worker_delete_all_content</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>tid</name></name><operator>+</operator><name>iOuter</name><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>worker_close_connection</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>worker_close_connection</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"worker %d finished\n"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nWorker</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* Number of worker threads */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                   <comment type="block">/* Loop counter */</comment>
  <decl_stmt><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>aInfo</name></decl>;</decl_stmt>       <comment type="block">/* Information for each worker */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>wkrFlags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Default worker flags */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Number of errors */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Number of tests */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                  <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* Main database connection */</comment>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>wrMutex</name></decl>;</decl_stmt> <comment type="block">/* The write serialization mutex */</comment>
  <decl_stmt><decl><type><name>WorkerInfo</name></type> <name>infoTop</name></decl>;</decl_stmt>      <comment type="block">/* WorkerInfo for the main thread */</comment>
  <decl_stmt><decl><type><name>WorkerInfo</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>           <comment type="block">/* Pointer to infoTop */</comment>

  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MULTITHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"-multithread"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MULTITHREAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wkrFlags</name> <operator>&amp;=</operator> <operator>~</operator><name>TT4_SERIALIZED</name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"-serialized"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_SERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>wkrFlags</name> <operator>|=</operator> <name>TT4_SERIALIZED</name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"-wal"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>wkrFlags</name> <operator>|=</operator> <name>TT4_WAL</name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>,<argument><expr><literal type="string">"-trace"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>wkrFlags</name> <operator>|=</operator> <name>TT4_TRACE</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown command-line option: %s\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;=</operator><literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;=</operator><literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name>nWorker</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nWorker</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nWorker</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"minimum of 2 threads\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"extra command-line argument: \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>nWorker</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> 
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
       <argument><expr><literal type="string">"usage:  %s ?OPTIONS? N\n"</literal>
       <literal type="string">"N is the number of threads and must be at least 2.\n"</literal>
       <literal type="string">"Options:\n"</literal>
       <literal type="string">"  --serialized\n"</literal>
       <literal type="string">"  --multithread\n"</literal>
       <literal type="string">"  --wal\n"</literal>
       <literal type="string">"  --trace\n"</literal></expr></argument>
       ,<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3_threadsafe</name><argument_list>()</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"requires a threadsafe build of SQLite\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wrMutex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the test database files */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"tt4-test1.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"tt4-test2.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>unlink</name><argument_list>(<argument><expr><literal type="string">"tt4-test3.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><literal type="string">"tt4-test1.db"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unable to open test database: tt4-test2.db\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>infoTop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>infoTop</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoTop</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>infoTop</name><operator>.</operator><name>wkrFlags</name></name> <operator>=</operator> <name>wkrFlags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name>infoTop</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>wkrFlags</name> <operator>&amp;</operator> <name>TT4_WAL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA journal_mode=WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA synchronous=OFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS t1(tid INTEGER, sp, a, b, c)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX t1tid ON t1(tid)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX t1ab ON t1(a,b)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ATTACH 'tt4-test2.db' AS 'test2'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS test2.t2(tid INTEGER, sp, d, e, f)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX test2.t2tid ON t2(tid)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX test2.t2de ON t2(d,e)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ATTACH 'tt4-test3.db' AS 'test3'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE IF NOT EXISTS test3.t3(tid INTEGER, sp, x, y, z)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX test3.t3tid ON t3(tid)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>run_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"CREATE INDEX test3.t3xy ON t3(x,y)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aInfo</name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>aInfo</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nWorker</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>aInfo</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nWorker</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tid</name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nWorker</name> <operator>=</operator> <name>nWorker</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>wkrFlags</name> <operator>=</operator> <name>wkrFlags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mainDb</name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pWrMutex</name> <operator>=</operator> <operator>&amp;</operator><name>wrMutex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>worker_thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"thread creation failed for thread %d\n"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nWorker</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Joined thread %d: %d errors in %d tests"</literal></expr></argument>,
           <argument><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tid</name></expr></argument>, <argument><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nErr</name></expr></argument>, <argument><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zMsg</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">": %s\n"</literal></expr></argument>, <argument><expr><name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>nErr</name> <operator>+=</operator> <name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nErr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nTest</name> <operator>+=</operator> <name><name>aInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nTest</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Total %d errors in %d tests\n"</literal></expr></argument>, <argument><expr><name>nErr</name></expr></argument>, <argument><expr><name>nTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nErr</name></expr>;</return>
</block_content>}</block></function>
</unit>
