<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/vacuum.c"><comment type="block">/*
** 2003 April 6
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code used to implement the VACUUM command.
**
** Most of the code in this file may be omitted by defining the
** SQLITE_OMIT_VACUUM macro.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdbeInt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_VACUUM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_ATTACH</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
** Execute zSql on database db.
**
** If zSql returns rows, then each row will have exactly one
** column.  (This will only happen if zSql begins with "SELECT".)
** Take each row of result and call execSql() again recursively.
**
** The execSqlF() routine does the same thing, except it accepts
** a format string as its third argument
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>execSql</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <comment type="block">/* printf("SQL: [%s]\n", zSql); fflush(stdout); */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  <while>while<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSubSql</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>,<argument><expr><literal type="string">"SELECT"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* The secondary SQL must be one of CREATE TABLE, CREATE INDEX,
    ** or INSERT.  Historically there have been attacks that first
    ** corrupt the sqlite_schema.sql field with other kinds of statements
    ** then run VACUUM to get those statements to execute at inappropriate
    ** times. */</comment>
    <if_stmt><if>if<condition>( <expr><name>zSubSql</name>
     <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>zSubSql</name></expr></argument>,<argument><expr><literal type="string">"CRE"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>zSubSql</name></expr></argument>,<argument><expr><literal type="string">"INS"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>zSubSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>execSqlF</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3VMPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The VACUUM command is used to clean up the database,
** collapse free space, etc.  It is modelled after the VACUUM command
** in PostgreSQL.  The VACUUM command works as follows:
**
**   (1)  Create a new transient database file
**   (2)  Copy all content from the database being vacuumed into
**        the new transient database file
**   (3)  Copy content from the transient database back into the
**        original database.
**
** The transient database requires temporary disk space approximately
** equal to the size of the original database.  The copy operation of
** step (3) requires additional temporary disk space approximately equal
** to the size of the original database for the rollback journal.
** Hence, temporary disk space that is approximately 2x the size of the
** original database is required.  Every page of the database is written
** approximately 3 times:  Once for step (2) and twice for step (3).
** Two writes per page are required in step (3) because the original
** database content must be written into the rollback journal prior to
** overwriting the database with the vacuumed content.
**
** Only 1x temporary space and only 1x writes would be required if
** the copy of step (3) were replaced by deleting the original database
** and renaming the transient database as the original.  But that will
** not work if other processes are attached to the original database.
** And a power loss in between deleting the original and renaming the
** transient would cause the database file to appear to be deleted
** following reboot.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Vacuum</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pNm</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pInto</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>build_vacuum_end</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>build_vacuum_end</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNm</name></expr> )</condition><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_BUG_COMPATIBLE_20160819</name></cpp:ifndef>
    <comment type="block">/* Default behavior:  Report an error if the argument to VACUUM is
    ** not recognized */</comment>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3TwoPartName</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pNm</name></expr></argument>, <argument><expr><name>pNm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>build_vacuum_end</name>;</goto></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="block">/* When SQLITE_BUG_COMPATIBLE_20160819 is defined, unrecognized arguments
    ** to VACUUM are silently ignored.  This is a back-out of a bug fix that
    ** occurred on 2016-08-19 (https://www.sqlite.org/src/info/083f9e6270).
    ** The buggy behavior is required for binary compatibility with some
    ** legacy applications. */</comment>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3FindDb</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>pNm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iDb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iIntoReg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pInto</name> <operator>&amp;&amp;</operator> <call><name>sqlite3ResolveSelfReference</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>pInto</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iIntoReg</name> <operator>=</operator> <operator>++</operator><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3ExprCode</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pInto</name></expr></argument>, <argument><expr><name>iIntoReg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Vacuum</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>iIntoReg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>build_vacuum_end</name>:</label>
  <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>pInto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
** This routine implements the OP_Vacuum opcode of the VDBE.
*/</comment>
<function><type><name>SQLITE_NOINLINE</name> <name>int</name></type> <name>sqlite3RunVacuum</name><parameter_list>(
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>,        <comment type="block">/* Write error message here */</comment>
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,            <comment type="block">/* Database connection */</comment>
  <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>,                <comment type="block">/* Which attached DB to vacuum */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pOut</name></decl></parameter>     <comment type="block">/* Write results here, if not NULL. VACUUM INTO */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>     <comment type="block">/* Return code from service routines */</comment>
  <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pMain</name></decl>;</decl_stmt>           <comment type="block">/* The database being vacuumed */</comment>
  <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pTemp</name></decl>;</decl_stmt>           <comment type="block">/* The temporary database we vacuum into */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>saved_mDbFlags</name></decl>;</decl_stmt>     <comment type="block">/* Saved value of db-&gt;mDbFlags */</comment>
  <decl_stmt><decl><type><name>u64</name></type> <name>saved_flags</name></decl>;</decl_stmt>        <comment type="block">/* Saved value of db-&gt;flags */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>saved_nChange</name></decl>;</decl_stmt>      <comment type="block">/* Saved value of db-&gt;nChange */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>saved_nTotalChange</name></decl>;</decl_stmt> <comment type="block">/* Saved value of db-&gt;nTotalChange */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>saved_openFlags</name></decl>;</decl_stmt>    <comment type="block">/* Saved value of db-&gt;openFlags */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>saved_mTrace</name></decl>;</decl_stmt>        <comment type="block">/* Saved trace settings */</comment>
  <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Database to detach at end of vacuum */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isMemDb</name></decl>;</decl_stmt>            <comment type="block">/* True if vacuuming a :memory: database */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRes</name></decl>;</decl_stmt>               <comment type="block">/* Bytes of reserved space at the end of each page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nDb</name></decl>;</decl_stmt>                <comment type="block">/* Number of attached databases */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbMain</name></decl>;</decl_stmt>    <comment type="block">/* Schema name of database to vacuum */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOut</name></decl>;</decl_stmt>       <comment type="block">/* Name of output file */</comment>

  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>autoCommit</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"cannot VACUUM from within a transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return> <comment type="block">/* IMP: R-12218-18073 */</comment>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>nVdbeActive</name></name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>,<argument><expr><literal type="string">"cannot VACUUM - SQL statements in progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return> <comment type="block">/* IMP: R-15610-35227 */</comment>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>saved_openFlags</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>openFlags</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOut</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_TEXT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"non-text filename"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>zOut</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITE_OPEN_READONLY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>|=</operator> <name>SQLITE_OPEN_CREATE</name><operator>|</operator><name>SQLITE_OPEN_READWRITE</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zOut</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Save the current value of the database flags so that it can be 
  ** restored before returning. Then set the writable-schema flag, and
  ** disable CHECK and foreign key constraints.  */</comment>
  <expr_stmt><expr><name>saved_flags</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>flags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>saved_mDbFlags</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>saved_nChange</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>nChange</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>saved_nTotalChange</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>nTotalChange</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>saved_mTrace</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>mTrace</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SQLITE_WriteSchema</name> <operator>|</operator> <name>SQLITE_IgnoreChecks</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name> <operator>|=</operator> <name>DBFLAG_PreferBuiltin</name> <operator>|</operator> <name>DBFLAG_Vacuum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>u64</name><operator>)</operator><operator>(</operator><name>SQLITE_ForeignKeys</name> <operator>|</operator> <name>SQLITE_ReverseOrder</name>
                   <operator>|</operator> <name>SQLITE_Defensive</name> <operator>|</operator> <name>SQLITE_CountRows</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mTrace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>zDbMain</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zDbSName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pMain</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>isMemDb</name> <operator>=</operator> <call><name>sqlite3PagerIsMemdb</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Attach the temporary database as 'vacuum_db'. The synchronous pragma
  ** can be set to 'off' for this file, as it is not recovered if a crash
  ** occurs anyway. The integrity of the database is maintained by a
  ** (possibly synchronous) transaction opened on the main database before
  ** sqlite3BtreeCopyFile() is called.
  **
  ** An optimisation would be to use a non-journaled pager.
  ** (Later:) I tried setting "PRAGMA vacuum_db.journal_mode=OFF" but
  ** that actually made the VACUUM run slower.  Very little journalling
  ** actually occurs when doing a vacuum since the vacuum_db is initially
  ** empty.  Only the journal header is written.  Apparently it takes more
  ** time to parse and run the PRAGMA to turn journalling off than it does
  ** to write the journal header file.
  */</comment>
  <expr_stmt><expr><name>nDb</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSqlF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><literal type="string">"ATTACH %Q AS vacuum_db"</literal></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>openFlags</name></name> <operator>=</operator> <name>saved_openFlags</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><name>nDb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>nDb</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zDbSName</name></name></expr></argument>,<argument><expr><literal type="string">"vacuum_db"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTemp</name> <operator>=</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOut</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>id</name><operator>-&gt;</operator><name>pMethods</name></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>sqlite3OsFileSize</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sz</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name>sz</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"output file already exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end_of_vacuum</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name> <operator>|=</operator> <name>DBFLAG_VacuumInto</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>sqlite3BtreeGetRequestedReserve</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* A VACUUM cannot change the pagesize of an encrypted database. */</comment>
<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlcipherCodecGetKey</name><argument_list>(<argument><expr><name>sqlite3</name><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zKey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlcipherCodecGetKey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>zKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nKey</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>

  <expr_stmt><expr><call><name>sqlite3BtreeSetCacheSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>cache_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeSetSpillSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeSetSpillSize</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeSetPagerFlags</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name>PAGER_SYNCHRONOUS_OFF</name><operator>|</operator><name>PAGER_CACHESPILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Begin a transaction and take an exclusive lock on the main database
  ** file. This is done before the sqlite3BtreeGetPageSize(pMain) call below,
  ** to ensure that we do not try to change the page-size on a WAL database.
  */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeBeginTrans</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><ternary><condition><expr><name>pOut</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* Do not attempt to change the page size for a WAL database */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3PagerGetJournalMode</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                               <operator>==</operator><name>PAGER_JOURNALMODE_WAL</name>
   <operator>&amp;&amp;</operator> <name>pOut</name><operator>==</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nRes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>
   <operator>||</operator> <operator>(</operator><operator>!</operator><name>isMemDb</name> <operator>&amp;&amp;</operator> <call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name></expr></argument>, <argument><expr><name>nRes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator>
   <operator>||</operator> <call><name>NEVER</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr></argument>)</argument_list></call></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM_BKPT</name></expr>;</expr_stmt>
    <goto>goto <name>end_of_vacuum</name>;</goto>
  </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3BtreeSetAutoVacuum</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>nextAutovac</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>db</name><operator>-&gt;</operator><name>nextAutovac</name></name></expr> </then><else>:
                                           <expr><call><name>sqlite3BtreeGetAutoVacuum</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Query the schema of the main database. Create a mirror schema
  ** in the temporary database.
  */</comment>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>iDb</name></name> <operator>=</operator> <name>nDb</name></expr>;</expr_stmt> <comment type="block">/* force new CREATE statements into vacuum_db */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSqlF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT sql FROM \"%w\".sqlite_schema"</literal>
      <literal type="string">" WHERE type='table'AND name&lt;&gt;'sqlite_sequence'"</literal>
      <literal type="string">" AND coalesce(rootpage,1)&gt;0"</literal></expr></argument>,
      <argument><expr><name>zDbMain</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSqlF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT sql FROM \"%w\".sqlite_schema"</literal>
      <literal type="string">" WHERE type='index'"</literal></expr></argument>,
      <argument><expr><name>zDbMain</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>iDb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* Loop through the tables in the main database. For each, do
  ** an "INSERT INTO vacuum_db.xxx SELECT * FROM main.xxx;" to copy
  ** the contents to the temporary database.
  */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSqlF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT'INSERT INTO vacuum_db.'||quote(name)"</literal>
      <literal type="string">"||' SELECT*FROM\"%w\".'||quote(name)"</literal>
      <literal type="string">"FROM vacuum_db.sqlite_schema "</literal>
      <literal type="string">"WHERE type='table'AND coalesce(rootpage,1)&gt;0"</literal></expr></argument>,
      <argument><expr><name>zDbMain</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name> <operator>&amp;</operator> <name>DBFLAG_Vacuum</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DBFLAG_Vacuum</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* Copy the triggers, views, and virtual tables from the main database
  ** over to the temporary database.  None of these objects has any
  ** associated storage, so all we have to do is copy their entries
  ** from the schema table.
  */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>execSqlF</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>,
      <argument><expr><literal type="string">"INSERT INTO vacuum_db.sqlite_schema"</literal>
      <literal type="string">" SELECT*FROM \"%w\".sqlite_schema"</literal>
      <literal type="string">" WHERE type IN('view','trigger')"</literal>
      <literal type="string">" OR(type='table'AND rootpage=0)"</literal></expr></argument>,
      <argument><expr><name>zDbMain</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>

  <comment type="block">/* At this point, there is a write transaction open on both the 
  ** vacuum database and the main database. Assuming no error occurs,
  ** both transactions are closed by this block - the main database
  ** transaction by sqlite3BtreeCopyFile() and the other by an explicit
  ** call to sqlite3BtreeCommit().
  */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>meta</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* This array determines which meta meta values are preserved in the
    ** vacuum.  Even entries are the meta value number and odd entries
    ** are an increment to apply to the meta value after the vacuum.
    ** The increment is used to increase the schema cookie so that other
    ** connections to the same database will know to reread the schema.
    */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aCopy</name><index>[]</index></name> <init>= <expr><block>{
       <expr><name>BTREE_SCHEMA_VERSION</name></expr>,     <expr><literal type="number">1</literal></expr>,  <comment type="block">/* Add one to the old schema cookie */</comment>
       <expr><name>BTREE_DEFAULT_CACHE_SIZE</name></expr>, <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Preserve the default page cache size */</comment>
       <expr><name>BTREE_TEXT_ENCODING</name></expr>,      <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Preserve the text encoding */</comment>
       <expr><name>BTREE_USER_VERSION</name></expr>,       <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Preserve the user version */</comment>
       <expr><name>BTREE_APPLICATION_ID</name></expr>,     <expr><literal type="number">0</literal></expr>,  <comment type="block">/* Preserve the application id */</comment>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SQLITE_TXN_WRITE</name><operator>==</operator><call><name>sqlite3BtreeTxnState</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pOut</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name>SQLITE_TXN_WRITE</name><operator>==</operator><call><name>sqlite3BtreeTxnState</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Copy Btree meta values */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aCopy</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
      <comment type="block">/* GetMeta() and UpdateMeta() cannot fail in this context because
      ** we already have page 1 loaded into cache and marked dirty. */</comment>
      <expr_stmt><expr><call><name>sqlite3BtreeGetMeta</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><name><name>aCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeUpdateMeta</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name><name>aCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>meta</name><operator>+</operator><name><name>aCopy</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>pOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeCopyFile</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeCommit</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_vacuum</name>;</goto></block_content></block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
    <if_stmt><if>if<condition>( <expr><name>pOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3BtreeSetAutoVacuum</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetAutoVacuum</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nRes</name> <operator>=</operator> <call><name>sqlite3BtreeGetRequestedReserve</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nRes</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>end_of_vacuum</name>:</label>
  <comment type="block">/* Restore the original value of db-&gt;flags */</comment>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>iDb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name> <operator>=</operator> <name>saved_mDbFlags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>saved_flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nChange</name></name> <operator>=</operator> <name>saved_nChange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nTotalChange</name></name> <operator>=</operator> <name>saved_nTotalChange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mTrace</name></name> <operator>=</operator> <name>saved_mTrace</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Currently there is an SQL level transaction open on the vacuum
  ** database. No locks are held on any other files (since the main file
  ** was committed at the btree level). So it safe to end the transaction
  ** by manually setting the autoCommit flag to true and detaching the
  ** vacuum database. The vacuum_db journal file is deleted when the pager
  ** is closed by the DETACH.
  */</comment>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>autoCommit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pDb</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3BtreeClose</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* This both clears the schemas and reduces the size of the db-&gt;aDb[]
  ** array. */</comment> 
  <expr_stmt><expr><call><name>sqlite3ResetAllSchemasOfConnection</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* SQLITE_OMIT_VACUUM &amp;&amp; SQLITE_OMIT_ATTACH */</comment>
</unit>
