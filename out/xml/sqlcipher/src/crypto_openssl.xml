<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/crypto_openssl.c"><comment type="block">/*
** SQLCipher
** http://sqlcipher.net
**
** Copyright (c) 2008 - 2013, ZETETIC LLC
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are met:
**     * Redistributions of source code must retain the above copyright
**       notice, this list of conditions and the following disclaimer.
**     * Redistributions in binary form must reproduce the above copyright
**       notice, this list of conditions and the following disclaimer in the
**       documentation and/or other materials provided with the distribution.
**     * Neither the name of the ZETETIC LLC nor the
**       names of its contributors may be used to endorse or promote products
**       derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY ZETETIC LLC ''AS IS'' AND ANY
** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL ZETETIC LLC BE LIABLE FOR ANY
** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
** ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
*/</comment>
<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_CRYPTO_OPENSSL</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlcipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/crypto.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rand.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/evp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/objects.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/hmac.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>openssl_init_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlcipher_openssl_log_errors</name><parameter_list>()</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>ERR_get_error</name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_log_errors: ERR_get_error() returned %lx: %s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>ERR_error_string</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>LIBRESSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>LIBRESSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x20700000L</literal><operator>)</operator></expr></cpp:if>
<function><type><specifier>static</specifier> <name>HMAC_CTX</name> <modifier>*</modifier></type><name>HMAC_CTX_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>HMAC_CTX</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>OPENSSL_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>HMAC_CTX_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ctx</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Per 1.1.0 (https://wiki.openssl.org/index.php/1.1_API_Changes)
   HMAC_CTX_free should call HMAC_CTX_cleanup, then EVP_MD_CTX_Cleanup.
   HMAC_CTX_cleanup internally calls EVP_MD_CTX_cleanup so these
   calls are not needed. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>HMAC_CTX_free</name><parameter_list>(<parameter><decl><type><name>HMAC_CTX</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ctx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>HMAC_CTX_cleanup</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>OPENSSL_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_add_random</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLCIPHER_OPENSSL_NO_MUTEX_RAND</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_add_random: entering SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_RAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_add_random: entered SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>RAND_add</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLCIPHER_OPENSSL_NO_MUTEX_RAND</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_add_random: leaving SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_RAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_add_random: left SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPENSSL_CIPHER</name></cpp:macro> <cpp:value>EVP_aes_256_cbc()</cpp:value></cpp:define>

<comment type="block">/* activate and initialize sqlcipher. Most importantly, this will automatically
   intialize OpenSSL's EVP system if it hasn't already be externally. Note that 
   this function may be called multiple times as new codecs are intiialized. 
   Thus it performs some basic counting to ensure that only the last and final
   sqlcipher_openssl_deactivate() will free the EVP structures. 
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_activate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* initialize openssl and increment the internal init counter
     but only if it hasn't been initalized outside of SQLCipher by this program 
     e.g. on startup */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_activate: entering SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_activate: entered SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal><operator>)</operator></expr></cpp:if>
  <expr_stmt><expr><call><name>ERR_load_crypto_strings</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_FIPS</name></cpp:ifdef>
  <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>FIPS_mode</name><argument_list>()</argument_list></call></expr>)</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>FIPS_mode_set</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_activate: FIPS_mode_set() returned %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>openssl_init_count</name><operator>++</operator></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_activate: leaving SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_activate: left SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* deactivate SQLCipher, most imporantly decremeting the activation count and
   freeing the EVP structures on the final deactivation to ensure that 
   OpenSSL memory is cleaned up */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_deactivate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_deactivate: entering SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_deactivate: entered SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>openssl_init_count</name><operator>--</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_deactivate: leaving SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_deactivate: left SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_openssl_get_provider_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"openssl"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_openssl_get_provider_version</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>OPENSSL_VERSION_TEXT</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* generate a defined number of random bytes */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_random</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="block">/* concurrent calls to RAND_bytes can cause a crash under some openssl versions when a 
     naive application doesn't use CRYPTO_set_locking_callback and
     CRYPTO_THREADID_set_callback to ensure openssl thread safety. 
     This is simple workaround to prevent this common crash
     but a more proper solution is that applications setup platform-appropriate
     thread saftey in openssl externally */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLCIPHER_OPENSSL_NO_MUTEX_RAND</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_random: entering SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_RAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_random: entered SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>RAND_bytes</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLCIPHER_OPENSSL_NO_MUTEX_RAND</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_random: leaving SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_RAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_random: left SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>(<expr><operator>!</operator><name>rc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_random: RAND_bytes() returned %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_hmac</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hmac_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in2_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>OPENSSL_VERSION_NUMBER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x30000000L</literal><operator>)</operator></expr></cpp:if>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>outlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HMAC_CTX</name><modifier>*</modifier></type> <name>hctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>in</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>hctx</name> <operator>=</operator> <call><name>HMAC_CTX_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>hctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: HMAC_CTX_new() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>HMAC_Init_ex</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><call><name>EVP_sha1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: HMAC_Init_ex() with key size %d and EVP_sha1() returned %d"</literal></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>HMAC_Init_ex</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><call><name>EVP_sha256</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: HMAC_Init_ex() with key size %d and EVP_sha256() returned %d"</literal></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>HMAC_Init_ex</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><call><name>EVP_sha512</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: HMAC_Init_ex() with key size %d and EVP_sha512() returned %d"</literal></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: invalid algorithm %d"</literal></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>error</name>;</goto>
  </block_content>}</block></switch>

  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>HMAC_Update</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: HMAC_Update() on 1st input buffer of %d bytes using algorithm %d returned %d"</literal></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name>in2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>HMAC_Update</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in2_sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: HMAC_Update() on 2nd input buffer of %d bytes using algorithm %d returned %d"</literal></expr></argument>, <argument><expr><name>in2_sz</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>HMAC_Final</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: HMAC_Final() using algorithm %d returned %d"</literal></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  <goto>goto <name>cleanup</name>;</goto>

<label><name>error</name>:</label>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
  <if_stmt><if>if<condition>(<expr><name>hctx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>HMAC_CTX_free</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>size_t</name></type> <name>outlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EVP_MAC</name> <modifier>*</modifier></type><name>mac</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EVP_MAC_CTX</name> <modifier>*</modifier></type><name>hctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OSSL_PARAM</name></type> <name><name>sha1</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="string">"digest"</literal></expr>, <expr><name>OSSL_PARAM_UTF8_STRING</name></expr>, <expr><literal type="string">"sha1"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>OSSL_PARAM_END</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OSSL_PARAM</name></type> <name><name>sha256</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="string">"digest"</literal></expr>, <expr><name>OSSL_PARAM_UTF8_STRING</name></expr>, <expr><literal type="string">"sha256"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>OSSL_PARAM_END</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OSSL_PARAM</name></type> <name><name>sha512</name><index>[]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><literal type="string">"digest"</literal></expr>, <expr><name>OSSL_PARAM_UTF8_STRING</name></expr>, <expr><literal type="string">"sha512"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><name>OSSL_PARAM_END</name></expr> }</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>in</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>mac</name> <operator>=</operator> <call><name>EVP_MAC_fetch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"HMAC"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>mac</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: EVP_MAC_fetch for HMAC failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>hctx</name> <operator>=</operator> <call><name>EVP_MAC_CTX_new</name><argument_list>(<argument><expr><name>mac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>hctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: EVP_MAC_CTX_new() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_MAC_init</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>sha1</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: EVP_MAC_init() with key size %d and sha1 returned %d"</literal></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_MAC_init</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>sha256</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: EVP_MAC_init() with key size %d and sha256 returned %d"</literal></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_MAC_init</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>sha512</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: EVP_MAC_init() with key size %d and sha512 returned %d"</literal></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: invalid algorithm %d"</literal></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>error</name>;</goto>
  </block_content>}</block></switch>

  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_MAC_update</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: EVP_MAC_update() on 1st input buffer of %d bytes using algorithm %d returned %d"</literal></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name>in2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_MAC_update</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in2_sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: EVP_MAC_update() on 2nd input buffer of %d bytes using algorithm %d returned %d"</literal></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>error</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_MAC_final</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: 1st EVP_MAC_final() for output length calculation using algorithm %d returned %d"</literal></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_MAC_final</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_hmac: 2nd EVP_MAC_final() using algorithm %d returned %d"</literal></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  <goto>goto <name>cleanup</name>;</goto>

<label><name>error</name>:</label>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>

<label><name>cleanup</name>:</label>
  <if_stmt><if>if<condition>(<expr><name>hctx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EVP_MAC_CTX_free</name><argument_list>(<argument><expr><name>hctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name>mac</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EVP_MAC_free</name><argument_list>(<argument><expr><name>mac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_kdf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salt_sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>workfactor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>PKCS5_PBKDF2_HMAC</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>, <argument><expr><name>pass_sz</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_sz</name></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><call><name>EVP_sha1</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_kdf: PKCS5_PBKDF2_HMAC() for EVP_sha1() workfactor %d and key size %d returned %d"</literal></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>PKCS5_PBKDF2_HMAC</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>, <argument><expr><name>pass_sz</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_sz</name></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><call><name>EVP_sha256</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_kdf: PKCS5_PBKDF2_HMAC() for EVP_sha256() workfactor %d and key size %d returned %d"</literal></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>PKCS5_PBKDF2_HMAC</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>, <argument><expr><name>pass_sz</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_sz</name></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><call><name>EVP_sha512</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_kdf: PKCS5_PBKDF2_HMAC() for EVP_sha512() workfactor %d and key size %d returned %d"</literal></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  <goto>goto <name>cleanup</name>;</goto>
<label><name>error</name>:</label>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_cipher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>tmp_csz</name></decl>, <decl><type ref="prev"/><name>csz</name></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EVP_CIPHER_CTX</name><modifier>*</modifier></type> <name>ectx</name> <init>= <expr><call><name>EVP_CIPHER_CTX_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><name>ectx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_cipher: EVP_CIPHER_CTX_new failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_CipherInit_ex</name><argument_list>(<argument><expr><name>ectx</name></expr></argument>, <argument><expr><name>OPENSSL_CIPHER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_cipher: EVP_CipherInit_ex for mode %d returned %d"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_CIPHER_CTX_set_padding</name><argument_list>(<argument><expr><name>ectx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="block">/* no padding */</comment>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_cipher: EVP_CIPHER_CTX_set_padding 0 returned %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_CipherInit_ex</name><argument_list>(<argument><expr><name>ectx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_cipher: EVP_CipherInit_ex for mode %d returned %d"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_CipherUpdate</name><argument_list>(<argument><expr><name>ectx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_csz</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_cipher: EVP_CipherUpdate returned %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>csz</name> <operator>=</operator> <name>tmp_csz</name></expr>;</expr_stmt>  
  <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>tmp_csz</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>EVP_CipherFinal_ex</name><argument_list>(<argument><expr><name>ectx</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_csz</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_openssl_cipher: EVP_CipherFinal_ex returned %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_openssl_log_errors</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>csz</name> <operator>+=</operator> <name>tmp_csz</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>in_sz</name> <operator>==</operator> <name>csz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  <goto>goto <name>cleanup</name>;</goto>
<label><name>error</name>:</label>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
<label><name>cleanup</name>:</label>
  <if_stmt><if>if<condition>(<expr><name>ectx</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>EVP_CIPHER_CTX_free</name><argument_list>(<argument><expr><name>ectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_openssl_get_cipher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>OBJ_nid2sn</name><argument_list>(<argument><expr><call><name>EVP_CIPHER_nid</name><argument_list>(<argument><expr><name>OPENSSL_CIPHER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_get_key_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>EVP_CIPHER_key_length</name><argument_list>(<argument><expr><name>OPENSSL_CIPHER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_get_iv_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>EVP_CIPHER_iv_length</name><argument_list>(<argument><expr><name>OPENSSL_CIPHER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_get_block_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>EVP_CIPHER_block_size</name><argument_list>(<argument><expr><name>OPENSSL_CIPHER</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_get_hmac_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <return>return <expr><call><name>EVP_MD_size</name><argument_list>(<argument><expr><call><name>EVP_sha1</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <return>return <expr><call><name>EVP_MD_size</name><argument_list>(<argument><expr><call><name>EVP_sha256</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <return>return <expr><call><name>EVP_MD_size</name><argument_list>(<argument><expr><call><name>EVP_sha512</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_ctx_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sqlcipher_openssl_activate</name><argument_list>(<argument><expr><operator>*</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_ctx_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>sqlcipher_openssl_deactivate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_openssl_fips_status</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_FIPS</name></cpp:ifdef>  
  <return>return <expr><call><name>FIPS_mode</name><argument_list>()</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlcipher_openssl_setup</name><parameter_list>(<parameter><decl><type><name>sqlcipher_provider</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>sqlcipher_openssl_activate</name></expr>;</expr_stmt>  
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>deactivate</name></name> <operator>=</operator> <name>sqlcipher_openssl_deactivate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_provider_name</name></name> <operator>=</operator> <name>sqlcipher_openssl_get_provider_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>random</name></name> <operator>=</operator> <name>sqlcipher_openssl_random</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hmac</name></name> <operator>=</operator> <name>sqlcipher_openssl_hmac</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>kdf</name></name> <operator>=</operator> <name>sqlcipher_openssl_kdf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cipher</name></name> <operator>=</operator> <name>sqlcipher_openssl_cipher</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_cipher</name></name> <operator>=</operator> <name>sqlcipher_openssl_get_cipher</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_key_sz</name></name> <operator>=</operator> <name>sqlcipher_openssl_get_key_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_iv_sz</name></name> <operator>=</operator> <name>sqlcipher_openssl_get_iv_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_block_sz</name></name> <operator>=</operator> <name>sqlcipher_openssl_get_block_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_hmac_sz</name></name> <operator>=</operator> <name>sqlcipher_openssl_get_hmac_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ctx_init</name></name> <operator>=</operator> <name>sqlcipher_openssl_ctx_init</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ctx_free</name></name> <operator>=</operator> <name>sqlcipher_openssl_ctx_free</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>add_random</name></name> <operator>=</operator> <name>sqlcipher_openssl_add_random</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fips_status</name></name> <operator>=</operator> <name>sqlcipher_openssl_fips_status</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_provider_version</name></name> <operator>=</operator> <name>sqlcipher_openssl_get_provider_version</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>
</unit>
