<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/crypto.c"><comment type="block">/*
** SQLCipher
** http://sqlcipher.net
** 
** Copyright (c) 2008 - 2013, ZETETIC LLC
** All rights reserved.
** 
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are met:
**     * Redistributions of source code must retain the above copyright
**       notice, this list of conditions and the following disclaimer.
**     * Redistributions in binary form must reproduce the above copyright
**       notice, this list of conditions and the following disclaimer in the
**       documentation and/or other materials provided with the distribution.
**     * Neither the name of the ZETETIC LLC nor the
**       names of its contributors may be used to endorse or promote products
**       derived from this software without specific prior written permission.
** 
** THIS SOFTWARE IS PROVIDED BY ZETETIC LLC ''AS IS'' AND ANY
** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL ZETETIC LLC BE LIABLE FOR ANY
** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
** ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**  
*/</comment>
<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlcipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypto.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_EXT</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlcipher_ext.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>sqlcipher_vdbe_return_string</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value_type</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>codec_set_btree_to_codec_pagesize</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>Db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>page_sz</name></decl>, <decl><type ref="prev"/><name>reserve_sz</name></decl>;</decl_stmt> 

  <expr_stmt><expr><name>page_sz</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_get_pagesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>reserve_sz</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_get_reservesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"codec_set_btree_to_codec_pagesize: sqlite3BtreeSetPageSize() size=%d reserve=%d"</literal></expr></argument>, <argument><expr><name>page_sz</name></expr></argument>, <argument><expr><name>reserve_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"codec_set_btree_to_codec_pagesize: entering database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"codec_set_btree_to_codec_pagesize: entered database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nextPagesize</name></name> <operator>=</operator> <name>page_sz</name></expr>;</expr_stmt> 

  <comment type="block">/* before forcing the page size we need to unset the BTS_PAGESIZE_FIXED flag, else  
     sqliteBtreeSetPageSize will block the change  */</comment>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>btsFlags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BTS_PAGESIZE_FIXED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>page_sz</name></expr></argument>, <argument><expr><name>reserve_sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"codec_set_btree_to_codec_pagesize: sqlite3BtreeSetPageSize returned %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"codec_set_btree_to_codec_pagesize: leaving database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"codec_set_btree_to_codec_pagesize: left database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>codec_set_pass_key</name><parameter_list>(<parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>Db</name></name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>nDb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"codec_set_pass_key: db=%p nDb=%d for_ctx=%d"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>nDb</name></expr></argument>, <argument><expr><name>for_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>codec_ctx</name><operator>*</operator><operator>)</operator> <call><name>sqlcipherPagerGetCodec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>sqlcipher_codec_ctx_set_pass</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>for_ctx</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"codec_set_pass_key: error ocurred fetching codec from pager on db %d"</literal></expr></argument>, <argument><expr><name>nDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"codec_set_pass_key: no btree present on db %d"</literal></expr></argument>, <argument><expr><name>nDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
</block_content>}</block></function> 

<function><type><name>int</name></type> <name>sqlcipher_codec_pragma</name><parameter_list>(<parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>, <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLeft</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRight</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>Db</name></name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>codec_ctx</name><operator>*</operator><operator>)</operator> <call><name>sqlcipherPagerGetCodec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call> <operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"rekey"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_codec_pragma: db=%p iDb=%d pParse=%p zLeft=%s zRight=%s ctx=%p"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_EXT</name></cpp:ifdef>
  <if_stmt><if>if<condition>(<expr><call><name>sqlcipher_ext_pragma</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_codec_pragma: PRAGMA handled by sqlcipher_ext_pragma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_TEST</name></cpp:ifdef>
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_test_on"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><call><name>sqlcipher_get_test_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"fail_encrypt"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TEST_FAIL_ENCRYPT</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else
      if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"fail_decrypt"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TEST_FAIL_DECRYPT</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else
      if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"fail_migrate"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TEST_FAIL_MIGRATE</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlcipher_set_test_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_test_off"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name> <init>= <expr><call><name>sqlcipher_get_test_flags</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"fail_encrypt"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>TEST_FAIL_ENCRYPT</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else
      if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"fail_decrypt"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>TEST_FAIL_DECRYPT</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else
      if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"fail_migrate"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>flags</name> <operator>&amp;=</operator> <operator>~</operator><name>TEST_FAIL_MIGRATE</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlcipher_set_test_flags</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_test"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>flags</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_test_flags</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_test"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_test_rand"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rand</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_set_test_rand</name><argument_list>(<argument><expr><name>rand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rand</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_test_rand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_test_rand"</literal></expr></argument>, <argument><expr><name>rand</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_fips_status"</literal></expr></argument>)</argument_list></call><operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fips_mode_status</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_fips_status</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_fips_status"</literal></expr></argument>, <argument><expr><name>fips_mode_status</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_store_pass"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zRight</name></expr> )</condition> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>deprecation</name> <init>= <expr><literal type="string">"PRAGMA cipher_store_pass is deprecated, please remove from use"</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_codec_set_store_pass</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>sqlite3GetBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_store_pass"</literal></expr></argument>, <argument><expr><name>deprecation</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_WARNING</name></expr></argument>, <argument><expr><name>deprecation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_store_pass"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>zRight</name></expr> )</condition> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>store_pass_value</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_get_store_pass</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_store_pass"</literal></expr></argument>, <argument><expr><name>store_pass_value</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_profile"</literal></expr></argument>)</argument_list></call><operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zRight</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>profile_status</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_cipher_profile</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_profile"</literal></expr></argument>, <argument><expr><name>profile_status</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_add_random"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zRight</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>add_random_status</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_add_random</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_add_random"</literal></expr></argument>, <argument><expr><name>add_random_status</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_migrate"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>status</name> <init>= <expr><call><name>sqlcipher_codec_ctx_migrate</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>migrate_status</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_migrate"</literal></expr></argument>, <argument><expr><name>migrate_status</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>status</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_codec_pragma: error occurred during cipher_migrate: %d"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_provider"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_provider"</literal></expr></argument>,
                                              <argument><expr><call><name>sqlcipher_codec_get_cipher_provider</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_provider_version"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>zRight</name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_provider_version"</literal></expr></argument>,
                                              <argument><expr><call><name>sqlcipher_codec_get_provider_version</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_version"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>zRight</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_version"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_version</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name> <init>= <expr><literal type="string">"PRAGMA cipher is no longer supported."</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_WARNING</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_cipher</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"rekey_cipher"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zRight</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name> <init>= <expr><literal type="string">"PRAGMA rekey_cipher is no longer supported."</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"rekey_cipher"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_WARNING</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_default_kdf_iter"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* change default KDF iterations */</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>kdf_iter</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_default_kdf_iter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_kdf_iter"</literal></expr></argument>, <argument><expr><name>kdf_iter</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"kdf_iter"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_kdf_iter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* change of RW PBKDF2 iteration */</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>kdf_iter</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_kdf_iter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"kdf_iter"</literal></expr></argument>, <argument><expr><name>kdf_iter</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"fast_kdf_iter"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>deprecation</name> <init>= <expr><literal type="string">"PRAGMA fast_kdf_iter is deprecated, please remove from use"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_fast_kdf_iter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* change of RW PBKDF2 iteration */</comment>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"fast_kdf_iter"</literal></expr></argument>, <argument><expr><name>deprecation</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_WARNING</name></expr></argument>, <argument><expr><name>deprecation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fast_kdf_iter</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_fast_kdf_iter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"fast_kdf_iter"</literal></expr></argument>, <argument><expr><name>fast_kdf_iter</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"rekey_kdf_iter"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zRight</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name> <init>= <expr><literal type="string">"PRAGMA rekey_kdf_iter is no longer supported."</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"rekey_kdf_iter"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_WARNING</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_page_size"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_pagesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>codec_set_btree_to_codec_pagesize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>page_size</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_pagesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_page_size"</literal></expr></argument>, <argument><expr><name>page_size</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_default_page_size"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_set_default_pagesize</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_page_size</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_default_pagesize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_page_size"</literal></expr></argument>, <argument><expr><name>default_page_size</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_default_use_hmac"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><call><name>sqlite3GetBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>default_use_hmac</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_default_use_hmac</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_use_hmac"</literal></expr></argument>, <argument><expr><name>default_use_hmac</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_use_hmac"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_use_hmac</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>sqlite3GetBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="block">/* since the use of hmac has changed, the page size may also change */</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>codec_set_btree_to_codec_pagesize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hmac_flag</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_use_hmac</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_use_hmac"</literal></expr></argument>, <argument><expr><name>hmac_flag</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_hmac_pgno"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>zRight</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>deprecation</name> <init>= <expr><literal type="string">"PRAGMA cipher_hmac_pgno is deprecated, please remove from use"</literal></expr></init></decl>;</decl_stmt>
        <comment type="block">/* clear both pgno endian flags */</comment>
        <if_stmt><if>if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"le"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_codec_ctx_unset_flag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CIPHER_FLAG_BE_PGNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_flag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CIPHER_FLAG_LE_PGNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"be"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_codec_ctx_unset_flag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CIPHER_FLAG_LE_PGNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_flag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CIPHER_FLAG_BE_PGNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"native"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_codec_ctx_unset_flag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CIPHER_FLAG_LE_PGNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_codec_ctx_unset_flag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CIPHER_FLAG_BE_PGNO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_hmac_pgno"</literal></expr></argument>, <argument><expr><name>deprecation</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_WARNING</name></expr></argument>, <argument><expr><name>deprecation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if<condition>(<expr><call><name>sqlcipher_codec_ctx_get_flag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CIPHER_FLAG_LE_PGNO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_hmac_pgno"</literal></expr></argument>, <argument><expr><literal type="string">"le"</literal></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlcipher_codec_ctx_get_flag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CIPHER_FLAG_BE_PGNO</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_hmac_pgno"</literal></expr></argument>, <argument><expr><literal type="string">"be"</literal></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_hmac_pgno"</literal></expr></argument>, <argument><expr><literal type="string">"native"</literal></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_hmac_salt_mask"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>zRight</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>deprecation</name> <init>= <expr><literal type="string">"PRAGMA cipher_hmac_salt_mask is deprecated, please remove from use"</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument> ,<argument><expr><literal type="string">"x'"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zRight</name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>cipher_hex2bin</name><argument_list>(<argument><expr><name>hex</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_hmac_salt_mask</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_hmac_salt_mask"</literal></expr></argument>, <argument><expr><name>deprecation</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_WARNING</name></expr></argument>, <argument><expr><name>deprecation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hmac_salt_mask</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_hmac_salt_mask</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_hmac_salt_mask"</literal></expr></argument>, <argument><expr><name>hmac_salt_mask</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else 
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_plaintext_header_size"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="block">/* deliberately ignore result code, if size is invalid it will be set to -1
           and trip the error later in the codec */</comment>
        <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_plaintext_header_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>size</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_plaintext_header_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_plaintext_header_size"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else 
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_default_plaintext_header_size"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_set_default_plaintext_header_size</name><argument_list>(<argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>size</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_default_plaintext_header_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_plaintext_header_size"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_salt"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>zRight</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument> ,<argument><expr><literal type="string">"x'"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>FILE_HEADER_SZ</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>FILE_HEADER_SZ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hex</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>zRight</name><operator>+</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>cipher_hex2bin</name><argument_list>(<argument><expr><name>hex</name></expr></argument>,<argument><expr><name>FILE_HEADER_SZ</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_kdf_salt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>FILE_HEADER_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>salt</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>hexsalt</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><operator>(</operator><name>FILE_HEADER_SZ</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_get_kdf_salt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>salt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>cipher_bin2hex</name><argument_list>(<argument><expr><name>salt</name></expr></argument>, <argument><expr><name>FILE_HEADER_SZ</name></expr></argument>, <argument><expr><name>hexsalt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_salt"</literal></expr></argument>, <argument><expr><name>hexsalt</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>hexsalt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_hmac_algorithm"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>zRight</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_hmac_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA256_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_hmac_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA512_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_hmac_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>codec_set_btree_to_codec_pagesize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>algorithm</name> <init>= <expr><call><name>sqlcipher_codec_ctx_get_hmac_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA1</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_hmac_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA256</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_hmac_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA256_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA512</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_hmac_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA512_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else 
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_default_hmac_algorithm"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>zRight</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_set_default_hmac_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA256_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_set_default_hmac_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_HMAC_SHA256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA512_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_set_default_hmac_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_HMAC_SHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>algorithm</name> <init>= <expr><call><name>sqlcipher_get_default_hmac_algorithm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA1</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_hmac_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA256</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_hmac_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA256_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA512</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_hmac_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA512_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else 
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_kdf_algorithm"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>zRight</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>algorithm</name> <init>= <expr><call><name>sqlcipher_codec_ctx_get_kdf_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_kdf_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA256</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_kdf_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA512</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_kdf_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else 
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_default_kdf_algorithm"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>zRight</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_set_default_kdf_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_set_default_kdf_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA256</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_set_default_kdf_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>algorithm</name> <init>= <expr><call><name>sqlcipher_get_default_kdf_algorithm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_kdf_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA256</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_kdf_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA512</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_default_kdf_algorithm"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL</name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_compatibility"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if<condition>(<expr><name>zRight</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

        <switch>switch<condition>(<expr><name>version</name></expr>)</condition> <block>{<block_content>
          <case>case <expr><literal type="number">1</literal></expr>:</case> 
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_pagesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_hmac_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_iter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_use_hmac</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

          <case>case <expr><literal type="number">2</literal></expr>:</case> 
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_pagesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_hmac_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_iter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_use_hmac</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

          <case>case <expr><literal type="number">3</literal></expr>:</case>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_pagesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_hmac_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_iter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">64000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_use_hmac</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>

          <default>default:</default>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_pagesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_hmac_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_iter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">256000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_use_hmac</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <break>break;</break>
        </block_content>}</block></switch>  

        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>codec_set_btree_to_codec_pagesize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt> 
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else 
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_default_compatibility"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>zRight</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>version</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
      <switch>switch<condition>(<expr><name>version</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">1</literal></expr>:</case> 
          <expr_stmt><expr><call><name>sqlcipher_set_default_pagesize</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_hmac_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_kdf_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        <case>case <expr><literal type="number">2</literal></expr>:</case> 
          <expr_stmt><expr><call><name>sqlcipher_set_default_pagesize</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_hmac_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_kdf_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        <case>case <expr><literal type="number">3</literal></expr>:</case>
          <expr_stmt><expr><call><name>sqlcipher_set_default_pagesize</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_hmac_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_kdf_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">64000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>

        <default>default:</default>
          <expr_stmt><expr><call><name>sqlcipher_set_default_pagesize</name><argument_list>(<argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_hmac_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_HMAC_SHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_kdf_algorithm</name><argument_list>(<argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">256000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>  
    </block_content>}</block></if></if_stmt> 
  </block_content>}</block></if><if type="elseif">else 
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_memory_security"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zRight</name></expr> )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_set_mem_security</name><argument_list>(<argument><expr><call><name>sqlite3GetBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>on</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_mem_security</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_memory_security"</literal></expr></argument>, <argument><expr><name>on</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_settings"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>algorithm</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pragma</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA kdf_iter = %d;"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_kdf_iter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_page_size = %d;"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_pagesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_use_hmac = %d;"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_use_hmac</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_plaintext_header_size = %d;"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_codec_ctx_get_plaintext_header_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>algorithm</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_get_hmac_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA1</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_hmac_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA256</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_hmac_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA256_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA512</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_hmac_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA512_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>algorithm</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_get_kdf_algorithm</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_kdf_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA256</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_kdf_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA512</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_kdf_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_default_settings"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>algorithm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pragma</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_kdf_iter = %d;"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_default_kdf_iter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_page_size = %d;"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_default_pagesize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_use_hmac = %d;"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_default_use_hmac</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_plaintext_header_size = %d;"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_get_default_plaintext_header_size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>algorithm</name> <operator>=</operator> <call><name>sqlcipher_get_default_hmac_algorithm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pragma</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA1</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_hmac_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA1_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA256</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_hmac_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA256_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_HMAC_SHA512</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_hmac_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_HMAC_SHA512_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>algorithm</name> <operator>=</operator> <call><name>sqlcipher_get_default_kdf_algorithm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pragma</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA1</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_kdf_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA1_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA256</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_kdf_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA256_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>algorithm</name> <operator>==</operator> <name>SQLCIPHER_PBKDF2_HMAC_SHA512</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pragma</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA cipher_default_kdf_algorithm = %s;"</literal></expr></argument>, <argument><expr><name>SQLCIPHER_PBKDF2_HMAC_SHA512_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"pragma"</literal></expr></argument>, <argument><expr><name>pragma</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr><literal type="string">"cipher_integrity_check"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_codec_ctx_integrity_check</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_integrity_check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_log_level"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zRight</name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>level</name> <init>= <expr><name>SQLCIPHER_LOG_NONE</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>,      <argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>SQLCIPHER_LOG_ERROR</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"WARN"</literal></expr></argument> )</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>SQLCIPHER_LOG_WARN</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"INFO"</literal></expr></argument> )</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>SQLCIPHER_LOG_INFO</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"DEBUG"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>SQLCIPHER_LOG_DEBUG</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if<condition>(<expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><literal type="string">"TRACE"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>level</name> <operator>=</operator> <name>SQLCIPHER_LOG_TRACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlcipher_set_log_level</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_log_level"</literal></expr></argument>, <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else
  if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><literal type="string">"cipher_log"</literal></expr></argument>)</argument_list></call><operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>zRight</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>sqlcipher_set_log</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlcipher_vdbe_return_string</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cipher_log"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* these constants are used internally within SQLite's pager.c to differentiate between
   operations on the main database or journal pages. This is important in the context
   of a rekey operations, where the journal must be written using the original key 
   material (to allow a transactional rollback), while the new database pages are being
   written with the new key material*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_READ_OP</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_WRITE_OP</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODEC_JOURNAL_OP</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<comment type="block">/*
 * sqlite3Codec can be called in multiple modes.
 * encrypt mode - expected to return a pointer to the 
 *   encrypted data without altering pData.
 * decrypt mode - expected to return a pointer to pData, with
 *   the data decrypted in the input buffer
 */</comment>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>sqlite3Codec</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iCtx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>Pgno</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>codec_ctx</name> <operator>*</operator><operator>)</operator> <name>iCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>page_sz</name> <init>= <expr><call><name>sqlcipher_codec_ctx_get_pagesize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>sqlcipher_codec_ctx_get_data</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>plaintext_header_sz</name> <init>= <expr><call><name>sqlcipher_codec_ctx_get_plaintext_header_size</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cctx</name> <init>= <expr><name>CIPHER_READ_CTX</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlite3Codec: pgno=%d, mode=%d, page_sz=%d"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>page_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_EXT</name></cpp:ifdef>
  <if_stmt><if>if<condition>(<expr><call><name>sqlcipher_license_check</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* call to derive keys if not present yet */</comment>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_key_derive</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
   <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3Codec: error occurred during key derivation: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
   <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* if the plaintext_header_size is negative that means an invalid size was set via 
     PRAGMA. We can't set the error state on the pager at that point because the pager
     may not be open yet. However, this is a fatal error state, so abort the codec */</comment>
  <if_stmt><if>if<condition>(<expr><name>plaintext_header_sz</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3Codec: error invalid plaintext_header_sz: %d"</literal></expr></argument>, <argument><expr><name>plaintext_header_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name>pgno</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* adjust starting pointers in data page for header offset on first page*/</comment>   
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <ternary><condition><expr><name>plaintext_header_sz</name></expr> ?</condition><then> <expr><name>plaintext_header_sz</name></expr> </then><else>: <expr><name>FILE_HEADER_SZ</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlite3Codec: switch mode=%d offset=%d"</literal></expr></argument>,  <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>CODEC_READ_OP</name></expr>:</case> <comment type="block">/* decrypt */</comment>
      <if_stmt><if>if<condition>(<expr><name>pgno</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* copy initial part of file header or SQLite magic to buffer */</comment> 
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><ternary><condition><expr><name>plaintext_header_sz</name></expr> ?</condition><then> <expr><name>pData</name></expr> </then><else>: <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>SQLITE_FILE_HEADER</name></expr></else></ternary></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_page_cipher</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cctx</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>CIPHER_DECRYPT</name></expr></argument>, <argument><expr><name>page_sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>pData</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_TEST</name></cpp:ifdef>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>sqlcipher_get_test_flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>TEST_FAIL_DECRYPT</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqlcipher_get_test_fail</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"simulating decryption failure for pgno=%d, mode=%d, page_sz=%d\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>page_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* failure to decrypt a page is considered a permanent error and will render the pager unusable
           in order to prevent inconsistent data being loaded into page cache */</comment>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3Codec: error decrypting page %d data: %d"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_memset</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator> <name>buffer</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>page_sz</name><operator>-</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>page_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* copy buffer data back to pData and return */</comment>
      <return>return <expr><name>pData</name></expr>;</return>
      <break>break;</break>

    <case>case <expr><name>CODEC_WRITE_OP</name></expr>:</case> <comment type="block">/* encrypt database page, operate on write context and fall through to case 7, so the write context is used*/</comment>
      <expr_stmt><expr><name>cctx</name> <operator>=</operator> <name>CIPHER_WRITE_CTX</name></expr>;</expr_stmt> 

    <case>case <expr><name>CODEC_JOURNAL_OP</name></expr>:</case> <comment type="block">/* encrypt journal page, operate on read context use to get the original page data from the database */</comment> 
      <if_stmt><if>if<condition>(<expr><name>pgno</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> <comment type="block">/* copy initial part of file header or salt to buffer */</comment> 
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>kdf_salt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 
        <comment type="block">/* retrieve the kdf salt */</comment>
        <if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_get_kdf_salt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kdf_salt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3Codec: error retrieving salt: %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><ternary><condition><expr><name>plaintext_header_sz</name></expr> ?</condition><then> <expr><name>pData</name></expr> </then><else>: <expr><name>kdf_salt</name></expr></else></ternary></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_page_cipher</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>cctx</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>CIPHER_ENCRYPT</name></expr></argument>, <argument><expr><name>page_sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>pData</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_TEST</name></cpp:ifdef>
      <if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>sqlcipher_get_test_flags</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>TEST_FAIL_ENCRYPT</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqlcipher_get_test_fail</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"simulating encryption failure for pgno=%d, mode=%d, page_sz=%d\n"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>page_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* failure to encrypt a page is considered a permanent error and will render the pager unusable
           in order to prevent corrupted pages from being written to the main databased when using WAL */</comment>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3Codec: error encrypting page %d data: %d"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_memset</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>buffer</name><operator>+</operator><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>page_sz</name><operator>-</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>buffer</name></expr>;</return> <comment type="block">/* return persistent buffer data, pData remains intact */</comment>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3Codec: error unsupported codec mode %d"</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_error</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* unsupported mode, set error */</comment>
      <return>return <expr><name>pData</name></expr>;</return>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3FreeCodecArg</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCodecArg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>codec_ctx</name> <operator>*</operator><operator>)</operator> <name>pCodecArg</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><name>pCodecArg</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlcipher_codec_ctx_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* wipe and free allocated memory for the context */</comment>
  <expr_stmt><expr><call><name>sqlcipher_deactivate</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* cleanup related structures, OpenSSL etc, when codec is detatched */</comment>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlcipherCodecAttach</name><parameter_list>(<parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>Db</name></name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>nDb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: db=%p, nDb=%d"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>nDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>nKey</name> <operator>&amp;&amp;</operator> <name>zKey</name> <operator>&amp;&amp;</operator> <name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

    <comment type="block">/* check if the sqlite3_file is open, and if not force handle to NULL */</comment> 
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pMethods</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fd</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: calling sqlcipher_activate()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_activate</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="block">/* perform internal initialization for sqlcipher */</comment>

    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: entering database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: entered database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_EXT</name></cpp:ifdef>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3_set_authorizer</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>sqlcipher_license_authorizer</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* point the internal codec argument against the contet to be prepared */</comment>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: calling sqlcipher_codec_ctx_init()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* initialization failed, do not attach potentially corrupted context */</comment>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: context initialization failed forcing error state with rc=%d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* force an error at the pager level, such that even the upstream caller ignores the return code
         the pager will be in an error state and will process no further operations */</comment>
      <expr_stmt><expr><call><name>sqlite3pager_error</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>errCode</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: leaving database mutex %p (early return on rc=%d)"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: left database mutex %p (early return on rc=%d)"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: calling sqlcipherPagerSetCodec()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipherPagerSetCodec</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sqlite3Codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>sqlite3FreeCodecArg</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: calling codec_set_btree_to_codec_pagesize()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>codec_set_btree_to_codec_pagesize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* force secure delete. This has the benefit of wiping internal data when deleted
       and also ensures that all pages are written to disk (i.e. not skipped by
       sqlite3PagerDontWrite optimizations) */</comment> 
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: calling sqlite3BtreeSecureDelete()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3BtreeSecureDelete</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <comment type="block">/* if fd is null, then this is an in-memory database and
       we dont' want to overwrite the AutoVacuum settings
       if not null, then set to the default */</comment>
    <if_stmt><if>if<condition>(<expr><name>fd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: calling sqlite3BtreeSetAutoVacuum()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeSetAutoVacuum</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>SQLITE_DEFAULT_AUTOVACUUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: leaving database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecAttach: left database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlcipher_find_db_index</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>db_index</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><name>zDb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>db_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>db_index</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>db_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>Db</name></name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>db_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>zDbSName</name></name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>db_index</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3_activate_see</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>in</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="block">/* do nothing, security enhancements are always active */</comment>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3_key</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_key: db=%p"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_key_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3_key_v2</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_key_v2: db=%p zDb=%s"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* attach key if db and pKey are not null and nKey is &gt; 0 */</comment>
  <if_stmt><if>if<condition>(<expr><name>db</name> <operator>&amp;&amp;</operator> <name>pKey</name> <operator>&amp;&amp;</operator> <name>nKey</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>db_index</name> <init>= <expr><call><name>sqlcipher_find_db_index</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>sqlcipherCodecAttach</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db_index</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</return> 
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_key_v2: no key provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3_rekey</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey: db=%p"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_rekey_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* sqlite3_rekey_v2
** Given a database, this will reencrypt the database using a new key.
** There is only one possible modes of operation - to encrypt a database
** that is already encrpyted. If the database is not already encrypted
** this should do nothing
** The proposed logic for this function follows:
** 1. Determine if the database is already encryptped
** 2. If there is NOT already a key present do nothing
** 3. If there is a key present, re-encrypt the database with the new key
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_rekey_v2</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: db=%p zDb=%s"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>db</name> <operator>&amp;&amp;</operator> <name>pKey</name> <operator>&amp;&amp;</operator> <name>nKey</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>db_index</name> <init>= <expr><call><name>sqlcipher_find_db_index</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>Db</name></name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>db_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: database zDb=%p db_index:%d"</literal></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>db_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>page_count</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Pgno</name></type> <name>pgno</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PgHdr</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>codec_ctx</name><operator>*</operator><operator>)</operator> <call><name>sqlcipherPagerGetCodec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     
      <if_stmt><if>if<condition>(<expr><name>ctx</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 
        <comment type="block">/* there was no codec attached to this database, so this should do nothing! */</comment> 
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: no codec attached to db, exiting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>SQLITE_OK</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: entering database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: entered database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>codec_set_pass_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db_index</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>CIPHER_WRITE_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <comment type="block">/* do stuff here to rewrite the database 
      ** 1. Create a transaction on the database
      ** 2. Iterate through each page, reading it and then writing it.
      ** 3. If that goes ok then commit and put ctx-&gt;rekey into ctx-&gt;key
      **    note: don't deallocate rekey since it may be used in a subsequent iteration 
      */</comment>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeBeginTrans</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* begin write transaction */</comment>
      <expr_stmt><expr><call><name>sqlite3PagerPagecount</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>pgno</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>rc</name> <operator>==</operator> <name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>pgno</name> <operator>&lt;=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>page_count</name></expr>;</condition> <incr><expr><name>pgno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <comment type="block">/* pgno's start at 1 see pager.c:pagerAcquire */</comment>
        <if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>sqlite3pager_is_sj_pgno</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> <comment type="block">/* skip this page (see pager.c:pagerAcquire for reasoning) */</comment>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerGet</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content> <comment type="block">/* write page see pager_incr_changecounter for example */</comment>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerWrite</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>sqlite3PagerUnref</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
             <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: error %d occurred writing page %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
            </block_content>}</block></else></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
             <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: error %d occurred getting page %d"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt> 
      </block_content>}</block></for>

      <comment type="block">/* if commit was successful commit and copy the rekey data to current key, else rollback to release locks */</comment>
      <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content> 
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: committing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeCommit</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>sqlcipher_codec_key_copy</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>CIPHER_WRITE_CTX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: rollback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3BtreeRollback</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>SQLITE_ABORT_ROLLBACK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: leaving database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: left database mutex %p"</literal></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"sqlite3_rekey_v2: no key provided"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlcipherCodecGetKey</name><parameter_list>(<parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nDb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>Db</name></name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>nDb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"sqlcipherCodecGetKey:db=%p, nDb=%d"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>nDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr> )</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>codec_ctx</name><operator>*</operator><operator>)</operator> <call><name>sqlcipherPagerGetCodec</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pPager</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <if_stmt><if>if<condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/* pass back the keyspec from the codec, unless PRAGMA cipher_store_pass
         is set or keyspec has not yet been derived, in which case pass
         back the password key material */</comment>
      <expr_stmt><expr><call><name>sqlcipher_codec_get_keyspec</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><call><name>sqlcipher_codec_get_store_pass</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><name>zKey</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_codec_get_pass</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>zKey</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>nKey</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Implementation of an "export" function that allows a caller
 * to duplicate the main database to an attached database. This is intended
 * as a conveneince for users who need to:
 * 
 *   1. migrate from an non-encrypted database to an encrypted database
 *   2. move from an encrypted database to a non-encrypted database
 *   3. convert beween the various flavors of encrypted databases.  
 *
 * This implementation is based heavily on the procedure and code used
 * in vacuum.c, but is exposed as a function that allows export to any
 * named attached database.
 */</comment>

<comment type="block">/*
** Finalize a prepared statement.  If there was an error, store the
** text of the error message in *pzErrMsg.  Return the result code.
** 
** Based on vacuumFinalize from vacuum.c
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_finalize</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3VdbeFinalize</name><argument_list>(<argument><expr><operator>(</operator><name>Vdbe</name><operator>*</operator><operator>)</operator><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Execute zSql on database db. Return an error code.
** 
** Based on execSql from vacuum.c
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_execSql</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <macro><name>VVA_ONLY</name><argument_list>( <argument>int rc;</argument> )</argument_list></macro>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zSql</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <macro><name>VVA_ONLY</name><argument_list>( <argument>rc =</argument> )</argument_list></macro> <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlcipher_finalize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Execute zSql on database db. The statement returns exactly
** one column. Execute this as SQL on the same database.
** 
** Based on execExecSql from vacuum.c
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_execExecSql</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <while>while<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlcipher_finalize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><call><name>sqlcipher_finalize</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * copy database and schema from the main database to an attached database
 * 
 * Based on sqlite3RunVacuum from vacuum.c
*/</comment>
<function><type><name>void</name></type> <name>sqlcipher_exportFunc</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>targetDb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>sourceDb</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>int</name></type> <name>targetDb_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>saved_flags</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>        <comment type="block">/* Saved value of the db-&gt;flags */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>saved_mDbFlags</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name></expr></init></decl>;</decl_stmt>        <comment type="block">/* Saved value of the db-&gt;mDbFlags */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>saved_nChange</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>nChange</name></name></expr></init></decl>;</decl_stmt>      <comment type="block">/* Saved value of db-&gt;nChange */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>saved_nTotalChange</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>nTotalChange</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* Saved value of db-&gt;nTotalChange */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>saved_mTrace</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>mTrace</name></name></expr></init></decl>;</decl_stmt>        <comment type="block">/* Saved value of db-&gt;mTrace */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>     <comment type="block">/* Return code from service routines */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>         <comment type="block">/* SQL statements */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pzErrMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>argc</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pzErrMsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"invalid number of arguments (%d) passed to sqlcipher_export"</literal></expr></argument>, <argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end_of_export</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SQLITE_NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pzErrMsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"target database can't be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end_of_export</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>targetDb</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><name>sourceDb</name> <operator>=</operator> <literal type="string">"main"</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SQLITE_NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pzErrMsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"target database can't be NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>end_of_export</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>sourceDb</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>


  <comment type="block">/* if the name of the target is not main, but the index returned is zero 
     there is a mismatch and we should not proceed */</comment>
  <expr_stmt><expr><name>targetDb_idx</name> <operator>=</operator>  <call><name>sqlcipher_find_db_index</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>targetDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>targetDb_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>targetDb</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>targetDb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pzErrMsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"unknown database %s"</literal></expr></argument>, <argument><expr><name>targetDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>end_of_export</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>iDb</name></name> <operator>=</operator> <name>targetDb_idx</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SQLITE_WriteSchema</name> <operator>|</operator> <name>SQLITE_IgnoreChecks</name></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name> <operator>|=</operator> <name>DBFLAG_PreferBuiltin</name> <operator>|</operator> <name>DBFLAG_Vacuum</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>u64</name><operator>)</operator><operator>(</operator><name>SQLITE_ForeignKeys</name> <operator>|</operator> <name>SQLITE_ReverseOrder</name> <operator>|</operator> <name>SQLITE_Defensive</name> <operator>|</operator> <name>SQLITE_CountRows</name><operator>)</operator></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mTrace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* Query the schema of the main database. Create a mirror schema
  ** in the temporary database.
  */</comment>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
    <argument><expr><literal type="string">"SELECT sql "</literal>
    <literal type="string">"  FROM %s.sqlite_schema WHERE type='table' AND name!='sqlite_sequence'"</literal>
    <literal type="string">"   AND rootpage&gt;0"</literal></expr></argument>
  , <argument><expr><name>sourceDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zSql</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_NOMEM</name></expr> </then><else>: <expr><call><name>sqlcipher_execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pzErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> 
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_export</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
    <argument><expr><literal type="string">"SELECT sql "</literal>
    <literal type="string">"  FROM %s.sqlite_schema WHERE sql LIKE 'CREATE INDEX %%' "</literal></expr></argument>
  , <argument><expr><name>sourceDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zSql</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_NOMEM</name></expr> </then><else>: <expr><call><name>sqlcipher_execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pzErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> 
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_export</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
    <argument><expr><literal type="string">"SELECT sql "</literal>
    <literal type="string">"  FROM %s.sqlite_schema WHERE sql LIKE 'CREATE UNIQUE INDEX %%'"</literal></expr></argument>
  , <argument><expr><name>sourceDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zSql</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_NOMEM</name></expr> </then><else>: <expr><call><name>sqlcipher_execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pzErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> 
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_export</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Loop through the tables in the main database. For each, do
  ** an "INSERT INTO rekey_db.xxx SELECT * FROM main.xxx;" to copy
  ** the contents to the temporary database.
  */</comment>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
    <argument><expr><literal type="string">"SELECT 'INSERT INTO %s.' || quote(name) "</literal>
    <literal type="string">"|| ' SELECT * FROM %s.' || quote(name) || ';'"</literal>
    <literal type="string">"FROM %s.sqlite_schema "</literal>
    <literal type="string">"WHERE type = 'table' AND name!='sqlite_sequence' "</literal>
    <literal type="string">"  AND rootpage&gt;0"</literal></expr></argument>
  , <argument><expr><name>targetDb</name></expr></argument>, <argument><expr><name>sourceDb</name></expr></argument>, <argument><expr><name>sourceDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zSql</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_NOMEM</name></expr> </then><else>: <expr><call><name>sqlcipher_execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pzErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> 
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_export</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy over the contents of the sequence table
  */</comment>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
    <argument><expr><literal type="string">"SELECT 'INSERT INTO %s.' || quote(name) "</literal>
    <literal type="string">"|| ' SELECT * FROM %s.' || quote(name) || ';' "</literal>
    <literal type="string">"FROM %s.sqlite_schema WHERE name=='sqlite_sequence';"</literal></expr></argument>
  , <argument><expr><name>targetDb</name></expr></argument>, <argument><expr><name>sourceDb</name></expr></argument>, <argument><expr><name>targetDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zSql</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_NOMEM</name></expr> </then><else>: <expr><call><name>sqlcipher_execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pzErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> 
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_export</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Copy the triggers, views, and virtual tables from the main database
  ** over to the temporary database.  None of these objects has any
  ** associated storage, so all we have to do is copy their entries
  ** from the SQLITE_MASTER table.
  */</comment>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
    <argument><expr><literal type="string">"INSERT INTO %s.sqlite_schema "</literal>
    <literal type="string">"  SELECT type, name, tbl_name, rootpage, sql"</literal>
    <literal type="string">"    FROM %s.sqlite_schema"</literal>
    <literal type="string">"   WHERE type='view' OR type='trigger'"</literal>
    <literal type="string">"      OR (type='table' AND rootpage=0)"</literal></expr></argument>
  , <argument><expr><name>targetDb</name></expr></argument>, <argument><expr><name>sourceDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>zSql</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_NOMEM</name></expr> </then><else>: <expr><call><name>sqlcipher_execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pzErrMsg</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt> 
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>end_of_export</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<label><name>end_of_export</name>:</label>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>iDb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>saved_flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name> <operator>=</operator> <name>saved_mDbFlags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nChange</name></name> <operator>=</operator> <name>saved_nChange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nTotalChange</name></name> <operator>=</operator> <name>saved_nTotalChange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mTrace</name></name> <operator>=</operator> <name>saved_mTrace</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>zSql</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name>rc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>pzErrMsg</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>sqlite3ErrStr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>
</unit>
