<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/trigger.c"><comment type="block">/*
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the implementation for TRIGGERs
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifndef>
<comment type="block">/*
** Delete a linked list of TriggerStep structures.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3DeleteTriggerStep</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pTriggerStep</name></decl></parameter>)</parameter_list><block>{<block_content>
  <while>while<condition>( <expr><name>pTriggerStep</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>TriggerStep</name> <modifier>*</modifier></type> <name>pTmp</name> <init>= <expr><name>pTriggerStep</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pTriggerStep</name> <operator>=</operator> <name><name>pTriggerStep</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTmp</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3ExprListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTmp</name><operator>-&gt;</operator><name>pExprList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3SelectDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTmp</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3IdListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTmp</name><operator>-&gt;</operator><name>pIdList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3UpsertDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTmp</name><operator>-&gt;</operator><name>pUpsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3SrcListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTmp</name><operator>-&gt;</operator><name>pFrom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTmp</name><operator>-&gt;</operator><name>zSpan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
** Given table pTab, return a list of all the triggers attached to 
** the table. The list is connected by Trigger.pNext pointers.
**
** All of the triggers on pTab that are in the same database as pTab
** are already attached to pTab-&gt;pTrigger.  But there might be additional
** triggers on pTab in the TEMP schema.  This routine prepends all
** TEMP triggers on pTab to the beginning of the pTab-&gt;pTrigger list
** and returns the combined list.
**
** To state it another way:  This routine returns a list of all triggers
** that fire off of pTab.  The list will include any TEMP triggers on
** pTab as well as the triggers lised in pTab-&gt;pTrigger.
*/</comment>
<function><type><name>Trigger</name> <modifier>*</modifier></type><name>sqlite3TriggerList</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>pTmpSchema</name></decl>;</decl_stmt>       <comment type="block">/* Schema of the pTab table */</comment>
  <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pList</name></decl>;</decl_stmt>           <comment type="block">/* List of triggers to return */</comment>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>              <comment type="block">/* Loop variable for TEMP triggers */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>disableTriggers</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTmpSchema</name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTmpSchema</name><operator>-&gt;</operator><name>trigHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pList</name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pTrigger</name></name></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrig</name> <init>= <expr><operator>(</operator><name>Trigger</name> <operator>*</operator><operator>)</operator><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pTrig</name><operator>-&gt;</operator><name>pTabSchema</name></name><operator>==</operator><name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name></name>
     <operator>&amp;&amp;</operator> <name><name>pTrig</name><operator>-&gt;</operator><name>table</name></name>
     <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name><name>pTrig</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call>
     <operator>&amp;&amp;</operator> <name><name>pTrig</name><operator>-&gt;</operator><name>pTabSchema</name></name><operator>!=</operator><name>pTmpSchema</name></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pTrig</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pList</name> <operator>=</operator> <name>pTrig</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pTrig</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_RETURNING</name></expr> )</condition><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>pVtabCtx</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>bReturning</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pParse</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>pReturning</name><operator>-&gt;</operator><name>retTrig</name></name><operator>)</operator> <operator>==</operator> <name>pTrig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTrig</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTrig</name><operator>-&gt;</operator><name>pTabSchema</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTrig</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pList</name> <operator>=</operator> <name>pTrig</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>        
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
  </block_content>}</block></while>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if( pList ){
    Trigger *pX;
    printf("Triggers for %s:", pTab-&gt;zName);
    for(pX=pList; pX; pX=pX-&gt;pNext){
      printf(" %s", pX-&gt;zName);
    }
    printf("\n");
    fflush(stdout);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>pList</name></expr>;</return>  
</block_content>}</block></function>

<comment type="block">/*
** This is called by the parser when it sees a CREATE TRIGGER statement
** up to the point of the BEGIN before the trigger actions.  A Trigger
** structure is generated based on the information available and stored
** in pParse-&gt;pNewTrigger.  After the trigger actions have been parsed, the
** sqlite3FinishTrigger() function is called to complete the trigger
** construction process.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3BeginTrigger</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,      <comment type="block">/* The parse context of the CREATE TRIGGER statement */</comment>
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pName1</name></decl></parameter>,      <comment type="block">/* The name of the trigger */</comment>
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pName2</name></decl></parameter>,      <comment type="block">/* The name of the trigger */</comment>
  <parameter><decl><type><name>int</name></type> <name>tr_tm</name></decl></parameter>,          <comment type="block">/* One of TK_BEFORE, TK_AFTER, TK_INSTEAD */</comment>
  <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,             <comment type="block">/* One of TK_INSERT, TK_UPDATE, TK_DELETE */</comment>
  <parameter><decl><type><name>IdList</name> <modifier>*</modifier></type><name>pColumns</name></decl></parameter>,   <comment type="block">/* column list if this is an UPDATE OF trigger */</comment>
  <parameter><decl><type><name>SrcList</name> <modifier>*</modifier></type><name>pTableName</name></decl></parameter>,<comment type="block">/* The name of the table/view the trigger applies to */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pWhen</name></decl></parameter>,        <comment type="block">/* WHEN clause */</comment>
  <parameter><decl><type><name>int</name></type> <name>isTemp</name></decl></parameter>,         <comment type="block">/* True if the TEMPORARY keyword is present */</comment>
  <parameter><decl><type><name>int</name></type> <name>noErr</name></decl></parameter>           <comment type="block">/* Suppress errors if the trigger already exists */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* The new trigger */</comment>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>            <comment type="block">/* Table that the trigger fires off of */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Name of the trigger */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* The database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>                <comment type="block">/* The database to store the trigger in */</comment>
  <decl_stmt><decl><type><name>Token</name> <modifier>*</modifier></type><name>pName</name></decl>;</decl_stmt>           <comment type="block">/* The unqualified db name */</comment>
  <decl_stmt><decl><type><name>DbFixer</name></type> <name>sFix</name></decl>;</decl_stmt>           <comment type="block">/* State vector for the DB fixer */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pName1</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* pName1-&gt;z might be NULL, but not pName1 itself */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pName2</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>==</operator><name>TK_INSERT</name> <operator>||</operator> <name>op</name><operator>==</operator><name>TK_UPDATE</name> <operator>||</operator> <name>op</name><operator>==</operator><name>TK_DELETE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>op</name><operator>&lt;</operator><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>isTemp</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* If TEMP was specified, then the trigger name may not be qualified. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pName2</name><operator>-&gt;</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"temporary trigger may not have qualified name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>trigger_cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pName</name> <operator>=</operator> <name>pName1</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Figure out the db that the trigger will be created in */</comment>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3TwoPartName</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pName1</name></expr></argument>, <argument><expr><name>pName2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <goto>goto <name>trigger_cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pTableName</name> <operator>||</operator> <name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr> )</condition><block>{<block_content>
    <goto>goto <name>trigger_cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* A long-standing parser bug is that this syntax was allowed:
  **
  **    CREATE TRIGGER attached.demo AFTER INSERT ON attached.tab ....
  **                                                 ^^^^^^^^
  **
  ** To maintain backwards compatibility, ignore the database
  ** name on pTableName if we are reparsing out of the schema table
  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>busy</name></name> <operator>&amp;&amp;</operator> <name>iDb</name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>zDatabase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTableName</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>zDatabase</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If the trigger name was unqualified, and the table is a temp table,
  ** then set iDb to 1 to create the trigger in the temporary database.
  ** If sqlite3SrcListLookup() returns 0, indicating the table does not
  ** exist, the error is caught by the block below.
  */</comment>
  <expr_stmt><expr><name>pTab</name> <operator>=</operator> <call><name>sqlite3SrcListLookup</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>busy</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pName2</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pTab</name>
        <operator>&amp;&amp;</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name></name><operator>==</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pSchema</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Ensure the table name matches database name and that the table exists */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>trigger_cleanup</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>nSrc</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3FixInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFix</name></expr></argument>, <argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="string">"trigger"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3FixSrcList</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFix</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <goto>goto <name>trigger_cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pTab</name> <operator>=</operator> <call><name>sqlite3SrcListLookup</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pTab</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* The table does not exist. */</comment>
    <goto>goto <name>trigger_orphan_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>IsVirtual</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cannot create triggers on virtual tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>trigger_orphan_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check that the trigger name is not reserved and that no trigger of the
  ** specified name exists */</comment>
  <expr_stmt><expr><name>zName</name> <operator>=</operator> <call><name>sqlite3NameFromToken</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>trigger_cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3CheckObjectName</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><literal type="string">"trigger"</literal></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <goto>goto <name>trigger_cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3HashFind</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>trigHash</name></name><operator>)</operator></expr></argument>,<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>noErr</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"trigger %T already exists"</literal></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>busy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <goto>goto <name>trigger_cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Do not create a trigger on a system table */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><literal type="string">"sqlite_"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cannot create trigger on system table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>trigger_cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* INSTEAD of triggers are only for views and views only support INSTEAD
  ** of triggers.
  */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>IsView</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>tr_tm</name><operator>!=</operator><name>TK_INSTEAD</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cannot create %s trigger on view: %S"</literal></expr></argument>, 
        <argument><expr><ternary><condition><expr><operator>(</operator><name>tr_tm</name> <operator>==</operator> <name>TK_BEFORE</name><operator>)</operator></expr>?</condition><then><expr><literal type="string">"BEFORE"</literal></expr></then><else>:<expr><literal type="string">"AFTER"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>trigger_orphan_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>IsView</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>tr_tm</name><operator>==</operator><name>TK_INSTEAD</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"cannot create INSTEAD OF"</literal>
        <literal type="string">" trigger on table: %S"</literal></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>trigger_orphan_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTHORIZATION</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iTabDb</name> <init>= <expr><call><name>sqlite3SchemaToIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>SQLITE_CREATE_TRIGGER</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iTabDb</name></expr>]</index></name><operator>.</operator><name>zDbSName</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDbTrig</name> <init>= <expr><ternary><condition><expr><name>isTemp</name></expr> ?</condition><then> <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>zDbSName</name></expr> </then><else>: <expr><name>zDb</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>iTabDb</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>isTemp</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>SQLITE_CREATE_TEMP_TRIGGER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3AuthCheck</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zDbTrig</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <goto>goto <name>trigger_cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3AuthCheck</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>SQLITE_INSERT</name></expr></argument>, <argument><expr><call><name>SCHEMA_TABLE</name><argument_list>(<argument><expr><name>iTabDb</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
      <goto>goto <name>trigger_cleanup</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* INSTEAD OF triggers can only appear on views and BEFORE triggers
  ** cannot appear on views.  So we might as well translate every
  ** INSTEAD OF trigger into a BEFORE trigger.  It simplifies code
  ** elsewhere.
  */</comment>
  <if_stmt><if>if <condition>(<expr><name>tr_tm</name> <operator>==</operator> <name>TK_INSTEAD</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>tr_tm</name> <operator>=</operator> <name>TK_BEFORE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Build the Trigger object */</comment>
  <expr_stmt><expr><name>pTrigger</name> <operator>=</operator> <operator>(</operator><name>Trigger</name><operator>*</operator><operator>)</operator><call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Trigger</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTrigger</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>trigger_cleanup</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <name>zName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>table</name></name> <operator>=</operator> <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>pSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pTabSchema</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>op</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>tr_tm</name></name> <operator>=</operator> <ternary><condition><expr><name>tr_tm</name><operator>==</operator><name>TK_BEFORE</name></expr> ?</condition><then> <expr><name>TRIGGER_BEFORE</name></expr> </then><else>: <expr><name>TRIGGER_AFTER</name></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3RenameTokenRemap</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>pTableName</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pWhen</name></name> <operator>=</operator> <name>pWhen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pWhen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pWhen</name></name> <operator>=</operator> <call><name>sqlite3ExprDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pWhen</name></expr></argument>, <argument><expr><name>EXPRDUP_REDUCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pColumns</name></name> <operator>=</operator> <name>pColumns</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pColumns</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name> <operator>=</operator> <name>pTrigger</name></expr>;</expr_stmt>

<label><name>trigger_cleanup</name>:</label>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3SrcListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3IdListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pColumns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3DeleteTrigger</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pTrigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name><operator>==</operator><name>pTrigger</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return;</return>

<label><name>trigger_orphan_error</name>:</label>
  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>iDb</name></name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Ticket #3810.
    ** Normally, whenever a table is dropped, all associated triggers are
    ** dropped too.  But if a TEMP trigger is created on a non-TEMP table
    ** and the table is dropped by a different database connection, the
    ** trigger is not visible to the database connection that does the
    ** drop so the trigger cannot be dropped.  This results in an
    ** "orphaned trigger" - a trigger whose associated table is missing.
    **
    ** 2020-11-05 see also https://sqlite.org/forum/forumpost/157dc791df
    */</comment>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>orphanTrigger</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <goto>goto <name>trigger_cleanup</name>;</goto>
</block_content>}</block></function>

<comment type="block">/*
** This routine is called after all of the trigger actions have been parsed
** in order to complete the process of building the trigger.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3FinishTrigger</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,          <comment type="block">/* Parser context */</comment>
  <parameter><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pStepList</name></decl></parameter>, <comment type="block">/* The triggered program */</comment>
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pAll</name></decl></parameter>             <comment type="block">/* Token that describes the complete CREATE TRIGGER */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrig</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name></expr></init></decl>;</decl_stmt>   <comment type="block">/* Trigger being finished */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>                            <comment type="block">/* Name of trigger */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>               <comment type="block">/* The database */</comment>
  <decl_stmt><decl><type><name>DbFixer</name></type> <name>sFix</name></decl>;</decl_stmt>                           <comment type="block">/* Fixer object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>                                <comment type="block">/* Database containing the trigger */</comment>
  <decl_stmt><decl><type><name>Token</name></type> <name>nameToken</name></decl>;</decl_stmt>                        <comment type="block">/* Trigger name for error reporting */</comment>

  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>pTrig</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>triggerfinish_cleanup</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>zName</name> <operator>=</operator> <name><name>pTrig</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3SchemaToIndex</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pTrig</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTrig</name><operator>-&gt;</operator><name>step_list</name></name> <operator>=</operator> <name>pStepList</name></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>pStepList</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pStepList</name><operator>-&gt;</operator><name>pTrig</name></name> <operator>=</operator> <name>pTrig</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pStepList</name> <operator>=</operator> <name><name>pStepList</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3TokenInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nameToken</name></expr></argument>, <argument><expr><name><name>pTrig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3FixInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFix</name></expr></argument>, <argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="string">"trigger"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nameToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3FixTriggerStep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFix</name></expr></argument>, <argument><expr><name><name>pTrig</name><operator>-&gt;</operator><name>step_list</name></name></expr></argument>)</argument_list></call> 
   <operator>||</operator> <call><name>sqlite3FixExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFix</name></expr></argument>, <argument><expr><name><name>pTrig</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>)</argument_list></call></expr> 
  )</condition><block>{<block_content>
    <goto>goto <name>triggerfinish_cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_ALTERTABLE</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>busy</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name> <operator>=</operator> <name>pTrig</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTrig</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* if we are not initializing,
  ** build the sqlite_schema entry
  */</comment>
  if<condition>( <expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>busy</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>

    <comment type="block">/* Make an entry in the sqlite_schema table */</comment>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>triggerfinish_cleanup</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3BeginWriteOperation</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3DbStrNDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pAll</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pAll</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3NestedParse</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>,
       <argument><expr><literal type="string">"INSERT INTO %Q."</literal> <name>LEGACY_SCHEMA_TABLE</name>
       <literal type="string">" VALUES('trigger',%Q,%Q,0,'CREATE TRIGGER %q')"</literal></expr></argument>,
       <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zDbSName</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>,
       <argument><expr><name><name>pTrig</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3ChangeCookie</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddParseSchemaOp</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>,
        <argument><expr><call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"type='trigger' AND name='%q'"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>busy</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pLink</name> <init>= <expr><name>pTrig</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Hash</name> <modifier>*</modifier></type><name>pHash</name> <init>= <expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>trigHash</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pLink</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTrig</name> <operator>=</operator> <call><name>sqlite3HashInsert</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pTrig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTrig</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3OomFault</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pLink</name><operator>-&gt;</operator><name>pSchema</name></name><operator>==</operator><name><name>pLink</name><operator>-&gt;</operator><name>pTabSchema</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pTab</name> <operator>=</operator> <call><name>sqlite3HashFind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLink</name><operator>-&gt;</operator><name>pTabSchema</name><operator>-&gt;</operator><name>tblHash</name></name></expr></argument>, <argument><expr><name><name>pLink</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pTab</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pLink</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pTrigger</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>pTrigger</name></name> <operator>=</operator> <name>pLink</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>triggerfinish_cleanup</name>:</label>
  <expr_stmt><expr><call><name>sqlite3DeleteTrigger</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pTrig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>IN_RENAME_OBJECT</name> <operator>||</operator> <operator>!</operator><name><name>pParse</name><operator>-&gt;</operator><name>pNewTrigger</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DeleteTriggerStep</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pStepList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Duplicate a range of text from an SQL statement, then convert all
** whitespace characters into ordinary space characters.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>triggerSpanDup</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>sqlite3DbSpanDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zStart</name></expr></argument>, <argument><expr><name>zEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>z</name></expr> )</condition><block type="pseudo"><block_content> <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <if_stmt><if>if<condition>( <expr><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
  <return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>    

<comment type="block">/*
** Turn a SELECT statement (that the pSelect parameter points to) into
** a trigger step.  Return a pointer to a TriggerStep structure.
**
** The parser calls this routine when it finds a SELECT statement in
** body of a TRIGGER.  
*/</comment>
<function><type><name>TriggerStep</name> <modifier>*</modifier></type><name>sqlite3TriggerSelectStep</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                <comment type="block">/* Database connection */</comment>
  <parameter><decl><type><name>Select</name> <modifier>*</modifier></type><name>pSelect</name></decl></parameter>,            <comment type="block">/* The SELECT statement */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStart</name></decl></parameter>,         <comment type="block">/* Start of SQL text */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl></parameter>            <comment type="block">/* End of SQL text */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pTriggerStep</name> <init>= <expr><call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TriggerStep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTriggerStep</name><operator>==</operator><literal type="number">0</literal></expr> )</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3SelectDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>TK_SELECT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pSelect</name></name> <operator>=</operator> <name>pSelect</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>orconf</name></name> <operator>=</operator> <name>OE_Default</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>zSpan</name></name> <operator>=</operator> <call><name>triggerSpanDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zStart</name></expr></argument>, <argument><expr><name>zEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pTriggerStep</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Allocate space to hold a new trigger step.  The allocated space
** holds both the TriggerStep object and the TriggerStep.target.z string.
**
** If an OOM error occurs, NULL is returned and db-&gt;mallocFailed is set.
*/</comment>
<function><type><specifier>static</specifier> <name>TriggerStep</name> <modifier>*</modifier></type><name>triggerStepAllocate</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,              <comment type="block">/* Parser context */</comment>
  <parameter><decl><type><name>u8</name></type> <name>op</name></decl></parameter>,                      <comment type="block">/* Trigger opcode */</comment>
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>,               <comment type="block">/* The target name */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStart</name></decl></parameter>,         <comment type="block">/* Start of SQL text */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl></parameter>            <comment type="block">/* End of SQL text */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pTriggerStep</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pTriggerStep</name> <operator>=</operator> <call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TriggerStep</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pName</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTriggerStep</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTriggerStep</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>z</name></name></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Dequote</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>zTarget</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>zSpan</name></name> <operator>=</operator> <call><name>triggerSpanDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zStart</name></expr></argument>, <argument><expr><name>zEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3RenameTokenMap</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>zTarget</name></name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pTriggerStep</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Build a trigger step out of an INSERT statement.  Return a pointer
** to the new trigger step.
**
** The parser calls this routine when it sees an INSERT inside the
** body of a trigger.
*/</comment>
<function><type><name>TriggerStep</name> <modifier>*</modifier></type><name>sqlite3TriggerInsertStep</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,      <comment type="block">/* Parser */</comment>
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pTableName</name></decl></parameter>,  <comment type="block">/* Name of the table into which we insert */</comment>
  <parameter><decl><type><name>IdList</name> <modifier>*</modifier></type><name>pColumn</name></decl></parameter>,    <comment type="block">/* List of columns in pTableName to insert into */</comment>
  <parameter><decl><type><name>Select</name> <modifier>*</modifier></type><name>pSelect</name></decl></parameter>,    <comment type="block">/* A SELECT statement that supplies values */</comment>
  <parameter><decl><type><name>u8</name></type> <name>orconf</name></decl></parameter>,          <comment type="block">/* The conflict algorithm (OE_Abort, OE_Replace, etc.) */</comment>
  <parameter><decl><type><name>Upsert</name> <modifier>*</modifier></type><name>pUpsert</name></decl></parameter>,    <comment type="block">/* ON CONFLICT clauses for upsert */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStart</name></decl></parameter>, <comment type="block">/* Start of SQL text */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl></parameter>    <comment type="block">/* End of SQL text */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pTriggerStep</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pSelect</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pTriggerStep</name> <operator>=</operator> <call><name>triggerStepAllocate</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>TK_INSERT</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>,<argument><expr><name>zStart</name></expr></argument>,<argument><expr><name>zEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTriggerStep</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pSelect</name></name> <operator>=</operator> <name>pSelect</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pSelect</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pSelect</name></name> <operator>=</operator> <call><name>sqlite3SelectDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>, <argument><expr><name>EXPRDUP_REDUCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pIdList</name></name> <operator>=</operator> <name>pColumn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pUpsert</name></name> <operator>=</operator> <name>pUpsert</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>orconf</name></name> <operator>=</operator> <name>orconf</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pUpsert</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3HasExplicitNulls</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name><name>pUpsert</name><operator>-&gt;</operator><name>pUpsertTarget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>pColumn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3IdListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>pUpsert</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3UpsertDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pUpsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3SelectDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pTriggerStep</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Construct a trigger step that implements an UPDATE statement and return
** a pointer to that trigger step.  The parser calls this routine when it
** sees an UPDATE statement inside the body of a CREATE TRIGGER.
*/</comment>
<function><type><name>TriggerStep</name> <modifier>*</modifier></type><name>sqlite3TriggerUpdateStep</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,          <comment type="block">/* Parser */</comment>
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pTableName</name></decl></parameter>,   <comment type="block">/* Name of the table to be updated */</comment>
  <parameter><decl><type><name>SrcList</name> <modifier>*</modifier></type><name>pFrom</name></decl></parameter>,      <comment type="block">/* FROM clause for an UPDATE-FROM, or NULL */</comment>
  <parameter><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pEList</name></decl></parameter>,    <comment type="block">/* The SET clause: list of column and new values */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pWhere</name></decl></parameter>,        <comment type="block">/* The WHERE clause */</comment>
  <parameter><decl><type><name>u8</name></type> <name>orconf</name></decl></parameter>,           <comment type="block">/* The conflict algorithm. (OE_Abort, OE_Ignore, etc) */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStart</name></decl></parameter>,  <comment type="block">/* Start of SQL text */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl></parameter>     <comment type="block">/* End of SQL text */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pTriggerStep</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pTriggerStep</name> <operator>=</operator> <call><name>triggerStepAllocate</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>TK_UPDATE</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>,<argument><expr><name>zStart</name></expr></argument>,<argument><expr><name>zEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTriggerStep</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pExprList</name></name> <operator>=</operator> <name>pEList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pWhere</name></name> <operator>=</operator> <name>pWhere</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pFrom</name></name> <operator>=</operator> <name>pFrom</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pEList</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>pWhere</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>pFrom</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pExprList</name></name> <operator>=</operator> <call><name>sqlite3ExprListDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pEList</name></expr></argument>, <argument><expr><name>EXPRDUP_REDUCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pWhere</name></name> <operator>=</operator> <call><name>sqlite3ExprDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pWhere</name></expr></argument>, <argument><expr><name>EXPRDUP_REDUCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pFrom</name></name> <operator>=</operator> <call><name>sqlite3SrcListDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pFrom</name></expr></argument>, <argument><expr><name>EXPRDUP_REDUCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>orconf</name></name> <operator>=</operator> <name>orconf</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pEList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3SrcListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pTriggerStep</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Construct a trigger step that implements a DELETE statement and return
** a pointer to that trigger step.  The parser calls this routine when it
** sees a DELETE statement inside the body of a CREATE TRIGGER.
*/</comment>
<function><type><name>TriggerStep</name> <modifier>*</modifier></type><name>sqlite3TriggerDeleteStep</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,          <comment type="block">/* Parser */</comment>
  <parameter><decl><type><name>Token</name> <modifier>*</modifier></type><name>pTableName</name></decl></parameter>,      <comment type="block">/* The table from which rows are deleted */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pWhere</name></decl></parameter>,           <comment type="block">/* The WHERE clause */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zStart</name></decl></parameter>,     <comment type="block">/* Start of SQL text */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEnd</name></decl></parameter>        <comment type="block">/* End of SQL text */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pTriggerStep</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pTriggerStep</name> <operator>=</operator> <call><name>triggerStepAllocate</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>TK_DELETE</name></expr></argument>, <argument><expr><name>pTableName</name></expr></argument>,<argument><expr><name>zStart</name></expr></argument>,<argument><expr><name>zEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTriggerStep</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pWhere</name></name> <operator>=</operator> <name>pWhere</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pWhere</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>pWhere</name></name> <operator>=</operator> <call><name>sqlite3ExprDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pWhere</name></expr></argument>, <argument><expr><name>EXPRDUP_REDUCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pTriggerStep</name><operator>-&gt;</operator><name>orconf</name></name> <operator>=</operator> <name>OE_Default</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pWhere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pTriggerStep</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** Recursively delete a Trigger structure
*/</comment>
<function><type><name>void</name></type> <name>sqlite3DeleteTrigger</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pTrigger</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pTrigger</name><operator>-&gt;</operator><name>bReturning</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3DeleteTriggerStep</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>step_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3IdListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pTrigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is called to drop a trigger from the database schema. 
**
** This may be called directly from the parser and therefore identifies
** the trigger by name.  The sqlite3DropTriggerPtr() routine does the
** same job as this routine except it takes a pointer to the trigger
** instead of the trigger name.
**/</comment>
<function><type><name>void</name></type> <name>sqlite3DropTrigger</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>SrcList</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>noErr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>drop_trigger_cleanup</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <goto>goto <name>drop_trigger_cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>nSrc</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zDb</name> <operator>=</operator> <name><name>pName</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>zDatabase</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>zName</name> <operator>=</operator> <name><name>pName</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>zName</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>zDb</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <call><name>sqlite3BtreeHoldsAllMutexes</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>OMIT_TEMPDB</name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>&lt;</operator><literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i</name><operator>^</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>  <comment type="block">/* Search TEMP before MAIN */</comment>
    <if_stmt><if>if<condition>( <expr><name>zDb</name> <operator>&amp;&amp;</operator> <call><name>sqlite3DbIsNamed</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTrigger</name> <operator>=</operator> <call><name>sqlite3HashFind</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>trigHash</name></name><operator>)</operator></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTrigger</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pTrigger</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>noErr</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"no such trigger: %S"</literal></expr></argument>, <argument><expr><name><name>pName</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3CodeVerifyNamedSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>checkSchema</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>drop_trigger_cleanup</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3DropTriggerPtr</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTrigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>drop_trigger_cleanup</name>:</label>
  <expr_stmt><expr><call><name>sqlite3SrcListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to the Table structure for the table that a trigger
** is set on.
*/</comment>
<function><type><specifier>static</specifier> <name>Table</name> <modifier>*</modifier></type><name>tableOfTrigger</name><parameter_list>(<parameter><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3HashFind</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTrigger</name><operator>-&gt;</operator><name>pTabSchema</name><operator>-&gt;</operator><name>tblHash</name></name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>table</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Drop a trigger given a pointer to that trigger. 
*/</comment>
<function><type><name>void</name></type> <name>sqlite3DropTriggerPtr</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Table</name>   <modifier>*</modifier></type><name>pTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>iDb</name> <operator>=</operator> <call><name>sqlite3SchemaToIndex</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iDb</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iDb</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTable</name> <operator>=</operator> <call><name>tableOfTrigger</name><argument_list>(<argument><expr><name>pTrigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>pTable</name> <operator>&amp;&amp;</operator> <name><name>pTable</name><operator>-&gt;</operator><name>pSchema</name></name><operator>==</operator><name><name>pTrigger</name><operator>-&gt;</operator><name>pSchema</name></name><operator>)</operator> <operator>||</operator> <name>iDb</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTHORIZATION</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><name>pTable</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name>SQLITE_DROP_TRIGGER</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zDbSName</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTab</name> <init>= <expr><call><name>SCHEMA_TABLE</name><argument_list>(<argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>SQLITE_DROP_TEMP_TRIGGER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3AuthCheck</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>pTable</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>sqlite3AuthCheck</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>SQLITE_DELETE</name></expr></argument>, <argument><expr><name>zTab</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Generate code to destroy the database record of the trigger.
  */</comment>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3NestedParse</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>,
       <argument><expr><literal type="string">"DELETE FROM %Q."</literal> <name>LEGACY_SCHEMA_TABLE</name> <literal type="string">" WHERE name=%Q AND type='trigger'"</literal></expr></argument>,
       <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zDbSName</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3ChangeCookie</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_DropTrigger</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Remove a trigger from the hash tables of the sqlite* pointer.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3UnlinkAndDeleteTrigger</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Hash</name> <modifier>*</modifier></type><name>pHash</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3SchemaMutexHeld</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pHash</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>trigHash</name></name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTrigger</name> <operator>=</operator> <call><name>sqlite3HashInsert</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>pTrigger</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pSchema</name></name><operator>==</operator><name><name>pTrigger</name><operator>-&gt;</operator><name>pTabSchema</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><call><name>tableOfTrigger</name><argument_list>(<argument><expr><name>pTrigger</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>pTab</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>pTab</name><operator>-&gt;</operator><name>pTrigger</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator></expr></incr>)</control><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp</name><operator>==</operator><name>pTrigger</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3DeleteTrigger</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pTrigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name> <operator>|=</operator> <name>DBFLAG_SchemaChange</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** pEList is the SET clause of an UPDATE statement.  Each entry
** in pEList is of the format &lt;id&gt;=&lt;expr&gt;.  If any of the entries
** in pEList have an &lt;id&gt; which matches an identifier in pIdList,
** then return TRUE.  If pIdList==NULL, then it is considered a
** wildcard that matches anything.  Likewise if pEList==NULL then
** it matches anything so always return true.  Return false only
** if there is no match.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>checkColumnOverlap</name><parameter_list>(<parameter><decl><type><name>IdList</name> <modifier>*</modifier></type><name>pIdList</name></decl></parameter>, <parameter><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pEList</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pIdList</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>NEVER</name><argument_list>(<argument><expr><name>pEList</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>e</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name><operator>&lt;</operator><name><name>pEList</name><operator>-&gt;</operator><name>nExpr</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3IdListIndex</name><argument_list>(<argument><expr><name>pIdList</name></expr></argument>, <argument><expr><name><name>pEList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>zEName</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return> 
</block_content>}</block></function>

<comment type="block">/*
** Return true if any TEMP triggers exist
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>tempTriggersExist</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pSchema</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>trigHash</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a list of all triggers on table pTab if there exists at least
** one trigger that must be fired when an operation of type 'op' is 
** performed on the table, and, if that operation is an UPDATE, if at
** least one of the columns in pChanges is being modified.
*/</comment>
<function><type><specifier>static</specifier> <name>SQLITE_NOINLINE</name> <name>Trigger</name> <modifier>*</modifier></type><name>triggersReallyExist</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,          <comment type="block">/* Parse context */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,            <comment type="block">/* The table the contains the triggers */</comment>
  <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,                 <comment type="block">/* one of TK_DELETE, TK_INSERT, TK_UPDATE */</comment>
  <parameter><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pChanges</name></decl></parameter>,     <comment type="block">/* Columns that change in an UPDATE statement */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pMask</name></decl></parameter>              <comment type="block">/* OUT: Mask of TRIGGER_BEFORE|TRIGGER_AFTER */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pList</name> <operator>=</operator> <call><name>sqlite3TriggerList</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pList</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>IsVirtual</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> 
           <operator>||</operator> <operator>(</operator><name><name>pList</name><operator>-&gt;</operator><name>bReturning</name></name> <operator>&amp;&amp;</operator> <name><name>pList</name><operator>-&gt;</operator><name>pNext</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pList</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pParse</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SQLITE_EnableTrigger</name><operator>)</operator><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <name><name>pTab</name><operator>-&gt;</operator><name>pTrigger</name></name><operator>!=</operator><literal type="number">0</literal></expr>
    )</condition><block>{<block_content>
      <comment type="block">/* The SQLITE_DBCONFIG_ENABLE_TRIGGER setting is off.  That means that
      ** only TEMP triggers are allowed.  Truncate the pList so that it
      ** includes only TEMP triggers */</comment>
      <if_stmt><if>if<condition>( <expr><name>pList</name><operator>==</operator><name><name>pTab</name><operator>-&gt;</operator><name>pTrigger</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>pList</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <goto>goto <name>exit_triggers_exist</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <while>while<condition>( <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name><operator>!=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pTrigger</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt></block_content></block></while>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <do>do<block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>op</name> <operator>&amp;&amp;</operator> <call><name>checkColumnOverlap</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><name>pChanges</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>tr_tm</name></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_RETURNING</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* The first time a RETURNING trigger is seen, the "op" value tells
        ** us what time of trigger it should be. */</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3IsToplevel</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>IsVirtual</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>op</name><operator>!=</operator><name>TK_INSERT</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>,
              <argument><expr><literal type="string">"%s RETURNING is not available on virtual tables"</literal></expr></argument>,
              <argument><expr><ternary><condition><expr><name>op</name><operator>==</operator><name>TK_DELETE</name></expr> ?</condition><then> <expr><literal type="string">"DELETE"</literal></expr> </then><else>: <expr><literal type="string">"UPDATE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tr_tm</name></name> <operator>=</operator> <name>TRIGGER_BEFORE</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>tr_tm</name></name> <operator>=</operator> <name>TRIGGER_AFTER</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>tr_tm</name></name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bReturning</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_INSERT</name> <operator>&amp;&amp;</operator> <name>op</name><operator>==</operator><name>TK_UPDATE</name>
                <operator>&amp;&amp;</operator> <call><name>sqlite3IsToplevel</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <comment type="block">/* Also fire a RETURNING trigger for an UPSERT */</comment>
        <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>p</name><operator>-&gt;</operator><name>tr_tm</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block>while<condition>( <expr><name>p</name></expr> )</condition>;</do>
  </block_content>}</block></if></if_stmt>
<label><name>exit_triggers_exist</name>:</label>
  <if_stmt><if>if<condition>( <expr><name>pMask</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pMask</name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>mask</name></expr> ?</condition><then> <expr><name>pList</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><name>Trigger</name> <modifier>*</modifier></type><name>sqlite3TriggersExist</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,          <comment type="block">/* Parse context */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,            <comment type="block">/* The table the contains the triggers */</comment>
  <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,                 <comment type="block">/* one of TK_DELETE, TK_INSERT, TK_UPDATE */</comment>
  <parameter><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pChanges</name></decl></parameter>,     <comment type="block">/* Columns that change in an UPDATE statement */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pMask</name></decl></parameter>              <comment type="block">/* OUT: Mask of TRIGGER_BEFORE|TRIGGER_AFTER */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pTab</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pTab</name><operator>-&gt;</operator><name>pTrigger</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>tempTriggersExist</name><argument_list>(<argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call><operator>)</operator>
   <operator>||</operator> <name><name>pParse</name><operator>-&gt;</operator><name>disableTriggers</name></name></expr>
  )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pMask</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pMask</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>triggersReallyExist</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>,<argument><expr><name>pTab</name></expr></argument>,<argument><expr><name>op</name></expr></argument>,<argument><expr><name>pChanges</name></expr></argument>,<argument><expr><name>pMask</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Convert the pStep-&gt;zTarget string into a SrcList and return a pointer
** to that SrcList.
**
** This routine adds a specific database name, if needed, to the target when
** forming the SrcList.  This prevents a trigger in one database from
** referring to a target in another database.  An exception is when the
** trigger is in TEMP in which case it can refer to any other database it
** wants.
*/</comment>
<function><type><name>SrcList</name> <modifier>*</modifier></type><name>sqlite3TriggerStepSrc</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,       <comment type="block">/* The parsing context */</comment>
  <parameter><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pStep</name></decl></parameter>   <comment type="block">/* The trigger containing the target token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SrcList</name> <modifier>*</modifier></type><name>pSrc</name></decl>;</decl_stmt>                  <comment type="block">/* SrcList to be returned */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>zTarget</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pSrc</name> <operator>=</operator> <call><name>sqlite3SrcListAppend</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pSrc</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pSrc</name><operator>-&gt;</operator><name>nSrc</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>zName</name> <operator>||</operator> <name>pSrc</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pSrc</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Schema</name> <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><name><name>pStep</name><operator>-&gt;</operator><name>pTrig</name><operator>-&gt;</operator><name>pSchema</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pSrc</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>zName</name> <operator>=</operator> <name>zName</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pSchema</name><operator>!=</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pSchema</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pSrc</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pSchema</name> <operator>=</operator> <name>pSchema</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pStep</name><operator>-&gt;</operator><name>pFrom</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>SrcList</name> <modifier>*</modifier></type><name>pDup</name> <init>= <expr><call><name>sqlite3SrcListDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pFrom</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>pDup</name> <operator>&amp;&amp;</operator> <name><name>pDup</name><operator>-&gt;</operator><name>nSrc</name></name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>IN_RENAME_OBJECT</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>Select</name> <modifier>*</modifier></type><name>pSubquery</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Token</name></type> <name>as</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>pSubquery</name> <operator>=</operator> <call><name>sqlite3SelectNew</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>pDup</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>SF_NestedFrom</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>as</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>as</name><operator>.</operator><name>z</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>pDup</name> <operator>=</operator> <call><name>sqlite3SrcListAppendFromTerm</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>as</name></expr></argument>,<argument><expr><name>pSubquery</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>pSrc</name> <operator>=</operator> <call><name>sqlite3SrcListAppendList</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pSrc</name></expr></argument>, <argument><expr><name>pDup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>pSrc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if the pExpr term from the RETURNING clause argument
** list is of the form "*".  Raise an error if the terms if of the
** form "table.*".
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isAsteriskTerm</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,      <comment type="block">/* Parsing context */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>         <comment type="block">/* A term in the RETURNING clause */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pTerm</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pTerm</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_ASTERISK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pTerm</name><operator>-&gt;</operator><name>op</name></name><operator>!=</operator><name>TK_DOT</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTerm</name><operator>-&gt;</operator><name>pRight</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTerm</name><operator>-&gt;</operator><name>pLeft</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pTerm</name><operator>-&gt;</operator><name>pRight</name><operator>-&gt;</operator><name>op</name></name><operator>!=</operator><name>TK_ASTERISK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="string">"RETURNING may not use \"TABLE.*\" wildcards"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* The input list pList is the list of result set terms from a RETURNING
** clause.  The table that we are returning from is pTab.
**
** This routine makes a copy of the pList, and at the same time expands
** any "*" wildcards to be the complete set of columns from pTab.
*/</comment>
<function><type><specifier>static</specifier> <name>ExprList</name> <modifier>*</modifier></type><name>sqlite3ExpandReturning</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,        <comment type="block">/* Parsing context */</comment>
  <parameter><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>,      <comment type="block">/* The arguments to RETURNING */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>           <comment type="block">/* The table being updated */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pList</name><operator>-&gt;</operator><name>nExpr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pOldExpr</name> <init>= <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name>pOldExpr</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>isAsteriskTerm</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pOldExpr</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;</operator><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pNewExpr</name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>IsHiddenColumn</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name></name><operator>+</operator><name>jj</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>pNewExpr</name> <operator>=</operator> <call><name>sqlite3Expr</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>TK_ID</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>jj</name></expr>]</index></name><operator>.</operator><name>zCnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3ExprListAppend</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>pNewExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name><name>struct</name> <name>ExprList_item</name></name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>pNew</name><operator>-&gt;</operator><name>nExpr</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>zEName</name></name> <operator>=</operator> <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>jj</name></expr>]</index></name><operator>.</operator><name>zCnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>eEName</name></name> <operator>=</operator> <name>ENAME_NAME</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pNewExpr</name> <init>= <expr><call><name>sqlite3ExprDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pOldExpr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3ExprListAppend</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>pNewExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name> <operator>&amp;&amp;</operator> <call><name>ALWAYS</name><argument_list>(<argument><expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zEName</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>ExprList_item</name></name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>pNew</name><operator>-&gt;</operator><name>nExpr</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>zEName</name></name> <operator>=</operator> <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zEName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>eEName</name></name> <operator>=</operator> <name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fg</name><operator>.</operator><name>eEName</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Generate code for the RETURNING trigger.  Unlike other triggers
** that invoke a subprogram in the bytecode, the code for RETURNING
** is generated in-line.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>codeReturningTrigger</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,       <comment type="block">/* Parse context */</comment>
  <parameter><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>,   <comment type="block">/* The trigger step that defines the RETURNING */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,         <comment type="block">/* The table to code triggers from */</comment>
  <parameter><decl><type><name>int</name></type> <name>regIn</name></decl></parameter>            <comment type="block">/* The first in an array of registers */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>pVdbe</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Returning</name> <modifier>*</modifier></type><name>pReturning</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Select</name></type> <name>sSelect</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SrcList</name></type> <name>sFrom</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>v</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>bReturning</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>pParse</name></name><operator>==</operator><name>pParse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pReturning</name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>pReturning</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pTrigger</name> <operator>==</operator> <operator>&amp;</operator><operator>(</operator><name><name>pReturning</name><operator>-&gt;</operator><name>retTrig</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSelect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sSelect</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFrom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sFrom</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sSelect</name><operator>.</operator><name>pEList</name></name> <operator>=</operator> <call><name>sqlite3ExprListDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pReturning</name><operator>-&gt;</operator><name>pReturnEL</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sSelect</name><operator>.</operator><name>pSrc</name></name> <operator>=</operator> <operator>&amp;</operator><name>sFrom</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sFrom</name><operator>.</operator><name>nSrc</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sFrom</name><operator>.</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pTab</name> <operator>=</operator> <name>pTab</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sFrom</name><operator>.</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iCursor</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3SelectPrep</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sSelect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3GenerateColumnNames</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>sSelect</name><operator>.</operator><name>pEList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3ExpandReturning</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name><name>pReturning</name><operator>-&gt;</operator><name>pReturnEL</name></name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>NameContext</name></type> <name>sNC</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sNC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sNC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pReturning</name><operator>-&gt;</operator><name>nRetCol</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pReturning</name><operator>-&gt;</operator><name>nRetCol</name></name> <operator>=</operator> <name><name>pNew</name><operator>-&gt;</operator><name>nExpr</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pReturning</name><operator>-&gt;</operator><name>iRetCur</name></name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>nTab</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>sNC</name><operator>.</operator><name>pParse</name></name> <operator>=</operator> <name>pParse</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sNC</name><operator>.</operator><name>uNC</name><operator>.</operator><name>iBaseReg</name></name> <operator>=</operator> <name>regIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sNC</name><operator>.</operator><name>ncFlags</name></name> <operator>=</operator> <name>NC_UBaseReg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>eTriggerOp</name></name> <operator>=</operator> <name><name>pTrigger</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>pTriggerTab</name></name> <operator>=</operator> <name>pTab</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3ResolveExprListNames</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sNC</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_OK</name>
     <operator>&amp;&amp;</operator> <call><name>ALWAYS</name><argument_list>(<argument><expr><operator>!</operator><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr></argument>)</argument_list></call></expr>
    )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><name><name>pNew</name><operator>-&gt;</operator><name>nExpr</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>reg</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name> <operator>+=</operator> <name>nCol</name><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pReturning</name><operator>-&gt;</operator><name>iRetReg</name></name> <operator>=</operator> <name>reg</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pCol</name> <init>= <expr><name><name>pNew</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pCol</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Due to !db-&gt;mallocFailed ~9 lines above */</comment>
        <expr_stmt><expr><call><name>sqlite3ExprCodeFactorable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>reg</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3ExprAffinity</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_AFF_REAL</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_RealAffinity</name></expr></argument>, <argument><expr><name>reg</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_MakeRecord</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>reg</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_NewRowid</name></expr></argument>, <argument><expr><name><name>pReturning</name><operator>-&gt;</operator><name>iRetCur</name></name></expr></argument>, <argument><expr><name>reg</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Insert</name></expr></argument>, <argument><expr><name><name>pReturning</name><operator>-&gt;</operator><name>iRetCur</name></name></expr></argument>, <argument><expr><name>reg</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>reg</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprListDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>eTriggerOp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>pTriggerTab</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/*
** Generate VDBE code for the statements inside the body of a single 
** trigger.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>codeTriggerProgram</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,            <comment type="block">/* The parser context */</comment>
  <parameter><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pStepList</name></decl></parameter>,   <comment type="block">/* List of statements inside the trigger body */</comment>
  <parameter><decl><type><name>int</name></type> <name>orconf</name></decl></parameter>                <comment type="block">/* Conflict algorithm. (OE_Abort, etc) */</comment>  
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pStep</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>pVdbe</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>pTriggerTab</name></name> <operator>&amp;&amp;</operator> <name><name>pParse</name><operator>-&gt;</operator><name>pToplevel</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pStepList</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>v</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>pStep</name><operator>=</operator><name>pStepList</name></expr>;</init> <condition><expr><name>pStep</name></expr>;</condition> <incr><expr><name>pStep</name><operator>=</operator><name><name>pStep</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <comment type="block">/* Figure out the ON CONFLICT policy that will be used for this step
    ** of the trigger program. If the statement that caused this trigger
    ** to fire had an explicit ON CONFLICT, then use it. Otherwise, use
    ** the ON CONFLICT policy that was specified as part of the trigger
    ** step statement. Example:
    **
    **   CREATE TRIGGER AFTER INSERT ON t1 BEGIN;
    **     INSERT OR REPLACE INTO t2 VALUES(new.a, new.b);
    **   END;
    **
    **   INSERT INTO t1 ... ;            -- insert into t2 uses REPLACE policy
    **   INSERT OR IGNORE INTO t1 ... ;  -- insert into t2 uses IGNORE policy
    */</comment>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>eOrconf</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>orconf</name><operator>==</operator><name>OE_Default</name><operator>)</operator></expr>?</condition><then><expr><name><name>pStep</name><operator>-&gt;</operator><name>orconf</name></name></expr></then><else>:<expr><operator>(</operator><name>u8</name><operator>)</operator><name>orconf</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>okConstFactor</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRACE</name></cpp:ifndef>
    <if_stmt><if>if<condition>( <expr><name><name>pStep</name><operator>-&gt;</operator><name>zSpan</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Trace</name></expr></argument>, <argument><expr><literal type="number">0x7fffffff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                        <argument><expr><call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"-- %s"</literal></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>zSpan</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <switch>switch<condition>( <expr><name><name>pStep</name><operator>-&gt;</operator><name>op</name></name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>TK_UPDATE</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Update</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, 
          <argument><expr><call><name>sqlite3TriggerStepSrc</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pStep</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>sqlite3ExprListDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pExprList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, 
          <argument><expr><call><name>sqlite3ExprDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, 
          <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>eOrconf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp0</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TK_INSERT</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Insert</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, 
          <argument><expr><call><name>sqlite3TriggerStepSrc</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pStep</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>sqlite3SelectDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, 
          <argument><expr><call><name>sqlite3IdListDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pIdList</name></name></expr></argument>)</argument_list></call></expr></argument>, 
          <argument><expr><name><name>pParse</name><operator>-&gt;</operator><name>eOrconf</name></name></expr></argument>,
          <argument><expr><call><name>sqlite3UpsertDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pUpsert</name></name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp0</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TK_DELETE</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3DeleteFrom</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, 
          <argument><expr><call><name>sqlite3TriggerStepSrc</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pStep</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><call><name>sqlite3ExprDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp0</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResetCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_SELECT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <block>{<block_content>
        <decl_stmt><decl><type><name>SelectDest</name></type> <name>sDest</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Select</name> <modifier>*</modifier></type><name>pSelect</name> <init>= <expr><call><name>sqlite3SelectDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3SelectDestInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sDest</name></expr></argument>, <argument><expr><name>SRT_Discard</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Select</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3SelectDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch> 
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_EXPLAIN_COMMENTS</name></cpp:ifdef>
<comment type="block">/*
** This function is used to add VdbeComment() annotations to a VDBE
** program. It is not used in production code, only for debugging.
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>onErrorText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>onError</name></decl></parameter>)</parameter_list><block>{<block_content>
  <switch>switch<condition>( <expr><name>onError</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>OE_Abort</name></expr>:</case>    <return>return <expr><literal type="string">"abort"</literal></expr>;</return>
    <case>case <expr><name>OE_Rollback</name></expr>:</case> <return>return <expr><literal type="string">"rollback"</literal></expr>;</return>
    <case>case <expr><name>OE_Fail</name></expr>:</case>     <return>return <expr><literal type="string">"fail"</literal></expr>;</return>
    <case>case <expr><name>OE_Replace</name></expr>:</case>  <return>return <expr><literal type="string">"replace"</literal></expr>;</return>
    <case>case <expr><name>OE_Ignore</name></expr>:</case>   <return>return <expr><literal type="string">"ignore"</literal></expr>;</return>
    <case>case <expr><name>OE_Default</name></expr>:</case>  <return>return <expr><literal type="string">"default"</literal></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="string">"n/a"</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Parse context structure pFrom has just been used to create a sub-vdbe
** (trigger program). If an error has occurred, transfer error information
** from pFrom to pTo.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>transferParseError</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pTo</name></decl></parameter>, <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pFrom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>nErr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTo</name><operator>-&gt;</operator><name>zErrMsg</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pTo</name><operator>-&gt;</operator><name>nErr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pTo</name><operator>-&gt;</operator><name>nErr</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>zErrMsg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>nErr</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>nErr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>rc</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>zErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Create and populate a new TriggerPrg object with a sub-program 
** implementing trigger pTrigger with ON CONFLICT policy orconf.
*/</comment>
<function><type><specifier>static</specifier> <name>TriggerPrg</name> <modifier>*</modifier></type><name>codeRowTrigger</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,       <comment type="block">/* Current parse context */</comment>
  <parameter><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>,   <comment type="block">/* Trigger to code */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,         <comment type="block">/* The table pTrigger is attached to */</comment>
  <parameter><decl><type><name>int</name></type> <name>orconf</name></decl></parameter>           <comment type="block">/* ON CONFLICT policy to code trigger program with */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pTop</name> <init>= <expr><call><name>sqlite3ParseToplevel</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>   <comment type="block">/* Database handle */</comment>
  <decl_stmt><decl><type><name>TriggerPrg</name> <modifier>*</modifier></type><name>pPrg</name></decl>;</decl_stmt>           <comment type="block">/* Value to return */</comment>
  <decl_stmt><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pWhen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Duplicate of trigger WHEN expression */</comment>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>                    <comment type="block">/* Temporary VM */</comment>
  <decl_stmt><decl><type><name>NameContext</name></type> <name>sNC</name></decl>;</decl_stmt>            <comment type="block">/* Name context for sub-vdbe */</comment>
  <decl_stmt><decl><type><name>SubProgram</name> <modifier>*</modifier></type><name>pProgram</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Sub-vdbe for trigger program */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iEndTrigger</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Label to jump to if WHEN is false */</comment>
  <decl_stmt><decl><type><name>Parse</name></type> <name>sSubParse</name></decl>;</decl_stmt>            <comment type="block">/* Parse context for sub-vdbe */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>pTab</name><operator>==</operator><call><name>tableOfTrigger</name><argument_list>(<argument><expr><name>pTrigger</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTop</name><operator>-&gt;</operator><name>pVdbe</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate the TriggerPrg and SubProgram objects. To ensure that they
  ** are freed if an error occurs, link them into the Parse.pTriggerPrg 
  ** list of the top-level Parse object sooner rather than later.  */</comment>
  <expr_stmt><expr><name>pPrg</name> <operator>=</operator> <call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TriggerPrg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pPrg</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pPrg</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pTop</name><operator>-&gt;</operator><name>pTriggerPrg</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTop</name><operator>-&gt;</operator><name>pTriggerPrg</name></name> <operator>=</operator> <name>pPrg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPrg</name><operator>-&gt;</operator><name>pProgram</name></name> <operator>=</operator> <name>pProgram</name> <operator>=</operator> <call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubProgram</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pProgram</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeLinkSubProgram</name><argument_list>(<argument><expr><name><name>pTop</name><operator>-&gt;</operator><name>pVdbe</name></name></expr></argument>, <argument><expr><name>pProgram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPrg</name><operator>-&gt;</operator><name>pTrigger</name></name> <operator>=</operator> <name>pTrigger</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPrg</name><operator>-&gt;</operator><name>orconf</name></name> <operator>=</operator> <name>orconf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPrg</name><operator>-&gt;</operator><name>aColmask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPrg</name><operator>-&gt;</operator><name>aColmask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>

  <comment type="block">/* Allocate and populate a new Parse context to use for coding the 
  ** trigger sub-program.  */</comment>
  <expr_stmt><expr><call><name>sqlite3ParseObjectInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSubParse</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sNC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sNC</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sNC</name><operator>.</operator><name>pParse</name></name> <operator>=</operator> <operator>&amp;</operator><name>sSubParse</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sSubParse</name><operator>.</operator><name>pTriggerTab</name></name> <operator>=</operator> <name>pTab</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sSubParse</name><operator>.</operator><name>pToplevel</name></name> <operator>=</operator> <name>pTop</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sSubParse</name><operator>.</operator><name>zAuthContext</name></name> <operator>=</operator> <name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sSubParse</name><operator>.</operator><name>eTriggerOp</name></name> <operator>=</operator> <name><name>pTrigger</name><operator>-&gt;</operator><name>op</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sSubParse</name><operator>.</operator><name>nQueryLoop</name></name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>nQueryLoop</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sSubParse</name><operator>.</operator><name>disableVtab</name></name> <operator>=</operator> <name><name>pParse</name><operator>-&gt;</operator><name>disableVtab</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSubParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>,</operator> <literal type="string">"Start: %s.%s (%s %s%s%s ON %s)"</literal><operator>,</operator> 
      <name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name><operator>,</operator> <call><name>onErrorText</name><argument_list>(<argument><expr><name>orconf</name></expr></argument>)</argument_list></call><operator>,</operator>
      <operator>(</operator><ternary><condition><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>tr_tm</name></name><operator>==</operator><name>TRIGGER_BEFORE</name></expr> ?</condition><then> <expr><literal type="string">"BEFORE"</literal></expr> </then><else>: <expr><literal type="string">"AFTER"</literal></expr></else></ternary><operator>)</operator><operator>,</operator>
        <operator>(</operator><ternary><condition><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_UPDATE</name></expr> ?</condition><then> <expr><literal type="string">"UPDATE"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator><operator>,</operator>
        <operator>(</operator><ternary><condition><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_INSERT</name></expr> ?</condition><then> <expr><literal type="string">"INSERT"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator><operator>,</operator>
        <operator>(</operator><ternary><condition><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_DELETE</name></expr> ?</condition><then> <expr><literal type="string">"DELETE"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator><operator>,</operator>
      <name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name>
    <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRACE</name></cpp:ifndef>
    <if_stmt><if>if<condition>( <expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, 
        <argument><expr><call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"-- TRIGGER %s"</literal></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>P4_DYNAMIC</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="block">/* If one was specified, code the WHEN clause. If it evaluates to false
    ** (or NULL) the sub-vdbe is immediately halted by jumping to the 
    ** OP_Halt inserted at the end of the program.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pWhen</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pWhen</name> <operator>=</operator> <call><name>sqlite3ExprDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>pWhen</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name><operator>==</operator><literal type="number">0</literal>
       <operator>&amp;&amp;</operator> <name>SQLITE_OK</name><operator>==</operator><call><name>sqlite3ResolveExprNames</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sNC</name></expr></argument>, <argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr> 
      )</condition><block>{<block_content>
        <expr_stmt><expr><name>iEndTrigger</name> <operator>=</operator> <call><name>sqlite3VdbeMakeLabel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSubParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3ExprIfFalse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSubParse</name></expr></argument>, <argument><expr><name>pWhen</name></expr></argument>, <argument><expr><name>iEndTrigger</name></expr></argument>, <argument><expr><name>SQLITE_JUMPIFNULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pWhen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Code the trigger program into the sub-vdbe. */</comment>
    <expr_stmt><expr><call><name>codeTriggerProgram</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSubParse</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>step_list</name></name></expr></argument>, <argument><expr><name>orconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Insert an OP_Halt at the end of the sub-program. */</comment>
    <if_stmt><if>if<condition>( <expr><name>iEndTrigger</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3VdbeResolveLabel</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iEndTrigger</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp0</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Halt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(<argument><expr><operator>(</operator><name>v</name><operator>,</operator> <literal type="string">"End: %s.%s"</literal><operator>,</operator> <name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name><operator>,</operator> <call><name>onErrorText</name><argument_list>(<argument><expr><name>orconf</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>transferParseError</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sSubParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pProgram</name><operator>-&gt;</operator><name>aOp</name></name> <operator>=</operator> <call><name>sqlite3VdbeTakeOpArray</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pProgram</name><operator>-&gt;</operator><name>nOp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTop</name><operator>-&gt;</operator><name>nMaxArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pProgram</name><operator>-&gt;</operator><name>nMem</name></name> <operator>=</operator> <name><name>sSubParse</name><operator>.</operator><name>nMem</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pProgram</name><operator>-&gt;</operator><name>nCsr</name></name> <operator>=</operator> <name><name>sSubParse</name><operator>.</operator><name>nTab</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pProgram</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pTrigger</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPrg</name><operator>-&gt;</operator><name>aColmask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sSubParse</name><operator>.</operator><name>oldmask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPrg</name><operator>-&gt;</operator><name>aColmask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sSubParse</name><operator>.</operator><name>newmask</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeDelete</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>transferParseError</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sSubParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>sSubParse</name><operator>.</operator><name>pTriggerPrg</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sSubParse</name><operator>.</operator><name>nMaxArg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ParseObjectReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sSubParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pPrg</name></expr>;</return>
</block_content>}</block></function>
    
<comment type="block">/*
** Return a pointer to a TriggerPrg object containing the sub-program for
** trigger pTrigger with default ON CONFLICT algorithm orconf. If no such
** TriggerPrg object exists, a new object is allocated and populated before
** being returned.
*/</comment>
<function><type><specifier>static</specifier> <name>TriggerPrg</name> <modifier>*</modifier></type><name>getRowTrigger</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,       <comment type="block">/* Current parse context */</comment>
  <parameter><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>,   <comment type="block">/* Trigger to code */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,         <comment type="block">/* The table trigger pTrigger is attached to */</comment>
  <parameter><decl><type><name>int</name></type> <name>orconf</name></decl></parameter>           <comment type="block">/* ON CONFLICT algorithm. */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pRoot</name> <init>= <expr><call><name>sqlite3ParseToplevel</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TriggerPrg</name> <modifier>*</modifier></type><name>pPrg</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>pTab</name><operator>==</operator><call><name>tableOfTrigger</name><argument_list>(<argument><expr><name>pTrigger</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* It may be that this trigger has already been coded (or is in the
  ** process of being coded). If this is the case, then an entry with
  ** a matching TriggerPrg.pTrigger field will be present somewhere
  ** in the Parse.pTriggerPrg list. Search for such an entry.  */</comment>
  <for>for<control>(<init><expr><name>pPrg</name><operator>=</operator><name><name>pRoot</name><operator>-&gt;</operator><name>pTriggerPrg</name></name></expr>;</init> 
      <condition><expr><name>pPrg</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pPrg</name><operator>-&gt;</operator><name>pTrigger</name></name><operator>!=</operator><name>pTrigger</name> <operator>||</operator> <name><name>pPrg</name><operator>-&gt;</operator><name>orconf</name></name><operator>!=</operator><name>orconf</name><operator>)</operator></expr>;</condition> 
      <incr><expr><name>pPrg</name><operator>=</operator><name><name>pPrg</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>
  )</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

  <comment type="block">/* If an existing TriggerPrg could not be located, create a new one. */</comment>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pPrg</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pPrg</name> <operator>=</operator> <call><name>codeRowTrigger</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTrigger</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>orconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>errByteOffset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pPrg</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Generate code for the trigger program associated with trigger p on 
** table pTab. The reg, orconf and ignoreJump parameters passed to this
** function are the same as those described in the header function for
** sqlite3CodeRowTrigger()
*/</comment>
<function><type><name>void</name></type> <name>sqlite3CodeRowTriggerDirect</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,       <comment type="block">/* Parse context */</comment>
  <parameter><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,          <comment type="block">/* Trigger to code */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,         <comment type="block">/* The table to code triggers from */</comment>
  <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>,             <comment type="block">/* Reg array containing OLD.* and NEW.* values */</comment>
  <parameter><decl><type><name>int</name></type> <name>orconf</name></decl></parameter>,          <comment type="block">/* ON CONFLICT policy */</comment>
  <parameter><decl><type><name>int</name></type> <name>ignoreJump</name></decl></parameter>       <comment type="block">/* Instruction to jump to for RAISE(IGNORE) */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* Main VM */</comment>
  <decl_stmt><decl><type><name>TriggerPrg</name> <modifier>*</modifier></type><name>pPrg</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pPrg</name> <operator>=</operator> <call><name>getRowTrigger</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>orconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pPrg</name> <operator>||</operator> <name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Code the OP_Program opcode in the parent VDBE. P4 of the OP_Program 
  ** is a pointer to the sub-vdbe containing the trigger program.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>pPrg</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bRecursive</name> <init>= <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>zName</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><operator>(</operator><name><name>pParse</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_RecTriggers</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Program</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>ignoreJump</name></expr></argument>, <argument><expr><operator>++</operator><name><name>pParse</name><operator>-&gt;</operator><name>nMem</name></name></expr></argument>,
                      <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>pPrg</name><operator>-&gt;</operator><name>pProgram</name></name></expr></argument>, <argument><expr><name>P4_SUBPROGRAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>VdbeComment</name><argument_list>(
        <argument><expr><operator>(</operator><name>v</name><operator>,</operator> <literal type="string">"Call: %s.%s"</literal><operator>,</operator> <operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr>?</condition><then><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></then><else>:<expr><literal type="string">"fkey"</literal></expr></else></ternary><operator>)</operator><operator>,</operator> <call><name>onErrorText</name><argument_list>(<argument><expr><name>orconf</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set the P5 operand of the OP_Program instruction to non-zero if
    ** recursive invocation of this trigger program is disallowed. Recursive
    ** invocation is disallowed if (a) the sub-program is really a trigger,
    ** not a foreign key action, and (b) the flag to enable recursive triggers
    ** is clear.  */</comment>
    <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>(</operator><name>u8</name><operator>)</operator><name>bRecursive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This is called to code the required FOR EACH ROW triggers for an operation
** on table pTab. The operation to code triggers for (INSERT, UPDATE or DELETE)
** is given by the op parameter. The tr_tm parameter determines whether the
** BEFORE or AFTER triggers are coded. If the operation is an UPDATE, then
** parameter pChanges is passed the list of columns being modified.
**
** If there are no triggers that fire at the specified time for the specified
** operation on pTab, this function is a no-op.
**
** The reg argument is the address of the first in an array of registers 
** that contain the values substituted for the new.* and old.* references
** in the trigger program. If N is the number of columns in table pTab
** (a copy of pTab-&gt;nCol), then registers are populated as follows:
**
**   Register       Contains
**   ------------------------------------------------------
**   reg+0          OLD.rowid
**   reg+1          OLD.* value of left-most column of pTab
**   ...            ...
**   reg+N          OLD.* value of right-most column of pTab
**   reg+N+1        NEW.rowid
**   reg+N+2        NEW.* value of left-most column of pTab
**   ...            ...
**   reg+N+N+1      NEW.* value of right-most column of pTab
**
** For ON DELETE triggers, the registers containing the NEW.* values will
** never be accessed by the trigger program, so they are not allocated or 
** populated by the caller (there is no data to populate them with anyway). 
** Similarly, for ON INSERT triggers the values stored in the OLD.* registers
** are never accessed, and so are not allocated by the caller. So, for an
** ON INSERT trigger, the value passed to this function as parameter reg
** is not a readable register, although registers (reg+N) through 
** (reg+N+N+1) are.
**
** Parameter orconf is the default conflict resolution algorithm for the
** trigger program to use (REPLACE, IGNORE etc.). Parameter ignoreJump
** is the instruction that control should jump to if a trigger program
** raises an IGNORE exception.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3CodeRowTrigger</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,       <comment type="block">/* Parse context */</comment>
  <parameter><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>,   <comment type="block">/* List of triggers on table pTab */</comment>
  <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>,              <comment type="block">/* One of TK_UPDATE, TK_INSERT, TK_DELETE */</comment>
  <parameter><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pChanges</name></decl></parameter>,  <comment type="block">/* Changes list for any UPDATE OF triggers */</comment>
  <parameter><decl><type><name>int</name></type> <name>tr_tm</name></decl></parameter>,           <comment type="block">/* One of TRIGGER_BEFORE, TRIGGER_AFTER */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,         <comment type="block">/* The table to code triggers from */</comment>
  <parameter><decl><type><name>int</name></type> <name>reg</name></decl></parameter>,             <comment type="block">/* The first in an array of registers (see above) */</comment>
  <parameter><decl><type><name>int</name></type> <name>orconf</name></decl></parameter>,          <comment type="block">/* ON CONFLICT policy */</comment>
  <parameter><decl><type><name>int</name></type> <name>ignoreJump</name></decl></parameter>       <comment type="block">/* Instruction to jump to for RAISE(IGNORE) */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>          <comment type="block">/* Used to iterate through pTrigger list */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name><operator>==</operator><name>TK_UPDATE</name> <operator>||</operator> <name>op</name><operator>==</operator><name>TK_INSERT</name> <operator>||</operator> <name>op</name><operator>==</operator><name>TK_DELETE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>tr_tm</name><operator>==</operator><name>TRIGGER_BEFORE</name> <operator>||</operator> <name>tr_tm</name><operator>==</operator><name>TRIGGER_AFTER</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>op</name><operator>==</operator><name>TK_UPDATE</name><operator>)</operator><operator>==</operator><operator>(</operator><name>pChanges</name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pTrigger</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>

    <comment type="block">/* Sanity checking:  The schema for the trigger and for the table are
    ** always defined.  The trigger must be in the same schema as the table
    ** or else it must be a TEMP trigger. */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTabSchema</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>pTabSchema</name></name> 
         <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>pSchema</name></name><operator>==</operator><name><name>pParse</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pSchema</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Determine whether we should code this trigger.  One of two choices:
    **   1. The trigger is an exact match to the current DML statement
    **   2. This is a RETURNING trigger for INSERT but we are currently
    **      doing the UPDATE part of an UPSERT.
    */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>op</name> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>bReturning</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_INSERT</name> <operator>&amp;&amp;</operator> <name>op</name><operator>==</operator><name>TK_UPDATE</name><operator>)</operator><operator>)</operator>
     <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>tr_tm</name></name><operator>==</operator><name>tr_tm</name> 
     <operator>&amp;&amp;</operator> <call><name>checkColumnOverlap</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>, <argument><expr><name>pChanges</name></expr></argument>)</argument_list></call></expr>
    )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>bReturning</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3CodeRowTriggerDirect</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>, <argument><expr><name>orconf</name></expr></argument>, <argument><expr><name>ignoreJump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>sqlite3IsToplevel</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>codeReturningTrigger</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Triggers may access values stored in the old.* or new.* pseudo-table. 
** This function returns a 32-bit bitmask indicating which columns of the 
** old.* or new.* tables actually are used by triggers. This information 
** may be used by the caller, for example, to avoid having to load the entire
** old.* record into memory when executing an UPDATE or DELETE command.
**
** Bit 0 of the returned mask is set if the left-most column of the
** table may be accessed using an [old|new].&lt;col&gt; reference. Bit 1 is set if
** the second leftmost column value is required, and so on. If there
** are more than 32 columns in the table, and at least one of the columns
** with an index greater than 32 may be accessed, 0xffffffff is returned.
**
** It is not possible to determine if the old.rowid or new.rowid column is 
** accessed by triggers. The caller must always assume that it is.
**
** Parameter isNew must be either 1 or 0. If it is 0, then the mask returned
** applies to the old.* table. If 1, the new.* table.
**
** Parameter tr_tm must be a mask with one or both of the TRIGGER_BEFORE
** and TRIGGER_AFTER bits set. Values accessed by BEFORE triggers are only
** included in the returned mask if the TRIGGER_BEFORE bit is set in the
** tr_tm parameter. Similarly, values accessed by AFTER triggers are only
** included in the returned mask if the TRIGGER_AFTER bit is set in tr_tm.
*/</comment>
<function><type><name>u32</name></type> <name>sqlite3TriggerColmask</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,       <comment type="block">/* Parse context */</comment>
  <parameter><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>,   <comment type="block">/* List of triggers on table pTab */</comment>
  <parameter><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pChanges</name></decl></parameter>,  <comment type="block">/* Changes list for any UPDATE OF triggers */</comment>
  <parameter><decl><type><name>int</name></type> <name>isNew</name></decl></parameter>,           <comment type="block">/* 1 for new.* ref mask, 0 for old.* ref mask */</comment>
  <parameter><decl><type><name>int</name></type> <name>tr_tm</name></decl></parameter>,           <comment type="block">/* Mask of TRIGGER_BEFORE|TRIGGER_AFTER */</comment>
  <parameter><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl></parameter>,         <comment type="block">/* The table to code triggers from */</comment>
  <parameter><decl><type><name>int</name></type> <name>orconf</name></decl></parameter>           <comment type="block">/* Default ON CONFLICT policy for trigger steps */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>op</name> <init>= <expr><ternary><condition><expr><name>pChanges</name></expr> ?</condition><then> <expr><name>TK_UPDATE</name></expr> </then><else>: <expr><name>TK_DELETE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>isNew</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>isNew</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pTrigger</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>op</name>
     <operator>&amp;&amp;</operator> <operator>(</operator><name>tr_tm</name><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tr_tm</name></name><operator>)</operator>
     <operator>&amp;&amp;</operator> <call><name>checkColumnOverlap</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pColumns</name></name></expr></argument>,<argument><expr><name>pChanges</name></expr></argument>)</argument_list></call></expr>
    )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bReturning</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>mask</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>TriggerPrg</name> <modifier>*</modifier></type><name>pPrg</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>pPrg</name> <operator>=</operator> <call><name>getRowTrigger</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr><name>orconf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pPrg</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>mask</name> <operator>|=</operator> <name><name>pPrg</name><operator>-&gt;</operator><name>aColmask</name><index>[<expr><name>isNew</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>mask</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_OMIT_TRIGGER) */</comment>
</unit>
