<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/test_rtree.c"><comment type="block">/*
** 2010 August 28
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Code for testing all sorts of SQLite interfaces. This code
** is not included in the SQLite library. 
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_SQLITE_TCL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"sqlite_tcl.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"tcl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Solely for the UNUSED_PARAMETER() macro. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifdef>
<comment type="block">/* 
** Type used to cache parameter information for the "circle" r-tree geometry
** callback.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Circle</name></name></type> <name>Circle</name>;</typedef>
<struct>struct <name>Circle</name> <block>{
  <struct>struct <name>Box</name> <block>{
    <decl_stmt><decl><type><name>double</name></type> <name>xmin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>xmax</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>ymin</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>ymax</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aBox</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>
  <decl_stmt><decl><type><name>double</name></type> <name>centerx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>centery</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>radius</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>mxArea</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eScoreType</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** Destructor function for Circle objects allocated by circle_geom().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>circle_del</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of "circle" r-tree geometry callback.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>circle_geom</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_rtree_geometry</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nCoord</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_rtree_dbl</name> <modifier>*</modifier></type><name>aCoord</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Iterator variable */</comment>
  <decl_stmt><decl><type><name>Circle</name> <modifier>*</modifier></type><name>pCircle</name></decl>;</decl_stmt>                <comment type="block">/* Structure defining circular region */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>xmin</name></decl>, <decl><type ref="prev"/><name>xmax</name></decl>;</decl_stmt>              <comment type="block">/* X dimensions of box being tested */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>ymin</name></decl>, <decl><type ref="prev"/><name>ymax</name></decl>;</decl_stmt>              <comment type="block">/* X dimensions of box being tested */</comment>

  <expr_stmt><expr><name>xmin</name> <operator>=</operator> <name><name>aCoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>xmax</name> <operator>=</operator> <name><name>aCoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ymin</name> <operator>=</operator> <name><name>aCoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ymax</name> <operator>=</operator> <name><name>aCoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCircle</name> <operator>=</operator> <operator>(</operator><name>Circle</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pUser</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCircle</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* If pUser is still 0, then the parameter values have not been tested
    ** for correctness or stored into a Circle structure yet. Do this now. */</comment>

    <comment type="block">/* This geometry callback is for use with a 2-dimensional r-tree table.
    ** Return an error if the table does not have exactly 2 dimensions. */</comment>
    <if_stmt><if>if<condition>( <expr><name>nCoord</name><operator>!=</operator><literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Test that the correct number of parameters (3) have been supplied,
    ** and that the parameters are in range (that the radius of the circle 
    ** radius is greater than zero). */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nParam</name></name><operator>!=</operator><literal type="number">3</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;</operator><literal type="number">0.0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Allocate a structure to cache parameter data in. Return SQLITE_NOMEM
    ** if the allocation fails. */</comment>
    <expr_stmt><expr><name>pCircle</name> <operator>=</operator> <operator>(</operator><name>Circle</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pUser</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Circle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pCircle</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>xDelUser</name></name> <operator>=</operator> <name>circle_del</name></expr>;</expr_stmt>

    <comment type="block">/* Record the center and radius of the circular region. One way that
    ** tested bounding boxes that intersect the circular region are detected
    ** is by testing if each corner of the bounding box lies within radius
    ** units of the center of the circle. */</comment>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

    <comment type="block">/* Define two bounding box regions. The first, aBox[0], extends to
    ** infinity in the X dimension. It covers the same range of the Y dimension
    ** as the circular region. The second, aBox[1], extends to infinity in
    ** the Y dimension and is constrained to the range of the circle in the
    ** X dimension.
    **
    ** Then imagine each box is split in half along its short axis by a line
    ** that intersects the center of the circular region. A bounding box
    ** being tested can be said to intersect the circular region if it contains
    ** points from each half of either of the two infinite bounding boxes.
    */</comment>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xmin</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xmax</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ymin</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name> <operator>+</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ymax</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name> <operator>-</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xmin</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name> <operator>+</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xmax</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name> <operator>-</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ymin</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ymax</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>mxArea</name></name> <operator>=</operator> <operator>(</operator><name>xmax</name> <operator>-</operator> <name>xmin</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ymax</name> <operator>-</operator> <name>ymin</name><operator>)</operator> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if any of the 4 corners of the bounding-box being tested lie 
  ** inside the circular region. If they do, then the bounding-box does
  ** intersect the region of interest. Set the output variable to true and
  ** return SQLITE_OK in this case. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">0x01</literal><operator>)</operator></expr> ?</condition><then> <expr><name>xmax</name></expr> </then><else>: <expr><name>xmin</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">0x02</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ymax</name></expr> </then><else>: <expr><name>ymin</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d2</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>d2</name>  <operator>=</operator> <operator>(</operator><name>x</name><operator>-</operator><name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name><operator>-</operator><name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>d2</name> <operator>+=</operator> <operator>(</operator><name>y</name><operator>-</operator><name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>d2</name><operator>&lt;</operator><operator>(</operator><name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name><operator>*</operator><name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Check if the bounding box covers any other part of the circular region.
  ** See comments above for a description of how this test works. If it does
  ** cover part of the circular region, set the output variable to true
  ** and return SQLITE_OK. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>xmin</name><operator>&lt;=</operator><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xmin</name> 
     <operator>&amp;&amp;</operator> <name>xmax</name><operator>&gt;=</operator><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xmax</name> 
     <operator>&amp;&amp;</operator> <name>ymin</name><operator>&lt;=</operator><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ymin</name> 
     <operator>&amp;&amp;</operator> <name>ymax</name><operator>&gt;=</operator><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ymax</name></expr> 
    )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* The specified bounding box does not intersect the circular region. Set
  ** the output variable to zero and return SQLITE_OK. */</comment>
  <expr_stmt><expr><operator>*</operator><name>pRes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of "circle" r-tree geometry callback using the 
** 2nd-generation interface that allows scoring.
**
** Two calling forms:
**
**          Qcircle(X,Y,Radius,eType)        -- All values are doubles
**          Qcircle('x:X y:Y r:R e:ETYPE')   -- Single string parameter
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>circle_query_func</name><parameter_list>(<parameter><decl><type><name>sqlite3_rtree_query_info</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Iterator variable */</comment>
  <decl_stmt><decl><type><name>Circle</name> <modifier>*</modifier></type><name>pCircle</name></decl>;</decl_stmt>                <comment type="block">/* Structure defining circular region */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>xmin</name></decl>, <decl><type ref="prev"/><name>xmax</name></decl>;</decl_stmt>              <comment type="block">/* X dimensions of box being tested */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>ymin</name></decl>, <decl><type ref="prev"/><name>ymax</name></decl>;</decl_stmt>              <comment type="block">/* X dimensions of box being tested */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nWithin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                <comment type="block">/* Number of corners inside the circle */</comment>

  <expr_stmt><expr><name>xmin</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>xmax</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ymin</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ymax</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCircle</name> <operator>=</operator> <operator>(</operator><name>Circle</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pUser</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCircle</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* If pUser is still 0, then the parameter values have not been tested
    ** for correctness or stored into a Circle structure yet. Do this now. */</comment>

    <comment type="block">/* This geometry callback is for use with a 2-dimensional r-tree table.
    ** Return an error if the table does not have exactly 2 dimensions. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nCoord</name></name><operator>!=</operator><literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Test that the correct number of parameters (1 or 4) have been supplied.
    */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nParam</name></name><operator>!=</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nParam</name></name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Allocate a structure to cache parameter data in. Return SQLITE_NOMEM
    ** if the allocation fails. */</comment>
    <expr_stmt><expr><name>pCircle</name> <operator>=</operator> <operator>(</operator><name>Circle</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pUser</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Circle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pCircle</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>xDelUser</name></name> <operator>=</operator> <name>circle_del</name></expr>;</expr_stmt>

    <comment type="block">/* Record the center and radius of the circular region. One way that
    ** tested bounding boxes that intersect the circular region are detected
    ** is by testing if each corner of the bounding box lies within radius
    ** units of the center of the circle. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nParam</name></name><operator>==</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>eScoreType</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apSqlParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>eScoreType</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <while>while<condition>( <expr><name>z</name> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'r'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'y'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'e'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>eScoreType</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>atof</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">' '</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <while>while<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
        <while>while<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name><operator>&lt;</operator><literal type="number">0.0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCircle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Define two bounding box regions. The first, aBox[0], extends to
    ** infinity in the X dimension. It covers the same range of the Y dimension
    ** as the circular region. The second, aBox[1], extends to infinity in
    ** the Y dimension and is constrained to the range of the circle in the
    ** X dimension.
    **
    ** Then imagine each box is split in half along its short axis by a line
    ** that intersects the center of the circular region. A bounding box
    ** being tested can be said to intersect the circular region if it contains
    ** points from each half of either of the two infinite bounding boxes.
    */</comment>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xmin</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>xmax</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ymin</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name> <operator>+</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ymax</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name> <operator>-</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xmin</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name> <operator>+</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xmax</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name> <operator>-</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ymin</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ymax</name> <operator>=</operator> <name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCircle</name><operator>-&gt;</operator><name>mxArea</name></name> <operator>=</operator> <literal type="number">200.0</literal><operator>*</operator><literal type="number">200.0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check if any of the 4 corners of the bounding-box being tested lie 
  ** inside the circular region. If they do, then the bounding-box does
  ** intersect the region of interest. Set the output variable to true and
  ** return SQLITE_OK in this case. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">0x01</literal><operator>)</operator></expr> ?</condition><then> <expr><name>xmax</name></expr> </then><else>: <expr><name>xmin</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">0x02</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ymax</name></expr> </then><else>: <expr><name>ymin</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>d2</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>d2</name>  <operator>=</operator> <operator>(</operator><name>x</name><operator>-</operator><name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name>x</name><operator>-</operator><name><name>pCircle</name><operator>-&gt;</operator><name>centerx</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>d2</name> <operator>+=</operator> <operator>(</operator><name>y</name><operator>-</operator><name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name>y</name><operator>-</operator><name><name>pCircle</name><operator>-&gt;</operator><name>centery</name></name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>d2</name><operator>&lt;</operator><operator>(</operator><name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name><operator>*</operator><name><name>pCircle</name><operator>-&gt;</operator><name>radius</name></name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nWithin</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Check if the bounding box covers any other part of the circular region.
  ** See comments above for a description of how this test works. If it does
  ** cover part of the circular region, set the output variable to true
  ** and return SQLITE_OK. */</comment>
  <if_stmt><if>if<condition>( <expr><name>nWithin</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>xmin</name><operator>&lt;=</operator><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xmin</name> 
       <operator>&amp;&amp;</operator> <name>xmax</name><operator>&gt;=</operator><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xmax</name> 
       <operator>&amp;&amp;</operator> <name>ymin</name><operator>&lt;=</operator><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ymin</name> 
       <operator>&amp;&amp;</operator> <name>ymax</name><operator>&gt;=</operator><name><name>pCircle</name><operator>-&gt;</operator><name>aBox</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ymax</name></expr> 
      )</condition><block>{<block_content>
        <expr_stmt><expr><name>nWithin</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pCircle</name><operator>-&gt;</operator><name>eScoreType</name></name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Depth first search */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rScore</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pCircle</name><operator>-&gt;</operator><name>eScoreType</name></name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Breadth first search */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rScore</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pCircle</name><operator>-&gt;</operator><name>eScoreType</name></name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Depth-first search, except sort the leaf nodes by area with
    ** the largest area first */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rScore</name></name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <operator>(</operator><name>xmax</name><operator>-</operator><name>xmin</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ymax</name><operator>-</operator><name>ymin</name><operator>)</operator><operator>/</operator><name><name>pCircle</name><operator>-&gt;</operator><name>mxArea</name></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rScore</name></name><operator>&lt;</operator><literal type="number">0.01</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rScore</name></name> <operator>=</operator> <literal type="number">0.01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rScore</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pCircle</name><operator>-&gt;</operator><name>eScoreType</name></name><operator>==</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Depth-first search, except exclude odd rowids */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rScore</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&amp;</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nWithin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Breadth-first search, except exclude odd rowids */</comment>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rScore</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&amp;</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nWithin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nWithin</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eWithin</name></name> <operator>=</operator> <name>NOT_WITHIN</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>nWithin</name><operator>&gt;=</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eWithin</name></name> <operator>=</operator> <name>FULLY_WITHIN</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eWithin</name></name> <operator>=</operator> <name>PARTLY_WITHIN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
** Implementation of "breadthfirstsearch" r-tree geometry callback using the 
** 2nd-generation interface that allows scoring.
**
**     ... WHERE id MATCH breadthfirstsearch($x0,$x1,$y0,$y1) ...
**
** It returns all entries whose bounding boxes overlap with $x0,$x1,$y0,$y1.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>bfs_query_func</name><parameter_list>(<parameter><decl><type><name>sqlite3_rtree_query_info</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>x0</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>y0</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>        <comment type="block">/* Dimensions of box being tested */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>bx0</name></decl>,<decl><type ref="prev"/><name>bx1</name></decl>,<decl><type ref="prev"/><name>by0</name></decl>,<decl><type ref="prev"/><name>by1</name></decl>;</decl_stmt>    <comment type="block">/* Boundary of the query function */</comment>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nParam</name></name><operator>!=</operator><literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>x0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>x1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>y0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>y1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aCoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bx0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>bx1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>by0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>by1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rScore</name></name> <operator>=</operator> <literal type="number">100</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eParentWithin</name></name><operator>==</operator><name>FULLY_WITHIN</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eWithin</name></name> <operator>=</operator> <name>FULLY_WITHIN</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x0</name><operator>&gt;=</operator><name>bx0</name> <operator>&amp;&amp;</operator> <name>x1</name><operator>&lt;=</operator><name>bx1</name> <operator>&amp;&amp;</operator> <name>y0</name><operator>&gt;=</operator><name>by0</name> <operator>&amp;&amp;</operator> <name>y1</name><operator>&lt;=</operator><name>by1</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eWithin</name></name> <operator>=</operator> <name>FULLY_WITHIN</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>x1</name><operator>&gt;=</operator><name>bx0</name> <operator>&amp;&amp;</operator> <name>x0</name><operator>&lt;=</operator><name>bx1</name> <operator>&amp;&amp;</operator> <name>y1</name><operator>&gt;=</operator><name>by0</name> <operator>&amp;&amp;</operator> <name>y0</name><operator>&lt;=</operator><name>by1</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eWithin</name></name> <operator>=</operator> <name>PARTLY_WITHIN</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eWithin</name></name> <operator>=</operator> <name>NOT_WITHIN</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* END of implementation of "circle" geometry callback.
**************************************************************************
*************************************************************************/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>INCLUDE_SQLITE_TCL_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"sqlite_tcl.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>"tcl.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>Cube</name></name></type> <name>Cube</name>;</typedef>
<struct>struct <name>Cube</name> <block>{
  <decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>width</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>height</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>depth</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cube_context_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The context pointer registered along with the 'cube' callback is
** always ((void *)&amp;gHere). This is just to facilitate testing, it is not
** actually used for anything.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>gHere</name> <init>= <expr><literal type="number">42</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Implementation of a simple r-tree geom callback to test for intersection
** of r-tree rows with a "cube" shape. Cubes are defined by six scalar
** coordinates as follows:
**
**   cube(x, y, z, width, height, depth)
**
** The width, height and depth parameters must all be greater than zero.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cube_geom</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_rtree_geometry</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nCoord</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_rtree_dbl</name> <modifier>*</modifier></type><name>aCoord</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piRes</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Cube</name> <modifier>*</modifier></type><name>pCube</name> <init>= <expr><operator>(</operator><name>Cube</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pUser</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pContext</name></name><operator>==</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gHere</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pCube</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nParam</name></name><operator>!=</operator><literal type="number">6</literal> <operator>||</operator> <name>nCoord</name><operator>!=</operator><literal type="number">6</literal>
     <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&lt;=</operator><literal type="number">0.0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;=</operator><literal type="number">0.0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&lt;=</operator><literal type="number">0.0</literal></expr>
    )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pCube</name> <operator>=</operator> <operator>(</operator><name>Cube</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Cube</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pCube</name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCube</name><operator>-&gt;</operator><name>x</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCube</name><operator>-&gt;</operator><name>y</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCube</name><operator>-&gt;</operator><name>z</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCube</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCube</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCube</name><operator>-&gt;</operator><name>depth</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aParam</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pUser</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pCube</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>xDelUser</name></name> <operator>=</operator> <name>cube_context_free</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nCoord</name><operator>==</operator><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>piRes</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>aCoord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;=</operator><operator>(</operator><name><name>pCube</name><operator>-&gt;</operator><name>x</name></name><operator>+</operator><name><name>pCube</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator>
   <operator>&amp;&amp;</operator> <name><name>aCoord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;=</operator><name><name>pCube</name><operator>-&gt;</operator><name>x</name></name>
   <operator>&amp;&amp;</operator> <name><name>aCoord</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;=</operator><operator>(</operator><name><name>pCube</name><operator>-&gt;</operator><name>y</name></name><operator>+</operator><name><name>pCube</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator>
   <operator>&amp;&amp;</operator> <name><name>aCoord</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;=</operator><name><name>pCube</name><operator>-&gt;</operator><name>y</name></name>
   <operator>&amp;&amp;</operator> <name><name>aCoord</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;=</operator><operator>(</operator><name><name>pCube</name><operator>-&gt;</operator><name>z</name></name><operator>+</operator><name><name>pCube</name><operator>-&gt;</operator><name>depth</name></name><operator>)</operator>
   <operator>&amp;&amp;</operator> <name><name>aCoord</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&gt;=</operator><name><name>pCube</name><operator>-&gt;</operator><name>z</name></name></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>piRes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_RTREE */</comment>

<function><type><specifier>static</specifier> <name>int</name> <name>SQLITE_TCLAPI</name></type> <name>register_cube_geom</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>clientData</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifndef>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>clientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>objc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>objv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>getDbPointer</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>sqlite3</name><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlite3ErrName</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_rtree_geometry_callback</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"cube"</literal></expr></argument>, <argument><expr><name>cube_geom</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>gHere</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3ErrName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>SQLITE_TCLAPI</name></type> <name>register_circle_geom</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>clientData</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>objc</name></decl></parameter>,
  <parameter><decl><type><name>Tcl_Obj</name> <modifier>*</modifier><name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></parameter>
)</parameter_list><block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_ENABLE_RTREE</name></cpp:ifndef>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>clientData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>objc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>objv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>getDbPointer</name><argument_list>(<argument><expr><name>Tcl_Interp</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>, <argument><expr><name>sqlite3</name><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlite3ErrName</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>objc</name><operator>!=</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr><literal type="string">"DB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>TCL_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_rtree_geometry_callback</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"circle"</literal></expr></argument>, <argument><expr><name>circle_geom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_rtree_query_callback</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Qcircle"</literal></expr></argument>,
                                      <argument><expr><name>circle_query_func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_rtree_query_callback</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"breadthfirstsearch"</literal></expr></argument>,
                                      <argument><expr><name>bfs_query_func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3ErrName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>Sqlitetestrtree_Init</name><parameter_list>(<parameter><decl><type><name>Tcl_Interp</name> <modifier>*</modifier></type><name>interp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"register_cube_geom"</literal></expr></argument>, <argument><expr><name>register_cube_geom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><literal type="string">"register_circle_geom"</literal></expr></argument>,<argument><expr><name>register_circle_geom</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
