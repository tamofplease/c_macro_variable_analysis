<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/mem3.c"><comment type="block">/*
** 2007 October 14
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the C functions that implement a memory
** allocation subsystem for use by SQLite. 
**
** This version of the memory allocation subsystem omits all
** use of malloc(). The SQLite user supplies a block of memory
** before calling sqlite3_initialize() from which allocations
** are made and returned by the xMalloc() and xRealloc() 
** implementations. Once sqlite3_initialize() has been called,
** the amount of memory available to SQLite is fixed and cannot
** be changed.
**
** This version of the memory allocation subsystem is included
** in the build only if SQLITE_ENABLE_MEMSYS3 is defined.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** This version of the memory allocator is only built into the library
** SQLITE_ENABLE_MEMSYS3 is defined. Defining this symbol does not
** mean that the library will use a memory-pool by default, just that
** it is available. The mempool allocator is activated by calling
** sqlite3_config().
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_MEMSYS3</name></cpp:ifdef>

<comment type="block">/*
** Maximum size (in Mem3Blocks) of a "small" chunk.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MX_SMALL</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>


<comment type="block">/*
** Number of freelist hash slots
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N_HASH</name></cpp:macro>  <cpp:value>61</cpp:value></cpp:define>

<comment type="block">/*
** A memory allocation (also called a "chunk") consists of two or 
** more blocks where each block is 8 bytes.  The first 8 bytes are 
** a header that is not returned to the user.
**
** A chunk is two or more blocks that is either checked out or
** free.  The first block has format u.hdr.  u.hdr.size4x is 4 times the
** size of the allocation in blocks if the allocation is free.
** The u.hdr.size4x&amp;1 bit is true if the chunk is checked out and
** false if the chunk is on the freelist.  The u.hdr.size4x&amp;2 bit
** is true if the previous chunk is checked out and false if the
** previous chunk is free.  The u.hdr.prevSize field is the size of
** the previous chunk in blocks if the previous chunk is on the
** freelist. If the previous chunk is checked out, then
** u.hdr.prevSize can be part of the data for that chunk and should
** not be read or written.
**
** We often identify a chunk by its index in mem3.aPool[].  When
** this is done, the chunk index refers to the second block of
** the chunk.  In this way, the first chunk has an index of 1.
** A chunk index of 0 means "no such chunk" and is the equivalent
** of a NULL pointer.
**
** The second block of free chunks is of the form u.list.  The
** two fields form a double-linked list of chunks of related sizes.
** Pointers to the head of the list are stored in mem3.aiSmall[] 
** for smaller chunks and mem3.aiHash[] for larger chunks.
**
** The second block of a chunk is user data if the chunk is checked 
** out.  If a chunk is checked out, the user data may extend into
** the u.hdr.prevSize value of the following chunk.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Mem3Block</name></name></type> <name>Mem3Block</name>;</typedef>
<struct>struct <name>Mem3Block</name> <block>{
  <union>union <block>{
    <struct>struct <block>{
      <decl_stmt><decl><type><name>u32</name></type> <name>prevSize</name></decl>;</decl_stmt>   <comment type="block">/* Size of previous chunk in Mem3Block elements */</comment>
      <decl_stmt><decl><type><name>u32</name></type> <name>size4x</name></decl>;</decl_stmt>     <comment type="block">/* 4x the size of current chunk in Mem3Block elements */</comment>
    }</block> <decl><name>hdr</name></decl>;</struct>
    <struct>struct <block>{
      <decl_stmt><decl><type><name>u32</name></type> <name>next</name></decl>;</decl_stmt>       <comment type="block">/* Index in mem3.aPool[] of next free chunk */</comment>
      <decl_stmt><decl><type><name>u32</name></type> <name>prev</name></decl>;</decl_stmt>       <comment type="block">/* Index in mem3.aPool[] of previous free chunk */</comment>
    }</block> <decl><name>list</name></decl>;</struct>
  }</block> <decl><name>u</name></decl>;</union>
}</block>;</struct>

<comment type="block">/*
** All of the static variables used by this module are collected
** into a single structure named "mem3".  This is to keep the
** static variables organized and to reduce namespace pollution
** when this module is combined with other in the amalgamation.
*/</comment>
<expr_stmt><expr><specifier>static</specifier> <name>SQLITE_WSD</name> struct <name>Mem3Global</name> <block>{
  <comment type="block">/*
  ** Memory available for allocation. nPool is the size of the array
  ** (in Mem3Blocks) pointed to by aPool less 2.
  */</comment>
  <expr><name>u32</name> <name>nPool</name></expr>;
  <expr><name>Mem3Block</name> <operator>*</operator><name>aPool</name></expr>;

  <comment type="block">/*
  ** True if we are evaluating an out-of-memory callback.
  */</comment>
  <expr><name>int</name> <name>alarmBusy</name></expr>;
  
  <comment type="block">/*
  ** Mutex to control access to the memory allocation subsystem.
  */</comment>
  <expr><name>sqlite3_mutex</name> <operator>*</operator><name>mutex</name></expr>;
  
  <comment type="block">/*
  ** The minimum amount of free space that we have seen.
  */</comment>
  <expr><name>u32</name> <name>mnKeyBlk</name></expr>;

  <comment type="block">/*
  ** iKeyBlk is the index of the key chunk.  Most new allocations
  ** occur off of this chunk.  szKeyBlk is the size (in Mem3Blocks)
  ** of the current key chunk.  iKeyBlk is 0 if there is no key chunk.
  ** The key chunk is not in either the aiHash[] or aiSmall[].
  */</comment>
  <expr><name>u32</name> <name>iKeyBlk</name></expr>;
  <expr><name>u32</name> <name>szKeyBlk</name></expr>;

  <comment type="block">/*
  ** Array of lists of free blocks according to the block size 
  ** for smaller chunks, or a hash on the block size for larger
  ** chunks.
  */</comment>
  <expr><name>u32</name> <name><name>aiSmall</name><index>[<expr><name>MX_SMALL</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;   <comment type="block">/* For sizes 2 through MX_SMALL, inclusive */</comment>
  <expr><name>u32</name> <name><name>aiHash</name><index>[<expr><name>N_HASH</name></expr>]</index></name></expr>;        <comment type="block">/* For sizes MX_SMALL+1 and larger */</comment>
}</block> <name>mem3</name> <operator>=</operator> <block>{ <expr><literal type="number">97535575</literal></expr> }</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem3</name></cpp:macro> <cpp:value>GLOBAL(struct Mem3Global, mem3)</cpp:value></cpp:define>

<comment type="block">/*
** Unlink the chunk at mem3.aPool[i] from list it is currently
** on.  *pRoot is the list that i is a member of.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3UnlinkFromList</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>pRoot</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>next</name> <init>= <expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>prev</name> <init>= <expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>prev</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>prev</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pRoot</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>prev</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>next</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>next</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Unlink the chunk at index i from 
** whatever list is currently a member of.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3Unlink</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>size</name><operator>==</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>+</operator><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>size</name><operator>&gt;=</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>size</name> <operator>&lt;=</operator> <name>MX_SMALL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memsys3UnlinkFromList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aiSmall</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <name>size</name> <operator>%</operator> <name>N_HASH</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memsys3UnlinkFromList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aiHash</name><index>[<expr><name>hash</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Link the chunk at mem3.aPool[i] so that is on the list rooted
** at *pRoot.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3LinkIntoList</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>pRoot</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>*</operator><name>pRoot</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRoot</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><operator>*</operator><name>pRoot</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRoot</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Link the chunk at index i into either the appropriate
** small chunk list, or into the large chunk hash table.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3Link</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>hash</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>size</name><operator>==</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>+</operator><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>size</name><operator>&gt;=</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>size</name> <operator>&lt;=</operator> <name>MX_SMALL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memsys3LinkIntoList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aiSmall</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>hash</name> <operator>=</operator> <name>size</name> <operator>%</operator> <name>N_HASH</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memsys3LinkIntoList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aiHash</name><index>[<expr><name>hash</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** If the STATIC_MEM mutex is not already held, obtain it now. The mutex
** will already be held (obtained by code in malloc.c) if
** sqlite3GlobalConfig.bMemStat is true.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3Enter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bMemstat</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mem3</name><operator>.</operator><name>mutex</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3Leave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Called when we are unable to satisfy an allocation of nBytes.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3OutOfMemory</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>mem3</name><operator>.</operator><name>alarmBusy</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>alarmBusy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_release_memory</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>alarmBusy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Chunk i is a free chunk that has been unlinked.  Adjust its 
** size parameters for check-out and return a pointer to the 
** user portion of the chunk.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memsys3Checkout</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>nBlock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>x</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>/</operator><literal type="number">4</literal><operator>==</operator><name>nBlock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>+</operator><name>nBlock</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name><operator>==</operator><name>nBlock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>=</operator> <name>nBlock</name><operator>*</operator><literal type="number">4</literal> <operator>|</operator> <literal type="number">1</literal> <operator>|</operator> <operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>+</operator><name>nBlock</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name> <operator>=</operator> <name>nBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>+</operator><name>nBlock</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Carve a piece off of the end of the mem3.iKeyBlk free chunk.
** Return a pointer to the new allocation.  Or, if the key chunk
** is not large enough, return 0.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memsys3FromKeyBlk</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>nBlock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>&gt;=</operator><name>nBlock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nBlock</name><operator>&gt;=</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Use the entire key chunk */</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>memsys3Checkout</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name></expr></argument>, <argument><expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>mnKeyBlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>p</name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Split the key block.  Return the tail. */</comment>
    <decl_stmt><decl><type><name>u32</name></type> <name>newi</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>newi</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name> <operator>+</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name> <operator>-</operator> <name>nBlock</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>newi</name> <operator>&gt;</operator> <name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>+</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name> <operator>=</operator> <name>nBlock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>+</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>newi</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>=</operator> <name>nBlock</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name> <operator>-=</operator> <name>nBlock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>newi</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>*</operator><literal type="number">4</literal> <operator>|</operator> <name>x</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name> <operator>&lt;</operator> <name><name>mem3</name><operator>.</operator><name>mnKeyBlk</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>mnKeyBlk</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>newi</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** *pRoot is the head of a list of free chunks of the same size
** or same size hash.  In other words, *pRoot is an entry in either
** mem3.aiSmall[] or mem3.aiHash[].  
**
** This routine examines all entries on the given list and tries
** to coalesce each entries with adjacent free chunks.  
**
** If it sees a chunk that is larger than mem3.iKeyBlk, it replaces 
** the current mem3.iKeyBlk with the new larger chunk.  In order for
** this mem3.iKeyBlk replacement to work, the key chunk must be
** linked into the hash tables.  That is not the normal state of
** affairs, of course.  The calling routine must link the key
** chunk before invoking this routine, then must unlink the (possibly
** changed) key chunk once this routine has finished.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3Merge</name><parameter_list>(<parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>pRoot</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>iNext</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><operator>*</operator><name>pRoot</name></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name>iNext</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>iNext</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>size</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>size</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memsys3UnlinkFromList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>pRoot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name> <operator>&gt;</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>prev</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>prev</name><operator>==</operator><name>iNext</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iNext</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>prev</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>memsys3Unlink</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name>size</name><operator>/</operator><literal type="number">4</literal> <operator>-</operator> <name>prev</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>prev</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>prev</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>=</operator> <name>size</name><operator>*</operator><literal type="number">4</literal> <operator>|</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>prev</name><operator>+</operator><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memsys3Link</name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>size</name> <operator>/=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>size</name><operator>&gt;</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Return a block of memory of at least nBytes in size.
** Return NULL if unable.
**
** This function assumes that the necessary mutexes, if any, are
** already held by the caller. Hence "Unsafe".
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memsys3MallocUnsafe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>nBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>toFree</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Mem3Block</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&lt;=</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nBlock</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nBlock</name> <operator>=</operator> <operator>(</operator><name>nByte</name> <operator>+</operator> <literal type="number">11</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nBlock</name><operator>&gt;=</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* STEP 1:
  ** Look for an entry of the correct size in either the small
  ** chunk table or in the large chunk hash table.  This is
  ** successful most of the time (about 9 times out of 10).
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>nBlock</name> <operator>&lt;=</operator> <name>MX_SMALL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aiSmall</name><index>[<expr><name>nBlock</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memsys3UnlinkFromList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aiSmall</name><index>[<expr><name>nBlock</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>memsys3Checkout</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>nBlock</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>hash</name> <init>= <expr><name>nBlock</name> <operator>%</operator> <name>N_HASH</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>mem3</name><operator>.</operator><name>aiHash</name><index>[<expr><name>hash</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>next</name></name></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>/</operator><literal type="number">4</literal><operator>==</operator><name>nBlock</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memsys3UnlinkFromList</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aiHash</name><index>[<expr><name>hash</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>memsys3Checkout</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>nBlock</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* STEP 2:
  ** Try to satisfy the allocation by carving a piece off of the end
  ** of the key chunk.  This step usually works if step 1 fails.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>&gt;=</operator><name>nBlock</name></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name>memsys3FromKeyBlk</name><argument_list>(<argument><expr><name>nBlock</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>


  <comment type="block">/* STEP 3:  
  ** Loop through the entire memory pool.  Coalesce adjacent free
  ** chunks.  Recompute the key chunk as the largest free chunk.
  ** Then try again to satisfy the allocation by carving a piece off
  ** of the end of the key chunk.  This step happens very
  ** rarely (we hope!)
  */</comment>
  <for>for<control>(<init><expr><name>toFree</name><operator>=</operator><name>nBlock</name><operator>*</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>toFree</name><operator>&lt;</operator><operator>(</operator><name><name>mem3</name><operator>.</operator><name>nPool</name></name><operator>*</operator><literal type="number">16</literal><operator>)</operator></expr>;</condition> <incr><expr><name>toFree</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>memsys3OutOfMemory</name><argument_list>(<argument><expr><name>toFree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memsys3Link</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N_HASH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>memsys3Merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aiHash</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MX_SMALL</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>memsys3Merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aiSmall</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memsys3Unlink</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>&gt;=</operator><name>nBlock</name></expr> )</condition><block>{<block_content>
        <return>return <expr><call><name>memsys3FromKeyBlk</name><argument_list>(<argument><expr><name>nBlock</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* If none of the above worked, then we fail. */</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free an outstanding memory allocation.
**
** This function assumes that the necessary mutexes, if any, are
** already held by the caller. Hence "Unsafe".
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3FreeUnsafe</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Mem3Block</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Mem3Block</name><operator>*</operator><operator>)</operator><name>pOld</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name><operator>&gt;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name></name> <operator>&amp;&amp;</operator> <name>p</name><operator>&lt;</operator><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>nPool</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <name>p</name> <operator>-</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i</name><operator>+</operator><name>size</name><operator>&lt;=</operator><name><name>mem3</name><operator>.</operator><name>nPool</name></name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>+</operator><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>+</operator><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memsys3Link</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Try to expand the key using the newly freed chunk */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name></expr> )</condition><block>{<block_content>
    <while>while<condition>( <expr><operator>(</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memsys3Unlink</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>*</operator><literal type="number">4</literal> <operator>|</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>+</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>&amp;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>(</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>+</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memsys3Unlink</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>+</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name> <operator>+=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>+</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>*</operator><literal type="number">4</literal> <operator>|</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name><operator>+</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return the size of an outstanding allocation, in bytes.  The
** size returned omits the 8-byte header overhead.  This only
** works for chunks that are currently checked out.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memsys3Size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Mem3Block</name> <modifier>*</modifier></type><name>pBlock</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pBlock</name> <operator>=</operator> <operator>(</operator><name>Mem3Block</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pBlock</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name><name>pBlock</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>&amp;</operator><operator>~</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">4</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Round up a request size to the next valid allocation size.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memsys3Roundup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;=</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">12</literal></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">11</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Allocate nBytes of memory.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memsys3Malloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nBytes</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nBytes</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>          <comment type="block">/* malloc.c filters out 0 byte requests */</comment>
  <expr_stmt><expr><call><name>memsys3Enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memsys3MallocUnsafe</name><argument_list>(<argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memsys3Leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</return> 
</block_content>}</block></function>

<comment type="block">/*
** Free memory.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3Free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPrior</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pPrior</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memsys3Enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memsys3FreeUnsafe</name><argument_list>(<argument><expr><name>pPrior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memsys3Leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Change the size of an existing memory allocation
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>memsys3Realloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPrior</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBytes</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nOld</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pPrior</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nBytes</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pPrior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nOld</name> <operator>=</operator> <call><name>memsys3Size</name><argument_list>(<argument><expr><name>pPrior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nBytes</name><operator>&lt;=</operator><name>nOld</name> <operator>&amp;&amp;</operator> <name>nBytes</name><operator>&gt;=</operator><name>nOld</name><operator>-</operator><literal type="number">128</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>pPrior</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memsys3Enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memsys3MallocUnsafe</name><argument_list>(<argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>nOld</name><operator>&lt;</operator><name>nBytes</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pPrior</name></expr></argument>, <argument><expr><name>nOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pPrior</name></expr></argument>, <argument><expr><name>nBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>memsys3FreeUnsafe</name><argument_list>(<argument><expr><name>pPrior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memsys3Leave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Initialize this module.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memsys3Init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>pHeap</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Store a pointer to the memory block in global structure mem3. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Mem3Block</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name></name> <operator>=</operator> <operator>(</operator><name>Mem3Block</name> <operator>*</operator><operator>)</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>pHeap</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>nPool</name></name> <operator>=</operator> <operator>(</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>nHeap</name></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Mem3Block</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

  <comment type="block">/* Initialize the key block. */</comment>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>nPool</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>mnKeyBlk</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>=</operator> <operator>(</operator><name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>nPool</name></name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>nPool</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name><name>mem3</name><operator>.</operator><name>nPool</name></name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Deinitialize this module.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memsys3Shutdown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>



<comment type="block">/*
** Open the file indicated and write a log of all unfreed memory 
** allocations into that log.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Memsys3Dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>size</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>zFilename</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>zFilename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>out</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>out</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"** Unable to output memory debug output log: %s **\n"</literal></expr></argument>,
                      <argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>memsys3Enter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"CHUNKS:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>mem3</name><operator>.</operator><name>nPool</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>size</name><operator>/</operator><literal type="number">4</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>size</name><operator>/</operator><literal type="number">4</literal><operator>&lt;=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%p size error\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>size</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>+</operator><name>size</name><operator>/</operator><literal type="number">4</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>prevSize</name></name><operator>!=</operator><name>size</name><operator>/</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%p tail size does not match\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name><operator>+</operator><name>size</name><operator>/</operator><literal type="number">4</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>!=</operator><operator>(</operator><name>size</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%p tail checkout bit is incorrect\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>size</name><operator>&amp;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%p %6d bytes checked out\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size</name><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%p %6d bytes free%s\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>size</name><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>-</operator><literal type="number">8</literal></expr></argument>,
                  <argument><expr><ternary><condition><expr><name>i</name><operator>==</operator><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name></expr> ?</condition><then> <expr><literal type="string">" **key**"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MX_SMALL</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>mem3</name><operator>.</operator><name>aiSmall</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"small(%2d):"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aiSmall</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>=</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>next</name></name></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" %p(%d)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
              <argument><expr><operator>(</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  </block_content>}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N_HASH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>mem3</name><operator>.</operator><name>aiHash</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"hash(%2d):"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>j</name> <operator>=</operator> <name><name>mem3</name><operator>.</operator><name>aiHash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>=</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>list</name><operator>.</operator><name>next</name></name></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">" %p(%d)"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,
              <argument><expr><operator>(</operator><name><name>mem3</name><operator>.</operator><name>aPool</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>hdr</name><operator>.</operator><name>size4x</name></name><operator>/</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><literal type="number">8</literal><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"key=%d\n"</literal></expr></argument>, <argument><expr><name><name>mem3</name><operator>.</operator><name>iKeyBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"nowUsed=%d\n"</literal></expr></argument>, <argument><expr><name><name>mem3</name><operator>.</operator><name>nPool</name></name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <name><name>mem3</name><operator>.</operator><name>szKeyBlk</name></name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"mxUsed=%d\n"</literal></expr></argument>, <argument><expr><name><name>mem3</name><operator>.</operator><name>nPool</name></name><operator>*</operator><literal type="number">8</literal> <operator>-</operator> <name><name>mem3</name><operator>.</operator><name>mnKeyBlk</name></name><operator>*</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>mem3</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>out</name><operator>==</operator><name>stdout</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
** This routine is the only routine in this file with external 
** linkage.
**
** Populate the low-level memory allocation function pointers in
** sqlite3GlobalConfig.m with pointers to the routines in this file. The
** arguments specify the block of memory to manage.
**
** This routine is only called by sqlite3_config(), and therefore
** is not required to be threadsafe (it is not).
*/</comment>
<function><type><specifier>const</specifier> <name>sqlite3_mem_methods</name> <modifier>*</modifier></type><name>sqlite3MemGetMemsys3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_mem_methods</name></type> <name>mempoolMethods</name> <init>= <expr><block>{
     <expr><name>memsys3Malloc</name></expr>,
     <expr><name>memsys3Free</name></expr>,
     <expr><name>memsys3Realloc</name></expr>,
     <expr><name>memsys3Size</name></expr>,
     <expr><name>memsys3Roundup</name></expr>,
     <expr><name>memsys3Init</name></expr>,
     <expr><name>memsys3Shutdown</name></expr>,
     <expr><literal type="number">0</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>&amp;</operator><name>mempoolMethods</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_MEMSYS3 */</comment>
</unit>
