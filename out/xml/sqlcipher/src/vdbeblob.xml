<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/vdbeblob.c"><comment type="block">/*
** 2007 May 1
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains code used to implement incremental BLOB I/O.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdbeInt.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_INCRBLOB</name></cpp:ifndef>

<comment type="block">/*
** Valid sqlite3_blob* handles point to Incrblob structures.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Incrblob</name></name></type> <name>Incrblob</name>;</typedef>
<struct>struct <name>Incrblob</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>              <comment type="block">/* Size of open blob, in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOffset</name></decl>;</decl_stmt>            <comment type="block">/* Byte offset of blob in cursor data */</comment>
  <decl_stmt><decl><type><name>u16</name></type> <name>iCol</name></decl>;</decl_stmt>               <comment type="block">/* Table column this handle is open on */</comment>
  <decl_stmt><decl><type><name>BtCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>         <comment type="block">/* Cursor pointing at blob row */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>    <comment type="block">/* Statement holding cursor open */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>            <comment type="block">/* The associated database */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDb</name></decl>;</decl_stmt>              <comment type="block">/* Database name */</comment>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>            <comment type="block">/* Table object */</comment>
}</block>;</struct>


<comment type="block">/*
** This function is used by both blob_open() and blob_reopen(). It seeks
** the b-tree cursor associated with blob handle p to point to row iRow.
** If successful, SQLITE_OK is returned and subsequent calls to
** sqlite3_blob_read() or sqlite3_blob_write() access the specified row.
**
** If an error occurs, or if the specified row does not exist or does not
** contain a value of type TEXT or BLOB in the column nominated when the
** blob handle was opened, then an error code is returned and *pzErr may
** be set to point to a buffer containing an error message. It is the
** responsibility of the caller to free the error message buffer using
** sqlite3DbFree().
**
** If an error does occur, then the b-tree cursor is closed. All subsequent
** calls to sqlite3_blob_read(), blob_write() or blob_reopen() will 
** immediately return SQLITE_ABORT.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>blobSeekToRow</name><parameter_list>(<parameter><decl><type><name>Incrblob</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iRow</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Error code */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Error message */</comment>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>Vdbe</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Set the value of register r[1] in the SQL statement to integer iRow. 
  ** This is done directly as a performance optimization
  */</comment>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>aMem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flags</name> <operator>=</operator> <name>MEM_Int</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>aMem</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name>iRow</name></expr>;</expr_stmt>

  <comment type="block">/* If the statement has been run before (and is paused at the OP_ResultRow)
  ** then back it up to the point where it does the OP_NotExists.  This could
  ** have been down with an extra OP_Goto, but simply setting the program
  ** counter is faster. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>v</name><operator>-&gt;</operator><name>pc</name></name><operator>&gt;</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>pc</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>v</name><operator>-&gt;</operator><name>aOp</name><index>[<expr><name><name>v</name><operator>-&gt;</operator><name>pc</name></name></expr>]</index></name><operator>.</operator><name>opcode</name><operator>==</operator><name>OP_NotExists</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3VdbeExec</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>VdbeCursor</name> <modifier>*</modifier></type><name>pC</name> <init>= <expr><name><name>v</name><operator>-&gt;</operator><name>apCsr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u32</name></type> <name>type</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pC</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>eCurType</name></name><operator>==</operator><name>CURTYPE_BTREE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name><name>pC</name><operator>-&gt;</operator><name>nHdrParsed</name></name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr> ?</condition><then> <expr><name><name>pC</name><operator>-&gt;</operator><name>aType</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>nHdrParsed</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>nHdrParsed</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>type</name><operator>&lt;</operator><literal type="number">12</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"cannot open value of type %s"</literal></expr></argument>,
          <argument><expr><ternary><condition><expr><name>type</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><literal type="string">"null"</literal></expr></then><else>: <expr><ternary><condition><expr><name>type</name><operator>==</operator><literal type="number">7</literal></expr>?</condition><then><expr><literal type="string">"real"</literal></expr></then><else>: <expr><literal type="string">"integer"</literal></expr></else></ternary></expr></else></ternary></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iOffset</name></name> <operator>=</operator> <name><name>pC</name><operator>-&gt;</operator><name>aType</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name> <operator>+</operator> <name><name>pC</name><operator>-&gt;</operator><name>nField</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <call><name>sqlite3VdbeSerialTypeLen</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pCsr</name></name> <operator>=</operator>  <name><name>pC</name><operator>-&gt;</operator><name>uc</name><operator>.</operator><name>pCursor</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeIncrblobCursor</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pCsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"no such rowid: %lld"</literal></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name>zErr</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>!=</operator><name>SQLITE_DONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <name>zErr</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open a blob handle.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_blob_open</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,            <comment type="block">/* The database connection */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>,        <comment type="block">/* The attached database containing the blob */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTable</name></decl></parameter>,     <comment type="block">/* The table containing the blob */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zColumn</name></decl></parameter>,    <comment type="block">/* The column containing the blob */</comment>
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iRow</name></decl></parameter>,      <comment type="block">/* The row containing the glob */</comment>
  <parameter><decl><type><name>int</name></type> <name>wrFlag</name></decl></parameter>,             <comment type="block">/* True -&gt; read/write access, false -&gt; read-only */</comment>
  <parameter><decl><type><name>sqlite3_blob</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBlob</name></decl></parameter>   <comment type="block">/* Handle for accessing the blob returned here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nAttempt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>               <comment type="block">/* Index of zColumn in row-record */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Incrblob</name> <modifier>*</modifier></type><name>pBlob</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Parse</name></type> <name>sParse</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>ppBlob</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_MISUSE_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><operator>*</operator><name>ppBlob</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3SafetyCheckOk</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>zTable</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_MISUSE_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name>wrFlag</name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>wrFlag</name></expr>;</expr_stmt>                <comment type="block">/* wrFlag = (wrFlag ? 1 : 0); */</comment>

  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pBlob</name> <operator>=</operator> <operator>(</operator><name>Incrblob</name> <operator>*</operator><operator>)</operator><call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Incrblob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3ParseObjectInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>,<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pBlob</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>blob_open_out</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zErr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite3BtreeEnterAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTab</name> <operator>=</operator> <call><name>sqlite3LocateTable</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zTable</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTab</name> <operator>&amp;&amp;</operator> <call><name>IsVirtual</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pTab</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>, <argument><expr><literal type="string">"cannot open virtual table: %s"</literal></expr></argument>, <argument><expr><name>zTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pTab</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>HasRowid</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pTab</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>, <argument><expr><literal type="string">"cannot open table without rowid: %s"</literal></expr></argument>, <argument><expr><name>zTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIEW</name></cpp:ifndef>
    <if_stmt><if>if<condition>( <expr><name>pTab</name> <operator>&amp;&amp;</operator> <call><name>IsView</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pTab</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>, <argument><expr><literal type="string">"cannot open view: %s"</literal></expr></argument>, <argument><expr><name>zTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pTab</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>sParse</name><operator>.</operator><name>zErrMsg</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zErr</name> <operator>=</operator> <name><name>sParse</name><operator>.</operator><name>zErrMsg</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sParse</name><operator>.</operator><name>zErrMsg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeLeaveAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>blob_open_out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pBlob</name><operator>-&gt;</operator><name>pTab</name></name> <operator>=</operator> <name>pTab</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlob</name><operator>-&gt;</operator><name>zDb</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><call><name>sqlite3SchemaToIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>zDbSName</name></expr>;</expr_stmt>

    <comment type="block">/* Now search pTab for the exact column. */</comment>
    <for>for<control>(<init><expr><name>iCol</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iCol</name><operator>&lt;</operator><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>iCol</name></expr>]</index></name><operator>.</operator><name>zCnName</name></expr></argument>, <argument><expr><name>zColumn</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>==</operator><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"no such column: \"%s\""</literal></expr></argument>, <argument><expr><name>zColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeLeaveAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>blob_open_out</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the value is being opened for writing, check that the
    ** column is not indexed, and that it is not part of a foreign key. 
    */</comment>
    <if_stmt><if>if<condition>( <expr><name>wrFlag</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFault</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FOREIGN_KEY</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>flags</name></name><operator>&amp;</operator><name>SQLITE_ForeignKeys</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* Check that the column is not part of an FK child key definition. It
        ** is not necessary to check if it is part of a parent key, as parent
        ** key columns must be indexed. The check below will pick up this 
        ** case.  */</comment>
        <decl_stmt><decl><type><name>FKey</name> <modifier>*</modifier></type><name>pFKey</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>IsOrdinaryTable</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>pFKey</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>tab</name><operator>.</operator><name>pFKey</name></name></expr>;</init> <condition><expr><name>pFKey</name></expr>;</condition> <incr><expr><name>pFKey</name><operator>=</operator><name><name>pFKey</name><operator>-&gt;</operator><name>pNextFrom</name></name></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
          <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pFKey</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>pFKey</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>iFrom</name><operator>==</operator><name>iCol</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><name>zFault</name> <operator>=</operator> <literal type="string">"foreign key"</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
        </block_content>}</block></for>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <for>for<control>(<init><expr><name>pIdx</name><operator>=</operator><name><name>pTab</name><operator>-&gt;</operator><name>pIndex</name></name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name><operator>=</operator><name><name>pIdx</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pIdx</name><operator>-&gt;</operator><name>nKeyCol</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <comment type="block">/* FIXME: Be smarter about indexes that use expressions */</comment>
          <if_stmt><if>if<condition>( <expr><name><name>pIdx</name><operator>-&gt;</operator><name>aiColumn</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name>iCol</name> <operator>||</operator> <name><name>pIdx</name><operator>-&gt;</operator><name>aiColumn</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name>XN_EXPR</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>zFault</name> <operator>=</operator> <literal type="string">"indexed"</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>zFault</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zErr</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"cannot open %s column for writing"</literal></expr></argument>, <argument><expr><name>zFault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3BtreeLeaveAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>blob_open_out</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pBlob</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <operator>(</operator><name>sqlite3_stmt</name> <operator>*</operator><operator>)</operator><call><name>sqlite3VdbeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pBlob</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>||</operator> <name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pBlob</name><operator>-&gt;</operator><name>pStmt</name></name></expr> )</condition><block>{<block_content>
      
      <comment type="block">/* This VDBE program seeks a btree cursor to the identified 
      ** db/table/row entry. The reason for using a vdbe program instead
      ** of writing code to use the b-tree layer directly is that the
      ** vdbe program will take advantage of the various transaction,
      ** locking and error handling infrastructure built into the vdbe.
      **
      ** After seeking the cursor, the vdbe executes an OP_ResultRow.
      ** Code external to the Vdbe then "borrows" the b-tree cursor and
      ** uses it to implement the blob_read(), blob_write() and 
      ** blob_bytes() functions.
      **
      ** The sqlite3_blob_close() function finalizes the vdbe program,
      ** which closes the b-tree cursor and (possibly) commits the 
      ** transaction.
      */</comment>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>iLn</name> <init>= <expr><call><name>VDBE_OFFSET_LINENO</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VdbeOpList</name></type> <name><name>openBlob</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><name>OP_TableLock</name></expr>,      <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,  <comment type="block">/* 0: Acquire a read or write lock */</comment>
        <expr><block>{<expr><name>OP_OpenRead</name></expr>,       <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,  <comment type="block">/* 1: Open a cursor */</comment>
        <comment type="block">/* blobSeekToRow() will initialize r[1] to the desired rowid */</comment>
        <expr><block>{<expr><name>OP_NotExists</name></expr>,      <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,  <comment type="block">/* 2: Seek the cursor to rowid=r[1] */</comment>
        <expr><block>{<expr><name>OP_Column</name></expr>,         <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,  <comment type="block">/* 3  */</comment>
        <expr><block>{<expr><name>OP_ResultRow</name></expr>,      <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,  <comment type="block">/* 4  */</comment>
        <expr><block>{<expr><name>OP_Halt</name></expr>,           <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,  <comment type="block">/* 5  */</comment>
      }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><operator>(</operator><name>Vdbe</name> <operator>*</operator><operator>)</operator><name><name>pBlob</name><operator>-&gt;</operator><name>pStmt</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iDb</name> <init>= <expr><call><name>sqlite3SchemaToIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>VdbeOp</name> <modifier>*</modifier></type><name>aOp</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4Int</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Transaction</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>wrFlag</name></expr></argument>, 
                           <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>schema_cookie</name></name></expr></argument>,
                           <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>iGeneration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3VdbeCurrentAddr</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>aOp</name> <operator>=</operator> <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>openBlob</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>openBlob</name></expr></argument>, <argument><expr><name>iLn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Make sure a mutex is held on the table to be accessed */</comment>
      <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>aOp</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* Configure the OP_TableLock instruction */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_SHARED_CACHE</name></cpp:ifdef>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>=</operator> <name>OP_Noop</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p1</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p2</name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>tnum</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p3</name> <operator>=</operator> <name>wrFlag</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeChangeP4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>P4_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="block">/* Remove either the OP_OpenWrite or OpenRead. Set the P2 
        ** parameter of the other to pTab-&gt;tnum.  */</comment>
        <if_stmt><if>if<condition>( <expr><name>wrFlag</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>opcode</name> <operator>=</operator> <name>OP_OpenWrite</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p2</name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>tnum</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p3</name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>   

        <comment type="block">/* Configure the number of columns. Configure the cursor to
        ** think that the table has one more column than it really
        ** does. An OP_Column to retrieve this imaginary column will
        ** always return an SQL NULL. This is useful because it means
        ** we can invoke OP_Column to fill in the vdbe cursors type 
        ** and offset cache without causing any IO.
        */</comment>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p4type</name> <operator>=</operator> <name>P4_INT32</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p4</name><operator>.</operator><name>i</name></name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>p2</name> <operator>=</operator> <name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>sParse</name><operator>.</operator><name>nVar</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sParse</name><operator>.</operator><name>nMem</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sParse</name><operator>.</operator><name>nTab</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeMakeReady</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
   
    <expr_stmt><expr><name><name>pBlob</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <name>iCol</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlob</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3BtreeLeaveAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr> )</condition><block>{<block_content>
      <goto>goto <name>blob_open_out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>blobSeekToRow</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><operator>++</operator><name>nAttempt</name><operator>)</operator><operator>&gt;=</operator><name>SQLITE_MAX_SCHEMA_RETRY</name> <operator>||</operator> <name>rc</name><operator>!=</operator><name>SQLITE_SCHEMA</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3ParseObjectReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>blob_open_out</name>:</label>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppBlob</name> <operator>=</operator> <operator>(</operator><name>sqlite3_blob</name> <operator>*</operator><operator>)</operator><name>pBlob</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pBlob</name> <operator>&amp;&amp;</operator> <name><name>pBlob</name><operator>-&gt;</operator><name>pStmt</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3VdbeFinalize</name><argument_list>(<argument><expr><operator>(</operator><name>Vdbe</name> <operator>*</operator><operator>)</operator><name><name>pBlob</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3ErrorWithMsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>zErr</name></expr> ?</condition><then> <expr><literal type="string">"%s"</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ParseObjectReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3ApiExit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close a blob handle that was previously created using
** sqlite3_blob_open().
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_blob_close</name><parameter_list>(<parameter><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Incrblob</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Incrblob</name> <operator>*</operator><operator>)</operator><name>pBlob</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>db</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Perform a read or write operation on a blob
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>blobReadWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iOffset</name></decl></parameter>, 
  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xCall</name>)<parameter_list>(<parameter><decl><type><name>BtCursor</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>u32</name></type></decl></parameter>, <parameter><decl><type><name>u32</name></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Incrblob</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Incrblob</name> <operator>*</operator><operator>)</operator><name>pBlob</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_MISUSE_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>Vdbe</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>iOffset</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>iOffset</name><operator>+</operator><name>n</name><operator>)</operator></expr></argument>&gt;</argument_list></name><name><name>p</name><operator>-&gt;</operator><name>nByte</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* Request is out of range. Return a transient error. */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* If there is no statement handle, then the blob-handle has
    ** already been invalidated. Return SQLITE_ABORT in this case.
    */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ABORT</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Call either BtreeData() or BtreePutData(). If SQLITE_ABORT is
    ** returned, clean-up the statement handle.
    */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>db</name> <operator>==</operator> <name><name>v</name><operator>-&gt;</operator><name>db</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3BtreeEnterCursor</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pCsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_PREUPDATE_HOOK</name></cpp:ifdef>
    <if_stmt><if>if<condition>( <expr><name>xCall</name><operator>==</operator><name>sqlite3BtreePutData</name> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>xPreUpdateCallback</name></name></expr> )</condition><block>{<block_content>
      <comment type="block">/* If a pre-update hook is registered and this is a write cursor, 
      ** invoke it here. 
      ** 
      ** TODO: The preupdate-hook is passed SQLITE_DELETE, even though this
      ** operation should really be an SQLITE_UPDATE. This is probably
      ** incorrect, but is convenient because at this point the new.* values 
      ** are not easily obtainable. And for the sessions module, an 
      ** SQLITE_UPDATE where the PK columns do not change is handled in the 
      ** same way as an SQLITE_DELETE (the SQLITE_DELETE code is actually
      ** slightly more efficient). Since you cannot write to a PK column
      ** using the incremental-blob API, this works. For the sessions module
      ** anyhow.
      */</comment>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iKey</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>iKey</name> <operator>=</operator> <call><name>sqlite3BtreeIntegerKey</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pCsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>v</name><operator>-&gt;</operator><name>apCsr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>v</name><operator>-&gt;</operator><name>apCsr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>eCurType</name><operator>==</operator><name>CURTYPE_BTREE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbePreUpdateHook</name><argument_list>(
          <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>v</name><operator>-&gt;</operator><name>apCsr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>SQLITE_DELETE</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pTab</name></name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>xCall</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pCsr</name></name></expr></argument>, <argument><expr><name>iOffset</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>iOffset</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3BtreeLeaveCursor</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pCsr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ABORT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3VdbeFinalize</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3Error</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3ApiExit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read data from a blob handle.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_blob_read</name><parameter_list>(<parameter><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iOffset</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>blobReadWrite</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>iOffset</name></expr></argument>, <argument><expr><name>sqlite3BtreePayloadChecked</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to a blob handle.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_blob_write</name><parameter_list>(<parameter><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iOffset</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>blobReadWrite</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>iOffset</name></expr></argument>, <argument><expr><name>sqlite3BtreePutData</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Query a blob handle for the size of the data.
**
** The Incrblob.nByte field is fixed for the lifetime of the Incrblob
** so no mutex is required for access.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_blob_bytes</name><parameter_list>(<parameter><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Incrblob</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Incrblob</name> <operator>*</operator><operator>)</operator><name>pBlob</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name>p</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>nByte</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Move an existing blob handle to point to a different row of the same
** database table.
**
** If an error occurs, or if the specified row does not exist or does not
** contain a blob or text value, then an error code is returned and the
** database handle error code and message set. If this happens, then all 
** subsequent calls to sqlite3_blob_xxx() functions (except blob_close()) 
** immediately return SQLITE_ABORT.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_blob_reopen</name><parameter_list>(<parameter><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iRow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Incrblob</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Incrblob</name> <operator>*</operator><operator>)</operator><name>pBlob</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_MISUSE_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>db</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* If there is no statement handle, then the blob-handle has
    ** already been invalidated. Return SQLITE_ABORT in this case.
    */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ABORT</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Vdbe</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name><operator>)</operator><operator>-&gt;</operator><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>blobSeekToRow</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3ErrorWithMsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>zErr</name></expr> ?</condition><then> <expr><literal type="string">"%s"</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_SCHEMA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3ApiExit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>pStmt</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* #ifndef SQLITE_OMIT_INCRBLOB */</comment>
</unit>
