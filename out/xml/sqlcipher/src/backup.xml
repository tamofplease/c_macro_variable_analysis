<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/backup.c"><comment type="block">/*
** 2009 January 28
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the implementation of the sqlite3_backup_XXX() 
** API functions and the related features.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"btreeInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** Structure allocated for each backup operation.
*/</comment>
<struct>struct <name>sqlite3_backup</name> <block>{
  <decl_stmt><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>pDestDb</name></decl>;</decl_stmt>        <comment type="block">/* Destination database handle */</comment>
  <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pDest</name></decl>;</decl_stmt>            <comment type="block">/* Destination b-tree file */</comment>
  <decl_stmt><decl><type><name>u32</name></type> <name>iDestSchema</name></decl>;</decl_stmt>         <comment type="block">/* Original schema cookie in destination */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bDestLocked</name></decl>;</decl_stmt>         <comment type="block">/* True once a write-transaction is open on pDest */</comment>

  <decl_stmt><decl><type><name>Pgno</name></type> <name>iNext</name></decl>;</decl_stmt>              <comment type="block">/* Page number of the next source page to copy */</comment>
  <decl_stmt><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>pSrcDb</name></decl>;</decl_stmt>         <comment type="block">/* Source database handle */</comment>
  <decl_stmt><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pSrc</name></decl>;</decl_stmt>             <comment type="block">/* Source b-tree file */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                  <comment type="block">/* Backup process error code */</comment>

  <comment type="block">/* These two variables are set by every call to backup_step(). They are
  ** read by calls to backup_remaining() and backup_pagecount().
  */</comment>
  <decl_stmt><decl><type><name>Pgno</name></type> <name>nRemaining</name></decl>;</decl_stmt>         <comment type="block">/* Number of pages left to copy */</comment>
  <decl_stmt><decl><type><name>Pgno</name></type> <name>nPagecount</name></decl>;</decl_stmt>         <comment type="block">/* Total number of pages to copy */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>isAttached</name></decl>;</decl_stmt>          <comment type="block">/* True once backup has been registered with pager */</comment>
  <decl_stmt><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>   <comment type="block">/* Next backup associated with source pager */</comment>
}</block>;</struct>

<comment type="block">/*
** THREAD SAFETY NOTES:
**
**   Once it has been created using backup_init(), a single sqlite3_backup
**   structure may be accessed via two groups of thread-safe entry points:
**
**     * Via the sqlite3_backup_XXX() API function backup_step() and 
**       backup_finish(). Both these functions obtain the source database
**       handle mutex and the mutex associated with the source BtShared 
**       structure, in that order.
**
**     * Via the BackupUpdate() and BackupRestart() functions, which are
**       invoked by the pager layer to report various state changes in
**       the page cache associated with the source database. The mutex
**       associated with the source database BtShared structure will always 
**       be held when either of these functions are invoked.
**
**   The other sqlite3_backup_XXX() API functions, backup_remaining() and
**   backup_pagecount() are not thread-safe functions. If they are called
**   while some other thread is calling backup_step() or backup_finish(),
**   the values returned may be invalid. There is no way for a call to
**   BackupUpdate() or BackupRestart() to interfere with backup_remaining()
**   or backup_pagecount().
**
**   Depending on the SQLite configuration, the database handles and/or
**   the Btree objects may have their own mutexes that require locking.
**   Non-sharable Btrees (in-memory databases for example), do not have
**   associated mutexes.
*/</comment>

<comment type="block">/*
** Return a pointer corresponding to database zDb (i.e. "main", "temp")
** in connection handle pDb. If such a database cannot be found, return
** a NULL pointer and write an error message to pErrorDb.
**
** If the "temp" database is requested, it may need to be opened by this 
** function. If an error occurs while doing so, return 0 and write an 
** error message to pErrorDb.
*/</comment>
<function><type><specifier>static</specifier> <name>Btree</name> <modifier>*</modifier></type><name>findBtree</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>pErrorDb</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>sqlite3FindDbName</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Parse</name></type> <name>sParse</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3ParseObjectInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>,<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3OpenTempDatabase</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3ErrorWithMsg</name><argument_list>(<argument><expr><name>pErrorDb</name></expr></argument>, <argument><expr><name><name>sParse</name><operator>.</operator><name>rc</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>sParse</name><operator>.</operator><name>zErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>pErrorDb</name></expr></argument>, <argument><expr><name><name>sParse</name><operator>.</operator><name>zErrMsg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3ParseObjectReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3ErrorWithMsg</name><argument_list>(<argument><expr><name>pErrorDb</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"unknown database %s"</literal></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pDb</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Attempt to set the page size of the destination to match the page size
** of the source.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>setDestPgsz</name><parameter_list>(<parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>,<argument><expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check that there is no open read-transaction on the b-tree passed as the
** second argument. If there is not, return SQLITE_OK. Otherwise, if there
** is an open read-transaction, return SQLITE_ERROR and leave an error 
** message in database handle db.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>checkReadTransaction</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>Btree</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3BtreeTxnState</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_TXN_NONE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3ErrorWithMsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"destination database is in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Create an sqlite3_backup process to copy the contents of zSrcDb from
** connection handle pSrcDb to zDestDb in pDestDb. If successful, return
** a pointer to the new sqlite3_backup object.
**
** If an error occurs, NULL is returned and an error code and error message
** stored in database handle pDestDb.
*/</comment>
<function><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>sqlite3_backup_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>pDestDb</name></decl></parameter>,                     <comment type="block">/* Database to write to */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDestDb</name></decl></parameter>,                  <comment type="block">/* Name of database within pDestDb */</comment>
  <parameter><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>pSrcDb</name></decl></parameter>,                      <comment type="block">/* Database connection to read from */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSrcDb</name></decl></parameter>                    <comment type="block">/* Name of database within pSrcDb */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>                    <comment type="block">/* Value to return */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3SafetyCheckOk</name><argument_list>(<argument><expr><name>pSrcDb</name></expr></argument>)</argument_list></call><operator>||</operator><operator>!</operator><call><name>sqlite3SafetyCheckOk</name><argument_list>(<argument><expr><name>pDestDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>SQLITE_MISUSE_BKPT</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sqlcipher_find_db_index</name><argument_list>(<argument><expr><name>sqlite3</name><operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlcipherCodecGetKey</name><argument_list>(<argument><expr><name>sqlite3</name><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>srcNKey</name></decl>, <decl><type ref="prev"/><name>destNKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>zKey</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sqlcipherCodecGetKey</name><argument_list>(<argument><expr><name>pSrcDb</name></expr></argument>, <argument><expr><call><name>sqlcipher_find_db_index</name><argument_list>(<argument><expr><name>pSrcDb</name></expr></argument>, <argument><expr><name>zSrcDb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>zKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srcNKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipherCodecGetKey</name><argument_list>(<argument><expr><name>pDestDb</name></expr></argument>, <argument><expr><call><name>sqlcipher_find_db_index</name><argument_list>(<argument><expr><name>pDestDb</name></expr></argument>, <argument><expr><name>zDestDb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>zKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>destNKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zKey</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* either both databases must be plaintext, or both must be encrypted */</comment>
    <if_stmt><if>if<condition>(<expr><operator>(</operator><name>srcNKey</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>destNKey</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>srcNKey</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>destNKey</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3ErrorWithMsg</name><argument_list>(<argument><expr><name>pDestDb</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"backup is not supported with encrypted databases"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>

  <comment type="block">/* Lock the source database handle. The destination database
  ** handle is not locked in this routine, but it is locked in
  ** sqlite3_backup_step(). The user is required to ensure that no
  ** other thread accesses the destination handle for the duration
  ** of the backup operation.  Any attempt to use the destination
  ** database connection while a backup is in progress may cause
  ** a malfunction or a deadlock.
  */</comment>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>pSrcDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>pDestDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pSrcDb</name><operator>==</operator><name>pDestDb</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3ErrorWithMsg</name><argument_list>(
        <argument><expr><name>pDestDb</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>, <argument><expr><literal type="string">"source and destination must be distinct"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else <block>{<block_content>
    <comment type="block">/* Allocate space for a new sqlite3_backup object...
    ** EVIDENCE-OF: R-64852-21591 The sqlite3_backup object is created by a
    ** call to sqlite3_backup_init() and is destroyed by a call to
    ** sqlite3_backup_finish(). */</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>sqlite3_backup</name> <operator>*</operator><operator>)</operator><call><name>sqlite3MallocZero</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite3_backup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Error</name><argument_list>(<argument><expr><name>pDestDb</name></expr></argument>, <argument><expr><name>SQLITE_NOMEM_BKPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* If the allocation succeeded, populate the new object. */</comment>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name> <operator>=</operator> <call><name>findBtree</name><argument_list>(<argument><expr><name>pDestDb</name></expr></argument>, <argument><expr><name>pSrcDb</name></expr></argument>, <argument><expr><name>zSrcDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name> <operator>=</operator> <call><name>findBtree</name><argument_list>(<argument><expr><name>pDestDb</name></expr></argument>, <argument><expr><name>pDestDb</name></expr></argument>, <argument><expr><name>zDestDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name> <operator>=</operator> <name>pDestDb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pSrcDb</name></name> <operator>=</operator> <name>pSrcDb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isAttached</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name> <operator>||</operator> <literal type="number">0</literal><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name> 
     <operator>||</operator> <call><name>checkReadTransaction</name><argument_list>(<argument><expr><name>pDestDb</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_OK</name></expr> 
     )</condition><block>{<block_content>
      <comment type="block">/* One (or both) of the named databases did not exist or an OOM
      ** error was hit. Or there is a transaction open on the destination
      ** database. The error has already been written into the pDestDb 
      ** handle. All that is left to do here is free the sqlite3_backup 
      ** structure.  */</comment>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>nBackup</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>pDestDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>pSrcDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Argument rc is an SQLite error code. Return true if this error is 
** considered fatal if encountered during a backup operation. All errors
** are considered fatal except for SQLITE_BUSY and SQLITE_LOCKED.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isFatalError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>!=</operator><name>SQLITE_BUSY</name> <operator>&amp;&amp;</operator> <call><name>ALWAYS</name><argument_list>(<argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_LOCKED</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Parameter zSrcData points to a buffer containing the data for 
** page iSrcPg from the source database. Copy this data into the 
** destination database.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>backupOnePage</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,              <comment type="block">/* Backup handle */</comment>
  <parameter><decl><type><name>Pgno</name></type> <name>iSrcPg</name></decl></parameter>,                    <comment type="block">/* Source database page to backup */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>zSrcData</name></decl></parameter>,             <comment type="block">/* Source database page data */</comment>
  <parameter><decl><type><name>int</name></type> <name>bUpdate</name></decl></parameter>                     <comment type="block">/* True for an update, false otherwise */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pDestPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nSrcPgsz</name> <init>= <expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nDestPgsz</name> <init>= <expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nCopy</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>nSrcPgsz</name></expr></argument>, <argument><expr><name>nDestPgsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>i64</name></type> <name>iEnd</name> <init>= <expr><operator>(</operator><name>i64</name><operator>)</operator><name>iSrcPg</name><operator>*</operator><operator>(</operator><name>i64</name><operator>)</operator><name>nSrcPgsz</name></expr></init></decl>;</decl_stmt>
<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <decl_stmt><decl><type><specifier>extern</specifier> <name>void</name> <modifier>*</modifier></type><name>sqlcipherPagerGetCodec</name><argument_list>(<argument><expr><name>Pager</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
  <comment type="block">/* Use BtreeGetReserveNoMutex() for the source b-tree, as although it is
  ** guaranteed that the shared-mutex is held by this thread, handle
  ** p-&gt;pSrc may not actually be the owner.  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSrcReserve</name> <init>= <expr><call><name>sqlite3BtreeGetReserveNoMutex</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nDestReserve</name> <init>= <expr><call><name>sqlite3BtreeGetRequestedReserve</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3BtreeGetReserveNoMutex</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bDestLocked</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>isFatalError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iSrcPg</name><operator>!=</operator><call><name>PENDING_BYTE_PAGE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>zSrcData</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Catch the case where the destination is an in-memory database and the
  ** page sizes of the source and destination differ. 
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>nSrcPgsz</name><operator>!=</operator><name>nDestPgsz</name> <operator>&amp;&amp;</operator> <call><name>sqlite3PagerIsMemdb</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_READONLY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <comment type="block">/* Backup is not possible if the page size of the destination is changing
  ** and a codec is in use.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>nSrcPgsz</name><operator>!=</operator><name>nDestPgsz</name> <operator>&amp;&amp;</operator> <call><name>sqlcipherPagerGetCodec</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_READONLY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Backup is not possible if the number of bytes of reserve space differ
  ** between source and destination.  If there is a difference, try to
  ** fix the destination to agree with the source.  If that is not possible,
  ** then the backup cannot proceed.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>nSrcReserve</name><operator>!=</operator><name>nDestReserve</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>newPgsz</name> <init>= <expr><name>nSrcPgsz</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerSetPagesize</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newPgsz</name></expr></argument>, <argument><expr><name>nSrcReserve</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>newPgsz</name><operator>!=</operator><operator>(</operator><name>u32</name><operator>)</operator><name>nSrcPgsz</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_READONLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>

  <comment type="block">/* This loop runs once for each destination page spanned by the source 
  ** page. For each iteration, variable iOff is set to the byte offset
  ** of the destination page.
  */</comment>
  <for>for<control>(<init><expr><name>iOff</name><operator>=</operator><name>iEnd</name><operator>-</operator><operator>(</operator><name>i64</name><operator>)</operator><name>nSrcPgsz</name></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&lt;</operator><name>iEnd</name></expr>;</condition> <incr><expr><name>iOff</name><operator>+=</operator><name>nDestPgsz</name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>DbPage</name> <modifier>*</modifier></type><name>pDestPg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pgno</name></type> <name>iDest</name> <init>= <expr><operator>(</operator><name>Pgno</name><operator>)</operator><operator>(</operator><name>iOff</name><operator>/</operator><name>nDestPgsz</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>iDest</name><operator>==</operator><call><name>PENDING_BYTE_PAGE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerGet</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>, <argument><expr><name>iDest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDestPg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator>
     <operator>&amp;&amp;</operator> <name>SQLITE_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerWrite</name><argument_list>(<argument><expr><name>pDestPg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>zIn</name> <init>= <expr><operator>&amp;</operator><name><name>zSrcData</name><index>[<expr><name>iOff</name><operator>%</operator><name>nSrcPgsz</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>zDestData</name> <init>= <expr><call><name>sqlite3PagerGetData</name><argument_list>(<argument><expr><name>pDestPg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>zOut</name> <init>= <expr><operator>&amp;</operator><name><name>zDestData</name><index>[<expr><name>iOff</name><operator>%</operator><name>nDestPgsz</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* Copy the data from the source page into the destination page.
      ** Then clear the Btree layer MemPage.isInit flag. Both this module
      ** and the pager code use this trick (clearing the first byte
      ** of the page 'extra' space to invalidate the Btree layers
      ** cached parse of the page). MemPage.isInit is marked 
      ** "MUST BE FIRST" for this purpose.
      */</comment>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>zIn</name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><call><name>sqlite3PagerGetExtra</name><argument_list>(<argument><expr><name>pDestPg</name></expr></argument>)</argument_list></call><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bUpdate</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Put4byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zOut</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>sqlite3BtreeLastPage</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3PagerUnref</name><argument_list>(<argument><expr><name>pDestPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If pFile is currently larger than iSize bytes, then truncate it to
** exactly iSize bytes. If pFile is not larger than iSize bytes, then
** this function is a no-op.
**
** Return SQLITE_OK if everything is successful, or an SQLite error 
** code if an error occurs.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>backupTruncateFile</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iCurrent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3OsFileSize</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCurrent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iCurrent</name><operator>&gt;</operator><name>iSize</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsTruncate</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Register this backup object with the associated source pager for
** callbacks when pages are changed or the cache invalidated.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>attachBackupObject</name><parameter_list>(<parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_backup</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3BtreeHoldsMutex</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>sqlite3PagerBackupPtr</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isAttached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Copy nPage pages from the source b-tree to the destination.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_backup_step</name><parameter_list>(<parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPage</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>destMode</name></decl>;</decl_stmt>       <comment type="block">/* Destination journal mode */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pgszSrc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* Source page size */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pgszDest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Destination page size */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_MISUSE_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrcDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeEnter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>isFatalError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pSrcPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>     <comment type="block">/* Source pager */</comment>
    <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pDestPager</name> <init>= <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="block">/* Dest pager */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>                            <comment type="block">/* Iterator variable */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nSrcPage</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Size of source db in pages */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bCloseTrans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* True if src db requires unlocking */</comment>

    <comment type="block">/* If the source pager is currently in a write-transaction, return
    ** SQLITE_BUSY immediately.
    */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>inTransaction</name></name><operator>==</operator><name>TRANS_WRITE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_BUSY</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* If there is no open read-transaction on the source database, open
    ** one now. If a transaction is opened here, then it will be closed
    ** before this function exits.
    */</comment>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_TXN_NONE</name><operator>==</operator><call><name>sqlite3BtreeTxnState</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeBeginTrans</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bCloseTrans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the destination database has not yet been locked (i.e. if this
    ** is the first call to backup_step() for the current backup operation),
    ** try to set its page size to the same as the source database. This
    ** is especially important on ZipVFS systems, as in that case it is
    ** not possible to create a database file that uses one page size by
    ** writing to it with another.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bDestLocked</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>setDestPgsz</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NOMEM</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Lock the destination database, if it is not locked already. */</comment>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>==</operator><name>rc</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>bDestLocked</name></name><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <name>SQLITE_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeBeginTrans</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                                                <argument><expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>iDestSchema</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> 
    )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bDestLocked</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Do not allow backup if the destination database is in WAL mode
    ** and the page sizes are different between source and destination */</comment>
    <expr_stmt><expr><name>pgszSrc</name> <operator>=</operator> <call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgszDest</name> <operator>=</operator> <call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>destMode</name> <operator>=</operator> <call><name>sqlite3PagerGetJournalMode</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>==</operator><name>rc</name> <operator>&amp;&amp;</operator> <name>destMode</name><operator>==</operator><name>PAGER_JOURNALMODE_WAL</name> <operator>&amp;&amp;</operator> <name>pgszSrc</name><operator>!=</operator><name>pgszDest</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_READONLY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
    <comment type="block">/* Now that there is a read-lock on the source database, query the
    ** source pager for the number of pages in the database.
    */</comment>
    <expr_stmt><expr><name>nSrcPage</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>sqlite3BtreeLastPage</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nSrcPage</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>nPage</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>ii</name><operator>&lt;</operator><name>nPage</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>iNext</name></name><operator>&lt;=</operator><operator>(</operator><name>Pgno</name><operator>)</operator><name>nSrcPage</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>rc</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>Pgno</name></type> <name>iSrcPg</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Source page number */</comment>
      <if_stmt><if>if<condition>( <expr><name>iSrcPg</name><operator>!=</operator><call><name>PENDING_BYTE_PAGE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>DbPage</name> <modifier>*</modifier></type><name>pSrcPg</name></decl>;</decl_stmt>                             <comment type="block">/* Source page object */</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerGet</name><argument_list>(<argument><expr><name>pSrcPager</name></expr></argument>, <argument><expr><name>iSrcPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSrcPg</name></expr></argument>,<argument><expr><name>PAGER_GET_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>backupOnePage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iSrcPg</name></expr></argument>, <argument><expr><call><name>sqlite3PagerGetData</name><argument_list>(<argument><expr><name>pSrcPg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3PagerUnref</name><argument_list>(<argument><expr><name>pSrcPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPagecount</name></name> <operator>=</operator> <name>nSrcPage</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRemaining</name></name> <operator>=</operator> <name>nSrcPage</name><operator>+</operator><literal type="number">1</literal><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name><operator>&gt;</operator><operator>(</operator><name>Pgno</name><operator>)</operator><name>nSrcPage</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_DONE</name></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>isAttached</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>attachBackupObject</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
    <comment type="block">/* Update the schema version field in the destination database. This
    ** is to make sure that the schema-version really does change in
    ** the case where the source and destination databases have the
    ** same schema version.
    */</comment>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>nSrcPage</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeNewDb</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSrcPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>SQLITE_DONE</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeUpdateMeta</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iDestSchema</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3ResetAllSchemasOfConnection</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>destMode</name><operator>==</operator><name>PAGER_JOURNALMODE_WAL</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeSetVersion</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nDestTruncate</name></decl>;</decl_stmt>
        <comment type="block">/* Set nDestTruncate to the final number of pages in the destination
        ** database. The complication here is that the destination page
        ** size may be different to the source page size. 
        **
        ** If the source page size is smaller than the destination page size, 
        ** round up. In this case the call to sqlite3OsTruncate() below will
        ** fix the size of the file. However it is important to call
        ** sqlite3PagerTruncateImage() here so that any pages in the 
        ** destination file that lie beyond the nDestTruncate page mark are
        ** journalled by PagerCommitPhaseOne() before they are destroyed
        ** by the file truncation.
        */</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pgszSrc</name><operator>==</operator><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pgszDest</name><operator>==</operator><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pgszSrc</name><operator>&lt;</operator><name>pgszDest</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>ratio</name> <init>= <expr><name>pgszDest</name><operator>/</operator><name>pgszSrc</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>nDestTruncate</name> <operator>=</operator> <operator>(</operator><name>nSrcPage</name><operator>+</operator><name>ratio</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>ratio</name></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>nDestTruncate</name><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>PENDING_BYTE_PAGE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>nDestTruncate</name><operator>--</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>nDestTruncate</name> <operator>=</operator> <name>nSrcPage</name> <operator>*</operator> <operator>(</operator><name>pgszSrc</name><operator>/</operator><name>pgszDest</name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nDestTruncate</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name>pgszSrc</name><operator>&lt;</operator><name>pgszDest</name></expr> )</condition><block>{<block_content>
          <comment type="block">/* If the source page-size is smaller than the destination page-size,
          ** two extra things may need to happen:
          **
          **   * The destination may need to be truncated, and
          **
          **   * Data stored on the pages immediately following the 
          **     pending-byte page in the source database may need to be
          **     copied into the destination database.
          */</comment>
          <decl_stmt><decl><type><specifier>const</specifier> <name>i64</name></type> <name>iSize</name> <init>= <expr><operator>(</operator><name>i64</name><operator>)</operator><name>pgszSrc</name> <operator>*</operator> <operator>(</operator><name>i64</name><operator>)</operator><name>nSrcPage</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>pFile</name> <init>= <expr><call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Pgno</name></type> <name>iPg</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>nDstPage</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>i64</name></type> <name>iEnd</name></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pFile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nDestTruncate</name><operator>==</operator><literal type="number">0</literal> 
              <operator>||</operator> <operator>(</operator><name>i64</name><operator>)</operator><name>nDestTruncate</name><operator>*</operator><operator>(</operator><name>i64</name><operator>)</operator><name>pgszDest</name> <operator>&gt;=</operator> <name>iSize</name> <operator>||</operator> <operator>(</operator>
                <name>nDestTruncate</name><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>PENDING_BYTE_PAGE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator>
             <operator>&amp;&amp;</operator> <name>iSize</name><operator>&gt;=</operator><name>PENDING_BYTE</name> <operator>&amp;&amp;</operator> <name>iSize</name><operator>&lt;=</operator><name>PENDING_BYTE</name><operator>+</operator><name>pgszDest</name>
          <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="block">/* This block ensures that all data required to recreate the original
          ** database has been stored in the journal for pDestPager and the
          ** journal synced to disk. So at this point we may safely modify
          ** the database file in any way, knowing that if a power failure
          ** occurs, the original database will be reconstructed from the 
          ** journal file.  */</comment>
          <expr_stmt><expr><call><name>sqlite3PagerPagecount</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nDstPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for<control>(<init><expr><name>iPg</name><operator>=</operator><name>nDestTruncate</name></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iPg</name><operator>&lt;=</operator><operator>(</operator><name>Pgno</name><operator>)</operator><name>nDstPage</name></expr>;</condition> <incr><expr><name>iPg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>iPg</name><operator>!=</operator><call><name>PENDING_BYTE_PAGE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
              <decl_stmt><decl><type><name>DbPage</name> <modifier>*</modifier></type><name>pPg</name></decl>;</decl_stmt>
              <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerGet</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>, <argument><expr><name>iPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerWrite</name><argument_list>(<argument><expr><name>pPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sqlite3PagerUnref</name><argument_list>(<argument><expr><name>pPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerCommitPhaseOne</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="block">/* Write the extra pages and truncate the database file as required */</comment>
          <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>PENDING_BYTE</name> <operator>+</operator> <name>pgszDest</name></expr></argument>, <argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for<control>(
            <init><expr><name>iOff</name><operator>=</operator><name>PENDING_BYTE</name><operator>+</operator><name>pgszSrc</name></expr>;</init> 
            <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&lt;</operator><name>iEnd</name></expr>;</condition> 
            <incr><expr><name>iOff</name><operator>+=</operator><name>pgszSrc</name></expr></incr>
          )</control><block>{<block_content>
            <decl_stmt><decl><type><name>PgHdr</name> <modifier>*</modifier></type><name>pSrcPg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Pgno</name></type> <name>iSrcPg</name> <init>= <expr><operator>(</operator><name>Pgno</name><operator>)</operator><operator>(</operator><operator>(</operator><name>iOff</name><operator>/</operator><name>pgszSrc</name><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerGet</name><argument_list>(<argument><expr><name>pSrcPager</name></expr></argument>, <argument><expr><name>iSrcPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSrcPg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
              <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>zData</name> <init>= <expr><call><name>sqlite3PagerGetData</name><argument_list>(<argument><expr><name>pSrcPg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsWrite</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><name>pgszSrc</name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>sqlite3PagerUnref</name><argument_list>(<argument><expr><name>pSrcPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>backupTruncateFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="block">/* Sync the database file to disk. */</comment>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerSync</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3PagerTruncateImage</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>, <argument><expr><name>nDestTruncate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3PagerCommitPhaseOne</name><argument_list>(<argument><expr><name>pDestPager</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    
        <comment type="block">/* Finish committing the transaction to the destination database. */</comment>
        <if_stmt><if>if<condition>( <expr><name>SQLITE_OK</name><operator>==</operator><name>rc</name>
         <operator>&amp;&amp;</operator> <name>SQLITE_OK</name><operator>==</operator><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeCommitPhaseTwo</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>
        )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_DONE</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
    <comment type="block">/* If bCloseTrans is true, then this function opened a read transaction
    ** on the source database. Close the read transaction here. There is
    ** no need to check the return values of the btree methods here, as
    ** "committing" a read-only transaction cannot fail.
    */</comment>
    <if_stmt><if>if<condition>( <expr><name>bCloseTrans</name></expr> )</condition><block>{<block_content>
      <macro><name>TESTONLY</name><argument_list>( <argument>int rc2</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>
      <macro><name>TESTONLY</name><argument_list>( <argument>rc2  =</argument> )</argument_list></macro> <expr_stmt><expr><call><name>sqlite3BtreeCommitPhaseOne</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <macro><name>TESTONLY</name><argument_list>( <argument>rc2 |=</argument> )</argument_list></macro> <expr_stmt><expr><call><name>sqlite3BtreeCommitPhaseTwo</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc2</name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_IOERR_NOMEM</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM_BKPT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeLeave</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrcDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Release all resources associated with an sqlite3_backup* handle.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_backup_finish</name><parameter_list>(<parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_backup</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>                 <comment type="block">/* Ptr to head of pagers backup list */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>pSrcDb</name></decl>;</decl_stmt>                     <comment type="block">/* Source database connection */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                              <comment type="block">/* Value to return */</comment>

  <comment type="block">/* Enter the mutexes */</comment>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pSrcDb</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pSrcDb</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>pSrcDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeEnter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Detach this backup from the source pager. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>nBackup</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>isAttached</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pp</name> <operator>=</operator> <call><name>sqlite3PagerBackupPtr</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pp</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>*</operator><name>pp</name><operator>!=</operator><name>p</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pp</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If a transaction is still open on the Btree, roll it back. */</comment>
  <expr_stmt><expr><call><name>sqlite3BtreeRollback</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDest</name></name></expr></argument>, <argument><expr><name>SQLITE_OK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the error code of the destination database handle. */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_DONE</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_OK</name></expr> </then><else>: <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Error</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Exit the mutexes and free the backup context structure. */</comment>
    <expr_stmt><expr><call><name>sqlite3LeaveMutexAndCloseZombie</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeLeave</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* EVIDENCE-OF: R-64852-21591 The sqlite3_backup object is created by a
    ** call to sqlite3_backup_init() and is destroyed by a call to
    ** sqlite3_backup_finish(). */</comment>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3LeaveMutexAndCloseZombie</name><argument_list>(<argument><expr><name>pSrcDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the number of pages still to be backed up as of the most recent
** call to sqlite3_backup_step().
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_backup_remaining</name><parameter_list>(<parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>SQLITE_MISUSE_BKPT</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>nRemaining</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the total number of pages in the source database as of the most 
** recent call to sqlite3_backup_step().
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_backup_pagecount</name><parameter_list>(<parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_API_ARMOR</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>SQLITE_MISUSE_BKPT</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>nPagecount</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is called after the contents of page iPage of the
** source database have been modified. If page iPage has already been 
** copied into the destination database, then the data written to the
** destination is now invalidated. The destination copy of iPage needs
** to be updated with the new data before the backup operation is
** complete.
**
** It is assumed that the mutex associated with the BtShared object
** corresponding to the source database is held when this function is
** called.
*/</comment>
<function><type><specifier>static</specifier> <name>SQLITE_NOINLINE</name> <name>void</name></type> <name>backupUpdate</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>Pgno</name></type> <name>iPage</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <do>do<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>isFatalError</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>iPage</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name></expr> )</condition><block>{<block_content>
      <comment type="block">/* The backup process p has already copied page iPage. But now it
      ** has been modified by a transaction on the source pager. Copy
      ** the new data into the backup.
      */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>backupOnePage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iPage</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDestDb</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_BUSY</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>!=</operator><name>SQLITE_LOCKED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>while<condition>( <expr><operator>(</operator><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition>;</do>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3BackupUpdate</name><parameter_list>(<parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>pBackup</name></decl></parameter>, <parameter><decl><type><name>Pgno</name></type> <name>iPage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pBackup</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>backupUpdate</name><argument_list>(<argument><expr><name>pBackup</name></expr></argument>, <argument><expr><name>iPage</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Restart the backup process. This is called when the pager layer
** detects that the database has been modified by an external database
** connection. In this case there is no way of knowing which of the
** pages that have been copied into the destination database are still 
** valid and which are not, so the entire process needs to be restarted.
**
** It is assumed that the mutex associated with the BtShared object
** corresponding to the source database is held when this function is
** called.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3BackupRestart</name><parameter_list>(<parameter><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>pBackup</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_backup</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>                   <comment type="block">/* Iterator variable */</comment>
  <for>for<control>(<init><expr><name>p</name><operator>=</operator><name>pBackup</name></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iNext</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VACUUM</name></cpp:ifndef>
<comment type="block">/*
** Copy the complete content of pBtFrom into pBtTo.  A transaction
** must be active for both files.
**
** The size of file pTo may be reduced by this operation. If anything 
** goes wrong, the transaction on pTo is rolled back. If successful, the 
** transaction is committed before returning.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3BtreeCopyFile</name><parameter_list>(<parameter><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pTo</name></decl></parameter>, <parameter><decl><type><name>Btree</name> <modifier>*</modifier></type><name>pFrom</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFd</name></decl>;</decl_stmt>              <comment type="block">/* File descriptor for database pTo */</comment>
  <decl_stmt><decl><type><name>sqlite3_backup</name></type> <name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeEnter</name><argument_list>(<argument><expr><name>pTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeEnter</name><argument_list>(<argument><expr><name>pFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3BtreeTxnState</name><argument_list>(<argument><expr><name>pTo</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_TXN_WRITE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pFd</name> <operator>=</operator> <call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pTo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFd</name><operator>-&gt;</operator><name>pMethods</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>nByte</name> <init>= <expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pFrom</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name>i64</name><operator>)</operator><call><name>sqlite3BtreeLastPage</name><argument_list>(<argument><expr><name>pFrom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><name>pFd</name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_OVERWRITE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_NOTFOUND</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>copy_finished</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set up an sqlite3_backup object. sqlite3_backup.pDestDb must be set
  ** to 0. This is used by the implementations of sqlite3_backup_step()
  ** and sqlite3_backup_finish() to detect that they are being called
  ** from this function, not directly by the user.
  */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>.</operator><name>pSrcDb</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>.</operator><name>pSrc</name></name> <operator>=</operator> <name>pFrom</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>.</operator><name>pDest</name></name> <operator>=</operator> <name>pTo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><operator>.</operator><name>iNext</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sqlite3PagerAlignReserve</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pTo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pFrom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>

  <comment type="block">/* 0x7FFFFFFF is the hard limit for the number of pages in a database
  ** file. By passing this as the number of pages to copy to
  ** sqlite3_backup_step(), we can guarantee that the copy finishes 
  ** within a single call (unless an error occurs). The assert() statement
  ** checks this assumption - (p-&gt;rc) should be set to either SQLITE_DONE 
  ** or an error code.  */</comment>
  <expr_stmt><expr><call><name>sqlite3_backup_step</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>b</name><operator>.</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_backup_finish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>btsFlags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BTS_PAGESIZE_FIXED</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3PagerClearCache</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>pDest</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3BtreeTxnState</name><argument_list>(<argument><expr><name>pTo</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_TXN_WRITE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<label><name>copy_finished</name>:</label>
  <expr_stmt><expr><call><name>sqlite3BtreeLeave</name><argument_list>(<argument><expr><name>pFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3BtreeLeave</name><argument_list>(<argument><expr><name>pTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_VACUUM */</comment>
</unit>
