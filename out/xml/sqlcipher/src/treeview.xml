<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/treeview.c"><comment type="block">/*
** 2015-06-08
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains C code to implement the TreeView debugging routines.
** These routines print a parse tree to standard output for debugging and
** analysis. 
**
** The interfaces in this file is only available when compiling
** with SQLITE_DEBUG.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>

<comment type="block">/*
** Add a new subitem to the tree.  The moreToFollow flag indicates that this
** is not the last item in the tree.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3TreeViewPush</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>moreToFollow</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>moreToFollow</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name></name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name></expr>]</index></name> <operator>=</operator> <name>moreToFollow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Finished with one layer of the tree
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3TreeViewPop</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate a single line of output for the tree, with a prefix that contains
** all the appropriate tree lines
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewLine</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StrAccum</name></type> <name>acc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3StrAccumInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>iLevel</name></name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"|   "</literal></expr> </then><else>: <expr><literal type="string">"    "</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>bLine</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="string">"|-- "</literal></expr> </then><else>: <expr><literal type="string">"'-- "</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zFormat</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_str_vappendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>acc</name><operator>.</operator><name>nChar</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <name><name>acc</name><operator>.</operator><name>accError</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_str_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3StrAccumFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Shorthand for starting a new tree item that consists of a single label
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3TreeViewItem</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>,<parameter><decl><type><name>u8</name></type> <name>moreFollows</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>moreFollows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Show a list of Column objects in tree format.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewColumnList</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Column</name> <modifier>*</modifier></type><name>aCol</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nCol</name></decl></parameter>,
  <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>u16</name></type> <name>flg</name> <init>= <expr><name><name>aCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colFlags</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>colMoreToFollow</name> <init>= <expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>nCol</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>colMoreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>aCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zCnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch<condition>( <expr><name><name>aCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eCType</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>COLTYPE_ANY</name></expr>:</case>      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ANY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <break>break;</break>
      <case>case <expr><name>COLTYPE_BLOB</name></expr>:</case>     <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" BLOB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <break>break;</break>
      <case>case <expr><name>COLTYPE_INT</name></expr>:</case>      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" INT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <break>break;</break>
      <case>case <expr><name>COLTYPE_INTEGER</name></expr>:</case>  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" INTEGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break>break;</break>
      <case>case <expr><name>COLTYPE_REAL</name></expr>:</case>     <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" REAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <break>break;</break>
      <case>case <expr><name>COLTYPE_TEXT</name></expr>:</case>     <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <break>break;</break>
      <case>case <expr><name>COLTYPE_CUSTOM</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>flg</name> <operator>&amp;</operator> <name>COLFLAG_HASTYPE</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>aCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zCnName</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>z</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" X-%s"</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
    </block_content>}</block></switch>
    <if_stmt><if>if<condition>( <expr><name>flg</name> <operator>&amp;</operator> <name>COLFLAG_PRIMKEY</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" PRIMARY KEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>flg</name> <operator>&amp;</operator> <name>COLFLAG_HIDDEN</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" HIDDEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>COLFLAG_NOEXPAND</name></cpp:ifdef>
    <if_stmt><if>if<condition>( <expr><name>flg</name> <operator>&amp;</operator> <name>COLFLAG_NOEXPAND</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" NO-EXPAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>( <expr><name>flg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" flags=%04x"</literal></expr></argument>, <argument><expr><name>flg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate a human-readable description of a WITH clause.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewWith</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>With</name> <modifier>*</modifier></type><name>pWith</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWith</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWith</name><operator>-&gt;</operator><name>nCte</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWith</name><operator>-&gt;</operator><name>pOuter</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WITH (0x%p, pOuter=0x%p)"</literal></expr></argument>,<argument><expr><name>pWith</name></expr></argument>,<argument><expr><name><name>pWith</name><operator>-&gt;</operator><name>pOuter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WITH (0x%p)"</literal></expr></argument>, <argument><expr><name>pWith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWith</name><operator>-&gt;</operator><name>nCte</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pWith</name><operator>-&gt;</operator><name>nCte</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>StrAccum</name></type> <name>x</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>zLine</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>Cte</name></name> <modifier>*</modifier></type><name>pCte</name> <init>= <expr><operator>&amp;</operator><name><name>pWith</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3StrAccumInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pCte</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCte</name><operator>-&gt;</operator><name>pCols</name></name> <operator>&amp;&amp;</operator> <name><name>pCte</name><operator>-&gt;</operator><name>pCols</name><operator>-&gt;</operator><name>nExpr</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>cSep</name> <init>= <expr><literal type="char">'('</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>pCte</name><operator>-&gt;</operator><name>pCols</name><operator>-&gt;</operator><name>nExpr</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">"%c%s"</literal></expr></argument>, <argument><expr><name>cSep</name></expr></argument>, <argument><expr><name><name>pCte</name><operator>-&gt;</operator><name>pCols</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>zEName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>cSep</name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCte</name><operator>-&gt;</operator><name>eM10d</name></name><operator>!=</operator><name>M10d_Any</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" %sMATERIALIZED"</literal></expr></argument>, 
           <argument><expr><ternary><condition><expr><name><name>pCte</name><operator>-&gt;</operator><name>eM10d</name></name><operator>==</operator><name>M10d_No</name></expr> ?</condition><then> <expr><literal type="string">"NOT "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCte</name><operator>-&gt;</operator><name>pUse</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" (pUse=0x%p, nUse=%d)"</literal></expr></argument>, <argument><expr><name><name>pCte</name><operator>-&gt;</operator><name>pUse</name></name></expr></argument>,
                 <argument><expr><name><name>pCte</name><operator>-&gt;</operator><name>pUse</name><operator>-&gt;</operator><name>nUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3StrAccumFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><name>i</name><operator>&lt;</operator><name><name>pWith</name><operator>-&gt;</operator><name>nCte</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pCte</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate a human-readable description of a SrcList object.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewSrcList</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SrcList</name> <modifier>*</modifier></type><name>pSrc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pSrc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pSrc</name><operator>-&gt;</operator><name>nSrc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SrcItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>pSrc</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StrAccum</name></type> <name>x</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zLine</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3StrAccumInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zLine</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>x</name><operator>.</operator><name>printfFlags</name></name> <operator>|=</operator> <name>SQLITE_PRINTF_INTERNAL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">"{%d:*} %!S"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>iCursor</name></name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>pTab</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" tab=%Q nCol=%d ptr=%p used=%llx"</literal></expr></argument>,
           <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>pTab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>pTab</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>colUsed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>jointype</name></name> <operator>&amp;</operator> <operator>(</operator><name>JT_LEFT</name><operator>|</operator><name>JT_RIGHT</name><operator>)</operator><operator>)</operator><operator>==</operator><operator>(</operator><name>JT_LEFT</name><operator>|</operator><name>JT_RIGHT</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" FULL-OUTER-JOIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>jointype</name></name> <operator>&amp;</operator> <name>JT_LEFT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" LEFT-JOIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>jointype</name></name> <operator>&amp;</operator> <name>JT_RIGHT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" RIGHT-JOIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>jointype</name></name> <operator>&amp;</operator> <name>JT_CROSS</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" CROSS-JOIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>jointype</name></name> <operator>&amp;</operator> <name>JT_LTORJ</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" LTORJ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>fromDDL</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" DDL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>isCte</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" CteUse=0x%p"</literal></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>u2</name><operator>.</operator><name>pCteUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>isOn</name></name> <operator>||</operator> <operator>(</operator><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>isUsing</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>pOn</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" ON"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3StrAccumFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>zLine</name></expr></argument>, <argument><expr><name>i</name><operator>&lt;</operator><name><name>pSrc</name><operator>-&gt;</operator><name>nSrc</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>pSelect</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>isTabFunc</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>isUsing</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>isUsing</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewIdList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>u3</name><operator>.</operator><name>pUsing</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"USING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>pSelect</name></name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>pTab</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>Table</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><name><name>pItem</name><operator>-&gt;</operator><name>pTab</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewColumnList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>aCol</name></name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>isNestedFrom</name></name> <operator>==</operator> <call><name>IsNestedFrom</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>isTabFunc</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>u1</name><operator>.</operator><name>pFuncArg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"func-args:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Generate a human-readable description of a Select object.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewSelect</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Select</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"nil-SELECT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt> 
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWith</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewWith</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWith</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <do>do<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>selFlags</name></name> <operator>&amp;</operator> <name>SF_WhereBegin</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"sqlite3WhereBegin()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,
        <argument><expr><literal type="string">"SELECT%s%s (%u/%p) selFlags=0x%x nSelectRow=%d"</literal></expr></argument>,
        <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>selFlags</name></name> <operator>&amp;</operator> <name>SF_Distinct</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" DISTINCT"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
        <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>selFlags</name></name> <operator>&amp;</operator> <name>SF_Aggregate</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">" agg_flag"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
        <argument><expr><name><name>p</name><operator>-&gt;</operator><name>selId</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>selFlags</name></name></expr></argument>,
        <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>nSelectRow</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>cnt</name><operator>++</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPrior</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>nSrc</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWhere</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pGroupBy</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pHaving</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pOrderBy</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pLimit</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWin</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWinDefn</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pEList</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEList</name></name></expr></argument>, <argument><expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"result-set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWin</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Window</name> <modifier>*</modifier></type><name>pX</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"window-functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>pX</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pWin</name></name></expr>;</init> <condition><expr><name>pX</name></expr>;</condition> <incr><expr><name>pX</name><operator>=</operator><name><name>pX</name><operator>-&gt;</operator><name>pNextWin</name></name></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewWinFunc</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr><name><name>pX</name><operator>-&gt;</operator><name>pNextWin</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pSrc</name><operator>-&gt;</operator><name>nSrc</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewSrcList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSrc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWhere</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WHERE"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pGroupBy</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pGroupBy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"GROUPBY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pHaving</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"HAVING"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHaving</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWinDefn</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Window</name> <modifier>*</modifier></type><name>pX</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WINDOW"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>pX</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>pWinDefn</name></name></expr>;</init> <condition><expr><name>pX</name></expr>;</condition> <incr><expr><name>pX</name><operator>=</operator><name><name>pX</name><operator>-&gt;</operator><name>pNextWin</name></name></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewWindow</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr><name><name>pX</name><operator>-&gt;</operator><name>pNextWin</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pOrderBy</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pOrderBy</name></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ORDERBY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pLimit</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"LIMIT"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLimit</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLimit</name><operator>-&gt;</operator><name>pRight</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pLimit</name><operator>-&gt;</operator><name>pRight</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"OFFSET"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLimit</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPrior</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOp</name> <init>= <expr><literal type="string">"UNION"</literal></expr></init></decl>;</decl_stmt>
      <switch>switch<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name></expr> )</condition><block>{<block_content>
        <case>case <expr><name>TK_ALL</name></expr>:</case>         <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"UNION ALL"</literal></expr>;</expr_stmt>  <break>break;</break>
        <case>case <expr><name>TK_INTERSECT</name></expr>:</case>   <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"INTERSECT"</literal></expr>;</expr_stmt>  <break>break;</break>
        <case>case <expr><name>TK_EXCEPT</name></expr>:</case>      <expr_stmt><expr><name>zOp</name> <operator>=</operator> <literal type="string">"EXCEPT"</literal></expr>;</expr_stmt>     <break>break;</break>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>zOp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pPrior</name></name></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name>p</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition>;</do>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
<comment type="block">/*
** Generate a description of starting or stopping bounds
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewBound</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,        <comment type="block">/* View context */</comment>
  <parameter><decl><type><name>u8</name></type> <name>eBound</name></decl></parameter>,              <comment type="block">/* UNBOUNDED, CURRENT, PRECEDING, FOLLOWING */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>,            <comment type="block">/* Value for PRECEDING or FOLLOWING */</comment>
  <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>         <comment type="block">/* True if more to follow */</comment>
)</parameter_list><block>{<block_content>
  <switch>switch<condition>( <expr><name>eBound</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>TK_UNBOUNDED</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"UNBOUNDED"</literal></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_CURRENT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"CURRENT"</literal></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_PRECEDING</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"PRECEDING"</literal></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_FOLLOWING</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"FOLLOWING"</literal></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_WINDOWFUNC */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
<comment type="block">/*
** Generate a human-readable explanation for a Window object
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewWindow</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Window</name> <modifier>*</modifier></type><name>pWin</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>more</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nElement</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWin</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>pFilter</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"FILTER"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>pFilter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>zName</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"OVER %s (%p)"</literal></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>pWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"OVER (%p)"</literal></expr></argument>, <argument><expr><name>pWin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>zBase</name></name></expr> )</condition><block type="pseudo"><block_content>    <expr_stmt><expr><name>nElement</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>pOrderBy</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nElement</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>eFrmType</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nElement</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>eExclude</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nElement</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>zBase</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>nElement</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"window: %s"</literal></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>zBase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>pPartition</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>pPartition</name></name></expr></argument>, <argument><expr><name>nElement</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="string">"PARTITION-BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>pOrderBy</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>pOrderBy</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>nElement</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ORDER-BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>eFrmType</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFrmType</name> <init>= <expr><literal type="string">"ROWS"</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>eFrmType</name></name><operator>==</operator><name>TK_RANGE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zFrmType</name> <operator>=</operator> <literal type="string">"RANGE"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>eFrmType</name></name><operator>==</operator><name>TK_GROUPS</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zFrmType</name> <operator>=</operator> <literal type="string">"GROUPS"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><literal type="string">"%s%s"</literal></expr></argument>,<argument><expr><name>zFrmType</name></expr></argument>,
        <argument><expr><ternary><condition><expr><name><name>pWin</name><operator>-&gt;</operator><name>bImplicitFrame</name></name></expr> ?</condition><then> <expr><literal type="string">" (implied)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>nElement</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewBound</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>eStart</name></name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>pStart</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewBound</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>eEnd</name></name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>pEnd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>eExclude</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zExclude</name></decl>;</decl_stmt>
    <switch>switch<condition>( <expr><name><name>pWin</name><operator>-&gt;</operator><name>eExclude</name></name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>TK_NO</name></expr>:</case>      <expr_stmt><expr><name>zExclude</name> <operator>=</operator> <literal type="string">"NO OTHERS"</literal></expr>;</expr_stmt>   <break>break;</break>
      <case>case <expr><name>TK_CURRENT</name></expr>:</case> <expr_stmt><expr><name>zExclude</name> <operator>=</operator> <literal type="string">"CURRENT ROW"</literal></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>TK_GROUP</name></expr>:</case>   <expr_stmt><expr><name>zExclude</name> <operator>=</operator> <literal type="string">"GROUP"</literal></expr>;</expr_stmt>       <break>break;</break>
      <case>case <expr><name>TK_TIES</name></expr>:</case>    <expr_stmt><expr><name>zExclude</name> <operator>=</operator> <literal type="string">"TIES"</literal></expr>;</expr_stmt>        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><literal type="string">"invalid(%d)"</literal></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>eExclude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zExclude</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"EXCLUDE %s"</literal></expr></argument>, <argument><expr><name>zExclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_WINDOWFUNC */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
<comment type="block">/*
** Generate a human-readable explanation for a Window Function object
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewWinFunc</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Window</name> <modifier>*</modifier></type><name>pWin</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>more</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pWin</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>more</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WINFUNC %s(%d)"</literal></expr></argument>,
                       <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>pWFunc</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>pWin</name><operator>-&gt;</operator><name>pWFunc</name><operator>-&gt;</operator><name>nArg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewWindow</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pWin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_WINDOWFUNC */</comment>

<comment type="block">/*
** Generate a human-readable explanation of an expression tree.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewExpr</name><parameter_list>(<parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zBinOp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Binary operator */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUniOp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>   <comment type="block">/* Unary operator */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zFlgs</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pExpr</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"nil"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>flags</name></name> <operator>||</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>affExpr</name></name> <operator>||</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>vvaFlags</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>StrAccum</name></type> <name>x</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3StrAccumInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zFlgs</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" fg.af=%x.%c"</literal></expr></argument>,
      <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pExpr</name><operator>-&gt;</operator><name>affExpr</name></name></expr> ?</condition><then> <expr><name><name>pExpr</name><operator>-&gt;</operator><name>affExpr</name></name></expr> </then><else>: <expr><literal type="char">'n'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_OuterON</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" outer.iJoin=%d"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>iJoin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_InnerON</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" inner.iJoin=%d"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>iJoin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_FromDDL</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" DDL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>ExprHasVVAProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_Immutable</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><literal type="string">" IMMUTABLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3StrAccumFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>zFlgs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <switch>switch<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>TK_AGG_COLUMN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"AGG{%d:%d}%s"</literal></expr></argument>,
            <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_COLUMN</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <comment type="block">/* This only happens when coding check constraints */</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>zOp2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zOp2</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zOp2</name></expr></argument>,<argument><expr><literal type="string">" op2=0x%02x"</literal></expr></argument>,<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>zOp2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"COLUMN(%d)%s%s"</literal></expr></argument>,
                                    <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>, <argument><expr><name>zOp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>ExprUseYTab</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"{%d:%d} pTab=%p%s"</literal></expr></argument>,
                        <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>,
                        <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>pTab</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_FixedCol</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_INTEGER</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>EP_IntValue</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>iValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FLOATING_POINT</name></cpp:ifndef>
    <case>case <expr><name>TK_FLOAT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><name>TK_STRING</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"%Q"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_NULL</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_TRUEFALSE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
         <argument><expr><ternary><condition><expr><call><name>sqlite3ExprTruthValue</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_BLOB_LITERAL</name></cpp:ifndef>
    <case>case <expr><name>TK_BLOB</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><name>TK_VARIABLE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"VARIABLE(%s,%d)"</literal></expr></argument>,
                          <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_REGISTER</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"REGISTER(%d)"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_ID</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"ID \"%w\""</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_CAST</name></cpp:ifndef>
    <case>case <expr><name>TK_CAST</name></expr>:</case> <block>{<block_content>
      <comment type="block">/* Expressions of the form:   CAST(pLeft AS token) */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>,<argument><expr><literal type="string">"CAST %Q"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_CAST */</comment>
    <case>case <expr><name>TK_LT</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"LT"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_LE</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"LE"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_GT</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"GT"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_GE</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"GE"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_NE</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"NE"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_EQ</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"EQ"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_IS</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"IS"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_ISNOT</name></expr>:</case>   <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"ISNOT"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>TK_AND</name></expr>:</case>     <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"AND"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_OR</name></expr>:</case>      <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"OR"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>TK_PLUS</name></expr>:</case>    <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"ADD"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_STAR</name></expr>:</case>    <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"MUL"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_MINUS</name></expr>:</case>   <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"SUB"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_REM</name></expr>:</case>     <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"REM"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_BITAND</name></expr>:</case>  <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"BITAND"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_BITOR</name></expr>:</case>   <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"BITOR"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>TK_SLASH</name></expr>:</case>   <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"DIV"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_LSHIFT</name></expr>:</case>  <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"LSHIFT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_RSHIFT</name></expr>:</case>  <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"RSHIFT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_CONCAT</name></expr>:</case>  <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"CONCAT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_DOT</name></expr>:</case>     <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"DOT"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_LIMIT</name></expr>:</case>   <expr_stmt><expr><name>zBinOp</name> <operator>=</operator> <literal type="string">"LIMIT"</literal></expr>;</expr_stmt>  <break>break;</break>

    <case>case <expr><name>TK_UMINUS</name></expr>:</case>  <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"UMINUS"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_UPLUS</name></expr>:</case>   <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"UPLUS"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>TK_BITNOT</name></expr>:</case>  <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"BITNOT"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_NOT</name></expr>:</case>     <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"NOT"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>TK_ISNULL</name></expr>:</case>  <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"ISNULL"</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name>TK_NOTNULL</name></expr>:</case> <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <literal type="string">"NOTNULL"</literal></expr>;</expr_stmt> <break>break;</break>

    <case>case <expr><name>TK_TRUTH</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azOp</name><index>[]</index></name> <init>= <expr><block>{
         <expr><literal type="string">"IS-FALSE"</literal></expr>, <expr><literal type="string">"IS-TRUE"</literal></expr>, <expr><literal type="string">"IS-NOT-FALSE"</literal></expr>, <expr><literal type="string">"IS-NOT-TRUE"</literal></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name><operator>==</operator><name>TK_IS</name> <operator>||</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name><operator>==</operator><name>TK_ISNOT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3ExprSkipCollate</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>op</name><operator>==</operator><name>TK_TRUEFALSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name><operator>==</operator><name>TK_ISNOT</name><operator>)</operator><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <call><name>sqlite3ExprTruthValue</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zUniOp</name> <operator>=</operator> <name><name>azOp</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TK_SPAN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"SPAN %Q"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TK_COLLATE</name></expr>:</case> <block>{<block_content>
      <comment type="block">/* COLLATE operators without the EP_Collate flag are intended to
      ** emulate collation associated with a table column.  These show
      ** up in the treeview output as "SOFT-COLLATE".  Explicit COLLATE
      ** operators that appear in the original SQL always have the
      ** EP_Collate bit set and appear in treeview output as just "COLLATE" */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%sCOLLATE %Q%s"</literal></expr></argument>,
        <argument><expr><ternary><condition><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_Collate</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"SOFT-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><name>TK_AGG_FUNCTION</name></expr>:</case>
    <case>case <expr><name>TK_FUNCTION</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>ExprList</name> <modifier>*</modifier></type><name>pFarg</name></decl>;</decl_stmt>       <comment type="block">/* List of function arguments */</comment>
      <decl_stmt><decl><type><name>Window</name> <modifier>*</modifier></type><name>pWin</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_TokenOnly</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>pFarg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>pWin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>ExprUseXList</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pFarg</name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name></name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
        <expr_stmt><expr><name>pWin</name> <operator>=</operator> <ternary><condition><expr><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_WinFunc</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pExpr</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>pWin</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><name>pWin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_AGG_FUNCTION</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"AGG_FUNCTION%d %Q%s agg=%d[%d]/%p"</literal></expr></argument>,
                             <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>,
                             <argument><expr><ternary><condition><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pAggInfo</name></name></expr> ?</condition><then> <expr><name><name>pExpr</name><operator>-&gt;</operator><name>pAggInfo</name><operator>-&gt;</operator><name>selId</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
                             <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iAgg</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pAggInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOp2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><literal type="string">"0x%02x"</literal></expr></argument>,<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zOp2</name> <operator>=</operator> <name>zBuf</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name><operator>==</operator><name>NC_IsCheck</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zOp2</name> <operator>=</operator> <literal type="string">"NC_IsCheck"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name><operator>==</operator><name>NC_IdxExpr</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zOp2</name> <operator>=</operator> <literal type="string">"NC_IdxExpr"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name><operator>==</operator><name>NC_PartIdx</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zOp2</name> <operator>=</operator> <literal type="string">"NC_PartIdx"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name><operator>==</operator><name>NC_GenCol</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zOp2</name> <operator>=</operator> <literal type="string">"NC_GenCol"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"FUNCTION %Q%s op2=%s"</literal></expr></argument>,
                            <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>, <argument><expr><name>zOp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"FUNCTION %Q%s"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>pFarg</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pFarg</name></expr></argument>, <argument><expr><name>pWin</name><operator>!=</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
      <if_stmt><if>if<condition>( <expr><name>pWin</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewWindow</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pWin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_SUBQUERY</name></cpp:ifndef>
    <case>case <expr><name>TK_EXISTS</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>ExprUseXSelect</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"EXISTS-expr flags=0x%x"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_SELECT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>ExprUseXSelect</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"subquery-expr flags=0x%x"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_IN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_str</name> <modifier>*</modifier></type><name>pStr</name> <init>= <expr><call><name>sqlite3_str_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">"IN flags=0x%x"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">" iTable=%d"</literal></expr></argument>,<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_Subrtn</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_str_appendf</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>, <argument><expr><literal type="string">" subrtn(%d,%d)"</literal></expr></argument>,
            <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>sub</name><operator>.</operator><name>regReturn</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>y</name><operator>.</operator><name>sub</name><operator>.</operator><name>iAddr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3_str_finish</name><argument_list>(<argument><expr><name>pStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>ExprUseXSelect</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_SUBQUERY */</comment>

    <comment type="block">/*
    **    x BETWEEN y AND z
    **
    ** This is equivalent to
    **
    **    x&gt;=y AND x&lt;=z
    **
    ** X is stored in pExpr-&gt;pLeft.
    ** Y is stored in pExpr-&gt;pList-&gt;a[0].pExpr.
    ** Z is stored in pExpr-&gt;pList-&gt;a[1].pExpr.
    */</comment>
    <case>case <expr><name>TK_BETWEEN</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>pX</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pY</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pZ</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pX</name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>ExprUseXList</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name><operator>-&gt;</operator><name>nExpr</name></name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pY</name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pExpr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pZ</name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pExpr</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"BETWEEN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pY</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pZ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_TRIGGER</name></expr>:</case> <block>{<block_content>
      <comment type="block">/* If the opcode is TK_TRIGGER, then the expression is a reference
      ** to a column in the new.* or old.* pseudo-tables available to
      ** trigger programs. In this case Expr.iTable is set to 1 for the
      ** new.* pseudo-table, or 0 for the old.* pseudo-table. Expr.iColumn
      ** is set to the column of the pseudo-table to read, or to -1 to
      ** read the rowid field.
      */</comment>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s(%d)"</literal></expr></argument>, 
          <argument><expr><ternary><condition><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr> ?</condition><then> <expr><literal type="string">"NEW"</literal></expr> </then><else>: <expr><literal type="string">"OLD"</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_CASE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"CASE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>ExprUseXList</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifndef>
    <case>case <expr><name>TK_RAISE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><literal type="string">"unk"</literal></expr></init></decl>;</decl_stmt>
      <switch>switch<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>affExpr</name></name></expr> )</condition><block>{<block_content>
        <case>case <expr><name>OE_Rollback</name></expr>:</case>   <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"rollback"</literal></expr>;</expr_stmt>  <break>break;</break>
        <case>case <expr><name>OE_Abort</name></expr>:</case>      <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"abort"</literal></expr>;</expr_stmt>     <break>break;</break>
        <case>case <expr><name>OE_Fail</name></expr>:</case>       <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"fail"</literal></expr>;</expr_stmt>      <break>break;</break>
        <case>case <expr><name>OE_Ignore</name></expr>:</case>     <expr_stmt><expr><name>zType</name> <operator>=</operator> <literal type="string">"ignore"</literal></expr>;</expr_stmt>    <break>break;</break>
      </block_content>}</block></switch>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"RAISE %s(%Q)"</literal></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><name>TK_MATCH</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"MATCH {%d:%d}%s"</literal></expr></argument>,
                          <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_VECTOR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"VECTOR%s"</literal></expr></argument>,<argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>ExprUseXList</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewBareExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pList</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_SELECT_COLUMN</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"SELECT-COLUMN %d of [0..%d]%s"</literal></expr></argument>,
              <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>,
              <argument><expr><ternary><condition><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRight</name></name><operator>==</operator><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr> ?</condition><then> <expr><literal type="string">" (SELECT-owner)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>ExprUseXSelect</name><argument_list>(<argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name><operator>-&gt;</operator><name>x</name><operator>.</operator><name>pSelect</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_IF_NULL_ROW</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"IF-NULL-ROW %d"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_ERROR</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>Expr</name></type> <name>tmp</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"ERROR"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <operator>*</operator><name>pExpr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>op</name></name> <operator>=</operator> <name><name>pExpr</name><operator>-&gt;</operator><name>op2</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TK_ROW</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"First FROM table rowid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"First FROM table column %d"</literal></expr></argument>,
            <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>iColumn</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"op=%d"</literal></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <if_stmt><if>if<condition>( <expr><name>zBinOp</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>zBinOp</name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pRight</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zUniOp</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>zUniOp</name></expr></argument>, <argument><expr><name>zFlgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pExpr</name><operator>-&gt;</operator><name>pLeft</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Generate a human-readable explanation of an expression list.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewBareExprList</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>ExprList</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>zLabel</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>zLabel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"LIST"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pList</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s (empty)"</literal></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pList</name><operator>-&gt;</operator><name>nExpr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u</name><operator>.</operator><name>x</name><operator>.</operator><name>iOrderByCol</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zEName</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>moreToFollow</name> <init>= <expr><name>i</name><operator>&lt;</operator><name><name>pList</name><operator>-&gt;</operator><name>nExpr</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>j</name> <operator>||</operator> <name>zName</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>moreToFollow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zName</name></expr> )</condition><block>{<block_content>
          <switch>switch<condition>( <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fg</name><operator>.</operator><name>eEName</name></name></expr> )</condition><block>{<block_content>
            <default>default:</default>
              <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"AS %s "</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>ENAME_TAB</name></expr>:</case>
              <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"TABLE-ALIAS-NAME(\"%s\") "</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if<condition>( <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fg</name><operator>.</operator><name>bUsed</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"(used) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
              <if_stmt><if>if<condition>( <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fg</name><operator>.</operator><name>bUsingTerm</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"(USING-term) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
              <if_stmt><if>if<condition>( <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fg</name><operator>.</operator><name>bNoExpand</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"(NoExpand) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
              <break>break;</break>
            <case>case <expr><name>ENAME_SPAN</name></expr>:</case>
              <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"SPAN(\"%s\") "</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
          </block_content>}</block></switch>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>j</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"iOrderByCol=%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pExpr</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>j</name> <operator>||</operator> <name>zName</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3TreeViewExprList</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>ExprList</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>,
  <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewBareExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate a human-readable explanation of an id-list.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewBareIdList</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IdList</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>zLabel</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>zLabel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"LIST"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pList</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s (empty)"</literal></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pList</name><operator>-&gt;</operator><name>nId</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>moreToFollow</name> <init>= <expr><name>i</name><operator>&lt;</operator><name><name>pList</name><operator>-&gt;</operator><name>nId</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">"(null)"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pList</name><operator>-&gt;</operator><name>eU4</name></name><operator>==</operator><name>EU4_NONE</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pList</name><operator>-&gt;</operator><name>eU4</name></name><operator>==</operator><name>EU4_IDX</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s (%d)\n"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u4</name><operator>.</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pList</name><operator>-&gt;</operator><name>eU4</name></name><operator>==</operator><name>EU4_EXPR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u4</name><operator>.</operator><name>pExpr</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s (pExpr=NULL)\n"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>i</name><operator>&lt;</operator><name><name>pList</name><operator>-&gt;</operator><name>nId</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u4</name><operator>.</operator><name>pExpr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3TreeViewIdList</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IdList</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>,
  <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewBareIdList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pList</name></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Generate a human-readable explanation of a list of Upsert objects
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewUpsert</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Upsert</name> <modifier>*</modifier></type><name>pUpsert</name></decl></parameter>,
  <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pUpsert</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>pUpsert</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><name><name>pUpsert</name><operator>-&gt;</operator><name>pNextUpsert</name></name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name>moreToFollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"ON CONFLICT DO %s"</literal></expr></argument>, 
         <argument><expr><ternary><condition><expr><name><name>pUpsert</name><operator>-&gt;</operator><name>isDoUpdate</name></name></expr> ?</condition><then> <expr><literal type="string">"UPDATE"</literal></expr> </then><else>: <expr><literal type="string">"NOTHING"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>pUpsert</name><operator>-&gt;</operator><name>pUpsertSet</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pUpsert</name><operator>-&gt;</operator><name>pUpsertWhere</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pUpsert</name><operator>-&gt;</operator><name>pUpsertTarget</name></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"TARGET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pUpsert</name><operator>-&gt;</operator><name>pUpsertSet</name></name></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pUpsert</name><operator>-&gt;</operator><name>pUpsertWhere</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewItem</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WHERE"</literal></expr></argument>, <argument><expr><operator>(</operator><name>n</name><operator>--</operator><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pUpsert</name><operator>-&gt;</operator><name>pUpsertWhere</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pUpsert</name> <operator>=</operator> <name><name>pUpsert</name><operator>-&gt;</operator><name>pNextUpsert</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TREETRACE_ENABLED</name></expr></cpp:if>
<comment type="block">/*
** Generate a human-readable diagram of the data structure that go
** into generating an DELETE statement.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewDelete</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>With</name> <modifier>*</modifier></type><name>pWith</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>SrcList</name> <modifier>*</modifier></type><name>pTabList</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>pWhere</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>ExprList</name> <modifier>*</modifier></type><name>pOrderBy</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>pLimit</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"DELETE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWith</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTabList</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWhere</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOrderBy</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pLimit</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTrigger</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWith</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewWith</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pWith</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTabList</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewSrcList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pTabList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWhere</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WHERE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pWhere</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOrderBy</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pOrderBy</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ORDER-BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pLimit</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"LIMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pLimit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTrigger</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewTrigger</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pTrigger</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TREETRACE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TREETRACE_ENABLED</name></expr></cpp:if>
<comment type="block">/*
** Generate a human-readable diagram of the data structure that go
** into generating an INSERT statement.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewInsert</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>With</name> <modifier>*</modifier></type><name>pWith</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>SrcList</name> <modifier>*</modifier></type><name>pTabList</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>IdList</name> <modifier>*</modifier></type><name>pColumnList</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Select</name> <modifier>*</modifier></type><name>pSelect</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>ExprList</name> <modifier>*</modifier></type><name>pExprList</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>onError</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Upsert</name> <modifier>*</modifier></type><name>pUpsert</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name> <init>= <expr><literal type="string">"INSERT"</literal></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>onError</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>OE_Replace</name></expr>:</case>  <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"REPLACE"</literal></expr>;</expr_stmt>             <break>break;</break>
    <case>case <expr><name>OE_Ignore</name></expr>:</case>   <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"INSERT OR IGNORE"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>OE_Rollback</name></expr>:</case> <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"INSERT OR ROLLBACK"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>OE_Abort</name></expr>:</case>    <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"INSERT OR ABORT"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>OE_Fail</name></expr>:</case>     <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"INSERT OR FAIL"</literal></expr>;</expr_stmt>      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWith</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTabList</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pColumnList</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pSelect</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pExprList</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pUpsert</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTrigger</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWith</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewWith</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pWith</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTabList</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"INTO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewSrcList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pTabList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pColumnList</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewIdList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pColumnList</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"COLUMNS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pSelect</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"DATA-SOURCE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pExprList</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pExprList</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"VALUES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pUpsert</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"UPSERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewUpsert</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pUpsert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTrigger</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewTrigger</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pTrigger</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TREETRACE_ENABLED */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TREETRACE_ENABLED</name></expr></cpp:if>
<comment type="block">/*
** Generate a human-readable diagram of the data structure that go
** into generating an UPDATE statement.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewUpdate</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>With</name> <modifier>*</modifier></type><name>pWith</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>SrcList</name> <modifier>*</modifier></type><name>pTabList</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>ExprList</name> <modifier>*</modifier></type><name>pChanges</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>pWhere</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>onError</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>ExprList</name> <modifier>*</modifier></type><name>pOrderBy</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>pLimit</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Upsert</name> <modifier>*</modifier></type><name>pUpsert</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLabel</name> <init>= <expr><literal type="string">"UPDATE"</literal></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>onError</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>OE_Replace</name></expr>:</case>  <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"UPDATE OR REPLACE"</literal></expr>;</expr_stmt>   <break>break;</break>
    <case>case <expr><name>OE_Ignore</name></expr>:</case>   <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"UPDATE OR IGNORE"</literal></expr>;</expr_stmt>    <break>break;</break>
    <case>case <expr><name>OE_Rollback</name></expr>:</case> <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"UPDATE OR ROLLBACK"</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name>OE_Abort</name></expr>:</case>    <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"UPDATE OR ABORT"</literal></expr>;</expr_stmt>     <break>break;</break>
    <case>case <expr><name>OE_Fail</name></expr>:</case>     <expr_stmt><expr><name>zLabel</name> <operator>=</operator> <literal type="string">"UPDATE OR FAIL"</literal></expr>;</expr_stmt>      <break>break;</break>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWith</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTabList</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pChanges</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWhere</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOrderBy</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pLimit</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pUpsert</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTrigger</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWith</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewWith</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pWith</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTabList</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"FROM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewSrcList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pTabList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pChanges</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pChanges</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"SET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWhere</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"WHERE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pWhere</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOrderBy</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pOrderBy</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"ORDER-BY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pLimit</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"LIMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pLimit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pUpsert</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"UPSERT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewUpsert</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pUpsert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTrigger</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3TreeViewTrigger</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name>pTrigger</name></expr></argument>, <argument><expr><operator>(</operator><operator>--</operator><name>n</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TREETRACE_ENABLED */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifndef>
<comment type="block">/*
** Show a human-readable graph of a TriggerStep
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewTriggerStep</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>TriggerStep</name> <modifier>*</modifier></type><name>pStep</name></decl></parameter>,
  <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>,
  <parameter><decl><type><name>u8</name></type> <name>showFullList</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pStep</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, 
      <argument><expr><name>moreToFollow</name> <operator>||</operator> <operator>(</operator><name>showFullList</name> <operator>&amp;&amp;</operator> <name><name>pStep</name><operator>-&gt;</operator><name>pNext</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>cnt</name><operator>++</operator> <operator>&amp;&amp;</operator> <name><name>pStep</name><operator>-&gt;</operator><name>pNext</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pStep</name><operator>-&gt;</operator><name>zSpan</name></name></expr> ?</condition><then> <expr><name><name>pStep</name><operator>-&gt;</operator><name>zSpan</name></name></expr> </then><else>: <expr><literal type="string">"RETURNING"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name>showFullList</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pStep</name> <operator>=</operator> <name><name>pStep</name><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition>;</do>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
  
<comment type="block">/*
** Show a human-readable graph of a Trigger
*/</comment>
<function><type><name>void</name></type> <name>sqlite3TreeViewTrigger</name><parameter_list>(
  <parameter><decl><type><name>TreeView</name> <modifier>*</modifier></type><name>pView</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>Trigger</name> <modifier>*</modifier></type><name>pTrigger</name></decl></parameter>,
  <parameter><decl><type><name>u8</name></type> <name>moreToFollow</name></decl></parameter>,
  <parameter><decl><type><name>u8</name></type> <name>showFullList</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pTrigger</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>,
     <argument><expr><name>moreToFollow</name> <operator>||</operator> <operator>(</operator><name>showFullList</name> <operator>&amp;&amp;</operator> <name><name>pTrigger</name><operator>-&gt;</operator><name>pNext</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>cnt</name><operator>++</operator> <operator>&amp;&amp;</operator> <name><name>pTrigger</name><operator>-&gt;</operator><name>pNext</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewLine</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><literal type="string">"TRIGGER %s"</literal></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewTriggerStep</name><argument_list>(<argument><expr><name>pView</name></expr></argument>, <argument><expr><name><name>pTrigger</name><operator>-&gt;</operator><name>step_list</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name>showFullList</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pTrigger</name> <operator>=</operator> <name><name>pTrigger</name><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition>;</do>
  <expr_stmt><expr><call><name>sqlite3TreeViewPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_TRIGGER */</comment>
  

<comment type="block">/*
** These simplified versions of the tree-view routines omit unnecessary
** parameters.  These variants are intended to be used from a symbolic
** debugger, such as "gdb", during interactive debugging sessions.
**
** This routines are given external linkage so that they will always be
** accessible to the debugging, and to avoid warnings about unused
** functions.  But these routines only exist in debugging builds, so they
** do not contaminate the interface.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3ShowExpr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Expr</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewExpr</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowExprList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ExprList</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewExprList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowIdList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IdList</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewIdList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowSrcList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SrcList</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewSrcList</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowSelect</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Select</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewSelect</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowWith</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>With</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewWith</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowUpsert</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Upsert</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewUpsert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifndef>
<function><type><name>void</name></type> <name>sqlite3ShowTriggerStep</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TriggerStep</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3TreeViewTriggerStep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowTriggerStepList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TriggerStep</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3TreeViewTriggerStep</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowTrigger</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Trigger</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewTrigger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowTriggerList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Trigger</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewTrigger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WINDOWFUNC</name></cpp:ifndef>
<function><type><name>void</name></type> <name>sqlite3ShowWindow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Window</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewWindow</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3ShowWinFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Window</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>sqlite3TreeViewWinFunc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_DEBUG */</comment>
</unit>
