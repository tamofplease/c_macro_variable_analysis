<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/mem2.c"><comment type="block">/*
** 2007 August 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains low-level memory allocation drivers for when
** SQLite will use the standard C-library malloc/realloc/free interface
** to obtain the memory it needs while adding lots of additional debugging
** information to each allocation in order to help detect and fix memory
** leaks and memory usage errors.
**
** This file contains implementations of the low-level memory allocation
** routines specified in the sqlite3_mem_methods object.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** This version of the memory allocator is used only if the
** SQLITE_MEMDEBUG macro is defined
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_MEMDEBUG</name></cpp:ifdef>

<comment type="block">/*
** The backtrace functionality is only available with GLIBC
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__GLIBC__</name></cpp:ifdef>
  <function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>backtrace</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>backtrace_symbols_fd</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>backtrace</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>backtrace_symbols_fd</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Each memory allocation looks like this:
**
**  ------------------------------------------------------------------------
**  | Title |  backtrace pointers |  MemBlockHdr |  allocation |  EndGuard |
**  ------------------------------------------------------------------------
**
** The application code sees only a pointer to the allocation.  We have
** to back up from the allocation pointer to find the MemBlockHdr.  The
** MemBlockHdr tells us the size of the allocation and the number of
** backtrace pointers.  There is also a guard word at the end of the
** MemBlockHdr.
*/</comment>
<struct>struct <name>MemBlockHdr</name> <block>{
  <decl_stmt><decl><type><name>i64</name></type> <name>iSize</name></decl>;</decl_stmt>                          <comment type="block">/* Size of this allocation */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pNext</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pPrev</name></decl>;</decl_stmt>  <comment type="block">/* Linked list of all unfreed memory */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>nBacktrace</name></decl>;</decl_stmt>                    <comment type="block">/* Number of backtraces on this alloc */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>nBacktraceSlots</name></decl>;</decl_stmt>               <comment type="block">/* Available backtrace slots */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>nTitle</name></decl>;</decl_stmt>                          <comment type="block">/* Bytes of title; includes '\0' */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>eType</name></decl>;</decl_stmt>                           <comment type="block">/* Allocation type code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iForeGuard</name></decl>;</decl_stmt>                     <comment type="block">/* Guard word for sanity */</comment>
}</block>;</struct>

<comment type="block">/*
** Guard words
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGUARD</name></cpp:macro> <cpp:value>0x80F5E153</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REARGUARD</name></cpp:macro> <cpp:value>0xE4676B53</cpp:value></cpp:define>

<comment type="block">/*
** Number of malloc size increments to track.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NCSIZE</name></cpp:macro>  <cpp:value>1000</cpp:value></cpp:define>

<comment type="block">/*
** All of the static variables used by this module are collected
** into a single structure named "mem".  This is to keep the
** static variables organized and to reduce namespace pollution
** when this module is combined with other in the amalgamation.
*/</comment>
<struct><specifier>static</specifier> struct <block>{
  
  <comment type="block">/*
  ** Mutex to control access to the memory allocation subsystem.
  */</comment>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> <modifier>*</modifier></type><name>mutex</name></decl>;</decl_stmt>

  <comment type="block">/*
  ** Head and tail of a linked list of all outstanding allocations
  */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pFirst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pLast</name></decl>;</decl_stmt>
  
  <comment type="block">/*
  ** The number of levels of backtrace to save in new allocations.
  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBacktrace</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xBacktrace</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block">/*
  ** Title text to insert in front of each block
  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTitle</name></decl>;</decl_stmt>        <comment type="block">/* Bytes of zTitle to save.  Includes '\0' and padding */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zTitle</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="block">/* The title text */</comment>

  <comment type="block">/* 
  ** sqlite3MallocDisallow() increments the following counter.
  ** sqlite3MallocAllow() decrements it.
  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>disallow</name></decl>;</decl_stmt> <comment type="block">/* Do not allow memory allocation */</comment>

  <comment type="block">/*
  ** Gather statistics on the sizes of memory allocations.
  ** nAlloc[i] is the number of allocation attempts of i*8
  ** bytes.  i==NCSIZE is the number of allocation attempts for
  ** sizes more than NCSIZE*8 bytes.
  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>nAlloc</name><index>[<expr><name>NCSIZE</name></expr>]</index></name></decl>;</decl_stmt>      <comment type="block">/* Total number of allocations */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>nCurrent</name><index>[<expr><name>NCSIZE</name></expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* Current number of allocations */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>mxCurrent</name><index>[<expr><name>NCSIZE</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* Highwater mark for nCurrent */</comment>

}</block> <decl><name>mem</name></decl>;</struct>


<comment type="block">/*
** Adjust memory usage statistics
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>adjustStats</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iSize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>increment</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>ROUND8</name><argument_list>(<argument><expr><name>iSize</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;</operator><name>NCSIZE</name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>NCSIZE</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>increment</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>nAlloc</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>nCurrent</name><index>[<expr><name>i</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>mem</name><operator>.</operator><name>nCurrent</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name><name>mem</name><operator>.</operator><name>mxCurrent</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>mxCurrent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mem</name><operator>.</operator><name>nCurrent</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>nCurrent</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>mem</name><operator>.</operator><name>nCurrent</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Given an allocation, find the MemBlockHdr for that allocation.
**
** This routine checks the guards at either end of the allocation and
** if they are incorrect it asserts.
*/</comment>
<function><type><specifier>static</specifier> <name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>sqlite3MemsysGetHeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pAllocation</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pInt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pU8</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nReserve</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator>struct <name>MemBlockHdr</name><operator>*</operator><operator>)</operator><name>pAllocation</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iForeGuard</name></name><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><name>FOREGUARD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nReserve</name> <operator>=</operator> <call><name>ROUND8</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pInt</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>pAllocation</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pU8</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>pAllocation</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pInt</name><index>[<expr><name>nReserve</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>]</index></name><operator>==</operator><operator>(</operator><name>int</name><operator>)</operator><name>REARGUARD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* This checks any of the "extra" bytes allocated due
  ** to rounding up to an 8 byte boundary to ensure 
  ** they haven't been overwritten.
  */</comment>
  <while>while<condition>( <expr><name>nReserve</name><operator>--</operator> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>iSize</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pU8</name><index>[<expr><name>nReserve</name></expr>]</index></name><operator>==</operator><literal type="number">0x65</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the number of bytes currently allocated at address p.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlite3MemSize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pHdr</name> <operator>=</operator> <call><name>sqlite3MemsysGetHeader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pHdr</name><operator>-&gt;</operator><name>iSize</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Initialize the memory allocation subsystem.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlite3MemInit</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>MemBlockHdr</name></expr></argument>)</argument_list></sizeof><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bMemstat</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* If memory status is enabled, then the malloc.c wrapper will already
    ** hold the STATIC_MEM mutex when the routines here are invoked. */</comment>
    <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Deinitialize the memory allocation subsystem.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3MemShutdown</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>mutex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Round up a request size to the next valid allocation size.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlite3MemRoundup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ROUND8</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Fill a buffer with pseudo-random bytes.  This is used to preset
** the content of a new memory allocation to unpredictable values and
** to clear the content of a freed allocation to unpredictable values.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>randomFill</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>SQLITE_PTR_TO_INT</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>y</name> <operator>=</operator> <name>nByte</name> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>nByte</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xd0000001</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>*</operator><literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>^</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>pBuf</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pBuf</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <while>while<condition>( <expr><name>nByte</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xd0000001</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>*</operator><literal type="number">1103515245</literal> <operator>+</operator> <literal type="number">12345</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <name>x</name> <operator>^</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>pBuf</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>r</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
** Allocate nByte bytes of memory.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>sqlite3MemMalloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pInt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>totalSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nReserve</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>mem</name><operator>.</operator><name>disallow</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nReserve</name> <operator>=</operator> <call><name>ROUND8</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>totalSize</name> <operator>=</operator> <name>nReserve</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
               <name><name>mem</name><operator>.</operator><name>nBacktrace</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>mem</name><operator>.</operator><name>nTitle</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>totalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pBt</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>z</name><index>[<expr><name><name>mem</name><operator>.</operator><name>nTitle</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pHdr</name> <operator>=</operator> <operator>(</operator>struct <name>MemBlockHdr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBt</name><index>[<expr><name><name>mem</name><operator>.</operator><name>nBacktrace</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <name><name>mem</name><operator>.</operator><name>pLast</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>mem</name><operator>.</operator><name>pLast</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>pLast</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>pHdr</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>pFirst</name></name> <operator>=</operator> <name>pHdr</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>pLast</name></name> <operator>=</operator> <name>pHdr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>iForeGuard</name></name> <operator>=</operator> <name>FOREGUARD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>eType</name></name> <operator>=</operator> <name>MEMTYPE_HEAP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nBacktraceSlots</name></name> <operator>=</operator> <name><name>mem</name><operator>.</operator><name>nBacktrace</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nTitle</name></name> <operator>=</operator> <name><name>mem</name><operator>.</operator><name>nTitle</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>mem</name><operator>.</operator><name>nBacktrace</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>aAddr</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nBacktrace</name></name> <operator>=</operator> <call><name>backtrace</name><argument_list>(<argument><expr><name>aAddr</name></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>nBacktrace</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aAddr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nBacktrace</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pBt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>mem</name><operator>.</operator><name>xBacktrace</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name><name>mem</name><operator>.</operator><name>xBacktrace</name></name><argument_list>(<argument><expr><name>nByte</name></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nBacktrace</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aAddr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nBacktrace</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>mem</name><operator>.</operator><name>nTitle</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>zTitle</name></name></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>nTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>iSize</name></name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>adjustStats</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pInt</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pHdr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInt</name><index>[<expr><name>nReserve</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>]</index></name> <operator>=</operator> <name>REARGUARD</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>randomFill</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pInt</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pInt</name><operator>)</operator><operator>+</operator><name>nByte</name></expr></argument>, <argument><expr><literal type="number">0x65</literal></expr></argument>, <argument><expr><name>nReserve</name><operator>-</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pInt</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return> 
</block_content>}</block></function>

<comment type="block">/*
** Free memory.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sqlite3MemFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPrior</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bMemstat</name></name> <operator>||</operator> <name><name>sqlite3GlobalConfig</name><operator>.</operator><name>bCoreMutex</name></name><operator>==</operator><literal type="number">0</literal> 
       <operator>||</operator> <name><name>mem</name><operator>.</operator><name>mutex</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pHdr</name> <operator>=</operator> <call><name>sqlite3MemsysGetHeader</name><argument_list>(<argument><expr><name>pPrior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pBt</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pHdr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pBt</name> <operator>-=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>nBacktraceSlots</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name><operator>-&gt;</operator><name>pNext</name></name><operator>==</operator><name>pHdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>mem</name><operator>.</operator><name>pFirst</name></name><operator>==</operator><name>pHdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>pFirst</name></name> <operator>=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>pPrev</name></name><operator>==</operator><name>pHdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>mem</name><operator>.</operator><name>pLast</name></name><operator>==</operator><name>pHdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>pLast</name></name> <operator>=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pBt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>z</name> <operator>-=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>nTitle</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>adjustStats</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pHdr</name><operator>-&gt;</operator><name>iSize</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>randomFill</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><name><name>pHdr</name><operator>-&gt;</operator><name>nBacktraceSlots</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                <operator>(</operator><name>int</name><operator>)</operator><name><name>pHdr</name><operator>-&gt;</operator><name>iSize</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>nTitle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
</block_content>}</block></function>

<comment type="block">/*
** Change the size of an existing memory allocation.
**
** For this debugging implementation, we *always* make a copy of the
** allocation into a new place in memory.  In this way, if the 
** higher level code is using pointer to the old allocation, it is 
** much more likely to break and we are much more liking to find
** the error.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>sqlite3MemRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPrior</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pOldHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>mem</name><operator>.</operator><name>disallow</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>nByte</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>     <comment type="block">/* EV: R-46199-30249 */</comment>
  <expr_stmt><expr><name>pOldHdr</name> <operator>=</operator> <call><name>sqlite3MemsysGetHeader</name><argument_list>(<argument><expr><name>pPrior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3MemMalloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>pPrior</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><ternary><condition><expr><name>nByte</name><operator>&lt;</operator><name><name>pOldHdr</name><operator>-&gt;</operator><name>iSize</name></name></expr> ?</condition><then> <expr><name>nByte</name></expr> </then><else>: <expr><name><name>pOldHdr</name><operator>-&gt;</operator><name>iSize</name></name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&gt;</operator><name><name>pOldHdr</name><operator>-&gt;</operator><name>iSize</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>randomFill</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pNew</name><operator>)</operator><index>[<expr><name><name>pOldHdr</name><operator>-&gt;</operator><name>iSize</name></name></expr>]</index></expr></argument>, <argument><expr><name>nByte</name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pOldHdr</name><operator>-&gt;</operator><name>iSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3MemFree</name><argument_list>(<argument><expr><name>pPrior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Populate the low-level memory allocation function pointers in
** sqlite3GlobalConfig.m with pointers to the routines in this file.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3MemSetDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_mem_methods</name></type> <name>defaultMethods</name> <init>= <expr><block>{
     <expr><name>sqlite3MemMalloc</name></expr>,
     <expr><name>sqlite3MemFree</name></expr>,
     <expr><name>sqlite3MemRealloc</name></expr>,
     <expr><name>sqlite3MemSize</name></expr>,
     <expr><name>sqlite3MemRoundup</name></expr>,
     <expr><name>sqlite3MemInit</name></expr>,
     <expr><name>sqlite3MemShutdown</name></expr>,
     <expr><literal type="number">0</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MALLOC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>defaultMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Set the "type" of an allocation.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3MemdebugSetType</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>sqlite3GlobalConfig</name><operator>.</operator><name>m</name><operator>.</operator><name>xFree</name></name><operator>==</operator><name>sqlite3MemFree</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pHdr</name> <operator>=</operator> <call><name>sqlite3MemsysGetHeader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>iForeGuard</name></name><operator>==</operator><name>FOREGUARD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>eType</name></name> <operator>=</operator> <name>eType</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return TRUE if the mask of type in eType matches the type of the
** allocation p.  Also return true if p==NULL.
**
** This routine is designed for use within an assert() statement, to
** verify the type of an allocation.  For example:
**
**     assert( sqlite3MemdebugHasType(p, MEMTYPE_HEAP) );
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MemdebugHasType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>sqlite3GlobalConfig</name><operator>.</operator><name>m</name><operator>.</operator><name>xFree</name></name><operator>==</operator><name>sqlite3MemFree</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pHdr</name> <operator>=</operator> <call><name>sqlite3MemsysGetHeader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>iForeGuard</name></name><operator>==</operator><name>FOREGUARD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* Allocation is valid */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pHdr</name><operator>-&gt;</operator><name>eType</name></name><operator>&amp;</operator><name>eType</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return TRUE if the mask of type in eType matches no bits of the type of the
** allocation p.  Also return true if p==NULL.
**
** This routine is designed for use within an assert() statement, to
** verify the type of an allocation.  For example:
**
**     assert( sqlite3MemdebugNoType(p, MEMTYPE_LOOKASIDE) );
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MemdebugNoType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u8</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name> <operator>&amp;&amp;</operator> <name><name>sqlite3GlobalConfig</name><operator>.</operator><name>m</name><operator>.</operator><name>xFree</name></name><operator>==</operator><name>sqlite3MemFree</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pHdr</name> <operator>=</operator> <call><name>sqlite3MemsysGetHeader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>iForeGuard</name></name><operator>==</operator><name>FOREGUARD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* Allocation is valid */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pHdr</name><operator>-&gt;</operator><name>eType</name></name><operator>&amp;</operator><name>eType</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set the number of backtrace levels kept for each allocation.
** A value of zero turns off backtracing.  The number is always rounded
** up to a multiple of 2.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3MemdebugBacktrace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>depth</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>depth</name><operator>&gt;</operator><literal type="number">20</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>depth</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>depth</name> <operator>=</operator> <operator>(</operator><name>depth</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xfe</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>nBacktrace</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3MemdebugBacktraceCallback</name><parameter_list>(<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xBacktrace</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>xBacktrace</name></name> <operator>=</operator> <name>xBacktrace</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Set the title string for subsequent allocations.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3MemdebugSettitle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTitle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zTitle</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>zTitle</name></name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>zTitle</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>zTitle</name></name></expr></argument>, <argument><expr><name>zTitle</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>zTitle</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mem</name><operator>.</operator><name>nTitle</name></name> <operator>=</operator> <call><name>ROUND8</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name><name>mem</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqlite3MemdebugSync</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>pHdr</name><operator>=</operator><name><name>mem</name><operator>.</operator><name>pFirst</name></name></expr>;</init> <condition><expr><name>pHdr</name></expr>;</condition> <incr><expr><name>pHdr</name><operator>=</operator><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pBt</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pHdr</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pBt</name> <operator>-=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>nBacktraceSlots</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mem</name><operator>.</operator><name>xBacktrace</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>pHdr</name><operator>-&gt;</operator><name>iSize</name></name></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nBacktrace</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Open the file indicated and write a log of all unfreed memory 
** allocations into that log.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3MemdebugDump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>MemBlockHdr</name></name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>out</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"** Unable to output memory debug output log: %s **\n"</literal></expr></argument>,
                    <argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>pHdr</name><operator>=</operator><name><name>mem</name><operator>.</operator><name>pFirst</name></name></expr>;</init> <condition><expr><name>pHdr</name></expr>;</condition> <incr><expr><name>pHdr</name><operator>=</operator><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pHdr</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>z</name> <operator>-=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>nBacktraceSlots</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>nTitle</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"**** %lld bytes at %p from %s ****\n"</literal></expr></argument>, 
            <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>iSize</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nTitle</name></name></expr> ?</condition><then> <expr><name>z</name></expr> </then><else>: <expr><literal type="string">"???"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pHdr</name><operator>-&gt;</operator><name>nBacktrace</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pBt</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pHdr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pBt</name> <operator>-=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>nBacktraceSlots</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>backtrace_symbols_fd</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nBacktrace</name></name></expr></argument>, <argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"COUNTS:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NCSIZE</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>mem</name><operator>.</operator><name>nAlloc</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"   %5d: %10d %10d %10d\n"</literal></expr></argument>, 
            <argument><expr><name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>nAlloc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>nCurrent</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>mxCurrent</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name><name>mem</name><operator>.</operator><name>nAlloc</name><index>[<expr><name>NCSIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"   %5d: %10d %10d %10d\n"</literal></expr></argument>,
             <argument><expr><name>NCSIZE</name><operator>*</operator><literal type="number">8</literal><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>nAlloc</name><index>[<expr><name>NCSIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,
             <argument><expr><name><name>mem</name><operator>.</operator><name>nCurrent</name><index>[<expr><name>NCSIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>mem</name><operator>.</operator><name>mxCurrent</name><index>[<expr><name>NCSIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return the number of times sqlite3MemMalloc() has been called.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MemdebugMallocCount</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>NCSIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>nTotal</name> <operator>+=</operator> <name><name>mem</name><operator>.</operator><name>nAlloc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>nTotal</name></expr>;</return>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_MEMDEBUG */</comment>
</unit>
