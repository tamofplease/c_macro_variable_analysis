<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/crypto_libtomcrypt.c"><comment type="block">/*
** SQLCipher
** http://sqlcipher.net
**
** Copyright (c) 2008 - 2013, ZETETIC LLC
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are met:
**     * Redistributions of source code must retain the above copyright
**       notice, this list of conditions and the following disclaimer.
**     * Redistributions in binary form must reproduce the above copyright
**       notice, this list of conditions and the following disclaimer in the
**       documentation and/or other materials provided with the distribution.
**     * Neither the name of the ZETETIC LLC nor the
**       names of its contributors may be used to endorse or promote products
**       derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY ZETETIC LLC ''AS IS'' AND ANY
** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL ZETETIC LLC BE LIABLE FOR ANY
** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
** ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
*/</comment>
<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_CRYPTO_LIBTOMCRYPT</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlcipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tomcrypt.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORTUNA_MAX_SZ</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>prng_state</name></type> <name>prng</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>unsigned</name> <name>int</name></type> <name>ltc_init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>unsigned</name> <name>int</name></type> <name>ltc_ref_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LTC_CIPHER</name></cpp:macro> <cpp:value>"rijndael"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_add_random</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>data_to_read</name> <init>= <expr><name>length</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>block_sz</name> <init>= <expr><ternary><condition><expr><name>data_to_read</name> <operator>&lt;</operator> <name>FORTUNA_MAX_SZ</name></expr> ?</condition><then> <expr><name>data_to_read</name></expr> </then><else>: <expr><name>FORTUNA_MAX_SZ</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_add_random: entering SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_RAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_add_random: entered SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>(<expr><name>data_to_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fortuna_add_entropy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>block_sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><name>rc</name> <operator>!=</operator> <name>CRYPT_OK</name></expr> ?</condition><then> <expr><name>SQLITE_ERROR</name></expr> </then><else>: <expr><name>SQLITE_OK</name></expr></else></ternary></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>data_to_read</name> <operator>-=</operator> <name>block_sz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>data</name> <operator>+=</operator> <name>block_sz</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>block_sz</name> <operator>=</operator> <ternary><condition><expr><name>data_to_read</name> <operator>&lt;</operator> <name>FORTUNA_MAX_SZ</name></expr> ?</condition><then> <expr><name>data_to_read</name></expr> </then><else>: <expr><name>FORTUNA_MAX_SZ</name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>fortuna_ready</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_add_random: leaving SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_RAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_add_random: left SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_activate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>random_buffer</name><index>[<expr><name>FORTUNA_MAX_SZ</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_activate: entering SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_activate: entered SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlcipher_memset</name><argument_list>(<argument><expr><name>random_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FORTUNA_MAX_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>ltc_init</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>register_prng</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fortuna_desc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>register_cipher</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rijndael_desc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>register_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha512_desc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>register_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha256_desc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>register_hash</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sha1_desc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>(<expr><call><name>fortuna_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ltc_init</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>ltc_ref_count</name><operator>++</operator></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLCIPHER_TEST</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3_randomness</name><argument_list>(<argument><expr><name>FORTUNA_MAX_SZ</name></expr></argument>, <argument><expr><name>random_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if<condition>(<expr><call><name>sqlcipher_ltc_add_random</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>random_buffer</name></expr></argument>, <argument><expr><name>FORTUNA_MAX_SZ</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlcipher_memset</name><argument_list>(<argument><expr><name>random_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FORTUNA_MAX_SZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_activate: leaving SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_activate: left SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_deactivate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_deactivate: entering SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_deactivate: entered SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ltc_ref_count</name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>ltc_ref_count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fortuna_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prng</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_deactivate: leaving SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_deactivate: left SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_ltc_get_provider_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"libtomcrypt"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_ltc_get_provider_version</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>SCRYPT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_random</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_random: entering SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_RAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_random: entered SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fortuna_read</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_random: leaving SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_RAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_ltc_random: left SQLCIPHER_MUTEX_PROVIDER_RAND"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_hmac</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hmac_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in2_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>hash_idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>hmac_state</name></type> <name>hmac</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name></decl>;</decl_stmt>
  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></switch>

  <if_stmt><if>if<condition>(<expr><name>hash_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>outlen</name> <operator>=</operator> <name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name>in</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hmac_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hmac_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><name>in2</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hmac_process</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in2_sz</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hmac_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_kdf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salt_sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>workfactor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>hash_idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>outlen</name> <init>= <expr><name>key_sz</name></expr></init></decl>;</decl_stmt>

  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></switch>
  <if_stmt><if>if<condition>(<expr><name>hash_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>pkcs_5_alg2</name><argument_list>(<argument><expr><name>pass</name></expr></argument>, <argument><expr><name>pass_sz</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_sz</name></expr></argument>,
                       <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><name>hash_idx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outlen</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_ltc_get_cipher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"aes-256-cbc"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_cipher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>cipher_idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>symmetric_CBC</name></type> <name>cbc</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>cipher_idx</name> <operator>=</operator> <call><name>find_cipher</name><argument_list>(<argument><expr><name>LTC_CIPHER</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>cbc_start</name><argument_list>(<argument><expr><name>cipher_idx</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><name>mode</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name>cbc_encrypt</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>cbc_decrypt</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>rc</name> <operator>!=</operator> <name>CRYPT_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>cbc_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_get_key_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cipher_idx</name> <init>= <expr><call><name>find_cipher</name><argument_list>(<argument><expr><name>LTC_CIPHER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>max_key_length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_get_iv_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cipher_idx</name> <init>= <expr><call><name>find_cipher</name><argument_list>(<argument><expr><name>LTC_CIPHER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_get_block_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>cipher_idx</name> <init>= <expr><call><name>find_cipher</name><argument_list>(<argument><expr><name>LTC_CIPHER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>cipher_descriptor</name><index>[<expr><name>cipher_idx</name></expr>]</index></name><operator>.</operator><name>block_length</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_get_hmac_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>hash_idx</name></decl>;</decl_stmt>
  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <expr_stmt><expr><name>hash_idx</name> <operator>=</operator> <call><name>find_hash</name><argument_list>(<argument><expr><literal type="string">"sha512"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>

  <if_stmt><if>if<condition>(<expr><name>hash_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name><name>hash_descriptor</name><index>[<expr><name>hash_idx</name></expr>]</index></name><operator>.</operator><name>hashsize</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_ctx_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_ltc_activate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_ctx_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_ltc_deactivate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_ltc_fips_status</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlcipher_ltc_setup</name><parameter_list>(<parameter><decl><type><name>sqlcipher_provider</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>sqlcipher_ltc_activate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>deactivate</name></name> <operator>=</operator> <name>sqlcipher_ltc_deactivate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_provider_name</name></name> <operator>=</operator> <name>sqlcipher_ltc_get_provider_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>random</name></name> <operator>=</operator> <name>sqlcipher_ltc_random</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hmac</name></name> <operator>=</operator> <name>sqlcipher_ltc_hmac</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>kdf</name></name> <operator>=</operator> <name>sqlcipher_ltc_kdf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cipher</name></name> <operator>=</operator> <name>sqlcipher_ltc_cipher</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_cipher</name></name> <operator>=</operator> <name>sqlcipher_ltc_get_cipher</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_key_sz</name></name> <operator>=</operator> <name>sqlcipher_ltc_get_key_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_iv_sz</name></name> <operator>=</operator> <name>sqlcipher_ltc_get_iv_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_block_sz</name></name> <operator>=</operator> <name>sqlcipher_ltc_get_block_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_hmac_sz</name></name> <operator>=</operator> <name>sqlcipher_ltc_get_hmac_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ctx_init</name></name> <operator>=</operator> <name>sqlcipher_ltc_ctx_init</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ctx_free</name></name> <operator>=</operator> <name>sqlcipher_ltc_ctx_free</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>add_random</name></name> <operator>=</operator> <name>sqlcipher_ltc_add_random</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fips_status</name></name> <operator>=</operator> <name>sqlcipher_ltc_fips_status</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_provider_version</name></name> <operator>=</operator> <name>sqlcipher_ltc_get_provider_version</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>
</unit>
