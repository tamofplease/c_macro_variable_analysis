<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/crypto_nss.c"><comment type="block">/*
** SQLCipher
** http://sqlcipher.net
**
** Copyright (c) 2008 - 2013, ZETETIC LLC
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are met:
**     * Redistributions of source code must retain the above copyright
**       notice, this list of conditions and the following disclaimer.
**     * Redistributions in binary form must reproduce the above copyright
**       notice, this list of conditions and the following disclaimer in the
**       documentation and/or other materials provided with the distribution.
**     * Neither the name of the ZETETIC LLC nor the
**       names of its contributors may be used to endorse or promote products
**       derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY ZETETIC LLC ''AS IS'' AND ANY
** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL ZETETIC LLC BE LIABLE FOR ANY
** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
** ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
*/</comment>
<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_CRYPTO_NSS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlcipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nss/blapit.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nss/nss.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nss/pk11pub.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>NSSInitContext</name><modifier>*</modifier></type> <name>nss_init_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>nss_init_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>sqlcipher_nss_setup</name><parameter_list>(<parameter><decl><type><name>sqlcipher_provider</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_activate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_nss_activate: entering SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_nss_activate: entered SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nss_init_context</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nss_init_context</name> <operator>=</operator> <call><name>NSS_InitContext</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><name>NSS_INIT_READONLY</name> <operator>|</operator> <name>NSS_INIT_NOCERTDB</name> <operator>|</operator> <name>NSS_INIT_NOMODDB</name> <operator>|</operator>
                        <name>NSS_INIT_FORCEOPEN</name> <operator>|</operator> <name>NSS_INIT_OPTIMIZESPACE</name> <operator>|</operator> <name>NSS_INIT_NOROOTINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nss_init_count</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_nss_activate: leaving SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_nss_activate: left SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_deactivate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_nss_activate: entering SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_nss_activate: entered SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nss_init_count</name><operator>--</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nss_init_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nss_init_context</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>NSS_ShutdownContext</name><argument_list>(<argument><expr><name>nss_init_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nss_init_context</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt> 

  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_nss_activate: leaving SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlcipher_mutex</name><argument_list>(<argument><expr><name>SQLCIPHER_MUTEX_PROVIDER_ACTIVATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlcipher_log</name><argument_list>(<argument><expr><name>SQLCIPHER_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"sqlcipher_nss_activate: left SQLCIPHER_MUTEX_PROVIDER_ACTIVATE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_add_random</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* generate a defined number of random bytes */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_random</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// PK11_GenerateRandom should be thread-safe.</comment>
  <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>PK11_GenerateRandom</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SECSuccess</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_OK</name></expr> </then><else>: <expr><name>SQLITE_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_nss_get_provider_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"nss"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_nss_get_provider_version</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>NSS_GetVersion</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_nss_get_cipher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"aes-256-cbc"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_get_key_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>AES_256_KEY_LENGTH</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_get_iv_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>AES_BLOCK_SIZE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_get_block_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>AES_BLOCK_SIZE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_get_hmac_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <return>return <expr><name>SHA1_LENGTH</name></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <return>return <expr><name>SHA256_LENGTH</name></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <return>return <expr><name>SHA512_LENGTH</name></expr>;</return>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_hmac</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hmac_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in2_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>length</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>outLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PK11Context</name><modifier>*</modifier></type> <name>context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PK11SlotInfo</name> <modifier>*</modifier></type> <name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PK11SymKey</name><modifier>*</modifier></type> <name>symKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><name>in</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>CK_MECHANISM_TYPE</name></type> <name>mech</name></decl>;</decl_stmt>
  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <expr_stmt><expr><name>mech</name> <operator>=</operator> <name>CKM_SHA_1_HMAC</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <expr_stmt><expr><name>mech</name> <operator>=</operator> <name>CKM_SHA256_HMAC</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <expr_stmt><expr><name>mech</name> <operator>=</operator> <name>CKM_SHA512_HMAC</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <goto>goto <name>error</name>;</goto>
  </block_content>}</block></switch>
  <expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>sqlcipher_nss_get_hmac_sz</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>algorithm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>PK11_GetInternalSlot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SECItem</name></type> <name>keyItem</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>keyItem</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>hmac_key</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>keyItem</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>key_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>symKey</name> <operator>=</operator> <call><name>PK11_ImportSymKey</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>mech</name></expr></argument>, <argument><expr><name>PK11_OriginUnwrap</name></expr></argument>,
                             <argument><expr><name>CKA_SIGN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyItem</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>symKey</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SECItem</name></type> <name>noParams</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>noParams</name><operator>.</operator><name>data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>noParams</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>PK11_CreateContextBySymKey</name><argument_list>(<argument><expr><name>mech</name></expr></argument>, <argument><expr><name>CKA_SIGN</name></expr></argument>, <argument><expr><name>symKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>context</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>PK11_DigestBegin</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>PK11_DigestOp</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>in2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>PK11_DigestOp</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in2_sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>PK11_DigestFinal</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outLen</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

  <goto>goto <name>cleanup</name>;</goto>
  <label><name>error</name>:</label>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  <label><name>cleanup</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>context</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PK11_DestroyContext</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>symKey</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PK11_FreeSymKey</name><argument_list>(<argument><expr><name>symKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_kdf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salt_sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>workfactor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PK11SlotInfo</name> <modifier>*</modifier></type> <name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECAlgorithmID</name> <modifier>*</modifier></type> <name>algid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PK11SymKey</name><modifier>*</modifier></type> <name>symKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECOidTag</name></type> <name>oidtag</name></decl>;</decl_stmt>
  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <expr_stmt><expr><name>oidtag</name> <operator>=</operator> <name>SEC_OID_HMAC_SHA1</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <expr_stmt><expr><name>oidtag</name> <operator>=</operator> <name>SEC_OID_HMAC_SHA256</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <expr_stmt><expr><name>oidtag</name> <operator>=</operator> <name>SEC_OID_HMAC_SHA512</name></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <goto>goto <name>error</name>;</goto>
  </block_content>}</block></switch>
  <decl_stmt><decl><type><name>SECItem</name></type> <name>secSalt</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>secSalt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>salt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>secSalt</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>salt_sz</name></expr>;</expr_stmt>
  <comment type="line">// Always pass SEC_OID_HMAC_SHA1 (i.e. PBMAC1) as this parameter</comment>
  <comment type="line">// is unused for key generation. It is currently only used</comment>
  <comment type="line">// for PBKDF2 authentication or key (un)wrapping when specifying an</comment>
  <comment type="line">// encryption algorithm (PBES2).</comment>
  <expr_stmt><expr><name>algid</name> <operator>=</operator> <call><name>PK11_CreatePBEV2AlgorithmID</name><argument_list>(<argument><expr><name>SEC_OID_PKCS5_PBKDF2</name></expr></argument>, <argument><expr><name>SEC_OID_HMAC_SHA1</name></expr></argument>,
                                      <argument><expr><name>oidtag</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>secSalt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>algid</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>PK11_GetInternalSlot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SECItem</name></type> <name>pwItem</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pwItem</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>pass</name></expr>;</expr_stmt> <comment type="line">// PK11_PBEKeyGen doesn't modify the key.</comment>
  <expr_stmt><expr><name><name>pwItem</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>pass_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>symKey</name> <operator>=</operator> <call><name>PK11_PBEKeyGen</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>algid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pwItem</name></expr></argument>, <argument><expr><name>PR_FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>symKey</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>PK11_ExtractKeyValue</name><argument_list>(<argument><expr><name>symKey</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <comment type="line">// No need to free keyData as it is a buffer managed by symKey.</comment>
  <decl_stmt><decl><type><name>SECItem</name><modifier>*</modifier></type> <name>keyData</name> <init>= <expr><call><name>PK11_GetKeyData</name><argument_list>(<argument><expr><name>symKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>keyData</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>keyData</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <goto>goto <name>cleanup</name>;</goto>
  <label><name>error</name>:</label>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  <label><name>cleanup</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>algid</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>SECOID_DestroyAlgorithmID</name><argument_list>(<argument><expr><name>algid</name></expr></argument>, <argument><expr><name>PR_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>symKey</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PK11_FreeSymKey</name><argument_list>(<argument><expr><name>symKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_cipher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PK11SlotInfo</name> <modifier>*</modifier></type> <name>slot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PK11SymKey</name><modifier>*</modifier></type> <name>symKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>outLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SECItem</name></type> <name>params</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>params</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>iv</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><operator>.</operator><name>len</name></name> <operator>=</operator> <call><name>sqlcipher_nss_get_iv_sz</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>slot</name> <operator>=</operator> <call><name>PK11_GetInternalSlot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>slot</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SECItem</name></type> <name>keyItem</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>keyItem</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>keyItem</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>key_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>symKey</name> <operator>=</operator> <call><name>PK11_ImportSymKey</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>CKM_AES_CBC</name></expr></argument>, <argument><expr><name>PK11_OriginUnwrap</name></expr></argument>,
                             <argument><expr><name>CKA_ENCRYPT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyItem</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>symKey</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SECStatus</name></type> <name>rv</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>CIPHER_ENCRYPT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PK11_Encrypt</name><argument_list>(<argument><expr><name>symKey</name></expr></argument>, <argument><expr><name>CKM_AES_CBC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outLen</name></expr></argument>,
                      <argument><expr><name>in_sz</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>PK11_Decrypt</name><argument_list>(<argument><expr><name>symKey</name></expr></argument>, <argument><expr><name>CKM_AES_CBC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>outLen</name></expr></argument>,
                      <argument><expr><name>in_sz</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>SECSuccess</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

  <goto>goto <name>cleanup</name>;</goto>
  <label><name>error</name>:</label>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  <label><name>cleanup</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>slot</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PK11_FreeSlot</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>symKey</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>PK11_FreeSymKey</name><argument_list>(<argument><expr><name>symKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_ctx_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_nss_activate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_ctx_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>sqlcipher_nss_deactivate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_nss_fips_status</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlcipher_nss_setup</name><parameter_list>(<parameter><decl><type><name>sqlcipher_provider</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>activate</name></name> <operator>=</operator> <name>sqlcipher_nss_activate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>deactivate</name></name> <operator>=</operator> <name>sqlcipher_nss_deactivate</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>random</name></name> <operator>=</operator> <name>sqlcipher_nss_random</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_provider_name</name></name> <operator>=</operator> <name>sqlcipher_nss_get_provider_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hmac</name></name> <operator>=</operator> <name>sqlcipher_nss_hmac</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>kdf</name></name> <operator>=</operator> <name>sqlcipher_nss_kdf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cipher</name></name> <operator>=</operator> <name>sqlcipher_nss_cipher</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_cipher</name></name> <operator>=</operator> <name>sqlcipher_nss_get_cipher</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_key_sz</name></name> <operator>=</operator> <name>sqlcipher_nss_get_key_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_iv_sz</name></name> <operator>=</operator> <name>sqlcipher_nss_get_iv_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_block_sz</name></name> <operator>=</operator> <name>sqlcipher_nss_get_block_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_hmac_sz</name></name> <operator>=</operator> <name>sqlcipher_nss_get_hmac_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ctx_init</name></name> <operator>=</operator> <name>sqlcipher_nss_ctx_init</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ctx_free</name></name> <operator>=</operator> <name>sqlcipher_nss_ctx_free</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>add_random</name></name> <operator>=</operator> <name>sqlcipher_nss_add_random</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fips_status</name></name> <operator>=</operator> <name>sqlcipher_nss_fips_status</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_provider_version</name></name> <operator>=</operator> <name>sqlcipher_nss_get_provider_version</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>
</unit>
