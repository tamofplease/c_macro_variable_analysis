<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/attach.c"><comment type="block">/*
** 2003 April 6
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code used to implement the ATTACH and DETACH commands.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_ATTACH</name></cpp:ifndef>
<comment type="block">/*
** Resolve an expression that was part of an ATTACH or DETACH statement. This
** is slightly different from resolving a normal SQL expression, because simple
** identifiers are treated as strings, not possible column names or aliases.
**
** i.e. if the parser sees:
**
**     ATTACH DATABASE abc AS def
**
** it treats the two expressions as literal strings 'abc' and 'def' instead of
** looking for columns of the same name.
**
** This only applies to the root node of pExpr, so the statement:
**
**     ATTACH DATABASE abc||def AS 'db2'
**
** will fail because neither abc or def can be resolved.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>resolveAttachExpr</name><parameter_list>(<parameter><decl><type><name>NameContext</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pExpr</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name><operator>!=</operator><name>TK_ID</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3ResolveExprNames</name><argument_list>(<argument><expr><name>pName</name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>TK_STRING</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if zName points to a name that may be used to refer to
** database iDb attached to handle db.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3DbIsNamed</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator>
      <call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zDbSName</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
   <operator>||</operator> <operator>(</operator><name>iDb</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator>
  <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** An SQL user-function registered to do the work of an ATTACH statement. The
** three arguments to the function come directly from an attach statement:
**
**     ATTACH DATABASE x AS y KEY z
**
**     SELECT sqlite_attach(x, y, z)
**
** If the optional "KEY z" syntax is omitted, an SQL NULL is passed as the
** third argument.
**
** If the db-&gt;init.reopenMemdb flags is set, then instead of attaching a
** new database, close the database on db-&gt;init.iDb and reopen it as an
** empty MemDB.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>attachFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>NotUsed</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPath</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>aNew</name></decl>;</decl_stmt>                 <comment type="block">/* New array of Db pointers */</comment>
  <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>                 <comment type="block">/* Db object for the newly attached database */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrDyn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zFile</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zName</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zFile</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zFile</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DESERIALIZE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>REOPEN_AS_MEMDB</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(db-&gt;init.reopenMemdb)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>REOPEN_AS_MEMDB</name><parameter_list>(<parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if<condition>( <expr><call><name>REOPEN_AS_MEMDB</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <comment type="block">/* This is not a real ATTACH.  Instead, this routine is being called
    ** from sqlite3_deserialize() to close database db-&gt;init.iDb and
    ** reopen it as a MemDB */</comment>
    <expr_stmt><expr><name>pVfs</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="string">"memdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pVfs</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>iDb</name></name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3BtreeClose</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeOpen</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><literal type="string">"x\0"</literal></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SQLITE_OPEN_MAIN_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* This is a real ATTACH
    **
    ** Check for the following errors:
    **
    **     * Too many attached databases,
    **     * Transaction currently open
    **     * Specified database name already being used.
    */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>&gt;=</operator><name><name>db</name><operator>-&gt;</operator><name>aLimit</name><index>[<expr><name>SQLITE_LIMIT_ATTACHED</name></expr>]</index></name><operator>+</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zErrDyn</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"too many attached databases - max %d"</literal></expr></argument>, 
        <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aLimit</name><index>[<expr><name>SQLITE_LIMIT_ATTACHED</name></expr>]</index></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>attach_error</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>zName</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3DbIsNamed</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zErrDyn</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"database %s is already in use"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>attach_error</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  
    <comment type="block">/* Allocate the new entry in the db-&gt;aDb[] array and initialize the schema
    ** hash tables.
    */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name></name><operator>==</operator><name><name>db</name><operator>-&gt;</operator><name>aDbStatic</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>aNew</name> <operator>=</operator> <call><name>sqlite3DbMallocRawNN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aNew</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>aNew</name> <operator>=</operator> <call><name>sqlite3DbRealloc</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <comment type="block">/* Open the database file. If the btree is successfully opened, use
    ** it to obtain the database schema. At this point the schema may
    ** or may not be initialized.
    */</comment>
    <expr_stmt><expr><name>flags</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>openFlags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3ParseUri</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVfs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_NOMEM</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3OomFault</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pVfs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SQLITE_OPEN_MAIN_DB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3BtreeOpen</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>zDbSName</name></name> <operator>=</operator> <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>noSharedCache</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_CONSTRAINT</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>zErrDyn</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"database is already attached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Pager</name> <modifier>*</modifier></type><name>pPager</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <call><name>sqlite3SchemaGet</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pNew</name><operator>-&gt;</operator><name>pSchema</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM_BKPT</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>file_format</name></name> <operator>&amp;&amp;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>enc</name></name><operator>!=</operator><call><name>ENC</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zErrDyn</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, 
        <argument><expr><literal type="string">"attached databases must use the same text encoding as main database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3BtreeEnter</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pPager</name> <operator>=</operator> <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3PagerLockingMode</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>dfltLockMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3BtreeSecureDelete</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>,
                             <argument><expr><call><name>sqlite3BtreeSecureDelete</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
    <expr_stmt><expr><call><name>sqlite3BtreeSetPagerFlags</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>,
                      <argument><expr><name>PAGER_SYNCHRONOUS_FULL</name> <operator>|</operator> <operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>PAGER_FLAGS_MASK</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>sqlite3BtreeLeave</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>safety_level</name></name> <operator>=</operator> <name>SQLITE_DEFAULT_SYNCHRONOUS</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>zDbSName</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sqlcipherCodecAttach</name><argument_list>(<argument><expr><name>sqlite3</name><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>void</name><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlcipherCodecGetKey</name><argument_list>(<argument><expr><name>sqlite3</name><operator>*</operator></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator><operator>*</operator></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch<condition>( <expr><name>t</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>SQLITE_INTEGER</name></expr>:</case>
      <case>case <expr><name>SQLITE_FLOAT</name></expr>:</case>
        <expr_stmt><expr><name>zErrDyn</name> <operator>=</operator> <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"Invalid key value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
        <break>break;</break>
        
      <case>case <expr><name>SQLITE_TEXT</name></expr>:</case>
      <case>case <expr><name>SQLITE_BLOB</name></expr>:</case>
        <expr_stmt><expr><name>nKey</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zKey</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipherCodecAttach</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>SQLITE_NULL</name></expr>:</case>
        <comment type="block">/* No key specified.  Use the key from URI filename, or if none,
        ** use the key from the main database. */</comment>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3CodecQueryParameters</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlcipherCodecGetKey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>zKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>nKey</name> <operator>||</operator> <call><name>sqlite3BtreeGetRequestedReserve</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipherCodecAttach</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>
  <expr_stmt><expr><call><name>sqlite3_free_filename</name><argument_list>( <argument><expr><name>zPath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the file was opened successfully, read the schema for the new database.
  ** If this fails, or if opening the file failed, then close the file and 
  ** remove the entry from the db-&gt;aDb[] array. i.e. put everything back the
  ** way we found it.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3BtreeEnterAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>iDb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>mDbFlags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>DBFLAG_SchemaKnownOk</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>REOPEN_AS_MEMDB</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Init</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErrDyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3BtreeLeaveAll</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>zErrDyn</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_USER_AUTHENTICATION</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>REOPEN_AS_MEMDB</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u8</name></type> <name>newAuth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3UserAuthCheckLogin</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newAuth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>newAuth</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>auth</name><operator>.</operator><name>authLevel</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_AUTH_USER</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>REOPEN_AS_MEMDB</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iDb</name> <init>= <expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iDb</name><operator>&gt;=</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3BtreeClose</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>pBt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>pSchema</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3ResetAllSchemasOfConnection</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name> <operator>=</operator> <name>iDb</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_NOMEM</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>SQLITE_IOERR_NOMEM</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3OomFault</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zErrDyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>zErrDyn</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>zErrDyn</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zErrDyn</name> <operator>=</operator> <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"unable to open database: %s"</literal></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <goto>goto <name>attach_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  
  <return>return;</return>

<label><name>attach_error</name>:</label>
  <comment type="block">/* Return an error if we get here */</comment>
  <if_stmt><if>if<condition>( <expr><name>zErrDyn</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zErrDyn</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zErrDyn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** An SQL user-function registered to do the work of an DETACH statement. The
** three arguments to the function come directly from a detach statement:
**
**     DETACH DATABASE x
**
**     SELECT sqlite_detach(x)
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>detachFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>NotUsed</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>HashElem</name> <modifier>*</modifier></type><name>pEntry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zErr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>zName</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zName</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pDb</name> <operator>=</operator> <operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3DbIsNamed</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zErr</name></expr></argument>, <argument><expr><literal type="string">"no such database: %s"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>detach_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zErr</name></expr></argument>, <argument><expr><literal type="string">"cannot detach database %s"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>detach_error</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3BtreeTxnState</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_TXN_NONE</name>
   <operator>||</operator> <call><name>sqlite3BtreeIsInBackup</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zErr</name></expr></argument>, <argument><expr><literal type="string">"database %s is locked"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>detach_error</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If any TEMP triggers reference the schema being detached, move those
  ** triggers to reference the TEMP schema itself. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pSchema</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>sqliteHashFirst</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>pSchema</name><operator>-&gt;</operator><name>trigHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>pEntry</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Trigger</name> <modifier>*</modifier></type><name>pTrig</name> <init>= <expr><operator>(</operator><name>Trigger</name><operator>*</operator><operator>)</operator><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pTrig</name><operator>-&gt;</operator><name>pTabSchema</name></name><operator>==</operator><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pTrig</name><operator>-&gt;</operator><name>pTabSchema</name></name> <operator>=</operator> <name><name>pTrig</name><operator>-&gt;</operator><name>pSchema</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pEntry</name> <operator>=</operator> <call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>pEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>sqlite3BtreeClose</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3CollapseDatabaseArray</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>

<label><name>detach_error</name>:</label>
  <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This procedure generates VDBE code for a single invocation of either the
** sqlite_detach() or sqlite_attach() SQL user functions.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>codeAttach</name><parameter_list>(
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,       <comment type="block">/* The parser context */</comment>
  <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,            <comment type="block">/* Either SQLITE_ATTACH or SQLITE_DETACH */</comment>
  <parameter><decl><type><name>FuncDef</name> <specifier>const</specifier> <modifier>*</modifier></type><name>pFunc</name></decl></parameter>,<comment type="block">/* FuncDef wrapper for detachFunc() or attachFunc() */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pAuthArg</name></decl></parameter>,      <comment type="block">/* Expression to pass to authorization callback */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pFilename</name></decl></parameter>,     <comment type="block">/* Name of database file */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pDbname</name></decl></parameter>,       <comment type="block">/* Name of the database to use internally */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>           <comment type="block">/* Database key for encryption extension */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>NameContext</name></type> <name>sName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Vdbe</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>regArgs</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pParse</name><operator>-&gt;</operator><name>nErr</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>attach_end</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NameContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sName</name><operator>.</operator><name>pParse</name></name> <operator>=</operator> <name>pParse</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( 
      <expr><name>SQLITE_OK</name><operator>!=</operator><call><name>resolveAttachExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>pFilename</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name>SQLITE_OK</name><operator>!=</operator><call><name>resolveAttachExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>pDbname</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name>SQLITE_OK</name><operator>!=</operator><call><name>resolveAttachExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sName</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>
  )</condition><block>{<block_content>
    <goto>goto <name>attach_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTHORIZATION</name></cpp:ifndef>
  <if_stmt><if>if<condition>( <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>pAuthArg</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zAuthArg</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pAuthArg</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_STRING</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>ExprHasProperty</name><argument_list>(<argument><expr><name>pAuthArg</name></expr></argument>, <argument><expr><name>EP_IntValue</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zAuthArg</name> <operator>=</operator> <name><name>pAuthArg</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>zToken</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>zAuthArg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3AuthCheck</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>zAuthArg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <goto>goto <name>attach_end</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_AUTHORIZATION */</comment>


  <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>regArgs</name> <operator>=</operator> <call><name>sqlite3GetTempRange</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprCode</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pFilename</name></expr></argument>, <argument><expr><name>regArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprCode</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pDbname</name></expr></argument>, <argument><expr><name>regArgs</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprCode</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>regArgs</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>v</name> <operator>||</operator> <name><name>db</name><operator>-&gt;</operator><name>mallocFailed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3VdbeAddFunctionCall</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>regArgs</name><operator>+</operator><literal type="number">3</literal><operator>-</operator><name><name>pFunc</name><operator>-&gt;</operator><name>nArg</name></name></expr></argument>, <argument><expr><name>regArgs</name><operator>+</operator><literal type="number">3</literal></expr></argument>,
                               <argument><expr><name><name>pFunc</name><operator>-&gt;</operator><name>nArg</name></name></expr></argument>, <argument><expr><name>pFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/* Code an OP_Expire. For an ATTACH statement, set P1 to true (expire this
    ** statement only). For DETACH, set it to false (expire all existing
    ** statements).
    */</comment>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Expire</name></expr></argument>, <argument><expr><operator>(</operator><name>type</name><operator>==</operator><name>SQLITE_ATTACH</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
<label><name>attach_end</name>:</label>
  <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pDbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ExprDelete</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Called by the parser to compile a DETACH statement.
**
**     DETACH pDbname
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Detach</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pDbname</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FuncDef</name></type> <name>detach_func</name> <init>= <expr><block>{
    <expr><literal type="number">1</literal></expr>,                <comment type="block">/* nArg */</comment>
    <expr><name>SQLITE_UTF8</name></expr>,      <comment type="block">/* funcFlags */</comment>
    <expr><literal type="number">0</literal></expr>,                <comment type="block">/* pUserData */</comment>
    <expr><literal type="number">0</literal></expr>,                <comment type="block">/* pNext */</comment>
    <expr><name>detachFunc</name></expr>,       <comment type="block">/* xSFunc */</comment>
    <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xFinalize */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xValue, xInverse */</comment>
    <expr><literal type="string">"sqlite_detach"</literal></expr>,  <comment type="block">/* zName */</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>codeAttach</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>SQLITE_DETACH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>detach_func</name></expr></argument>, <argument><expr><name>pDbname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pDbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Called by the parser to compile an ATTACH statement.
**
**     ATTACH p AS pDbname KEY pKey
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Attach</name><parameter_list>(<parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pDbname</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FuncDef</name></type> <name>attach_func</name> <init>= <expr><block>{
    <expr><literal type="number">3</literal></expr>,                <comment type="block">/* nArg */</comment>
    <expr><name>SQLITE_UTF8</name></expr>,      <comment type="block">/* funcFlags */</comment>
    <expr><literal type="number">0</literal></expr>,                <comment type="block">/* pUserData */</comment>
    <expr><literal type="number">0</literal></expr>,                <comment type="block">/* pNext */</comment>
    <expr><name>attachFunc</name></expr>,       <comment type="block">/* xSFunc */</comment>
    <expr><literal type="number">0</literal></expr>,                <comment type="block">/* xFinalize */</comment>
    <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,             <comment type="block">/* xValue, xInverse */</comment>
    <expr><literal type="string">"sqlite_attach"</literal></expr>,  <comment type="block">/* zName */</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>codeAttach</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>SQLITE_ATTACH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attach_func</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDbname</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_ATTACH */</comment>

<comment type="block">/*
** Expression callback used by sqlite3FixAAAA() routines.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fixExprCb</name><parameter_list>(<parameter><decl><type><name>Walker</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbFixer</name> <modifier>*</modifier></type><name>pFix</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pFix</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pFix</name><operator>-&gt;</operator><name>bTemp</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>ExprSetProperty</name><argument_list>(<argument><expr><name>pExpr</name></expr></argument>, <argument><expr><name>EP_FromDDL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>TK_VARIABLE</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pFix</name><operator>-&gt;</operator><name>pParse</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>init</name><operator>.</operator><name>busy</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pExpr</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <name>TK_NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name><name>pFix</name><operator>-&gt;</operator><name>pParse</name></name></expr></argument>, <argument><expr><literal type="string">"%s cannot use variables"</literal></expr></argument>, <argument><expr><name><name>pFix</name><operator>-&gt;</operator><name>zType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>WRC_Abort</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>WRC_Continue</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Select callback used by sqlite3FixAAAA() routines.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fixSelectCb</name><parameter_list>(<parameter><decl><type><name>Walker</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Select</name> <modifier>*</modifier></type><name>pSelect</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DbFixer</name> <modifier>*</modifier></type><name>pFix</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>pFix</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SrcItem</name> <modifier>*</modifier></type><name>pItem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pFix</name><operator>-&gt;</operator><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name> <init>= <expr><call><name>sqlite3FindDbName</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pFix</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SrcList</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><name><name>pSelect</name><operator>-&gt;</operator><name>pSrc</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>NEVER</name><argument_list>(<argument><expr><name>pList</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>WRC_Continue</name></expr>;</return></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>pItem</name><operator>=</operator><name><name>pList</name><operator>-&gt;</operator><name>a</name></name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pList</name><operator>-&gt;</operator><name>nSrc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>pItem</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pFix</name><operator>-&gt;</operator><name>bTemp</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pItem</name><operator>-&gt;</operator><name>zDatabase</name></name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>iDb</name><operator>!=</operator><call><name>sqlite3FindDbName</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>zDatabase</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name><name>pFix</name><operator>-&gt;</operator><name>pParse</name></name></expr></argument>,
              <argument><expr><literal type="string">"%s %T cannot reference objects in database %s"</literal></expr></argument>,
              <argument><expr><name><name>pFix</name><operator>-&gt;</operator><name>zType</name></name></expr></argument>, <argument><expr><name><name>pFix</name><operator>-&gt;</operator><name>pName</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>zDatabase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>WRC_Abort</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>zDatabase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>zDatabase</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>notCte</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name><name>pFix</name><operator>-&gt;</operator><name>pSchema</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>fg</name><operator>.</operator><name>fromDDL</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_VIEW</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_TRIGGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if<condition>( <expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fg</name><operator>.</operator><name>isUsing</name></name><operator>==</operator><literal type="number">0</literal>
     <operator>&amp;&amp;</operator> <call><name>sqlite3WalkExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>pList</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>u3</name><operator>.</operator><name>pOn</name></name></expr></argument>)</argument_list></call></expr>
    )</condition><block>{<block_content>
      <return>return <expr><name>WRC_Abort</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWith</name></name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pSelect</name><operator>-&gt;</operator><name>pWith</name><operator>-&gt;</operator><name>nCte</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3WalkSelect</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pSelect</name><operator>-&gt;</operator><name>pWith</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pSelect</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>WRC_Abort</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>WRC_Continue</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Initialize a DbFixer structure.  This routine must be called prior
** to passing the structure to one of the sqliteFixAAAA() routines below.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3FixInit</name><parameter_list>(
  <parameter><decl><type><name>DbFixer</name> <modifier>*</modifier></type><name>pFix</name></decl></parameter>,      <comment type="block">/* The fixer to be initialized */</comment>
  <parameter><decl><type><name>Parse</name> <modifier>*</modifier></type><name>pParse</name></decl></parameter>,      <comment type="block">/* Error messages will be written here */</comment>
  <parameter><decl><type><name>int</name></type> <name>iDb</name></decl></parameter>,            <comment type="block">/* This is the database that must be used */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name></decl></parameter>,  <comment type="block">/* "view", "trigger", or "index" */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>Token</name> <modifier>*</modifier></type><name>pName</name></decl></parameter>  <comment type="block">/* Name of the view, trigger, or index */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pParse</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>db</name><operator>-&gt;</operator><name>nDb</name></name><operator>&gt;</operator><name>iDb</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>pParse</name></name> <operator>=</operator> <name>pParse</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>zDb</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>zDbSName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name><operator>.</operator><name>pSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>zType</name></name> <operator>=</operator> <name>zType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>pName</name></name> <operator>=</operator> <name>pName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>bTemp</name></name> <operator>=</operator> <operator>(</operator><name>iDb</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>pParse</name></name> <operator>=</operator> <name>pParse</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>xExprCallback</name></name> <operator>=</operator> <name>fixExprCb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>xSelectCallback</name></name> <operator>=</operator> <name>fixSelectCb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>xSelectCallback2</name></name> <operator>=</operator> <name>sqlite3WalkWinDefnDummyCallback</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>walkerDepth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>eCode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFix</name><operator>-&gt;</operator><name>w</name><operator>.</operator><name>u</name><operator>.</operator><name>pFix</name></name> <operator>=</operator> <name>pFix</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The following set of routines walk through the parse tree and assign
** a specific database to all table references where the database name
** was left unspecified in the original SQL statement.  The pFix structure
** must have been initialized by a prior call to sqlite3FixInit().
**
** These routines are used to make sure that an index, trigger, or
** view in one database does not refer to objects in a different database.
** (Exception: indices, triggers, and views in the TEMP database are
** allowed to refer to anything.)  If a reference is explicitly made
** to an object in a different database, an error message is added to
** pParse-&gt;zErrMsg and these routines return non-zero.  If everything
** checks out, these routines return 0.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3FixSrcList</name><parameter_list>(
  <parameter><decl><type><name>DbFixer</name> <modifier>*</modifier></type><name>pFix</name></decl></parameter>,       <comment type="block">/* Context of the fixation */</comment>
  <parameter><decl><type><name>SrcList</name> <modifier>*</modifier></type><name>pList</name></decl></parameter>       <comment type="block">/* The Source list to check and modify */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pList</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Select</name></type> <name>s</name></decl>;</decl_stmt> 
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>.</operator><name>pSrc</name></name> <operator>=</operator> <name>pList</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>sqlite3WalkSelect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_VIEW</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_TRIGGER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>int</name></type> <name>sqlite3FixSelect</name><parameter_list>(
  <parameter><decl><type><name>DbFixer</name> <modifier>*</modifier></type><name>pFix</name></decl></parameter>,       <comment type="block">/* Context of the fixation */</comment>
  <parameter><decl><type><name>Select</name> <modifier>*</modifier></type><name>pSelect</name></decl></parameter>      <comment type="block">/* The SELECT statement to be fixed to one database */</comment>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3WalkSelect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>pSelect</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sqlite3FixExpr</name><parameter_list>(
  <parameter><decl><type><name>DbFixer</name> <modifier>*</modifier></type><name>pFix</name></decl></parameter>,     <comment type="block">/* Context of the fixation */</comment>
  <parameter><decl><type><name>Expr</name> <modifier>*</modifier></type><name>pExpr</name></decl></parameter>        <comment type="block">/* The expression to be fixed to one database */</comment>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3WalkExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name>pExpr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_TRIGGER</name></cpp:ifndef>
<function><type><name>int</name></type> <name>sqlite3FixTriggerStep</name><parameter_list>(
  <parameter><decl><type><name>DbFixer</name> <modifier>*</modifier></type><name>pFix</name></decl></parameter>,     <comment type="block">/* Context of the fixation */</comment>
  <parameter><decl><type><name>TriggerStep</name> <modifier>*</modifier></type><name>pStep</name></decl></parameter> <comment type="block">/* The trigger step be fixed to one database */</comment>
)</parameter_list><block>{<block_content>
  <while>while<condition>( <expr><name>pStep</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3WalkSelect</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pSelect</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <call><name>sqlite3WalkExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pWhere</name></name></expr></argument>)</argument_list></call> 
     <operator>||</operator> <call><name>sqlite3WalkExprList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pExprList</name></name></expr></argument>)</argument_list></call>
     <operator>||</operator> <call><name>sqlite3FixSrcList</name><argument_list>(<argument><expr><name>pFix</name></expr></argument>, <argument><expr><name><name>pStep</name><operator>-&gt;</operator><name>pFrom</name></name></expr></argument>)</argument_list></call></expr>
    )</condition><block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UPSERT</name></cpp:ifndef>
    <block>{<block_content>
      <decl_stmt><decl><type><name>Upsert</name> <modifier>*</modifier></type><name>pUp</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>pUp</name><operator>=</operator><name><name>pStep</name><operator>-&gt;</operator><name>pUpsert</name></name></expr>;</init> <condition><expr><name>pUp</name></expr>;</condition> <incr><expr><name>pUp</name><operator>=</operator><name><name>pUp</name><operator>-&gt;</operator><name>pNextUpsert</name></name></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3WalkExprList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>pUp</name><operator>-&gt;</operator><name>pUpsertTarget</name></name></expr></argument>)</argument_list></call>
         <operator>||</operator> <call><name>sqlite3WalkExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>pUp</name><operator>-&gt;</operator><name>pUpsertTargetWhere</name></name></expr></argument>)</argument_list></call>
         <operator>||</operator> <call><name>sqlite3WalkExprList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>pUp</name><operator>-&gt;</operator><name>pUpsertSet</name></name></expr></argument>)</argument_list></call>
         <operator>||</operator> <call><name>sqlite3WalkExpr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFix</name><operator>-&gt;</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>pUp</name><operator>-&gt;</operator><name>pUpsertWhere</name></name></expr></argument>)</argument_list></call></expr>
        )</condition><block>{<block_content>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>pStep</name> <operator>=</operator> <name><name>pStep</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
