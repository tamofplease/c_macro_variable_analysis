<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/src/crypto_cc.c"><comment type="block">/*
** SQLCipher
** http://sqlcipher.net
**
** Copyright (c) 2008 - 2013, ZETETIC LLC
** All rights reserved.
**
** Redistribution and use in source and binary forms, with or without
** modification, are permitted provided that the following conditions are met:
**     * Redistributions of source code must retain the above copyright
**       notice, this list of conditions and the following disclaimer.
**     * Redistributions in binary form must reproduce the above copyright
**       notice, this list of conditions and the following disclaimer in the
**       documentation and/or other materials provided with the distribution.
**     * Neither the name of the ZETETIC LLC nor the
**       names of its contributors may be used to endorse or promote products
**       derived from this software without specific prior written permission.
**
** THIS SOFTWARE IS PROVIDED BY ZETETIC LLC ''AS IS'' AND ANY
** EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
** WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
** DISCLAIMED. IN NO EVENT SHALL ZETETIC LLC BE LIABLE FOR ANY
** DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
** (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
** LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
** ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**
*/</comment>
<comment type="block">/* BEGIN SQLCIPHER */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLCIPHER_CRYPTO_CC</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"crypto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlcipher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CommonCrypto/CommonCrypto.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Security/SecRandom.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>sqlcipher_cc_setup</name><parameter_list>(<parameter><decl><type><name>sqlcipher_provider</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_add_random</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* generate a defined number of random bytes */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_random</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>SecRandomCopyBytes</name><argument_list>(<argument><expr><name>kSecRandomDefault</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>kCCSuccess</name><operator>)</operator></expr> ?</condition><then> <expr><name>SQLITE_OK</name></expr> </then><else>: <expr><name>SQLITE_ERROR</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_cc_get_provider_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"commoncrypto"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_cc_get_provider_version</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TARGET_OS_MAC</name></expr></cpp:if>
  <decl_stmt><decl><type><name>CFTypeRef</name></type> <name>version</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CFBundleRef</name></type> <name>bundle</name> <init>= <expr><call><name>CFBundleGetBundleWithIdentifier</name><argument_list>(<argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"com.apple.security"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><name>bundle</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>CFBundleGetValueForInfoDictionaryKey</name><argument_list>(<argument><expr><name>bundle</name></expr></argument>, <argument><expr><call><name>CFSTR</name><argument_list>(<argument><expr><literal type="string">"CFBundleShortVersionString"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>CFStringGetCStringPtr</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_hmac</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hmac_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in2_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CCHmacContext</name></type> <name>hmac_context</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><name>in</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <expr_stmt><expr><call><name>CCHmacInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_context</name></expr></argument>, <argument><expr><name>kCCHmacAlgSHA1</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <expr_stmt><expr><call><name>CCHmacInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_context</name></expr></argument>, <argument><expr><name>kCCHmacAlgSHA256</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <expr_stmt><expr><call><name>CCHmacInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_context</name></expr></argument>, <argument><expr><name>kCCHmacAlgSHA512</name></expr></argument>, <argument><expr><name>hmac_key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></switch>
  <expr_stmt><expr><call><name>CCHmacUpdate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_context</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><name>in2</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>CCHmacUpdate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_context</name></expr></argument>, <argument><expr><name>in2</name></expr></argument>, <argument><expr><name>in2_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>CCHmacFinal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hmac_context</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_kdf</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pass_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>salt_sz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>workfactor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><call><name>CCKeyDerivationPBKDF</name><argument_list>(<argument><expr><name>kCCPBKDF2</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>, <argument><expr><name>pass_sz</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_sz</name></expr></argument>, <argument><expr><name>kCCPRFHmacAlgSHA1</name></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kCCSuccess</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><call><name>CCKeyDerivationPBKDF</name><argument_list>(<argument><expr><name>kCCPBKDF2</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>, <argument><expr><name>pass_sz</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_sz</name></expr></argument>, <argument><expr><name>kCCPRFHmacAlgSHA256</name></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kCCSuccess</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <if_stmt><if>if<condition>(<expr><call><name>CCKeyDerivationPBKDF</name><argument_list>(<argument><expr><name>kCCPBKDF2</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>pass</name></expr></argument>, <argument><expr><name>pass_sz</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><name>salt_sz</name></expr></argument>, <argument><expr><name>kCCPRFHmacAlgSHA512</name></expr></argument>, <argument><expr><name>workfactor</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_sz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kCCSuccess</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_cipher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_sz</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>CCCryptorRef</name></type> <name>cryptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>tmp_csz</name></decl>, <decl><type ref="prev"/><name>csz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CCOperation</name></type> <name>op</name> <init>= <expr><ternary><condition><expr><name>mode</name> <operator>==</operator> <name>CIPHER_ENCRYPT</name></expr> ?</condition><then> <expr><name>kCCEncrypt</name></expr> </then><else>: <expr><name>kCCDecrypt</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><call><name>CCCryptorCreate</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr><name>kCCAlgorithmAES128</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>kCCKeySizeAES256</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cryptor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kCCSuccess</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>(<expr><call><name>CCCryptorUpdate</name><argument_list>(<argument><expr><name>cryptor</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in_sz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_csz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kCCSuccess</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>csz</name> <operator>=</operator> <name>tmp_csz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>out</name> <operator>+=</operator> <name>tmp_csz</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><call><name>CCCryptorFinal</name><argument_list>(<argument><expr><name>cryptor</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in_sz</name> <operator>-</operator> <name>csz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_csz</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kCCSuccess</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>csz</name> <operator>+=</operator> <name>tmp_csz</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><call><name>CCCryptorRelease</name><argument_list>(<argument><expr><name>cryptor</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>kCCSuccess</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>in_sz</name> <operator>==</operator> <name>csz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return> 
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_cc_get_cipher</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="string">"aes-256-cbc"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_get_key_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>kCCKeySizeAES256</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_get_iv_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>kCCBlockSizeAES128</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_get_block_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>kCCBlockSizeAES128</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_get_hmac_sz</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch<condition>(<expr><name>algorithm</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA1</name></expr>:</case>
      <return>return <expr><name>CC_SHA1_DIGEST_LENGTH</name></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA256</name></expr>:</case>
      <return>return <expr><name>CC_SHA256_DIGEST_LENGTH</name></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>SQLCIPHER_HMAC_SHA512</name></expr>:</case>
      <return>return <expr><name>CC_SHA512_DIGEST_LENGTH</name></expr>;</return>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_ctx_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_ctx_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlcipher_cc_fips_status</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlcipher_cc_setup</name><parameter_list>(<parameter><decl><type><name>sqlcipher_provider</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>random</name></name> <operator>=</operator> <name>sqlcipher_cc_random</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_provider_name</name></name> <operator>=</operator> <name>sqlcipher_cc_get_provider_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hmac</name></name> <operator>=</operator> <name>sqlcipher_cc_hmac</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>kdf</name></name> <operator>=</operator> <name>sqlcipher_cc_kdf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cipher</name></name> <operator>=</operator> <name>sqlcipher_cc_cipher</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_cipher</name></name> <operator>=</operator> <name>sqlcipher_cc_get_cipher</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_key_sz</name></name> <operator>=</operator> <name>sqlcipher_cc_get_key_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_iv_sz</name></name> <operator>=</operator> <name>sqlcipher_cc_get_iv_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_block_sz</name></name> <operator>=</operator> <name>sqlcipher_cc_get_block_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_hmac_sz</name></name> <operator>=</operator> <name>sqlcipher_cc_get_hmac_sz</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ctx_init</name></name> <operator>=</operator> <name>sqlcipher_cc_ctx_init</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ctx_free</name></name> <operator>=</operator> <name>sqlcipher_cc_ctx_free</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>add_random</name></name> <operator>=</operator> <name>sqlcipher_cc_add_random</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fips_status</name></name> <operator>=</operator> <name>sqlcipher_cc_fips_status</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>get_provider_version</name></name> <operator>=</operator> <name>sqlcipher_cc_get_provider_version</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* END SQLCIPHER */</comment>
</unit>
