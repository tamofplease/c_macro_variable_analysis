<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/fts1/simple_tokenizer.c"><comment type="block">/*
** The author disclaims copyright to this source code.
**
*************************************************************************
** Implementation of the "simple" full-text-search tokenizer.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;malloc.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tokenizer.h"</cpp:file></cpp:include>

<comment type="block">/* Duplicate a string; the caller must free() the returned string.
 * (We don't use strdup() since it's not part of the standard C library and
 * may not be available everywhere.) */</comment>
<comment type="block">/* TODO(shess) Copied from fulltext.c, consider util.c for such
** things. */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>string_dup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>simple_tokenizer</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_tokenizer</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDelim</name></decl>;</decl_stmt>          <comment type="block">/* token delimiters */</comment>
}</block></struct></type> <name>simple_tokenizer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>simple_tokenizer_cursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_tokenizer_cursor</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pInput</name></decl>;</decl_stmt>          <comment type="block">/* input we are tokenizing */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBytes</name></decl>;</decl_stmt>                  <comment type="block">/* size of the input */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pCurrent</name></decl>;</decl_stmt>        <comment type="block">/* current position in pInput */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iToken</name></decl>;</decl_stmt>                  <comment type="block">/* index of next token to be returned */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zToken</name></decl>;</decl_stmt>                <comment type="block">/* storage for current token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTokenBytes</name></decl>;</decl_stmt>             <comment type="block">/* actual size of current token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTokenAllocated</name></decl>;</decl_stmt>         <comment type="block">/* space allocated to zToken buffer */</comment>
}</block></struct></type> <name>simple_tokenizer_cursor</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_tokenizer_module</name></type> <name>simpleTokenizerModule</name></decl>;</decl_stmt><comment type="block">/* forward declaration */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleCreate</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTokenizer</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>simple_tokenizer</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>simple_tokenizer</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>simple_tokenizer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* TODO(shess) Delimiters need to remain the same from run to run,
  ** else we need to reindex.  One solution would be a meta-table to
  ** track such information in the database, then we'd only want this
  ** information on the initial create.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>zDelim</name></name> <operator>=</operator> <call><name>string_dup</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="block">/* Build a string excluding alphanumeric ASCII characters */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zDelim</name><index>[<expr><literal type="number">0x80</literal></expr>]</index></name></decl>;</decl_stmt>               <comment type="block">/* nul-terminated, so nul not a member */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">0x80</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>isalnum</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>zDelim</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>zDelim</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>j</name><operator>&lt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>zDelim</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>zDelim</name></name> <operator>=</operator> <call><name>string_dup</name><argument_list>(<argument><expr><name>zDelim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTokenizer</name> <operator>=</operator> <operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleDestroy</name><parameter_list>(<parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>simple_tokenizer</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>simple_tokenizer</name> <operator>*</operator><operator>)</operator> <name>pTokenizer</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>t</name><operator>-&gt;</operator><name>zDelim</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer</name> <modifier>*</modifier></type><name>pTokenizer</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pInput</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBytes</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCursor</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>simple_tokenizer_cursor</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>simple_tokenizer_cursor</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>simple_tokenizer_cursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pInput</name></name> <operator>=</operator> <name>pInput</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nBytes</name></name> <operator>=</operator> <ternary><condition><expr><name>nBytes</name><operator>&lt;</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pInput</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>nBytes</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pCurrent</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>pInput</name></name></expr>;</expr_stmt>        <comment type="block">/* start tokenizing at the beginning */</comment>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>iToken</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zToken</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>               <comment type="block">/* no space allocated, yet. */</comment>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nTokenBytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nTokenAllocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>simple_tokenizer_cursor</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>simple_tokenizer_cursor</name> <operator>*</operator><operator>)</operator> <name>pCursor</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>NULL</name><operator>!=</operator><name><name>c</name><operator>-&gt;</operator><name>zToken</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>zToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>simpleNext</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppToken</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBytes</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piStartOffset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piEndOffset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piPosition</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>simple_tokenizer_cursor</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>(</operator><name>simple_tokenizer_cursor</name> <operator>*</operator><operator>)</operator> <name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>simple_tokenizer</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>(</operator><name>simple_tokenizer</name> <operator>*</operator><operator>)</operator> <name><name>pCursor</name><operator>-&gt;</operator><name>pTokenizer</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

  <while>while<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>pCurrent</name></name><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>pInput</name></name><operator>&lt;</operator><name><name>c</name><operator>-&gt;</operator><name>nBytes</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strcspn</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>pCurrent</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>zDelim</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>+</operator><literal type="number">1</literal><operator>&gt;</operator><name><name>c</name><operator>-&gt;</operator><name>nTokenAllocated</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zToken</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>zToken</name></name></expr></argument>, <argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <comment type="block">/* TODO(shess) This needs expansion to handle UTF-8
        ** case-insensitivity.
        */</comment>
        <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>pCurrent</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zToken</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name><operator>&lt;</operator><literal type="number">0x80</literal></expr> ?</condition><then> <expr><call><name>tolower</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>ch</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>ch</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>zToken</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>ppToken</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>zToken</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pnBytes</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piStartOffset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>pCurrent</name></name><operator>-</operator><name><name>c</name><operator>-&gt;</operator><name>pInput</name></name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piEndOffset</name> <operator>=</operator> <operator>*</operator><name>piStartOffset</name><operator>+</operator><name>n</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>piPosition</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>iToken</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pCurrent</name></name> <operator>+=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <return>return <expr><name>SQLITE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pCurrent</name></name> <operator>+=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="block">/* TODO(shess) could strspn() to skip delimiters en masse.  Needs
    ** to happen in two places, though, which is annoying.
    */</comment>
  </block_content>}</block></while>
  <return>return <expr><name>SQLITE_DONE</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_tokenizer_module</name></type> <name>simpleTokenizerModule</name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr>,
  <expr><name>simpleCreate</name></expr>,
  <expr><name>simpleDestroy</name></expr>,
  <expr><name>simpleOpen</name></expr>,
  <expr><name>simpleClose</name></expr>,
  <expr><name>simpleNext</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>get_simple_tokenizer_module</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_tokenizer_module</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppModule</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>ppModule</name> <operator>=</operator> <operator>&amp;</operator><name>simpleTokenizerModule</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
