<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/misc/shathree.c"><comment type="block">/*
** 2017-03-08
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This SQLite extension implements functions that compute SHA3 hashes.
** Two SQL functions are implemented:
**
**     sha3(X,SIZE)
**     sha3_query(Y,SIZE)
**
** The sha3(X) function computes the SHA3 hash of the input X, or NULL if
** X is NULL.
**
** The sha3_query(Y) function evaluates all queries in the SQL statements of Y
** and returns a hash of their results.
**
** The SIZE argument is optional.  If omitted, the SHA3-256 hash algorithm
** is used.  If SIZE is included it must be one of the integers 224, 256,
** 384, or 512, to determine SHA3 hash variant that is computed.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_AMALGAMATION</name></cpp:ifndef>
<typedef>typedef <type><name>sqlite3_uint64</name></type> <name>u64</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_AMALGAMATION */</comment>

<comment type="block" format="doxygen">/******************************************************************************
** The Hash Engine
*/</comment>
<comment type="block">/*
** Macros to determine whether the machine is big or little endian,
** and whether or not that determination is run-time or compile-time.
**
** For best performance, an attempt is made to guess at the byte-order
** using C-preprocessor macros.  If that is unsuccessful, or if
** -DSHA3_BYTEORDER=0 is set, then byte-order is determined
** at run-time.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SHA3_BYTEORDER</name></cpp:ifndef>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>i386</name></expr></argument>)</argument_list></call>     <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call>   <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator>    \
     <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call>  <operator>||</operator>    \
     <call><name>defined</name><argument_list>(<argument><expr><name>_M_AMD64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_ARM</name></expr></argument>)</argument_list></call>     <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86</name></expr></argument>)</argument_list></call>   <operator>||</operator>    \
     <call><name>defined</name><argument_list>(<argument><expr><name>__arm__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>SHA3_BYTEORDER</name></cpp:macro>    <cpp:value>1234</cpp:value></cpp:define>
<cpp:elif># <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>sparc</name></expr></argument>)</argument_list></call>    <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>SHA3_BYTEORDER</name></cpp:macro>    <cpp:value>4321</cpp:value></cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>SHA3_BYTEORDER</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** State structure for a SHA3 hash in progress
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>SHA3Context</name></name></type> <name>SHA3Context</name>;</typedef>
<struct>struct <name>SHA3Context</name> <block>{
  <union>union <block>{
    <decl_stmt><decl><type><name>u64</name></type> <name><name>s</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>                <comment type="block">/* Keccak state. 5x5 lines of 64 bits each */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">1600</literal></expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* ... or 1600 bytes */</comment>
  }</block> <decl><name>u</name></decl>;</union>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>nRate</name></decl>;</decl_stmt>        <comment type="block">/* Bytes of input accepted per Keccak iteration */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>nLoaded</name></decl>;</decl_stmt>      <comment type="block">/* Input bytes loaded into u.x[] so far this cycle */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>ixMask</name></decl>;</decl_stmt>       <comment type="block">/* Insert next input into u.x[nLoaded^ixMask]. */</comment>
}</block>;</struct>

<comment type="block">/*
** A single step of the Keccak mixing function for a 1600-bit state
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>KeccakF1600Step</name><parameter_list>(<parameter><decl><type><name>SHA3Context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>b0</name></decl>, <decl><type ref="prev"/><name>b1</name></decl>, <decl><type ref="prev"/><name>b2</name></decl>, <decl><type ref="prev"/><name>b3</name></decl>, <decl><type ref="prev"/><name>b4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>c3</name></decl>, <decl><type ref="prev"/><name>c4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u64</name></type> <name><name>RC</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="number">0x0000000000000001ULL</literal></expr>,  <expr><literal type="number">0x0000000000008082ULL</literal></expr>,
    <expr><literal type="number">0x800000000000808aULL</literal></expr>,  <expr><literal type="number">0x8000000080008000ULL</literal></expr>,
    <expr><literal type="number">0x000000000000808bULL</literal></expr>,  <expr><literal type="number">0x0000000080000001ULL</literal></expr>,
    <expr><literal type="number">0x8000000080008081ULL</literal></expr>,  <expr><literal type="number">0x8000000000008009ULL</literal></expr>,
    <expr><literal type="number">0x000000000000008aULL</literal></expr>,  <expr><literal type="number">0x0000000000000088ULL</literal></expr>,
    <expr><literal type="number">0x0000000080008009ULL</literal></expr>,  <expr><literal type="number">0x000000008000000aULL</literal></expr>,
    <expr><literal type="number">0x000000008000808bULL</literal></expr>,  <expr><literal type="number">0x800000000000008bULL</literal></expr>,
    <expr><literal type="number">0x8000000000008089ULL</literal></expr>,  <expr><literal type="number">0x8000000000008003ULL</literal></expr>,
    <expr><literal type="number">0x8000000000008002ULL</literal></expr>,  <expr><literal type="number">0x8000000000000080ULL</literal></expr>,
    <expr><literal type="number">0x000000000000800aULL</literal></expr>,  <expr><literal type="number">0x800000008000000aULL</literal></expr>,
    <expr><literal type="number">0x8000000080008081ULL</literal></expr>,  <expr><literal type="number">0x8000000000008080ULL</literal></expr>,
    <expr><literal type="number">0x0000000080000001ULL</literal></expr>,  <expr><literal type="number">0x8000000080008008ULL</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a00</name></cpp:macro> <cpp:value>(p-&gt;u.s[0])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a01</name></cpp:macro> <cpp:value>(p-&gt;u.s[1])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a02</name></cpp:macro> <cpp:value>(p-&gt;u.s[2])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a03</name></cpp:macro> <cpp:value>(p-&gt;u.s[3])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a04</name></cpp:macro> <cpp:value>(p-&gt;u.s[4])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a10</name></cpp:macro> <cpp:value>(p-&gt;u.s[5])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a11</name></cpp:macro> <cpp:value>(p-&gt;u.s[6])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a12</name></cpp:macro> <cpp:value>(p-&gt;u.s[7])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a13</name></cpp:macro> <cpp:value>(p-&gt;u.s[8])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a14</name></cpp:macro> <cpp:value>(p-&gt;u.s[9])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a20</name></cpp:macro> <cpp:value>(p-&gt;u.s[10])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a21</name></cpp:macro> <cpp:value>(p-&gt;u.s[11])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a22</name></cpp:macro> <cpp:value>(p-&gt;u.s[12])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a23</name></cpp:macro> <cpp:value>(p-&gt;u.s[13])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a24</name></cpp:macro> <cpp:value>(p-&gt;u.s[14])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a30</name></cpp:macro> <cpp:value>(p-&gt;u.s[15])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a31</name></cpp:macro> <cpp:value>(p-&gt;u.s[16])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a32</name></cpp:macro> <cpp:value>(p-&gt;u.s[17])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a33</name></cpp:macro> <cpp:value>(p-&gt;u.s[18])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a34</name></cpp:macro> <cpp:value>(p-&gt;u.s[19])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a40</name></cpp:macro> <cpp:value>(p-&gt;u.s[20])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a41</name></cpp:macro> <cpp:value>(p-&gt;u.s[21])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a42</name></cpp:macro> <cpp:value>(p-&gt;u.s[22])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a43</name></cpp:macro> <cpp:value>(p-&gt;u.s[23])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>a44</name></cpp:macro> <cpp:value>(p-&gt;u.s[24])</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>ROL64</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a&lt;&lt;x)|(a&gt;&gt;(64-x)))</cpp:value></cpp:define>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">24</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>c0</name> <operator>=</operator> <name>a00</name><operator>^</operator><name>a10</name><operator>^</operator><name>a20</name><operator>^</operator><name>a30</name><operator>^</operator><name>a40</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <name>a01</name><operator>^</operator><name>a11</name><operator>^</operator><name>a21</name><operator>^</operator><name>a31</name><operator>^</operator><name>a41</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <name>a02</name><operator>^</operator><name>a12</name><operator>^</operator><name>a22</name><operator>^</operator><name>a32</name><operator>^</operator><name>a42</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c3</name> <operator>=</operator> <name>a03</name><operator>^</operator><name>a13</name><operator>^</operator><name>a23</name><operator>^</operator><name>a33</name><operator>^</operator><name>a43</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c4</name> <operator>=</operator> <name>a04</name><operator>^</operator><name>a14</name><operator>^</operator><name>a24</name><operator>^</operator><name>a34</name><operator>^</operator><name>a44</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>c4</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d1</name> <operator>=</operator> <name>c0</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d2</name> <operator>=</operator> <name>c1</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d3</name> <operator>=</operator> <name>c2</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d4</name> <operator>=</operator> <name>c3</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>b0</name> <operator>=</operator> <operator>(</operator><name>a00</name><operator>^</operator><name>d0</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a11</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a22</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a33</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a44</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a00</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a00</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a11</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a22</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a33</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a44</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a20</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a31</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a42</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a03</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a14</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a20</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a31</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a42</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a03</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a14</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a40</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a01</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a12</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a23</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a34</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a40</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a01</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a12</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a23</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a34</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a10</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a21</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a32</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a43</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a04</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a10</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a21</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a32</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a43</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a04</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a30</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a41</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a02</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a13</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a24</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a30</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a41</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a02</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a13</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a24</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>c0</name> <operator>=</operator> <name>a00</name><operator>^</operator><name>a20</name><operator>^</operator><name>a40</name><operator>^</operator><name>a10</name><operator>^</operator><name>a30</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <name>a11</name><operator>^</operator><name>a31</name><operator>^</operator><name>a01</name><operator>^</operator><name>a21</name><operator>^</operator><name>a41</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <name>a22</name><operator>^</operator><name>a42</name><operator>^</operator><name>a12</name><operator>^</operator><name>a32</name><operator>^</operator><name>a02</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c3</name> <operator>=</operator> <name>a33</name><operator>^</operator><name>a03</name><operator>^</operator><name>a23</name><operator>^</operator><name>a43</name><operator>^</operator><name>a13</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c4</name> <operator>=</operator> <name>a44</name><operator>^</operator><name>a14</name><operator>^</operator><name>a34</name><operator>^</operator><name>a04</name><operator>^</operator><name>a24</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>c4</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d1</name> <operator>=</operator> <name>c0</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d2</name> <operator>=</operator> <name>c1</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d3</name> <operator>=</operator> <name>c2</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d4</name> <operator>=</operator> <name>c3</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>b0</name> <operator>=</operator> <operator>(</operator><name>a00</name><operator>^</operator><name>d0</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a31</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a12</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a43</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a24</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a00</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a00</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a31</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a12</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a43</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a24</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a40</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a21</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a02</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a33</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a14</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a40</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a21</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a02</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a33</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a14</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a30</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a11</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a42</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a23</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a04</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a30</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a11</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a42</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a23</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a04</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a20</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a01</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a32</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a13</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a44</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a20</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a01</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a32</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a13</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a44</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a10</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a41</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a22</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a03</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a34</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a10</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a41</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a22</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a03</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a34</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>c0</name> <operator>=</operator> <name>a00</name><operator>^</operator><name>a40</name><operator>^</operator><name>a30</name><operator>^</operator><name>a20</name><operator>^</operator><name>a10</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <name>a31</name><operator>^</operator><name>a21</name><operator>^</operator><name>a11</name><operator>^</operator><name>a01</name><operator>^</operator><name>a41</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <name>a12</name><operator>^</operator><name>a02</name><operator>^</operator><name>a42</name><operator>^</operator><name>a32</name><operator>^</operator><name>a22</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c3</name> <operator>=</operator> <name>a43</name><operator>^</operator><name>a33</name><operator>^</operator><name>a23</name><operator>^</operator><name>a13</name><operator>^</operator><name>a03</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c4</name> <operator>=</operator> <name>a24</name><operator>^</operator><name>a14</name><operator>^</operator><name>a04</name><operator>^</operator><name>a44</name><operator>^</operator><name>a34</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>c4</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d1</name> <operator>=</operator> <name>c0</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d2</name> <operator>=</operator> <name>c1</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d3</name> <operator>=</operator> <name>c2</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d4</name> <operator>=</operator> <name>c3</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>b0</name> <operator>=</operator> <operator>(</operator><name>a00</name><operator>^</operator><name>d0</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a21</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a42</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a13</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a34</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a00</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a00</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a21</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a42</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a13</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a34</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a30</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a01</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a22</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a43</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a14</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a30</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a01</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a22</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a43</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a14</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a10</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a31</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a02</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a23</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a44</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a10</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a31</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a02</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a23</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a44</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a40</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a11</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a32</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a03</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a24</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a40</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a11</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a32</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a03</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a24</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a20</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a41</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a12</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a33</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a04</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a20</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a41</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a12</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a33</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a04</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>c0</name> <operator>=</operator> <name>a00</name><operator>^</operator><name>a30</name><operator>^</operator><name>a10</name><operator>^</operator><name>a40</name><operator>^</operator><name>a20</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c1</name> <operator>=</operator> <name>a21</name><operator>^</operator><name>a01</name><operator>^</operator><name>a31</name><operator>^</operator><name>a11</name><operator>^</operator><name>a41</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c2</name> <operator>=</operator> <name>a42</name><operator>^</operator><name>a22</name><operator>^</operator><name>a02</name><operator>^</operator><name>a32</name><operator>^</operator><name>a12</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c3</name> <operator>=</operator> <name>a13</name><operator>^</operator><name>a43</name><operator>^</operator><name>a23</name><operator>^</operator><name>a03</name><operator>^</operator><name>a33</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>c4</name> <operator>=</operator> <name>a34</name><operator>^</operator><name>a14</name><operator>^</operator><name>a44</name><operator>^</operator><name>a24</name><operator>^</operator><name>a04</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d0</name> <operator>=</operator> <name>c4</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d1</name> <operator>=</operator> <name>c0</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d2</name> <operator>=</operator> <name>c1</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d3</name> <operator>=</operator> <name>c2</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c4</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>d4</name> <operator>=</operator> <name>c3</name><operator>^</operator><call><name>ROL64</name><argument_list>(<argument><expr><name>c0</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>b0</name> <operator>=</operator> <operator>(</operator><name>a00</name><operator>^</operator><name>d0</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a01</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a02</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">43</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a03</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a04</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a00</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a00</name> <operator>^=</operator> <name><name>RC</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a01</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a02</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a03</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a04</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a10</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a11</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">45</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a12</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">61</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a13</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a14</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a10</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a11</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a12</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a13</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a14</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a20</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a21</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a22</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a23</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a24</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a20</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a21</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a22</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a23</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a24</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a30</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a31</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a32</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a33</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a34</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a30</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a31</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a32</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a33</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a34</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>b3</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a40</name><operator>^</operator><name>d0</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b4</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a41</name><operator>^</operator><name>d1</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b0</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a42</name><operator>^</operator><name>d2</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">62</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b1</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a43</name><operator>^</operator><name>d3</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b2</name> <operator>=</operator> <call><name>ROL64</name><argument_list>(<argument><expr><operator>(</operator><name>a44</name><operator>^</operator><name>d4</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a40</name> <operator>=</operator>   <name>b0</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b1</name><operator>)</operator><operator>&amp;</operator>  <name>b2</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a41</name> <operator>=</operator>   <name>b1</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b2</name><operator>)</operator><operator>&amp;</operator>  <name>b3</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a42</name> <operator>=</operator>   <name>b2</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b3</name><operator>)</operator><operator>&amp;</operator>  <name>b4</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a43</name> <operator>=</operator>   <name>b3</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b4</name><operator>)</operator><operator>&amp;</operator>  <name>b0</name> <operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>a44</name> <operator>=</operator>   <name>b4</name> <operator>^</operator><operator>(</operator><operator>(</operator><operator>~</operator><name>b0</name><operator>)</operator><operator>&amp;</operator>  <name>b1</name> <operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Initialize a new hash.  iSize determines the size of the hash
** in bits and should be one of 224, 256, 384, or 512.  Or iSize
** can be zero to use the default hash size of 256 bits.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA3Init</name><parameter_list>(<parameter><decl><type><name>SHA3Context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iSize</name><operator>&gt;=</operator><literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>iSize</name><operator>&lt;=</operator><literal type="number">512</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1600</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>iSize</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">31</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1600</literal> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">256</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SHA3_BYTEORDER</name><operator>==</operator><literal type="number">1234</literal></expr></cpp:if>
  <comment type="block">/* Known to be little-endian at compile-time. No-op */</comment>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SHA3_BYTEORDER</name><operator>==</operator><literal type="number">4321</literal></expr></cpp:elif>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>  <comment type="block">/* Big-endian */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><literal type="number">1</literal><operator>==</operator><operator>*</operator><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>one</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Little endian.  No byte swapping. */</comment>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Big endian.  Byte swap. */</comment>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
** Make consecutive calls to the SHA3Update function to add new content
** to the hash
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>SHA3Update</name><parameter_list>(
  <parameter><decl><type><name>SHA3Context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,
  <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>nData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>aData</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SHA3_BYTEORDER</name><operator>==</operator><literal type="number">1234</literal></expr></cpp:if>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>%</operator> <literal type="number">8</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>aData</name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>+</operator><literal type="number">7</literal><operator>&lt;</operator><name>nData</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">8</literal></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>s</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>/</operator><literal type="number">8</literal></expr>]</index></name> <operator>^=</operator> <operator>*</operator><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>aData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>KeccakF1600Step</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <for>for<control>(<init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nData</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SHA3_BYTEORDER</name><operator>==</operator><literal type="number">1234</literal></expr></cpp:if>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name></expr>]</index></name> <operator>^=</operator> <name><name>aData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SHA3_BYTEORDER</name><operator>==</operator><literal type="number">4321</literal></expr></cpp:elif>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>^</operator><literal type="number">0x07</literal></expr>]</index></name> <operator>^=</operator> <name><name>aData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>^</operator><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name></expr>]</index></name> <operator>^=</operator> <name><name>aData</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>KeccakF1600Step</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** After all content has been added, invoke SHA3Final() to compute
** the final hash.  The function returns a pointer to the binary
** hash value.
*/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>SHA3Final</name><parameter_list>(<parameter><decl><type><name>SHA3Context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c1</name> <init>= <expr><literal type="number">0x86</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c2</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>c3</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nLoaded</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nRate</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name>i</name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name>i</name><operator>^</operator><name><name>p</name><operator>-&gt;</operator><name>ixMask</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>x</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nRate</name></name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/* End of the hashing logic
*****************************************************************************/</comment>

<comment type="block">/*
** Implementation of the sha3(X,SIZE) function.
**
** Return a BLOB which is the SIZE-bit SHA3 hash of X.  The default
** size is 256.  If X is a BLOB, it is hashed as is.  
** For all other non-NULL types of input, X is converted into a UTF-8 string
** and the string is hashed without the trailing 0x00 terminator.  The hash
** of a NULL value is NULL.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sha3Func</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>SHA3Context</name></type> <name>cx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSize</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iSize</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>iSize</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iSize</name><operator>!=</operator><literal type="number">224</literal> <operator>&amp;&amp;</operator> <name>iSize</name><operator>!=</operator><literal type="number">256</literal> <operator>&amp;&amp;</operator> <name>iSize</name><operator>!=</operator><literal type="number">384</literal> <operator>&amp;&amp;</operator> <name>iSize</name><operator>!=</operator><literal type="number">512</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"SHA3 size should be one of: 224 256 "</literal>
                                    <literal type="string">"384 512"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>SQLITE_NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SHA3Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>SQLITE_BLOB</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>SHA3Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iSize</name><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Compute a string using sqlite3_vsnprintf() with a maximum length
** of 50 bytes and add it to the hash.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hash_step_vformat</name><parameter_list>(
  <parameter><decl><type><name>SHA3Context</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                 <comment type="block">/* Add content to this context */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,
  <parameter><decl><type><modifier>...</modifier></type></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_vsnprintf</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>,<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><name>zFormat</name></expr></argument>,<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of the sha3_query(SQL,SIZE) function.
**
** This function compiles and runs the SQL statement(s) given in the
** argument. The results are hashed using a SIZE-bit SHA3.  The default
** size is 256.
**
** The format of the byte stream that is hashed is summarized as follows:
**
**       S&lt;n&gt;:&lt;sql&gt;
**       R
**       N
**       I&lt;int&gt;
**       F&lt;ieee-float&gt;
**       B&lt;size&gt;:&lt;bytes&gt;
**       T&lt;size&gt;:&lt;text&gt;
**
** &lt;sql&gt; is the original SQL text for each statement run and &lt;n&gt; is
** the size of that text.  The SQL text is UTF-8.  A single R character
** occurs before the start of each row.  N means a NULL value.
** I mean an 8-byte little-endian integer &lt;int&gt;.  F is a floating point
** number with an 8-byte little-endian IEEE floating point value &lt;ieee-float&gt;.
** B means blobs of &lt;size&gt; bytes.  T means text rendered as &lt;size&gt;
** bytes of UTF-8.  The &lt;n&gt; and &lt;size&gt; values are expressed as an ASCII
** text integers.
**
** For each SQL statement in the X input, there is one S segment.  Each
** S segment is followed by zero or more R segments, one for each row in the
** result set.  After each R, there are one or more N, I, F, B, or T segments,
** one for each column in the result set.  Segments are concatentated directly
** with no delimiters of any kind.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>sha3QueryFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>                   <comment type="block">/* Number of columns in the result set */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                      <comment type="block">/* Loop counter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHA3Context</name></type> <name>cx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSize</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iSize</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>iSize</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iSize</name><operator>!=</operator><literal type="number">224</literal> <operator>&amp;&amp;</operator> <name>iSize</name><operator>!=</operator><literal type="number">256</literal> <operator>&amp;&amp;</operator> <name>iSize</name><operator>!=</operator><literal type="number">384</literal> <operator>&amp;&amp;</operator> <name>iSize</name><operator>!=</operator><literal type="number">512</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"SHA3 size should be one of: 224 256 "</literal>
                                    <literal type="string">"384 512"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SHA3Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><name>iSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name><name>zSql</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMsg</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"error SQL statement [%s]: %s"</literal></expr></argument>,
                                   <argument><expr><name>zSql</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3_stmt_readonly</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zMsg</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"non-query: [%s]"</literal></expr></argument>, <argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nCol</name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>z</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>hash_step_vformat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>,<argument><expr><literal type="string">"S%d:"</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>,<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Compute a hash over the result of the query */</comment>
    <while>while<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>,<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"R"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <switch>switch<condition>( <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <case>case <expr><name>SQLITE_NULL</name></expr>:</case> <block>{<block_content>
            <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><literal type="string">"N"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><name>SQLITE_INTEGER</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>u</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name> <init>= <expr><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">8</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
              <expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>u</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'I'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><name>SQLITE_FLOAT</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>u</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>x</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>r</name> <init>= <expr><call><name>sqlite3_column_double</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">8</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
              <expr_stmt><expr><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>u</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>u</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'F'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><name>SQLITE_TEXT</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z2</name> <init>= <expr><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hash_step_vformat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>,<argument><expr><literal type="string">"T%d:"</literal></expr></argument>,<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
          <case>case <expr><name>SQLITE_BLOB</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z2</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hash_step_vformat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>,<argument><expr><literal type="string">"B%d:"</literal></expr></argument>,<argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SHA3Update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>, <argument><expr><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block>
        </block_content>}</block></switch>
      </block_content>}</block></for>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>SHA3Final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iSize</name><operator>/</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_shathree_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErrMsg</name></expr>;</expr_stmt>  <comment type="block">/* Unused parameter */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sha3"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                      <argument><expr><name>SQLITE_UTF8</name> <operator>|</operator> <name>SQLITE_INNOCUOUS</name> <operator>|</operator> <name>SQLITE_DETERMINISTIC</name></expr></argument>,
                      <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sha3Func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sha3"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                      <argument><expr><name>SQLITE_UTF8</name> <operator>|</operator> <name>SQLITE_INNOCUOUS</name> <operator>|</operator> <name>SQLITE_DETERMINISTIC</name></expr></argument>,
                      <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sha3Func</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sha3_query"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                      <argument><expr><name>SQLITE_UTF8</name> <operator>|</operator> <name>SQLITE_DIRECTONLY</name></expr></argument>,
                      <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sha3QueryFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sha3_query"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                      <argument><expr><name>SQLITE_UTF8</name> <operator>|</operator> <name>SQLITE_DIRECTONLY</name></expr></argument>,
                      <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sha3QueryFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
