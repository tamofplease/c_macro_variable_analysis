<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/misc/percentile.c"><comment type="block">/*
** 2013-05-28
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains code to implement the percentile(Y,P) SQL function
** as described below:
**
**   (1)  The percentile(Y,P) function is an aggregate function taking
**        exactly two arguments.
**
**   (2)  If the P argument to percentile(Y,P) is not the same for every
**        row in the aggregate then an error is thrown.  The word "same"
**        in the previous sentence means that the value differ by less
**        than 0.001.
**
**   (3)  If the P argument to percentile(Y,P) evaluates to anything other
**        than a number in the range of 0.0 to 100.0 inclusive then an
**        error is thrown.
**
**   (4)  If any Y argument to percentile(Y,P) evaluates to a value that
**        is not NULL and is not numeric then an error is thrown.
**
**   (5)  If any Y argument to percentile(Y,P) evaluates to plus or minus
**        infinity then an error is thrown.  (SQLite always interprets NaN
**        values as NULL.)
**
**   (6)  Both Y and P in percentile(Y,P) can be arbitrary expressions,
**        including CASE WHEN expressions.
**
**   (7)  The percentile(Y,P) aggregate is able to handle inputs of at least
**        one million (1,000,000) rows.
**
**   (8)  If there are no non-NULL values for Y, then percentile(Y,P)
**        returns NULL.
**
**   (9)  If there is exactly one non-NULL value for Y, the percentile(Y,P)
**        returns the one Y value.
**
**  (10)  If there N non-NULL values of Y where N is two or more and
**        the Y values are ordered from least to greatest and a graph is
**        drawn from 0 to N-1 such that the height of the graph at J is
**        the J-th Y value and such that straight lines are drawn between
**        adjacent Y values, then the percentile(Y,P) function returns
**        the height of the graph at P*(N-1)/100.
**
**  (11)  The percentile(Y,P) function always returns either a floating
**        point number or NULL.
**
**  (12)  The percentile(Y,P) is implemented as a single C99 source-code
**        file that compiles into a shared-library or DLL that can be loaded
**        into SQLite using the sqlite3_load_extension() interface.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/* The following object is the session context for a single percentile()
** function.  We have to remember all input Y values until the very end.
** Those values are accumulated in the Percentile.a[] array.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Percentile</name></name></type> <name>Percentile</name>;</typedef>
<struct>struct <name>Percentile</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name></type> <name>nAlloc</name></decl>;</decl_stmt>     <comment type="block">/* Number of slots allocated for a[] */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>nUsed</name></decl>;</decl_stmt>      <comment type="block">/* Number of slots actually used in a[] */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>rPct</name></decl>;</decl_stmt>         <comment type="block">/* 1.0 more than the value for P */</comment>
  <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>           <comment type="block">/* Array of Y values */</comment>
}</block>;</struct>

<comment type="block">/*
** Return TRUE if the input floating-point number is an infinity.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>isInfinity</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>u</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></sizeof><operator>==</operator><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><operator>(</operator><name>u</name><operator>&gt;&gt;</operator><literal type="number">52</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x7ff</literal><operator>)</operator><operator>==</operator><literal type="number">0x7ff</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return TRUE if two doubles differ by 0.001 or less
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sameValue</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt>
  <return>return <expr><name>a</name><operator>&gt;=</operator><operator>-</operator><literal type="number">0.001</literal> <operator>&amp;&amp;</operator> <name>a</name><operator>&lt;=</operator><literal type="number">0.001</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The "step" function for percentile(Y,P) is called once for each
** input row.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>percentStep</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Percentile</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>rPct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>argc</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Requirement 3:  P must be a number between 0 and 100 */</comment>
  <expr_stmt><expr><name>eType</name> <operator>=</operator> <call><name>sqlite3_value_numeric_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rPct</name> <operator>=</operator> <call><name>sqlite3_value_double</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>eType</name><operator>!=</operator><name>SQLITE_INTEGER</name> <operator>&amp;&amp;</operator> <name>eType</name><operator>!=</operator><name>SQLITE_FLOAT</name><operator>)</operator>
   <operator>||</operator> <name><name>rPct</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0.0</literal> <operator>||</operator> <name>rPct</name></expr></argument>&gt;</argument_list></name><literal type="number">100.0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"2nd argument to percentile() is not "</literal>
                         <literal type="string">"a number between 0.0 and 100.0"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Allocate the session context. */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Percentile</name><operator>*</operator><operator>)</operator><call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Remember the P value.  Throw an error if the P value is different
  ** from any prior row, per Requirement (2). */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rPct</name></name><operator>==</operator><literal type="number">0.0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rPct</name></name> <operator>=</operator> <name>rPct</name><operator>+</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>sameValue</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>rPct</name></name></expr></argument>,<argument><expr><name>rPct</name><operator>+</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"2nd argument to percentile() is not the "</literal>
                               <literal type="string">"same for all input rows"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Ignore rows for which Y is NULL */</comment>
  <expr_stmt><expr><name>eType</name> <operator>=</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>eType</name><operator>==</operator><name>SQLITE_NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* If not NULL, then Y must be numeric.  Otherwise throw an error.
  ** Requirement 4 */</comment>
  <if_stmt><if>if<condition>( <expr><name>eType</name><operator>!=</operator><name>SQLITE_INTEGER</name> <operator>&amp;&amp;</operator> <name>eType</name><operator>!=</operator><name>SQLITE_FLOAT</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"1st argument to percentile() is not "</literal>
                               <literal type="string">"numeric"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Throw an error if the Y value is infinity or NaN */</comment>
  <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sqlite3_value_double</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>isInfinity</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"Inf input to percentile()"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Allocate and store the Y */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">250</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nAlloc</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Compare to doubles for sorting using qsort()
*/</comment>
<function><type><specifier>static</specifier> <name>int</name> <name>SQLITE_CDECL</name></type> <name>doubleCmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pA</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pB</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>double</name></type> <name>a</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>pA</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>b</name> <init>= <expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>pB</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>a</name><operator>==</operator><name>b</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>a</name><operator>&lt;</operator><name>b</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Called to compute the final output of percentile() and to clean
** up all allocated memory.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>percentFinal</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Percentile</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>i1</name></decl>, <decl><type ref="prev"/><name>i2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>ix</name></decl>, <decl><type ref="prev"/><name>vx</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Percentile</name><operator>*</operator><operator>)</operator><call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>doubleCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ix</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>rPct</name></name><operator>-</operator><literal type="number">1.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">0.01</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>i1</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>ix</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i2</name> <operator>=</operator> <ternary><condition><expr><name>ix</name><operator>==</operator><operator>(</operator><name>double</name><operator>)</operator><name>i1</name> <operator>||</operator> <name>i1</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>nUsed</name></name><operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>i1</name></expr> </then><else>: <expr><name>i1</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>v1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>vx</name> <operator>=</operator> <name>v1</name> <operator>+</operator> <operator>(</operator><name>v2</name><operator>-</operator><name>v1</name><operator>)</operator><operator>*</operator><operator>(</operator><name>ix</name><operator>-</operator><name>i1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_double</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>vx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_percentile_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErrMsg</name></expr>;</expr_stmt>  <comment type="block">/* Unused parameter */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"percentile"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, 
                               <argument><expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITE_INNOCUOUS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                               <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>percentStep</name></expr></argument>, <argument><expr><name>percentFinal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
