<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/misc/normalize.c"><comment type="block">/*
** 2018-01-08
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains code to implement the sqlite3_normalize() function.
**
**    char *sqlite3_normalize(const char *zSql);
**
** This function takes an SQL string as input and returns a "normalized"
** version of that string in memory obtained from sqlite3_malloc64().  The
** caller is responsible for ensuring that the returned memory is freed.
**
** If a memory allocation error occurs, this routine returns NULL.
**
** The normalization consists of the following transformations:
**
**   (1)  Convert every literal (string, blob literal, numeric constant,
**        or "NULL" constant) into a ?
**
**   (2)  Remove all superfluous whitespace, including comments.  Change
**        all required whitespace to a single space character.
**
**   (3)  Lowercase all ASCII characters.
**
**   (4)  If an IN or NOT IN operator is followed by a list of 1 or more
**        values, convert that list into "(?,?,?)".
**
** The purpose of normalization is two-fold:
**
**   (1)  Sanitize queries by removing potentially private or sensitive
**        information contained in literals.
**
**   (2)  Identify structurally identical queries by comparing their
**        normalized forms.
**
** Command-Line Utility
** --------------------
**
** This file also contains code for a command-line utility that converts
** SQL queries in text files into their normalized forms.  To build the
** command-line program, compile this file with -DSQLITE_NORMALIZE_CLI
** and link it against the SQLite library.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Implementation note:
**
** Much of the tokenizer logic is copied out of the tokenize.c source file
** of SQLite.  That logic could be simplified for this particular application,
** but that would impose a risk of introducing subtle errors.  It is best to
** keep the code as close to the original as possible.
**
** The tokenize code is in sync with the SQLite core as of 2018-01-08.
** Any future changes to the core tokenizer might require corresponding
** adjustments to the tokenizer logic in this module.
*/</comment>


<comment type="block">/* Character classes for tokenizing
**
** In the sqlite3GetToken() function, a switch() on aiClass[c] is implemented
** using a lookup table, whereas a switch() directly on c uses a binary search.
** The lookup table is much faster.  To maximize speed, and to ensure that
** a lookup table is used, all of the classes need to be small integers and
** all of them need to be used within the switch.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_X</name></cpp:macro>          <cpp:value>0</cpp:value></cpp:define>    <comment type="block">/* The letter 'x', or start of BLOB literal */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_KYWD</name></cpp:macro>       <cpp:value>1</cpp:value></cpp:define>    <comment type="block">/* Alphabetics or '_'.  Usable in a keyword */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_ID</name></cpp:macro>         <cpp:value>2</cpp:value></cpp:define>    <comment type="block">/* unicode characters usable in IDs */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_DIGIT</name></cpp:macro>      <cpp:value>3</cpp:value></cpp:define>    <comment type="block">/* Digits */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_DOLLAR</name></cpp:macro>     <cpp:value>4</cpp:value></cpp:define>    <comment type="block">/* '$' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_VARALPHA</name></cpp:macro>   <cpp:value>5</cpp:value></cpp:define>    <comment type="block">/* '@', '#', ':'.  Alphabetic SQL variables */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_VARNUM</name></cpp:macro>     <cpp:value>6</cpp:value></cpp:define>    <comment type="block">/* '?'.  Numeric SQL variables */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_SPACE</name></cpp:macro>      <cpp:value>7</cpp:value></cpp:define>    <comment type="block">/* Space characters */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_QUOTE</name></cpp:macro>      <cpp:value>8</cpp:value></cpp:define>    <comment type="block">/* '"', '\'', or '`'.  String literals, quoted ids */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_QUOTE2</name></cpp:macro>     <cpp:value>9</cpp:value></cpp:define>    <comment type="block">/* '['.   [...] style quoted ids */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PIPE</name></cpp:macro>      <cpp:value>10</cpp:value></cpp:define>    <comment type="block">/* '|'.   Bitwise OR or concatenate */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_MINUS</name></cpp:macro>     <cpp:value>11</cpp:value></cpp:define>    <comment type="block">/* '-'.  Minus or SQL-style comment */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_LT</name></cpp:macro>        <cpp:value>12</cpp:value></cpp:define>    <comment type="block">/* '&lt;'.  Part of &lt; or &lt;= or &lt;&gt; */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_GT</name></cpp:macro>        <cpp:value>13</cpp:value></cpp:define>    <comment type="block">/* '&gt;'.  Part of &gt; or &gt;= */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_EQ</name></cpp:macro>        <cpp:value>14</cpp:value></cpp:define>    <comment type="block">/* '='.  Part of = or == */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_BANG</name></cpp:macro>      <cpp:value>15</cpp:value></cpp:define>    <comment type="block">/* '!'.  Part of != */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_SLASH</name></cpp:macro>     <cpp:value>16</cpp:value></cpp:define>    <comment type="block">/* '/'.  / or c-style comment */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_LP</name></cpp:macro>        <cpp:value>17</cpp:value></cpp:define>    <comment type="block">/* '(' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_RP</name></cpp:macro>        <cpp:value>18</cpp:value></cpp:define>    <comment type="block">/* ')' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_SEMI</name></cpp:macro>      <cpp:value>19</cpp:value></cpp:define>    <comment type="block">/* ';' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PLUS</name></cpp:macro>      <cpp:value>20</cpp:value></cpp:define>    <comment type="block">/* '+' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_STAR</name></cpp:macro>      <cpp:value>21</cpp:value></cpp:define>    <comment type="block">/* '*' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_PERCENT</name></cpp:macro>   <cpp:value>22</cpp:value></cpp:define>    <comment type="block">/* '%' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_COMMA</name></cpp:macro>     <cpp:value>23</cpp:value></cpp:define>    <comment type="block">/* ',' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_AND</name></cpp:macro>       <cpp:value>24</cpp:value></cpp:define>    <comment type="block">/* '&amp;' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_TILDA</name></cpp:macro>     <cpp:value>25</cpp:value></cpp:define>    <comment type="block">/* '~' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_DOT</name></cpp:macro>       <cpp:value>26</cpp:value></cpp:define>    <comment type="block">/* '.' */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_ILLEGAL</name></cpp:macro>   <cpp:value>27</cpp:value></cpp:define>    <comment type="block">/* Illegal character */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>aiClass</name><index>[]</index></name> <init>= <expr><block>{
<comment type="block">/*         x0  x1  x2  x3  x4  x5  x6  x7  x8  x9  xa  xb  xc  xd  xe  xf */</comment>
<comment type="block">/* 0x */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">27</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">7</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,
<comment type="block">/* 1x */</comment>   <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,
<comment type="block">/* 2x */</comment>    <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">4</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>,  <expr><literal type="number">8</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">16</literal></expr>,
<comment type="block">/* 3x */</comment>    <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">5</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>,  <expr><literal type="number">6</literal></expr>,
<comment type="block">/* 4x */</comment>    <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,
<comment type="block">/* 5x */</comment>    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,  <expr><literal type="number">1</literal></expr>,
<comment type="block">/* 6x */</comment>    <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,
<comment type="block">/* 7x */</comment>    <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">27</literal></expr>,
<comment type="block">/* 8x */</comment>    <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,
<comment type="block">/* 9x */</comment>    <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,
<comment type="block">/* Ax */</comment>    <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,
<comment type="block">/* Bx */</comment>    <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,
<comment type="block">/* Cx */</comment>    <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,
<comment type="block">/* Dx */</comment>    <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,
<comment type="block">/* Ex */</comment>    <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,
<comment type="block">/* Fx */</comment>    <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">2</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* An array to map all upper-case characters into their corresponding
** lower-case character. 
**
** SQLite only considers US-ASCII (or EBCDIC) characters.  We do not
** handle case conversions for the UTF character set since the tables
** involved are nearly as big or bigger than SQLite itself.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sqlite3UpperToLower</name><index>[]</index></name> <init>= <expr><block>{
      <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>,
     <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>,
     <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>,
     <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">99</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">103</literal></expr>,
    <expr><literal type="number">104</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">106</literal></expr>,<expr><literal type="number">107</literal></expr>,<expr><literal type="number">108</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">110</literal></expr>,<expr><literal type="number">111</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">114</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">118</literal></expr>,<expr><literal type="number">119</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">121</literal></expr>,
    <expr><literal type="number">122</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">99</literal></expr>,<expr><literal type="number">100</literal></expr>,<expr><literal type="number">101</literal></expr>,<expr><literal type="number">102</literal></expr>,<expr><literal type="number">103</literal></expr>,<expr><literal type="number">104</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">106</literal></expr>,<expr><literal type="number">107</literal></expr>,
    <expr><literal type="number">108</literal></expr>,<expr><literal type="number">109</literal></expr>,<expr><literal type="number">110</literal></expr>,<expr><literal type="number">111</literal></expr>,<expr><literal type="number">112</literal></expr>,<expr><literal type="number">113</literal></expr>,<expr><literal type="number">114</literal></expr>,<expr><literal type="number">115</literal></expr>,<expr><literal type="number">116</literal></expr>,<expr><literal type="number">117</literal></expr>,<expr><literal type="number">118</literal></expr>,<expr><literal type="number">119</literal></expr>,<expr><literal type="number">120</literal></expr>,<expr><literal type="number">121</literal></expr>,<expr><literal type="number">122</literal></expr>,<expr><literal type="number">123</literal></expr>,<expr><literal type="number">124</literal></expr>,<expr><literal type="number">125</literal></expr>,
    <expr><literal type="number">126</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">129</literal></expr>,<expr><literal type="number">130</literal></expr>,<expr><literal type="number">131</literal></expr>,<expr><literal type="number">132</literal></expr>,<expr><literal type="number">133</literal></expr>,<expr><literal type="number">134</literal></expr>,<expr><literal type="number">135</literal></expr>,<expr><literal type="number">136</literal></expr>,<expr><literal type="number">137</literal></expr>,<expr><literal type="number">138</literal></expr>,<expr><literal type="number">139</literal></expr>,<expr><literal type="number">140</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">142</literal></expr>,<expr><literal type="number">143</literal></expr>,
    <expr><literal type="number">144</literal></expr>,<expr><literal type="number">145</literal></expr>,<expr><literal type="number">146</literal></expr>,<expr><literal type="number">147</literal></expr>,<expr><literal type="number">148</literal></expr>,<expr><literal type="number">149</literal></expr>,<expr><literal type="number">150</literal></expr>,<expr><literal type="number">151</literal></expr>,<expr><literal type="number">152</literal></expr>,<expr><literal type="number">153</literal></expr>,<expr><literal type="number">154</literal></expr>,<expr><literal type="number">155</literal></expr>,<expr><literal type="number">156</literal></expr>,<expr><literal type="number">157</literal></expr>,<expr><literal type="number">158</literal></expr>,<expr><literal type="number">159</literal></expr>,<expr><literal type="number">160</literal></expr>,<expr><literal type="number">161</literal></expr>,
    <expr><literal type="number">162</literal></expr>,<expr><literal type="number">163</literal></expr>,<expr><literal type="number">164</literal></expr>,<expr><literal type="number">165</literal></expr>,<expr><literal type="number">166</literal></expr>,<expr><literal type="number">167</literal></expr>,<expr><literal type="number">168</literal></expr>,<expr><literal type="number">169</literal></expr>,<expr><literal type="number">170</literal></expr>,<expr><literal type="number">171</literal></expr>,<expr><literal type="number">172</literal></expr>,<expr><literal type="number">173</literal></expr>,<expr><literal type="number">174</literal></expr>,<expr><literal type="number">175</literal></expr>,<expr><literal type="number">176</literal></expr>,<expr><literal type="number">177</literal></expr>,<expr><literal type="number">178</literal></expr>,<expr><literal type="number">179</literal></expr>,
    <expr><literal type="number">180</literal></expr>,<expr><literal type="number">181</literal></expr>,<expr><literal type="number">182</literal></expr>,<expr><literal type="number">183</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">185</literal></expr>,<expr><literal type="number">186</literal></expr>,<expr><literal type="number">187</literal></expr>,<expr><literal type="number">188</literal></expr>,<expr><literal type="number">189</literal></expr>,<expr><literal type="number">190</literal></expr>,<expr><literal type="number">191</literal></expr>,<expr><literal type="number">192</literal></expr>,<expr><literal type="number">193</literal></expr>,<expr><literal type="number">194</literal></expr>,<expr><literal type="number">195</literal></expr>,<expr><literal type="number">196</literal></expr>,<expr><literal type="number">197</literal></expr>,
    <expr><literal type="number">198</literal></expr>,<expr><literal type="number">199</literal></expr>,<expr><literal type="number">200</literal></expr>,<expr><literal type="number">201</literal></expr>,<expr><literal type="number">202</literal></expr>,<expr><literal type="number">203</literal></expr>,<expr><literal type="number">204</literal></expr>,<expr><literal type="number">205</literal></expr>,<expr><literal type="number">206</literal></expr>,<expr><literal type="number">207</literal></expr>,<expr><literal type="number">208</literal></expr>,<expr><literal type="number">209</literal></expr>,<expr><literal type="number">210</literal></expr>,<expr><literal type="number">211</literal></expr>,<expr><literal type="number">212</literal></expr>,<expr><literal type="number">213</literal></expr>,<expr><literal type="number">214</literal></expr>,<expr><literal type="number">215</literal></expr>,
    <expr><literal type="number">216</literal></expr>,<expr><literal type="number">217</literal></expr>,<expr><literal type="number">218</literal></expr>,<expr><literal type="number">219</literal></expr>,<expr><literal type="number">220</literal></expr>,<expr><literal type="number">221</literal></expr>,<expr><literal type="number">222</literal></expr>,<expr><literal type="number">223</literal></expr>,<expr><literal type="number">224</literal></expr>,<expr><literal type="number">225</literal></expr>,<expr><literal type="number">226</literal></expr>,<expr><literal type="number">227</literal></expr>,<expr><literal type="number">228</literal></expr>,<expr><literal type="number">229</literal></expr>,<expr><literal type="number">230</literal></expr>,<expr><literal type="number">231</literal></expr>,<expr><literal type="number">232</literal></expr>,<expr><literal type="number">233</literal></expr>,
    <expr><literal type="number">234</literal></expr>,<expr><literal type="number">235</literal></expr>,<expr><literal type="number">236</literal></expr>,<expr><literal type="number">237</literal></expr>,<expr><literal type="number">238</literal></expr>,<expr><literal type="number">239</literal></expr>,<expr><literal type="number">240</literal></expr>,<expr><literal type="number">241</literal></expr>,<expr><literal type="number">242</literal></expr>,<expr><literal type="number">243</literal></expr>,<expr><literal type="number">244</literal></expr>,<expr><literal type="number">245</literal></expr>,<expr><literal type="number">246</literal></expr>,<expr><literal type="number">247</literal></expr>,<expr><literal type="number">248</literal></expr>,<expr><literal type="number">249</literal></expr>,<expr><literal type="number">250</literal></expr>,<expr><literal type="number">251</literal></expr>,
    <expr><literal type="number">252</literal></expr>,<expr><literal type="number">253</literal></expr>,<expr><literal type="number">254</literal></expr>,<expr><literal type="number">255</literal></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** The following 256 byte lookup table is used to support SQLites built-in
** equivalents to the following standard library functions:
**
**   isspace()                        0x01
**   isalpha()                        0x02
**   isdigit()                        0x04
**   isalnum()                        0x06
**   isxdigit()                       0x08
**   toupper()                        0x20
**   SQLite identifier character      0x40
**   Quote character                  0x80
**
** Bit 0x20 is set if the mapped character requires translation to upper
** case. i.e. if the character is a lower-case ASCII character.
** If x is a lower-case ASCII character, then its upper-case equivalent
** is (x - 0x20). Therefore toupper() can be implemented as:
**
**   (x &amp; ~(map[x]&amp;0x20))
**
** The equivalent of tolower() is implemented using the sqlite3UpperToLower[]
** array. tolower() is used more often than toupper() by SQLite.
**
** Bit 0x40 is set if the character is non-alphanumeric and can be used in an 
** SQLite identifier.  Identifiers are alphanumerics, "_", "$", and any
** non-ASCII UTF character. Hence the test for whether or not a character is
** part of an identifier is 0x46.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>sqlite3CtypeMap</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,  <comment type="block">/* 00..07    ........ */</comment>
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,  <comment type="block">/* 08..0f    ........ */</comment>
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,  <comment type="block">/* 10..17    ........ */</comment>
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,  <comment type="block">/* 18..1f    ........ */</comment>
  <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>,  <comment type="block">/* 20..27     !"#$%&amp;' */</comment>
  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,  <comment type="block">/* 28..2f    ()*+,-./ */</comment>
  <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>,  <comment type="block">/* 30..37    01234567 */</comment>
  <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,  <comment type="block">/* 38..3f    89:;&lt;=&gt;? */</comment>

  <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x0a</literal></expr>, <expr><literal type="number">0x02</literal></expr>,  <comment type="block">/* 40..47    @ABCDEFG */</comment>
  <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>,  <comment type="block">/* 48..4f    HIJKLMNO */</comment>
  <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>,  <comment type="block">/* 50..57    PQRSTUVW */</comment>
  <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* 58..5f    XYZ[\]^_ */</comment>
  <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x22</literal></expr>,  <comment type="block">/* 60..67    `abcdefg */</comment>
  <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>,  <comment type="block">/* 68..6f    hijklmno */</comment>
  <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>,  <comment type="block">/* 70..77    pqrstuvw */</comment>
  <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,  <comment type="block">/* 78..7f    xyz{|}~. */</comment>

  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* 80..87    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* 88..8f    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* 90..97    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* 98..9f    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* a0..a7    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* a8..af    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* b0..b7    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* b8..bf    ........ */</comment>

  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* c0..c7    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* c8..cf    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* d0..d7    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* d8..df    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* e0..e7    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* e8..ef    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>,  <comment type="block">/* f0..f7    ........ */</comment>
  <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>   <comment type="block">/* f8..ff    ........ */</comment>
}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3Toupper</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((x)&amp;~(sqlite3CtypeMap[(unsigned char)(x)]&amp;0x20))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3Isspace</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(sqlite3CtypeMap[(unsigned char)(x)]&amp;0x01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3Isalnum</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(sqlite3CtypeMap[(unsigned char)(x)]&amp;0x06)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3Isalpha</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(sqlite3CtypeMap[(unsigned char)(x)]&amp;0x02)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3Isdigit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(sqlite3CtypeMap[(unsigned char)(x)]&amp;0x04)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3Isxdigit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(sqlite3CtypeMap[(unsigned char)(x)]&amp;0x08)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3Tolower</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(sqlite3UpperToLower[(unsigned char)(x)])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqlite3Isquote</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(sqlite3CtypeMap[(unsigned char)(x)]&amp;0x80)</cpp:value></cpp:define>


<comment type="block">/*
** If X is a character that can be used in an identifier then
** IdChar(X) will be true.  Otherwise it is false.
**
** For ASCII, any character with the high-order bit set is
** allowed in an identifier.  For 7-bit characters, 
** sqlite3IsIdChar[X] must be 1.
**
** For EBCDIC, the rules are more complex but have the same
** end result.
**
** Ticket #1066.  the SQL standard does not allow '$' in the
** middle of identifiers.  But many SQL implementations do. 
** SQLite will allow '$' in identifiers for compatibility.
** But the feature is undocumented.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IdChar</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((sqlite3CtypeMap[(unsigned char)C]&amp;0x46)!=0)</cpp:value></cpp:define>

<comment type="block">/*
** Ignore testcase() macros
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testcase</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<comment type="block">/*
** Token values
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_SPACE</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_NAME</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_LITERAL</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_PUNCT</name></cpp:macro>    <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_ERROR</name></cpp:macro>    <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_MINUS</name></cpp:macro>    <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_LP</name></cpp:macro>       <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_RP</name></cpp:macro>       <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_SEMI</name></cpp:macro>     <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_PLUS</name></cpp:macro>     <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_STAR</name></cpp:macro>     <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_SLASH</name></cpp:macro>    <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_REM</name></cpp:macro>      <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_EQ</name></cpp:macro>       <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_LE</name></cpp:macro>       <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_NE</name></cpp:macro>       <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_LSHIFT</name></cpp:macro>   <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_LT</name></cpp:macro>       <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_GE</name></cpp:macro>       <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_RSHIFT</name></cpp:macro>   <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_GT</name></cpp:macro>       <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_GE</name></cpp:macro>       <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_BITOR</name></cpp:macro>    <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_CONCAT</name></cpp:macro>   <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_COMMA</name></cpp:macro>    <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_BITAND</name></cpp:macro>   <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_BITNOT</name></cpp:macro>   <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_STRING</name></cpp:macro>   <cpp:value>TK_LITERAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_ID</name></cpp:macro>       <cpp:value>TK_NAME</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_ILLEGAL</name></cpp:macro>  <cpp:value>TK_ERROR</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_DOT</name></cpp:macro>      <cpp:value>TK_PUNCT</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_INTEGER</name></cpp:macro>  <cpp:value>TK_LITERAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_FLOAT</name></cpp:macro>    <cpp:value>TK_LITERAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_VARIABLE</name></cpp:macro> <cpp:value>TK_LITERAL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TK_BLOB</name></cpp:macro>     <cpp:value>TK_LITERAL</cpp:value></cpp:define>

<comment type="block">/* Disable nuisence warnings about case fall-through */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>deliberate_fall_through</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__GCC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__GCC__</name><operator>&gt;=</operator><literal type="number">7</literal></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>deliberate_fall_through</name></cpp:macro> <cpp:value>__attribute__((fallthrough));</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>deliberate_fall_through</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Return the length (in bytes) of the token that begins at z[0]. 
** Store the token type in *tokenType before returning.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqlite3GetToken</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tokenType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name><name>aiClass</name><index>[<expr><operator>*</operator><name>z</name></expr>]</index></name></expr> )</condition><block>{<block_content>  <comment type="block">/* Switch on the character-class of the first byte
                          ** of the token. See the comment on the CC_ defines
                          ** above. */</comment>
    <case>case <expr><name>CC_SPACE</name></expr>:</case> <block>{<block_content>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SPACE</name></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_MINUS</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'\n'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SPACE</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_MINUS</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_LP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_LP</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_RP</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_RP</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_SEMI</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SEMI</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_PLUS</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_PLUS</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_STAR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_STAR</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_SLASH</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'*'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SLASH</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator> <expr><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</init> <condition><expr><operator>(</operator><name>c</name><operator>!=</operator><literal type="char">'*'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'/'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>c</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_SPACE</name></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_PERCENT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_REM</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_EQ</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_EQ</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'='</literal><operator>)</operator></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_LT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>==</operator><literal type="char">'='</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_LE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'&gt;'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_NE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'&lt;'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_LSHIFT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_LT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_GT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>==</operator><literal type="char">'='</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_GE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'&gt;'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_RSHIFT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_GT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_BANG</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'='</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_NE</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_PIPE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'|'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_BITOR</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_CONCAT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">2</literal></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_COMMA</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_COMMA</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_AND</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_BITAND</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_TILDA</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_BITNOT</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_QUOTE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>delim</name> <init>= <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>delim</name><operator>==</operator><literal type="char">'`'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>delim</name><operator>==</operator><literal type="char">'\''</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name>delim</name><operator>==</operator><literal type="char">'"'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><name>delim</name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>delim</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <break>break;</break>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'\''</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_STRING</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ID</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_DOT</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_DOT</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* If the next character is a digit, this is a floating point
      ** number that begins with ".".  Fall thru into the next case */</comment>
      <comment type="block">/* no break */</comment> <expr_stmt><expr><name>deliberate_fall_through</name></expr></expr_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_DIGIT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_INTEGER</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'X'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>sqlite3Isxdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">3</literal></expr>;</init> <condition><expr><call><name>sqlite3Isxdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <while>while<condition>( <expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_FLOAT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'e'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'E'</literal><operator>)</operator> <operator>&amp;&amp;</operator>
           <operator>(</operator> <call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> 
            <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'+'</literal> <operator>||</operator> <name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
           <operator>)</operator></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <while>while<condition>( <expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_FLOAT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <while>while<condition>( <expr><call><name>IdChar</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_QUOTE2</name></expr>:</case> <block>{<block_content>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>c</name><operator>!=</operator><literal type="char">']'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <ternary><condition><expr><name>c</name><operator>==</operator><literal type="char">']'</literal></expr> ?</condition><then> <expr><name>TK_ID</name></expr> </then><else>: <expr><name>TK_ILLEGAL</name></expr></else></ternary></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_VARNUM</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_VARIABLE</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><call><name>sqlite3Isdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_DOLLAR</name></expr>:</case>
    <case>case <expr><name>CC_VARALPHA</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'$'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'@'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>  <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'#'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_VARIABLE</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>IdChar</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'('</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <do>do<block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block>while<condition>( <expr><operator>(</operator><name>c</name><operator>=</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>sqlite3Isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">')'</literal></expr> )</condition>;</do>
          <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">')'</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_KYWD</name></expr>:</case> <block>{<block_content>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>aiClass</name><index>[<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>&lt;=</operator><name>CC_KYWD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
      <if_stmt><if>if<condition>( <expr><call><name>IdChar</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <comment type="block">/* This token started out using characters that can appear in keywords,
        ** but z[i] is a character not allowed within keywords, so this must
        ** be an identifier instead */</comment>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ID</name></expr>;</expr_stmt>
      <return>return <expr><name>i</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>CC_X</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'x'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>testcase</name><argument_list>( <argument><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'X'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'\''</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_BLOB</name></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><call><name>sqlite3Isxdigit</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
        <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'\''</literal> <operator>||</operator> <name>i</name><operator>%</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
          <while>while<condition>( <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'\''</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><name>i</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="block">/* If it is not a BLOB literal, then it must be an ID, since no
      ** SQL keywords start with the letter 'x'.  Fall through */</comment>
      <comment type="block">/* no break */</comment> <expr_stmt><expr><name>deliberate_fall_through</name></expr></expr_stmt>
    </block_content>}</block>
    <case>case <expr><name>CC_ID</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ILLEGAL</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block>
  </block_content>}</block></switch>
  <while>while<condition>( <expr><call><name>IdChar</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>tokenType</name> <operator>=</operator> <name>TK_ID</name></expr>;</expr_stmt>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>sqlite3_normalize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>              <comment type="block">/* The output string */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nZ</name></decl>;</decl_stmt>     <comment type="block">/* Size of the output string in bytes */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nSql</name></decl>;</decl_stmt>   <comment type="block">/* Size of the input string in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                <comment type="block">/* Next character to read from zSql[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>                <comment type="block">/* Next slot to fill in on z[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>tokenType</name></decl>;</decl_stmt>        <comment type="block">/* Type of the next token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>                <comment type="block">/* Size of the next token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>                <comment type="block">/* Loop counter */</comment>

  <expr_stmt><expr><name>nSql</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nZ</name> <operator>=</operator> <name>nSql</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><name>nZ</name><operator>+</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>n</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3GetToken</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>zSql</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch<condition>( <expr><name>tokenType</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>TK_SPACE</name></expr>:</case> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TK_ERROR</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block>
      <case>case <expr><name>TK_LITERAL</name></expr>:</case> <block>{<block_content>
        <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TK_PUNCT</name></expr>:</case>
      <case>case <expr><name>TK_NAME</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><name>zSql</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><literal type="string">"NULL"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><operator>(</operator><name>j</name><operator>&gt;=</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="string">"is"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IdChar</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator>
           <operator>||</operator> <operator>(</operator><name>j</name><operator>&gt;=</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>strncmp</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="string">"not"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IdChar</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>
          )</condition><block>{<block_content>
            <comment type="block">/* NULL is a keyword in this case, not a literal value */</comment>
          </block_content>}</block></if><else>else<block>{<block_content>
            <comment type="block">/* Here the NULL is a literal value */</comment>
            <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>IdChar</name><argument_list>(<argument><expr><name><name>z</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IdChar</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>sqlite3Tolower</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>i</name><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></for>
  <while>while<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">' '</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt> </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>z</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">';'</literal></expr> )</condition><block>{<block_content> <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">';'</literal></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* Make a second pass converting "in(...)" where the "..." is not a
  ** SELECT statement into "in(?,?,?)" */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name>n</name></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zIn</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><literal type="string">"in("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nParen</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>zIn</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>zIn</name><operator>-</operator><name>z</name><operator>)</operator><operator>+</operator><literal type="number">3</literal></expr>;</expr_stmt>  <comment type="block">/* Index of first char past "in(" */</comment>
    <if_stmt><if>if<condition>( <expr><name>n</name> <operator>&amp;&amp;</operator> <call><name>IdChar</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>, <argument><expr><literal type="string">"in(select"</literal></expr></argument>,<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IdChar</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>, <argument><expr><literal type="string">"in(with"</literal></expr></argument>,<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IdChar</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>nParen</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>z</name><index>[<expr><name>n</name><operator>+</operator><name>k</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>n</name><operator>+</operator><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">'('</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nParen</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>z</name><index>[<expr><name>n</name><operator>+</operator><name>k</name></expr>]</index></name><operator>==</operator><literal type="char">')'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>nParen</name><operator>--</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>nParen</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block">/* k is the number of bytes in the "..." within "in(...)" */</comment>
    <if_stmt><if>if<condition>( <expr><name>k</name><operator>&lt;</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><operator>(</operator><literal type="number">5</literal><operator>-</operator><name>k</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>n</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>j</name><operator>-</operator><operator>(</operator><name>n</name><operator>+</operator><name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>k</name><operator>&gt;</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">5</literal></expr></argument>, <argument><expr><name>z</name><operator>+</operator><name>n</name><operator>+</operator><name>k</name></expr></argument>, <argument><expr><name>j</name><operator>-</operator><operator>(</operator><name>n</name><operator>+</operator><name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>j</name> <operator>=</operator> <name>j</name><operator>-</operator><name>k</name><operator>+</operator><literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>z</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>z</name><operator>+</operator><name>n</name></expr></argument>, <argument><expr><literal type="string">"?,?,?"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>z</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** For testing purposes, or to build a stand-alone SQL normalizer program,
** compile this one source file with the -DSQLITE_NORMALIZE_CLI and link
** it against any SQLite library.  The resulting command-line program will
** run sqlite3_normalize() over the text of all files named on the command-
** line and show the result on standard output.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_NORMALIZE_CLI</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Break zIn up into separate SQL statements and run sqlite3_normalize()
** on each one.  Print the result of each run.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>normalizeFile</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zIn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>zIn</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>cSaved</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">';'</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>cSaved</name> <operator>=</operator> <name><name>zIn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zIn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_complete</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name> <init>= <expr><call><name>sqlite3_normalize</name><argument_list>(<argument><expr><name>zIn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zOut</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: %s\n"</literal></expr></argument>, <argument><expr><name>zIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>zIn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cSaved</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>zIn</name> <operator>+=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>zIn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cSaved</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** The main routine for "sql_normalize".  Read files named on the
** command-line and run the text of each through sqlite3_normalize().
*/</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>sz</name></decl>, <decl><type ref="prev"/><name>got</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>in</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"cannot open \"%s\"\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zBuf</name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>sz</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zBuf</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to malloc for %lld bytes\n"</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>got</name><operator>!=</operator><name>sz</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"only able to read %lld of %lld bytes from \"%s\"\n"</literal></expr></argument>,
              <argument><expr><name>got</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>got</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>normalizeFile</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_NORMALIZE_CLI */</comment>
</unit>
