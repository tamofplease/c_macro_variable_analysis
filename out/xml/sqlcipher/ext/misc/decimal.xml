<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/misc/decimal.c"><comment type="block">/*
** 2020-06-22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** Routines to implement arbitrary-precision decimal math.
**
** The focus here is on simplicity and correctness, not performance.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Mark a function parameter as unused, to suppress nuisance compiler
** warnings. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>UNUSED_PARAMETER</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED_PARAMETER</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(void)(X)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* A decimal object */</comment>
<typedef>typedef <type><name><name>struct</name> <name>Decimal</name></name></type> <name>Decimal</name>;</typedef>
<struct>struct <name>Decimal</name> <block>{
  <decl_stmt><decl><type><name>char</name></type> <name>sign</name></decl>;</decl_stmt>        <comment type="block">/* 0 for positive, 1 for negative */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>oom</name></decl>;</decl_stmt>         <comment type="block">/* True if an OOM is encountered */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>isNull</name></decl>;</decl_stmt>      <comment type="block">/* True if holds a NULL rather than a number */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>isInit</name></decl>;</decl_stmt>      <comment type="block">/* True upon initialization */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nDigit</name></decl>;</decl_stmt>       <comment type="block">/* Total number of digits */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFrac</name></decl>;</decl_stmt>        <comment type="block">/* Number of digits to the right of the decimal point */</comment>
  <decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>   <comment type="block">/* Array of digits.  Most significant first. */</comment>
}</block>;</struct>

<comment type="block">/*
** Release memory held by a Decimal, but do not free the object itself.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimal_clear</name><parameter_list>(<parameter><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Destroy a Decimal object
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimal_free</name><parameter_list>(<parameter><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>decimal_clear</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Allocate a new Decimal object.  Initialize it to the number given
** by the input string.
*/</comment>
<function><type><specifier>static</specifier> <name>Decimal</name> <modifier>*</modifier></type><name>decimal_new</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nAlt</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zAlt</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iExp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>new_no_mem</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oom</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isInit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zAlt</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>nAlt</name></expr><operator>,</operator>
    <expr><name>zIn</name> <operator>=</operator> <name>zAlt</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NULL</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>p</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zIn</name> <operator>=</operator> <call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>new_no_mem</name>;</goto></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><call><name>isspace</name><argument_list>(<argument><expr><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
  <if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>zIn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'.'</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'e'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'E'</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>j</name><operator>&gt;=</operator><name>n</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>neg</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>zIn</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="char">'+'</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <while>while<condition>( <expr><name>j</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name>iExp</name><operator>&lt;</operator><literal type="number">1000000</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>zIn</name><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>zIn</name><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>iExp</name> <operator>=</operator> <name>iExp</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name><name>zIn</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if<condition>( <expr><name>neg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iExp</name> <operator>=</operator> <operator>-</operator><name>iExp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>-</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iExp</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>iExp</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>-=</operator> <name>iExp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>iExp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iExp</name> <operator>-=</operator> <name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>iExp</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>   
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+</operator> <name>iExp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>new_no_mem</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+=</operator> <name>iExp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iExp</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nExtra</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>iExp</name> <operator>=</operator> <operator>-</operator><name>iExp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nExtra</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nExtra</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>nExtra</name><operator>&gt;=</operator><name>iExp</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>+=</operator> <name>iExp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>iExp</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iExp</name> <operator>-=</operator> <name>nExtra</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>iExp</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+</operator> <name>iExp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>new_no_mem</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>+</operator><name>iExp</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iExp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+=</operator> <name>iExp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>+=</operator> <name>iExp</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>p</name></expr>;</return>

<label><name>new_no_mem</name>:</label>
  <if_stmt><if>if<condition>( <expr><name>pCtx</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Make the given Decimal the result.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimal_result</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>oom</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>isNull</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_null</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name><operator>+</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>sign</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>z</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <while>while<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr>  )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>
    <do>do<block>{<block_content>
      <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block>while<condition>( <expr><name>j</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name></expr> )</condition>;</do>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** SQL Function:   decimal(X)
**
** Convert input X into decimal and then back into text
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimalFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_result</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Compare to Decimal objects.  Return negative, 0, or positive if the
** first object is less than, equal to, or greater than the second.
**
** Preconditions for this routine:
**
**    pA!=0
**    pA-&gt;isNull==0
**    pB!=0
**    pB-&gt;isNull==0
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>decimal_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Decimal</name> <modifier>*</modifier></type><name>pA</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Decimal</name> <modifier>*</modifier></type><name>pB</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nASig</name></decl>, <decl><type ref="prev"/><name>nBSig</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pA</name><operator>-&gt;</operator><name>sign</name></name><operator>!=</operator><name><name>pB</name><operator>-&gt;</operator><name>sign</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><ternary><condition><expr><name><name>pA</name><operator>-&gt;</operator><name>sign</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pA</name><operator>-&gt;</operator><name>sign</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Decimal</name> <modifier>*</modifier></type><name>pTemp</name> <init>= <expr><name>pA</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pA</name> <operator>=</operator> <name>pB</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pB</name> <operator>=</operator> <name>pTemp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nASig</name> <operator>=</operator> <name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>-</operator> <name><name>pA</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nBSig</name> <operator>=</operator> <name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>-</operator> <name><name>pB</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nASig</name><operator>!=</operator><name>nBSig</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>nASig</name> <operator>-</operator> <name>nBSig</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pA</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>pB</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>-</operator> <name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** SQL Function:   decimal_cmp(X, Y)
**
** Return negative, zero, or positive if X is less then, equal to, or
** greater than Y.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimalCmpFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pB</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pA</name> <operator>=</operator> <call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pA</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pA</name><operator>-&gt;</operator><name>isNull</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>cmp_done</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pB</name> <operator>=</operator> <call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pB</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pB</name><operator>-&gt;</operator><name>isNull</name></name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>cmp_done</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>decimal_cmp</name><argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if<condition>( <expr><name>rc</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>cmp_done</name>:</label>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Expand the Decimal so that it has a least nDigit digits and nFrac
** digits to the right of the decimal point.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimal_expand</name><parameter_list>(<parameter><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nDigit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nFrac</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nAddSig</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nAddFrac</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>nAddFrac</name> <operator>=</operator> <name>nFrac</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nAddSig</name> <operator>=</operator> <operator>(</operator><name>nDigit</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name><operator>)</operator> <operator>-</operator> <name>nAddFrac</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nAddFrac</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nAddSig</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>nDigit</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oom</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nAddSig</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>+</operator><name>nAddSig</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nAddSig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+=</operator> <name>nAddSig</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nAddFrac</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nAddFrac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+=</operator> <name>nAddFrac</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>+=</operator> <name>nAddFrac</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Add the value pB into pA.
**
** Both pA and pB might become denormalized by this routine.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimal_add</name><parameter_list>(<parameter><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pA</name></decl></parameter>, <parameter><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pB</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nSig</name></decl>, <decl><type ref="prev"/><name>nFrac</name></decl>, <decl><type ref="prev"/><name>nDigit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pA</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pA</name><operator>-&gt;</operator><name>oom</name></name> <operator>||</operator> <name>pB</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pB</name><operator>-&gt;</operator><name>oom</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>oom</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pA</name><operator>-&gt;</operator><name>isNull</name></name> <operator>||</operator> <name><name>pB</name><operator>-&gt;</operator><name>isNull</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nSig</name> <operator>=</operator> <name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>-</operator> <name><name>pA</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nSig</name> <operator>&amp;&amp;</operator> <name><name>pA</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nSig</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nSig</name><operator>&lt;</operator><name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name><operator>-</operator><name><name>pB</name><operator>-&gt;</operator><name>nFrac</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nSig</name> <operator>=</operator> <name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>-</operator> <name><name>pB</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nFrac</name> <operator>=</operator> <name><name>pA</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nFrac</name><operator>&lt;</operator><name><name>pB</name><operator>-&gt;</operator><name>nFrac</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nFrac</name> <operator>=</operator> <name><name>pB</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>nDigit</name> <operator>=</operator> <name>nSig</name> <operator>+</operator> <name>nFrac</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_expand</name><argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>nDigit</name></expr></argument>, <argument><expr><name>nFrac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_expand</name><argument_list>(<argument><expr><name>pB</name></expr></argument>, <argument><expr><name>nDigit</name></expr></argument>, <argument><expr><name>nFrac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pA</name><operator>-&gt;</operator><name>oom</name></name> <operator>||</operator> <name><name>pB</name><operator>-&gt;</operator><name>oom</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>oom</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pA</name><operator>-&gt;</operator><name>sign</name></name><operator>==</operator><name><name>pB</name><operator>-&gt;</operator><name>sign</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>nDigit</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>pA</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>pB</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>carry</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>x</name><operator>&gt;=</operator><literal type="number">10</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>aA</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>aB</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>borrow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pA</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>pB</name><operator>-&gt;</operator><name>a</name></name></expr></argument>, <argument><expr><name>nDigit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>aA</name> <operator>=</operator> <name><name>pB</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>aB</name> <operator>=</operator> <name><name>pA</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>!</operator><name><name>pA</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>aA</name> <operator>=</operator> <name><name>pA</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>aB</name> <operator>=</operator> <name><name>pB</name><operator>-&gt;</operator><name>a</name></name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>nDigit</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>aA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>aB</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>borrow</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name><operator>+</operator><literal type="number">10</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>borrow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Compare text in decimal order.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>decimalCollFunc</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>notUsed</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nKey1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nKey2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zA</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pKey1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>zB</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name><operator>*</operator><operator>)</operator><name>pKey2</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pA</name> <init>= <expr><call><name>decimal_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><name>zA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pB</name> <init>= <expr><call><name>decimal_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><name>zB</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>notUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pA</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>pB</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>decimal_cmp</name><argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** SQL Function:   decimal_add(X, Y)
**                 decimal_sub(X, Y)
**
** Return the sum or difference of X and Y.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimalAddFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pA</name> <init>= <expr><call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pB</name> <init>= <expr><call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_add</name><argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_result</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimalSubFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pA</name> <init>= <expr><call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pB</name> <init>= <expr><call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pB</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pB</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>!</operator><name><name>pB</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decimal_add</name><argument_list>(<argument><expr><name>pA</name></expr></argument>, <argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>decimal_result</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Aggregate funcion:   decimal_sum(X)
**
** Works like sum() except that it uses decimal arithmetic for unlimited
** precision.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimalSumStep</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pArg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>isInit</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isInit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>a</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>oom</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pArg</name> <operator>=</operator> <call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_add</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimalSumInverse</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pArg</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pArg</name> <operator>=</operator> <call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pArg</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pArg</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>!</operator><name><name>pArg</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>decimal_add</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimalSumValue</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>decimal_result</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimalSumFinalize</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>decimal_result</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_clear</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** SQL Function:   decimal_mul(X, Y)
**
** Return the product of X and Y.
**
** All significant digits after the decimal point are retained.
** Trailing zeros after the decimal point are omitted as long as
** the number of digits after the decimal point is no less than
** either the number of digits in either input.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>decimalMulFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pA</name> <init>= <expr><call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Decimal</name> <modifier>*</modifier></type><name>pB</name> <init>= <expr><call><name>decimal_new</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>signed</name> <name>char</name> <modifier>*</modifier></type><name>acc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>minFrac</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pA</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pA</name><operator>-&gt;</operator><name>oom</name></name> <operator>||</operator> <name><name>pA</name><operator>-&gt;</operator><name>isNull</name></name>
   <operator>||</operator> <name>pB</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pB</name><operator>-&gt;</operator><name>oom</name></name> <operator>||</operator> <name><name>pB</name><operator>-&gt;</operator><name>isNull</name></name></expr> 
  )</condition><block>{<block_content>
    <goto>goto <name>mul_end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>acc</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+</operator> <name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>acc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>mul_end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>acc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+</operator> <name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>minFrac</name> <operator>=</operator> <name><name>pA</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pB</name><operator>-&gt;</operator><name>nFrac</name></name><operator>&lt;</operator><name>minFrac</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minFrac</name> <operator>=</operator> <name><name>pB</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>signed</name> <name>char</name></type> <name>f</name> <init>= <expr><name><name>pA</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>k</name><operator>=</operator><name>i</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr><operator>,</operator> <expr><name>k</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>acc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>f</name><operator>*</operator><name><name>pB</name><operator>-&gt;</operator><name>a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>acc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>x</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>carry</name> <operator>=</operator> <name>x</name><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>acc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>acc</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>x</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>acc</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>x</name><operator>/</operator><literal type="number">10</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pA</name><operator>-&gt;</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>a</name></name> <operator>=</operator> <name>acc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>acc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+=</operator> <name><name>pB</name><operator>-&gt;</operator><name>nDigit</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>nFrac</name></name> <operator>+=</operator> <name><name>pB</name><operator>-&gt;</operator><name>nFrac</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>sign</name></name> <operator>^=</operator> <name><name>pB</name><operator>-&gt;</operator><name>sign</name></name></expr>;</expr_stmt>
  <while>while<condition>( <expr><name><name>pA</name><operator>-&gt;</operator><name>nFrac</name></name><operator>&gt;</operator><name>minFrac</name> <operator>&amp;&amp;</operator> <name><name>pA</name><operator>-&gt;</operator><name>a</name><index>[<expr><name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>nFrac</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pA</name><operator>-&gt;</operator><name>nDigit</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>decimal_result</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>mul_end</name>:</label>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>acc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>decimal_free</name><argument_list>(<argument><expr><name>pB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_decimal_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFuncName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nArg</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xFunc</name>)<parameter_list>(<parameter><decl><type><name>sqlite3_context</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>sqlite3_value</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  }</block> <decl><name><name>aFunc</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"decimal"</literal></expr>,       <expr><literal type="number">1</literal></expr>,   <expr><name>decimalFunc</name></expr>        }</block></expr>,
    <expr><block>{ <expr><literal type="string">"decimal_cmp"</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><name>decimalCmpFunc</name></expr>     }</block></expr>,
    <expr><block>{ <expr><literal type="string">"decimal_add"</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><name>decimalAddFunc</name></expr>     }</block></expr>,
    <expr><block>{ <expr><literal type="string">"decimal_sub"</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><name>decimalSubFunc</name></expr>     }</block></expr>,
    <expr><block>{ <expr><literal type="string">"decimal_mul"</literal></expr>,   <expr><literal type="number">2</literal></expr>,   <expr><name>decimalMulFunc</name></expr>     }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErrMsg</name></expr>;</expr_stmt>  <comment type="block">/* Unused parameter */</comment>

  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aFunc</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aFunc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>aFunc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zFuncName</name></expr></argument>, <argument><expr><name><name>aFunc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nArg</name></expr></argument>,
                   <argument><expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITE_INNOCUOUS</name><operator>|</operator><name>SQLITE_DETERMINISTIC</name></expr></argument>,
                   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>aFunc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_window_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"decimal_sum"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                   <argument><expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITE_INNOCUOUS</name><operator>|</operator><name>SQLITE_DETERMINISTIC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                   <argument><expr><name>decimalSumStep</name></expr></argument>, <argument><expr><name>decimalSumFinalize</name></expr></argument>,
                   <argument><expr><name>decimalSumValue</name></expr></argument>, <argument><expr><name>decimalSumInverse</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_collation</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"decimal"</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>,
                                  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>decimalCollFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
