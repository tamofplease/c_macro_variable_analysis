<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/misc/memstat.c"><comment type="block">/*
** 2018-09-27
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file demonstrates an eponymous virtual table that returns information
** from sqlite3_status64() and sqlite3_db_status().
**
** Usage example:
**
**     .load ./memstat
**     .mode quote
**     .header on
**     SELECT * FROM memstat;
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_MEMSTATVTAB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITEINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>

<comment type="block">/* memstat_vtab is a subclass of sqlite3_vtab which will
** serve as the underlying representation of a memstat virtual table
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>memstat_vtab</name></name></type> <name>memstat_vtab</name>;</typedef>
<struct>struct <name>memstat_vtab</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>base</name></decl>;</decl_stmt>  <comment type="block">/* Base class - must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>        <comment type="block">/* Database connection for this memstat vtab */</comment>
}</block>;</struct>

<comment type="block">/* memstat_cursor is a subclass of sqlite3_vtab_cursor which will
** serve as the underlying representation of a cursor that scans
** over rows of the result
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>memstat_cursor</name></name></type> <name>memstat_cursor</name>;</typedef>
<struct>struct <name>memstat_cursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>base</name></decl>;</decl_stmt>  <comment type="block">/* Base class - must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>               <comment type="block">/* Database connection for this cursor */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iRowid</name></decl>;</decl_stmt>                <comment type="block">/* Current row in aMemstatColumn[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>                   <comment type="block">/* Which schema we are looking at */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nDb</name></decl>;</decl_stmt>                   <comment type="block">/* Number of schemas */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azDb</name></decl>;</decl_stmt>               <comment type="block">/* Names of all schemas */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name><name>aVal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>     <comment type="block">/* Result values */</comment>
}</block>;</struct>

<comment type="block">/*
** The memstatConnect() method is invoked to create a new
** memstat_vtab that describes the memstat virtual table.
**
** Think of this routine as the constructor for memstat_vtab objects.
**
** All this routine needs to do is:
**
**    (1) Allocate the memstat_vtab object and initialize all fields.
**
**    (2) Tell SQLite (via the sqlite3_declare_vtab() interface) what the
**        result set of queries against memstat will look like.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatConnect</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>memstat_vtab</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<comment type="block">/* Column numbers */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSV_COLUMN_NAME</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>   <comment type="block">/* Name of quantity being measured */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSV_COLUMN_SCHEMA</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>   <comment type="block">/* schema name */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSV_COLUMN_VALUE</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>   <comment type="block">/* Current value */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSV_COLUMN_HIWTR</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>   <comment type="block">/* Highwater mark */</comment>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_declare_vtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>,<argument><expr><literal type="string">"CREATE TABLE x(name,schema,value,hiwtr)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pNew</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This method is the destructor for memstat_cursor objects.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatDisconnect</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Constructor for a new memstat_cursor object.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>memstat_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pCur</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCur</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCur</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>memstat_vtab</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Clear all the schema names from a cursor
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>memstatClearSchema</name><parameter_list>(<parameter><decl><type><name>memstat_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>azDb</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pCur</name><operator>-&gt;</operator><name>nDb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>azDb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>azDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>azDb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>nDb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Fill in the azDb[] array for the cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatFindSchemas</name><parameter_list>(<parameter><decl><type><name>memstat_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>nDb</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="string">"PRAGMA database_list"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>az</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>az</name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>azDb</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name><name>pCur</name><operator>-&gt;</operator><name>nDb</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>az</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memstatClearSchema</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>azDb</name></name> <operator>=</operator> <name>az</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memstatClearSchema</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>azDb</name><index>[<expr><name><name>pCur</name><operator>-&gt;</operator><name>nDb</name></name></expr>]</index></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>nDb</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Destructor for a memstat_cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>memstat_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>memstat_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memstatClearSchema</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Allowed values for aMemstatColumn[].eType
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSV_GSTAT</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>          <comment type="block">/* sqlite3_status64() information */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSV_DB</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>          <comment type="block">/* sqlite3_db_status() information */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSV_ZIPVFS</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>          <comment type="block">/* ZIPVFS file-control with 64-bit return */</comment>

<comment type="block">/*
** An array of quantities that can be measured and reported by
** this virtual table
*/</comment>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>MemstatColumns</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>    <comment type="block">/* Symbolic name */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>eType</name></decl>;</decl_stmt>  <comment type="block">/* Type of interface */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>mNull</name></decl>;</decl_stmt>  <comment type="block">/* Bitmask of which columns are NULL */</comment>
                        <comment type="block">/* 2: dbname,  4: current,  8: hiwtr */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eOp</name></decl>;</decl_stmt>              <comment type="block">/* Opcode */</comment>
}</block> <decl><name><name>aMemstatColumn</name><index>[]</index></name> <init>= <expr><block>{
 <expr><block>{<expr><literal type="string">"MEMORY_USED"</literal></expr>,            <expr><name>MSV_GSTAT</name></expr>,  <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_STATUS_MEMORY_USED</name></expr>          }</block></expr>,
 <expr><block>{<expr><literal type="string">"MALLOC_SIZE"</literal></expr>,            <expr><name>MSV_GSTAT</name></expr>,  <expr><literal type="number">6</literal></expr>, <expr><name>SQLITE_STATUS_MALLOC_SIZE</name></expr>          }</block></expr>,
 <expr><block>{<expr><literal type="string">"MALLOC_COUNT"</literal></expr>,           <expr><name>MSV_GSTAT</name></expr>,  <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_STATUS_MALLOC_COUNT</name></expr>         }</block></expr>,
 <expr><block>{<expr><literal type="string">"PAGECACHE_USED"</literal></expr>,         <expr><name>MSV_GSTAT</name></expr>,  <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_STATUS_PAGECACHE_USED</name></expr>       }</block></expr>,
 <expr><block>{<expr><literal type="string">"PAGECACHE_OVERFLOW"</literal></expr>,     <expr><name>MSV_GSTAT</name></expr>,  <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_STATUS_PAGECACHE_OVERFLOW</name></expr>   }</block></expr>,
 <expr><block>{<expr><literal type="string">"PAGECACHE_SIZE"</literal></expr>,         <expr><name>MSV_GSTAT</name></expr>,  <expr><literal type="number">6</literal></expr>, <expr><name>SQLITE_STATUS_PAGECACHE_SIZE</name></expr>       }</block></expr>,
 <expr><block>{<expr><literal type="string">"PARSER_STACK"</literal></expr>,           <expr><name>MSV_GSTAT</name></expr>,  <expr><literal type="number">6</literal></expr>, <expr><name>SQLITE_STATUS_PARSER_STACK</name></expr>         }</block></expr>,
 <expr><block>{<expr><literal type="string">"DB_LOOKASIDE_USED"</literal></expr>,      <expr><name>MSV_DB</name></expr>,     <expr><literal type="number">2</literal></expr>, <expr><name>SQLITE_DBSTATUS_LOOKASIDE_USED</name></expr>     }</block></expr>,
 <expr><block>{<expr><literal type="string">"DB_LOOKASIDE_HIT"</literal></expr>,       <expr><name>MSV_DB</name></expr>,     <expr><literal type="number">6</literal></expr>, <expr><name>SQLITE_DBSTATUS_LOOKASIDE_HIT</name></expr>      }</block></expr>,
 <expr><block>{<expr><literal type="string">"DB_LOOKASIDE_MISS_SIZE"</literal></expr>, <expr><name>MSV_DB</name></expr>,     <expr><literal type="number">6</literal></expr>, <expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE</name></expr>}</block></expr>,
 <expr><block>{<expr><literal type="string">"DB_LOOKASIDE_MISS_FULL"</literal></expr>, <expr><name>MSV_DB</name></expr>,     <expr><literal type="number">6</literal></expr>, <expr><name>SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL</name></expr>}</block></expr>,
 <expr><block>{<expr><literal type="string">"DB_CACHE_USED"</literal></expr>,          <expr><name>MSV_DB</name></expr>,    <expr><literal type="number">10</literal></expr>, <expr><name>SQLITE_DBSTATUS_CACHE_USED</name></expr>         }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">3140000</literal></expr></cpp:if>
 <expr><block>{<expr><literal type="string">"DB_CACHE_USED_SHARED"</literal></expr>,   <expr><name>MSV_DB</name></expr>,    <expr><literal type="number">10</literal></expr>, <expr><name>SQLITE_DBSTATUS_CACHE_USED_SHARED</name></expr>  }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 <expr><block>{<expr><literal type="string">"DB_SCHEMA_USED"</literal></expr>,         <expr><name>MSV_DB</name></expr>,    <expr><literal type="number">10</literal></expr>, <expr><name>SQLITE_DBSTATUS_SCHEMA_USED</name></expr>        }</block></expr>,
 <expr><block>{<expr><literal type="string">"DB_STMT_USED"</literal></expr>,           <expr><name>MSV_DB</name></expr>,    <expr><literal type="number">10</literal></expr>, <expr><name>SQLITE_DBSTATUS_STMT_USED</name></expr>          }</block></expr>,
 <expr><block>{<expr><literal type="string">"DB_CACHE_HIT"</literal></expr>,           <expr><name>MSV_DB</name></expr>,    <expr><literal type="number">10</literal></expr>, <expr><name>SQLITE_DBSTATUS_CACHE_HIT</name></expr>          }</block></expr>,
 <expr><block>{<expr><literal type="string">"DB_CACHE_MISS"</literal></expr>,          <expr><name>MSV_DB</name></expr>,    <expr><literal type="number">10</literal></expr>, <expr><name>SQLITE_DBSTATUS_CACHE_MISS</name></expr>         }</block></expr>,
 <expr><block>{<expr><literal type="string">"DB_CACHE_WRITE"</literal></expr>,         <expr><name>MSV_DB</name></expr>,    <expr><literal type="number">10</literal></expr>, <expr><name>SQLITE_DBSTATUS_CACHE_WRITE</name></expr>        }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">3230000</literal></expr></cpp:if>
 <expr><block>{<expr><literal type="string">"DB_CACHE_SPILL"</literal></expr>,         <expr><name>MSV_DB</name></expr>,    <expr><literal type="number">10</literal></expr>, <expr><name>SQLITE_DBSTATUS_CACHE_SPILL</name></expr>        }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 <expr><block>{<expr><literal type="string">"DB_DEFERRED_FKS"</literal></expr>,        <expr><name>MSV_DB</name></expr>,    <expr><literal type="number">10</literal></expr>, <expr><name>SQLITE_DBSTATUS_DEFERRED_FKS</name></expr>       }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_ZIPVFS</name></cpp:ifdef>
 <expr><block>{<expr><literal type="string">"ZIPVFS_CACHE_USED"</literal></expr>,      <expr><name>MSV_ZIPVFS</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">231454</literal></expr> }</block></expr>,
 <expr><block>{<expr><literal type="string">"ZIPVFS_CACHE_HIT"</literal></expr>,       <expr><name>MSV_ZIPVFS</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">231455</literal></expr> }</block></expr>,
 <expr><block>{<expr><literal type="string">"ZIPVFS_CACHE_MISS"</literal></expr>,      <expr><name>MSV_ZIPVFS</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">231456</literal></expr> }</block></expr>,
 <expr><block>{<expr><literal type="string">"ZIPVFS_CACHE_WRITE"</literal></expr>,     <expr><name>MSV_ZIPVFS</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">231457</literal></expr> }</block></expr>,
 <expr><block>{<expr><literal type="string">"ZIPVFS_DIRECT_READ"</literal></expr>,     <expr><name>MSV_ZIPVFS</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">231458</literal></expr> }</block></expr>,
 <expr><block>{<expr><literal type="string">"ZIPVFS_DIRECT_BYTES"</literal></expr>,    <expr><name>MSV_ZIPVFS</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">231459</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_ZIPVFS */</comment>
}</block></expr></init></decl>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSV_NROW</name></cpp:macro> <cpp:value>(sizeof(aMemstatColumn)/sizeof(aMemstatColumn[0]))</cpp:value></cpp:define>

<comment type="block">/*
** Advance a memstat_cursor to its next row of output.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatNext</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>memstat_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>memstat_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&lt;=</operator><name>MSV_NROW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>aMemstatColumn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mNull</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>++</operator><name><name>pCur</name><operator>-&gt;</operator><name>iDb</name></name><operator>)</operator><operator>&gt;=</operator><name><name>pCur</name><operator>-&gt;</operator><name>nDb</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&gt;</operator><name>MSV_NROW</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>  <comment type="block">/* End of the table */</comment>
      <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iDb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>    
    <switch>switch<condition>( <expr><name><name>aMemstatColumn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eType</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>MSV_GSTAT</name></expr>:</case> <block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>sqlite3_libversion_number</name><argument_list>()</argument_list></call><operator>&gt;=</operator><literal type="number">3010000</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_status64</name><argument_list>(<argument><expr><name><name>aMemstatColumn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eOp</name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>xCur</name></decl>, <decl><type ref="prev"/><name>xHiwtr</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>sqlite3_status</name><argument_list>(<argument><expr><name><name>aMemstatColumn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eOp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xHiwtr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xCur</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>xHiwtr</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>MSV_DB</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>xCur</name></decl>, <decl><type ref="prev"/><name>xHiwtr</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3_db_status</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>aMemstatColumn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eOp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xCur</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xHiwtr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>xCur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>xHiwtr</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>MSV_ZIPVFS</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>azDb</name><index>[<expr><name><name>pCur</name><operator>-&gt;</operator><name>iDb</name></name></expr>]</index></name></expr></argument>,
                                  <argument><expr><name><name>aMemstatColumn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eOp</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
    <break>break;</break>
  </block_content>}</block></while>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
  

<comment type="block">/*
** Return values of columns for the row at which the memstat_cursor
** is currently pointing.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatColumn</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>,   <comment type="block">/* The cursor */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,       <comment type="block">/* First argument to sqlite3_result_...() */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>                    <comment type="block">/* Which column to return */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>memstat_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>memstat_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&lt;=</operator><name>MSV_NROW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>aMemstatColumn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mNull</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>iCol</name><operator>)</operator><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <switch>switch<condition>( <expr><name>iCol</name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>MSV_COLUMN_NAME</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>aMemstatColumn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>MSV_COLUMN_SCHEMA</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>azDb</name><index>[<expr><name><name>pCur</name><operator>-&gt;</operator><name>iDb</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>MSV_COLUMN_VALUE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>MSV_COLUMN_HIWTR</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>aVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the rowid for the current row.  In this implementation, the
** rowid is the same as the output value.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatRowid</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>memstat_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>memstat_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name><operator>*</operator><literal type="number">1000</literal> <operator>+</operator> <name><name>pCur</name><operator>-&gt;</operator><name>iDb</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return TRUE if the cursor has been moved off of the last
** row of output.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatEof</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>memstat_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>memstat_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&gt;</operator><name>MSV_NROW</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This method is called to "rewind" the memstat_cursor object back
** to the first row of output.  This method is always called at least
** once prior to any call to memstatColumn() or memstatRowid() or 
** memstatEof().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatFilter</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pVtabCursor</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idxStr</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>memstat_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>memstat_cursor</name> <operator>*</operator><operator>)</operator><name>pVtabCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>memstatFindSchemas</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>iDb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>memstatNext</name><argument_list>(<argument><expr><name>pVtabCursor</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** SQLite will invoke this method one or more times while planning a query
** that uses the memstat virtual table.  This routine needs to create
** a query plan for each invocation and compute an estimated cost for that
** plan.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>memstatBestIndex</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pIdxInfo</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">500</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>estimatedRows</name></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This following structure defines all the methods for the 
** memstat virtual table.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_module</name></type> <name>memstatModule</name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* iVersion */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xCreate */</comment>
  <expr><name>memstatConnect</name></expr>,            <comment type="block">/* xConnect */</comment>
  <expr><name>memstatBestIndex</name></expr>,          <comment type="block">/* xBestIndex */</comment>
  <expr><name>memstatDisconnect</name></expr>,         <comment type="block">/* xDisconnect */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xDestroy */</comment>
  <expr><name>memstatOpen</name></expr>,               <comment type="block">/* xOpen - open a cursor */</comment>
  <expr><name>memstatClose</name></expr>,              <comment type="block">/* xClose - close a cursor */</comment>
  <expr><name>memstatFilter</name></expr>,             <comment type="block">/* xFilter - configure scan constraints */</comment>
  <expr><name>memstatNext</name></expr>,               <comment type="block">/* xNext - advance a cursor */</comment>
  <expr><name>memstatEof</name></expr>,                <comment type="block">/* xEof - check for end of scan */</comment>
  <expr><name>memstatColumn</name></expr>,             <comment type="block">/* xColumn - read data */</comment>
  <expr><name>memstatRowid</name></expr>,              <comment type="block">/* xRowid - read data */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xUpdate */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xBegin */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xSync */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xCommit */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xRollback */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xFindMethod */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xRename */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xSavepoint */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xRelease */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xRollbackTo */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xShadowName */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<function><type><name>int</name></type> <name>sqlite3MemstatVtabInit</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sqlite_memstat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>memstatModule</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_CORE</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_memstat_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3MemstatVtabInit</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_CORE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_MEMSTATVTAB) */</comment>
</unit>
