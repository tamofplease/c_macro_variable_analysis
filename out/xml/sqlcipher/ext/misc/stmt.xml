<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/misc/stmt.c"><comment type="block">/*
** 2017-05-31
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file demonstrates an eponymous virtual table that returns information
** about all prepared statements for the database connection.
**
** Usage example:
**
**     .load ./stmt
**     .mode line
**     .header on
**     SELECT * FROM stmt;
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_STMTVTAB</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITEINT_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_NUM_INTEGER_COLUMN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<typedef>typedef <type><name><name>struct</name> <name>StmtRow</name></name></type> <name>StmtRow</name>;</typedef>
<struct>struct <name>StmtRow</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iRowid</name></decl>;</decl_stmt>                <comment type="block">/* Rowid value */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>                          <comment type="block">/* column "sql" */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name><name>aCol</name><index>[<expr><name>STMT_NUM_INTEGER_COLUMN</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="block">/* all other column values */</comment>
  <decl_stmt><decl><type><name>StmtRow</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>                      <comment type="block">/* Next row to return */</comment>
}</block>;</struct>

<comment type="block">/* stmt_vtab is a subclass of sqlite3_vtab which will
** serve as the underlying representation of a stmt virtual table
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>stmt_vtab</name></name></type> <name>stmt_vtab</name>;</typedef>
<struct>struct <name>stmt_vtab</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>base</name></decl>;</decl_stmt>  <comment type="block">/* Base class - must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>        <comment type="block">/* Database connection for this stmt vtab */</comment>
}</block>;</struct>

<comment type="block">/* stmt_cursor is a subclass of sqlite3_vtab_cursor which will
** serve as the underlying representation of a cursor that scans
** over rows of the result
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>stmt_cursor</name></name></type> <name>stmt_cursor</name>;</typedef>
<struct>struct <name>stmt_cursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>base</name></decl>;</decl_stmt>  <comment type="block">/* Base class - must be first */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>               <comment type="block">/* Database connection for this cursor */</comment>
  <decl_stmt><decl><type><name>StmtRow</name> <modifier>*</modifier></type><name>pRow</name></decl>;</decl_stmt>             <comment type="block">/* Current row */</comment>
}</block>;</struct>

<comment type="block">/*
** The stmtConnect() method is invoked to create a new
** stmt_vtab that describes the stmt virtual table.
**
** Think of this routine as the constructor for stmt_vtab objects.
**
** All this routine needs to do is:
**
**    (1) Allocate the stmt_vtab object and initialize all fields.
**
**    (2) Tell SQLite (via the sqlite3_declare_vtab() interface) what the
**        result set of queries against stmt will look like.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtConnect</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type><name>argv</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>stmt_vtab</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<comment type="block">/* Column numbers */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_SQL</name></cpp:macro>     <cpp:value>0</cpp:value></cpp:define>   <comment type="block">/* SQL for the statement */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_NCOL</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>   <comment type="block">/* Number of result columns */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_RO</name></cpp:macro>      <cpp:value>2</cpp:value></cpp:define>   <comment type="block">/* True if read-only */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_BUSY</name></cpp:macro>    <cpp:value>3</cpp:value></cpp:define>   <comment type="block">/* True if currently busy */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_NSCAN</name></cpp:macro>   <cpp:value>4</cpp:value></cpp:define>   <comment type="block">/* SQLITE_STMTSTATUS_FULLSCAN_STEP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_NSORT</name></cpp:macro>   <cpp:value>5</cpp:value></cpp:define>   <comment type="block">/* SQLITE_STMTSTATUS_SORT */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_NAIDX</name></cpp:macro>   <cpp:value>6</cpp:value></cpp:define>   <comment type="block">/* SQLITE_STMTSTATUS_AUTOINDEX */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_NSTEP</name></cpp:macro>   <cpp:value>7</cpp:value></cpp:define>   <comment type="block">/* SQLITE_STMTSTATUS_VM_STEP */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_REPREP</name></cpp:macro>  <cpp:value>8</cpp:value></cpp:define>   <comment type="block">/* SQLITE_STMTSTATUS_REPREPARE */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_RUN</name></cpp:macro>     <cpp:value>9</cpp:value></cpp:define>   <comment type="block">/* SQLITE_STMTSTATUS_RUN */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STMT_COLUMN_MEM</name></cpp:macro>    <cpp:value>10</cpp:value></cpp:define>   <comment type="block">/* SQLITE_STMTSTATUS_MEMUSED */</comment>


  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_declare_vtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>,
     <argument><expr><literal type="string">"CREATE TABLE x(sql,ncol,ro,busy,nscan,nsort,naidx,nstep,"</literal>
                    <literal type="string">"reprep,run,mem)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pNew</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNew</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This method is the destructor for stmt_cursor objects.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtDisconnect</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Constructor for a new stmt_cursor object.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>stmt_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pCur</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCur</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCur</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCur</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>stmt_vtab</name><operator>*</operator><operator>)</operator><name>p</name><operator>)</operator><operator>-&gt;</operator><name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppCursor</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>stmtCsrReset</name><parameter_list>(<parameter><decl><type><name>stmt_cursor</name> <modifier>*</modifier></type><name>pCur</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>StmtRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StmtRow</name> <modifier>*</modifier></type><name>pNext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>pRow</name><operator>=</operator><name><name>pCur</name><operator>-&gt;</operator><name>pRow</name></name></expr>;</init> <condition><expr><name>pRow</name></expr>;</condition> <incr><expr><name>pRow</name><operator>=</operator><name>pNext</name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>pNext</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>pRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Destructor for a stmt_cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>stmtCsrReset</name><argument_list>(<argument><expr><operator>(</operator><name>stmt_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Advance a stmt_cursor to its next row of output.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtNext</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>stmt_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>stmt_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StmtRow</name> <modifier>*</modifier></type><name>pNext</name> <init>= <expr><name><name>pCur</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>pNext</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>pRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCur</name><operator>-&gt;</operator><name>pRow</name></name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return values of columns for the row at which the stmt_cursor
** is currently pointing.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtColumn</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>,   <comment type="block">/* The cursor */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,       <comment type="block">/* First argument to sqlite3_result_...() */</comment>
  <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>                       <comment type="block">/* Which column to return */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>stmt_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>stmt_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StmtRow</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name><name>pCur</name><operator>-&gt;</operator><name>pRow</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name>STMT_COLUMN_SQL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>zSql</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the rowid for the current row.  In this implementation, the
** rowid is the same as the output value.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtRowid</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>stmt_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>stmt_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <name><name>pCur</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return TRUE if the cursor has been moved off of the last
** row of output.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtEof</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>stmt_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>stmt_cursor</name><operator>*</operator><operator>)</operator><name>cur</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pCur</name><operator>-&gt;</operator><name>pRow</name></name><operator>==</operator><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This method is called to "rewind" the stmt_cursor object back
** to the first row of output.  This method is always called at least
** once prior to any call to stmtColumn() or stmtRowid() or 
** stmtEof().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtFilter</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pVtabCursor</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idxStr</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>stmt_cursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><operator>(</operator><name>stmt_cursor</name> <operator>*</operator><operator>)</operator><name>pVtabCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iRowid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>StmtRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>stmtCsrReset</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ppRow</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCur</name><operator>-&gt;</operator><name>pRow</name></name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>p</name><operator>=</operator><call><name>sqlite3_next_stmt</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>=</operator><call><name>sqlite3_next_stmt</name><argument_list>(<argument><expr><name><name>pCur</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nSql</name> <init>= <expr><ternary><condition><expr><name>zSql</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StmtRow</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><operator>(</operator><name>StmtRow</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StmtRow</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StmtRow</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zSql</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>zSql</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNew</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>zSql</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>nSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_NCOL</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_RO</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_stmt_readonly</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_BUSY</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_stmt_busy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_NSCAN</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(
        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>SQLITE_STMTSTATUS_FULLSCAN_STEP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_NSORT</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(
        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>SQLITE_STMTSTATUS_SORT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_NAIDX</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(
        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>SQLITE_STMTSTATUS_AUTOINDEX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_NSTEP</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(
        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>SQLITE_STMTSTATUS_VM_STEP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_REPREP</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(
        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>SQLITE_STMTSTATUS_REPREPARE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_RUN</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(
        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>SQLITE_STMTSTATUS_RUN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aCol</name><index>[<expr><name>STMT_COLUMN_MEM</name></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_stmt_status</name><argument_list>(
        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>SQLITE_STMTSTATUS_MEMUSED</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <name>iRowid</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ppRow</name> <operator>=</operator> <operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** SQLite will invoke this method one or more times while planning a query
** that uses the stmt virtual table.  This routine needs to create
** a query plan for each invocation and compute an estimated cost for that
** plan.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmtBestIndex</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pIdxInfo</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">500</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIdxInfo</name><operator>-&gt;</operator><name>estimatedRows</name></name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This following structure defines all the methods for the 
** stmt virtual table.
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_module</name></type> <name>stmtModule</name> <init>= <expr><block>{
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* iVersion */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xCreate */</comment>
  <expr><name>stmtConnect</name></expr>,               <comment type="block">/* xConnect */</comment>
  <expr><name>stmtBestIndex</name></expr>,             <comment type="block">/* xBestIndex */</comment>
  <expr><name>stmtDisconnect</name></expr>,            <comment type="block">/* xDisconnect */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xDestroy */</comment>
  <expr><name>stmtOpen</name></expr>,                  <comment type="block">/* xOpen - open a cursor */</comment>
  <expr><name>stmtClose</name></expr>,                 <comment type="block">/* xClose - close a cursor */</comment>
  <expr><name>stmtFilter</name></expr>,                <comment type="block">/* xFilter - configure scan constraints */</comment>
  <expr><name>stmtNext</name></expr>,                  <comment type="block">/* xNext - advance a cursor */</comment>
  <expr><name>stmtEof</name></expr>,                   <comment type="block">/* xEof - check for end of scan */</comment>
  <expr><name>stmtColumn</name></expr>,                <comment type="block">/* xColumn - read data */</comment>
  <expr><name>stmtRowid</name></expr>,                 <comment type="block">/* xRowid - read data */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xUpdate */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xBegin */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xSync */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xCommit */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xRollback */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xFindMethod */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xRename */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xSavepoint */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xRelease */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xRollbackTo */</comment>
  <expr><literal type="number">0</literal></expr>,                         <comment type="block">/* xShadowName */</comment>
}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_VIRTUALTABLE */</comment>

<function><type><name>int</name></type> <name>sqlite3StmtVtabInit</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"sqlite_stmt"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmtModule</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_CORE</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><name>int</name></type> <name>sqlite3_stmt_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifndef>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3StmtVtabInit</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_CORE */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_STMTVTAB) */</comment>
</unit>
