<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/misc/cksumvfs.c"><comment type="block">/*
** 2020-04-20
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file implements a VFS shim that writes a checksum on each page
** of an SQLite database file.  When reading pages, the checksum is verified
** and an error is raised if the checksum is incorrect.
**
** COMPILING
**
** This extension requires SQLite 3.32.0 or later.  It uses the
** sqlite3_database_file_object() interface which was added in
** version 3.32.0, so it will not link with an earlier version of
** SQLite.
**
** To build this extension as a separately loaded shared library or
** DLL, use compiler command-lines similar to the following:
**
**   (linux)    gcc -fPIC -shared cksumvfs.c -o cksumvfs.so
**   (mac)      clang -fPIC -dynamiclib cksumvfs.c -o cksumvfs.dylib
**   (windows)  cl cksumvfs.c -link -dll -out:cksumvfs.dll
**
** You may want to add additional compiler options, of course,
** according to the needs of your project.
**
** If you want to statically link this extension with your product,
** then compile it like any other C-language module but add the
** "-DSQLITE_CKSUMVFS_STATIC" option so that this module knows that
** it is being statically linked rather than dynamically linked
**
** LOADING
**
** To load this extension as a shared library, you first have to
** bring up a dummy SQLite database connection to use as the argument
** to the sqlite3_load_extension() API call.  Then you invoke the
** sqlite3_load_extension() API and shutdown the dummy database
** connection.  All subsequent database connections that are opened
** will include this extension.  For example:
**
**     sqlite3 *db;
**     sqlite3_open(":memory:", &amp;db);
**     sqlite3_load_extention(db, "./cksumvfs");
**     sqlite3_close(db);
**
** If this extension is compiled with -DSQLITE_CKSUMVFS_STATIC and
** statically linked against the application, initialize it using
** a single API call as follows:
**
**     sqlite3_register_cksumvfs();
**
** Cksumvfs is a VFS Shim. When loaded, "cksmvfs" becomes the new
** default VFS and it uses the prior default VFS as the next VFS
** down in the stack.  This is normally what you want.  However, in
** complex situations where multiple VFS shims are being loaded,
** it might be important to ensure that cksumvfs is loaded in the
** correct order so that it sequences itself into the default VFS
** Shim stack in the right order.
**
** USING
**
** Open database connections using the sqlite3_open() or 
** sqlite3_open_v2() interfaces, as normal.  Ordinary database files
** (without a checksum) will operate normally.  Databases with 
** checksums will return an SQLITE_IOERR_DATA error if a page is
** encountered that contains an invalid checksum.
**
** Checksumming only works on databases that have a reserve-bytes
** value of exactly 8.  The default value for reserve-bytes is 0.
** Hence, newly created database files will omit the checksum by
** default.  To create a database that includes a checksum, change
** the reserve-bytes value to 8 by runing:
**
**    int n = 8;
**    sqlite3_file_control(db, 0, SQLITE_FCNTL_RESERVE_BYTES, &amp;n);
**
** If you do this immediately after creating a new database file,
** before anything else has been written into the file, then that
** might be all that you need to do.  Otherwise, the API call
** above should be followed by:
**
**    sqlite3_exec(db, "VACUUM", 0, 0, 0);
**
** It never hurts to run the VACUUM, even if you don't need it.
** If the database is in WAL mode, you should shutdown and
** reopen all database connections before continuing.
**
** From the CLI, use the ".filectrl reserve_bytes 8" command, 
** followed by "VACUUM;".
**
** Note that SQLite allows the number of reserve-bytes to be
** increased but not decreased.  So if a database file already
** has a reserve-bytes value greater than 8, there is no way to
** activate checksumming on that database, other than to dump
** and restore the database file.  Note also that other extensions
** might also make use of the reserve-bytes.  Checksumming will
** be incompatible with those other extensions.
**
** VERIFICATION OF CHECKSUMS
**
** If any checksum is incorrect, the "PRAGMA quick_check" command
** will find it.  To verify that checksums are actually enabled
** and running, use the following query:
**
**   SELECT count(*), verify_checksum(data)
**     FROM sqlite_dbpage
**    GROUP BY 2;
**
** There are three possible outputs form the verify_checksum()
** function: 1, 0, and NULL.  1 is returned if the checksum is
** correct.  0 is returned if the checksum is incorrect.  NULL
** is returned if the page is unreadable.  If checksumming is
** enabled, the read will fail if the checksum is wrong, so the
** usual result from verify_checksum() on a bad checksum is NULL.
**
** If everything is OK, the query above should return a single
** row where the second column is 1.  Any other result indicates
** either that there is a checksum error, or checksum validation
** is disabled.
**
** CONTROLLING CHECKSUM VERIFICATION
**
** The cksumvfs extension implements a new PRAGMA statement that can
** be used to disable, re-enable, or query the status of checksum
** verification:
**
**    PRAGMA checksum_verification;          -- query status
**    PRAGMA checksum_verification=OFF;      -- disable verification
**    PRAGMA checksum_verification=ON;       -- re-enable verification
**
** The "checksum_verification" pragma will return "1" (true) or "0"
** (false) if checksum verification is enabled or disabled, respectively.
** "Verification" in this context means the feature that causes
** SQLITE_IOERR_DATA errors if a checksum mismatch is detected while
** reading.  Checksums are always kept up-to-date as long as the
** reserve-bytes value of the database is 8, regardless of the setting
** of this pragma.  Checksum verification can be disabled (for example)
** to do forensic analysis of a database that has previously reported
** a checksum error.
**
** The "checksum_verification" pragma will always respond with "0" if
** the database file does not have a reserve-bytes value of 8.  The
** pragma will return no rows at all if the cksumvfs extension is
** not loaded.
**
** IMPLEMENTATION NOTES
**
** The checksum is stored in the last 8 bytes of each page.  This
** module only operates if the "bytes of reserved space on each page"
** value at offset 20 the SQLite database header is exactly 8.  If
** the reserved-space value is not 8, this module is a no-op.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_AMALGAMATION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CKSUMVFS_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_CKSUMVFS_STATIC</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_CKSUMVFS_STATIC</name></cpp:ifdef>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
  <macro><name>SQLITE_EXTENSION_INIT1</name></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>


<comment type="block">/*
** Forward declaration of objects used by this utility
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>sqlite3_vfs</name></name></type> <name>CksmVfs</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>CksmFile</name></name></type> <name>CksmFile</name>;</typedef>

<comment type="block">/*
** Useful datatype abbreviations
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_AMALGAMATION</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
  <typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Access to a lower-level VFS that (might) implement dynamic loading,
** access to randomness, etc.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIGVFS</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((sqlite3_vfs*)((p)-&gt;pAppData))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIGFILE</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((sqlite3_file*)(((CksmFile*)(p))+1))</cpp:value></cpp:define>

<comment type="block">/* An open file */</comment>
<struct>struct <name>CksmFile</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>    <comment type="block">/* IO methods */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFName</name></decl>;</decl_stmt>   <comment type="block">/* Original name of the file */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>computeCksm</name></decl>;</decl_stmt>     <comment type="block">/* True to compute checksums.
                        ** Always true if reserve size is 8. */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>verifyCksm</name></decl>;</decl_stmt>      <comment type="block">/* True to verify checksums */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>isWal</name></decl>;</decl_stmt>           <comment type="block">/* True if processing a WAL file */</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>inCkpt</name></decl>;</decl_stmt>          <comment type="block">/* Currently doing a checkpoint */</comment>
  <decl_stmt><decl><type><name>CksmFile</name> <modifier>*</modifier></type><name>pPartner</name></decl>;</decl_stmt>   <comment type="block">/* Ptr from WAL to main-db, or from main-db to WAL */</comment>
}</block>;</struct>

<comment type="block">/*
** Methods for CksmFile
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmRead</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmWrite</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmShmMap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iPg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgsz</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>volatile</specifier><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cksmShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deleteFlag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmFetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmUnfetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Methods for CksmVfs
*/</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_file</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>syncDir</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmAccess</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmFullPathname</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cksmDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cksmDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list>;</function_decl>
<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><call><name>cksmDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name> <operator>*</operator><name>pVfs</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator><name>p</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator><name>zSym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cksmDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>microseconds</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>cksmSetSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>sqlite3_syscall_ptr</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>sqlite3_syscall_ptr</name></type> <name>cksmGetSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cksmNextSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>sqlite3_vfs</name></type> <name>cksm_vfs</name> <init>= <expr><block>{
  <expr><literal type="number">3</literal></expr>,                            <comment type="block">/* iVersion (set when registered) */</comment>
  <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* szOsFile (set when registered) */</comment>
  <expr><literal type="number">1024</literal></expr>,                         <comment type="block">/* mxPathname */</comment>
  <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pNext */</comment>
  <expr><literal type="string">"cksmvfs"</literal></expr>,                    <comment type="block">/* zName */</comment>
  <expr><literal type="number">0</literal></expr>,                            <comment type="block">/* pAppData (set when registered) */</comment> 
  <expr><name>cksmOpen</name></expr>,                     <comment type="block">/* xOpen */</comment>
  <expr><name>cksmDelete</name></expr>,                   <comment type="block">/* xDelete */</comment>
  <expr><name>cksmAccess</name></expr>,                   <comment type="block">/* xAccess */</comment>
  <expr><name>cksmFullPathname</name></expr>,             <comment type="block">/* xFullPathname */</comment>
  <expr><name>cksmDlOpen</name></expr>,                   <comment type="block">/* xDlOpen */</comment>
  <expr><name>cksmDlError</name></expr>,                  <comment type="block">/* xDlError */</comment>
  <expr><name>cksmDlSym</name></expr>,                    <comment type="block">/* xDlSym */</comment>
  <expr><name>cksmDlClose</name></expr>,                  <comment type="block">/* xDlClose */</comment>
  <expr><name>cksmRandomness</name></expr>,               <comment type="block">/* xRandomness */</comment>
  <expr><name>cksmSleep</name></expr>,                    <comment type="block">/* xSleep */</comment>
  <expr><name>cksmCurrentTime</name></expr>,              <comment type="block">/* xCurrentTime */</comment>
  <expr><name>cksmGetLastError</name></expr>,             <comment type="block">/* xGetLastError */</comment>
  <expr><name>cksmCurrentTimeInt64</name></expr>,         <comment type="block">/* xCurrentTimeInt64 */</comment>
  <expr><name>cksmSetSystemCall</name></expr>,            <comment type="block">/* xSetSystemCall */</comment>
  <expr><name>cksmGetSystemCall</name></expr>,            <comment type="block">/* xGetSystemCall */</comment>
  <expr><name>cksmNextSystemCall</name></expr>            <comment type="block">/* xNextSystemCall */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_io_methods</name></type> <name>cksm_io_methods</name> <init>= <expr><block>{
  <expr><literal type="number">3</literal></expr>,                              <comment type="block">/* iVersion */</comment>
  <expr><name>cksmClose</name></expr>,                      <comment type="block">/* xClose */</comment>
  <expr><name>cksmRead</name></expr>,                       <comment type="block">/* xRead */</comment>
  <expr><name>cksmWrite</name></expr>,                      <comment type="block">/* xWrite */</comment>
  <expr><name>cksmTruncate</name></expr>,                   <comment type="block">/* xTruncate */</comment>
  <expr><name>cksmSync</name></expr>,                       <comment type="block">/* xSync */</comment>
  <expr><name>cksmFileSize</name></expr>,                   <comment type="block">/* xFileSize */</comment>
  <expr><name>cksmLock</name></expr>,                       <comment type="block">/* xLock */</comment>
  <expr><name>cksmUnlock</name></expr>,                     <comment type="block">/* xUnlock */</comment>
  <expr><name>cksmCheckReservedLock</name></expr>,          <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>cksmFileControl</name></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><name>cksmSectorSize</name></expr>,                 <comment type="block">/* xSectorSize */</comment>
  <expr><name>cksmDeviceCharacteristics</name></expr>,      <comment type="block">/* xDeviceCharacteristics */</comment>
  <expr><name>cksmShmMap</name></expr>,                     <comment type="block">/* xShmMap */</comment>
  <expr><name>cksmShmLock</name></expr>,                    <comment type="block">/* xShmLock */</comment>
  <expr><name>cksmShmBarrier</name></expr>,                 <comment type="block">/* xShmBarrier */</comment>
  <expr><name>cksmShmUnmap</name></expr>,                   <comment type="block">/* xShmUnmap */</comment>
  <expr><name>cksmFetch</name></expr>,                      <comment type="block">/* xFetch */</comment>
  <expr><name>cksmUnfetch</name></expr>                     <comment type="block">/* xUnfetch */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Do byte swapping on a unsigned 32-bit integer */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BYTESWAP32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( \
    (((x)&amp;0x000000FF)&lt;&lt;24) + (((x)&amp;0x0000FF00)&lt;&lt;8)  \
  + (((x)&amp;0x00FF0000)&gt;&gt;8)  + (((x)&amp;0xFF000000)&gt;&gt;24) \
)</cpp:value></cpp:define>

<comment type="block">/* Compute a checksum on a buffer */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cksmCompute</name><parameter_list>(
  <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>,           <comment type="block">/* Content to be checksummed */</comment>
  <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>,       <comment type="block">/* Bytes of content in a[].  Must be a multiple of 8. */</comment>
  <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>         <comment type="block">/* OUT: Final 8-byte checksum value output */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>s1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name> <modifier>*</modifier></type><name>aData</name> <init>= <expr><operator>(</operator><name>u32</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name> <modifier>*</modifier></type><name>aEnd</name> <init>= <expr><operator>(</operator><name>u32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><index>[<expr><name>nByte</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nByte</name><operator>&gt;=</operator><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>nByte</name><operator>&amp;</operator><literal type="number">0x00000007</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nByte</name><operator>&lt;=</operator><literal type="number">65536</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><literal type="number">1</literal> <operator>==</operator> <operator>*</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>x</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* Little-endian */</comment>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>s1</name> <operator>+=</operator> <operator>*</operator><name>aData</name><operator>++</operator> <operator>+</operator> <name>s2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>s2</name> <operator>+=</operator> <operator>*</operator><name>aData</name><operator>++</operator> <operator>+</operator> <name>s1</name></expr>;</expr_stmt>
    </block_content>}</block>while<condition>( <expr><name>aData</name><operator>&lt;</operator><name>aEnd</name></expr> )</condition>;</do>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Big-endian */</comment>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name>s1</name> <operator>+=</operator> <call><name>BYTESWAP32</name><argument_list>(<argument><expr><name><name>aData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>s2</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>s2</name> <operator>+=</operator> <call><name>BYTESWAP32</name><argument_list>(<argument><expr><name><name>aData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>s1</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>aData</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block>while<condition>( <expr><name>aData</name><operator>&lt;</operator><name>aEnd</name></expr> )</condition>;</do>
    <expr_stmt><expr><name>s1</name> <operator>=</operator> <call><name>BYTESWAP32</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s2</name> <operator>=</operator> <call><name>BYTESWAP32</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aOut</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aOut</name><operator>+</operator><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** SQL function:    verify_checksum(BLOB)
**
** Return 0 or 1 if the checksum is invalid or valid.  Or return
** NULL if the input is not a BLOB that is the right size for a
** database page.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cksmVerifyFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>cksum</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>data</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_BLOB</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>nByte</name><argument_list type="generic">&lt;<argument><expr><literal type="number">512</literal> <operator>||</operator> <name>nByte</name></expr></argument>&gt;</argument_list></name><literal type="number">65536</literal> <operator>||</operator> <operator>(</operator><name>nByte</name> <operator>&amp;</operator> <operator>(</operator><name>nByte</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>cksmCompute</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>nByte</name><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name><operator>+</operator><name>nByte</name><operator>-</operator><literal type="number">8</literal></expr></argument>,<argument><expr><name>cksum</name></expr></argument>,<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_CKSUMVFS_INIT_FUNCNAME</name></cpp:ifdef>
<comment type="block">/*
** SQL function:    initialize_cksumvfs(SCHEMANAME)
**
** This SQL functions (whose name is actually determined at compile-time
** by the value of the SQLITE_CKSUMVFS_INIT_FUNCNAME macro) invokes:
**
**   sqlite3_file_control(db, SCHEMANAME, SQLITE_FCNTL_RESERVE_BYTE, &amp;n);
**
** In order to set the reserve bytes value to 8, so that cksumvfs will
** operation.  This feature is provided (if and only if the
** SQLITE_CKSUMVFS_INIT_FUNCNAME compile-time option is set to a string
** which is the name of the SQL function) so as to provide the ability
** to invoke the file-control in programming languages that lack
** direct access to the sqlite3_file_control() interface (ex: Java).
**
** This interface is undocumented, apart from this comment.  Usage
** example:
**
**    1.  Compile with -DSQLITE_CKSUMVFS_INIT_FUNCNAME="ckvfs_init"
**    2.  Run:  "SELECT cksum_init('main'); VACUUM;"
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cksmInitFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>context</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSchemaName</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>sqlite3_context_db_handle</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSchemaName</name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_RESERVE_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* Return NULL */</comment>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_CKSUMBFS_INIT_FUNCNAME */</comment>

<comment type="block">/*
** Close a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CksmFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CksmFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name><operator>-&gt;</operator><name>pPartner</name></name><operator>==</operator><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name><operator>-&gt;</operator><name>pPartner</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set the computeCkSm and verifyCksm flags, if they need to be
** changed.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cksmSetFlags</name><parameter_list>(<parameter><decl><type><name>CksmFile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hasCorrectReserveSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>hasCorrectReserveSize</name><operator>!=</operator><name><name>p</name><operator>-&gt;</operator><name>computeCksm</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>computeCksm</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>verifyCksm</name></name> <operator>=</operator> <name>hasCorrectReserveSize</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name><operator>-&gt;</operator><name>verifyCksm</name></name> <operator>=</operator> <name>hasCorrectReserveSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name><operator>-&gt;</operator><name>computeCksm</name></name> <operator>=</operator> <name>hasCorrectReserveSize</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Read data from a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmRead</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CksmFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CksmFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iAmt</name><operator>&gt;=</operator><literal type="number">100</literal> <operator>&amp;&amp;</operator> <operator>(</operator>
          <call><name>memcmp</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><literal type="string">"SQLite format 3"</literal></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><literal type="string">"ZV-"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> 
    <operator>)</operator></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name>hasCorrectReserveSize</name> <init>= <expr><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">20</literal></expr>]</index></name><operator>==</operator><literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cksmSetFlags</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hasCorrectReserveSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* Verify the checksum if
    **    (1) the size indicates that we are dealing with a complete
    **        database page
    **    (2) checksum verification is enabled
    **    (3) we are not in the middle of checkpoint
    */</comment>
    <if_stmt><if>if<condition>( <expr><name>iAmt</name><operator>&gt;=</operator><literal type="number">512</literal>           <comment type="block">/* (1) */</comment>
     <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>verifyCksm</name></name>       <comment type="block">/* (2) */</comment>
     <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>inCkpt</name></name></expr>          <comment type="block">/* (3) */</comment>
    )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>u8</name></type> <name><name>cksum</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>cksmCompute</name><argument_list>(<argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>cksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBuf</name><operator>+</operator><name>iAmt</name><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>cksum</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_log</name><argument_list>(<argument><expr><name>SQLITE_IOERR_DATA</name></expr></argument>,
           <argument><expr><literal type="string">"checksum fault offset %lld of \"%s\""</literal></expr></argument>,
           <argument><expr><name>iOfst</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_IOERR_DATA</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Write data to a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmWrite</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>zBuf</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,
  <parameter><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CksmFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CksmFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOfst</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iAmt</name><operator>&gt;=</operator><literal type="number">100</literal> <operator>&amp;&amp;</operator> <operator>(</operator>
        <call><name>memcmp</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><literal type="string">"SQLite format 3"</literal></expr></argument>,<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>,<argument><expr><literal type="string">"ZV-"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> 
  <operator>)</operator></expr>)</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>hasCorrectReserveSize</name> <init>= <expr><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">20</literal></expr>]</index></name><operator>==</operator><literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cksmSetFlags</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>hasCorrectReserveSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/* If the write size is appropriate for a database page and if
  ** checksums where ever enabled, then it will be safe to compute
  ** the checksums.  The reserve byte size might have increased, but
  ** it will never decrease.  And because it cannot decrease, the
  ** checksum will not overwrite anything.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>iAmt</name><operator>&gt;=</operator><literal type="number">512</literal>
   <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>computeCksm</name></name>
   <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>inCkpt</name></name></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>cksmCompute</name><argument_list>(<argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name><operator>-</operator><literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zBuf</name><operator>)</operator><operator>+</operator><name>iAmt</name><operator>-</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Truncate a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmTruncate</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xTruncate</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Sync a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmSync</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current file-size of a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmFileSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CksmFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CksmFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileSize</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Lock a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Unlock a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmUnlock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eLock</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xUnlock</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmCheckReservedLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xCheckReservedLock</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** File control method. For custom operations on a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmFileControl</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CksmFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CksmFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_PRAGMA</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"checksum_verification"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zArg</name> <init>= <expr><name><name>azArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zArg</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;=</operator><literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>)</operator>
         <operator>||</operator> <call><name>sqlite3_strlike</name><argument_list>(<argument><expr><literal type="string">"enable%"</literal></expr></argument>,<argument><expr><name>zArg</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
         <operator>||</operator> <call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"yes"</literal></expr></argument>,<argument><expr><name>zArg</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>
         <operator>||</operator> <call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><literal type="string">"on"</literal></expr></argument>,<argument><expr><name>zArg</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>
        )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>verifyCksm</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>computeCksm</name></name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>verifyCksm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name><operator>-&gt;</operator><name>verifyCksm</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>verifyCksm</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>azArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>verifyCksm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_OK</name></expr>;</return>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>computeCksm</name></name> <operator>&amp;&amp;</operator> <name><name>azArg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>!=</operator><literal type="number">0</literal>
           <operator>&amp;&amp;</operator> <call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"page_size"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* Do not allow page size changes on a checksum database */</comment>
      <return>return <expr><name>SQLITE_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_CKPT_START</name> <operator>||</operator> <name>op</name><operator>==</operator><name>SQLITE_FCNTL_CKPT_DONE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>inCkpt</name></name> <operator>=</operator> <name>op</name><operator>==</operator><name>SQLITE_FCNTL_CKPT_START</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name><operator>-&gt;</operator><name>inCkpt</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>inCkpt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>op</name><operator>==</operator><name>SQLITE_FCNTL_CKSM_FILE</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* This VFS needs to obtain a pointer to the corresponding database
    ** file handle from within xOpen() calls to open wal files. To do this,
    ** it uses the sqlite3_database_file_object() API to obtain a pointer
    ** to the file-handle used by SQLite to access the db file. This is
    ** fine if cksmvfs happens to be the top-level VFS, but not if there
    ** are one or more wrapper VFS. To handle this case, this file-control
    ** is used to extract the cksmvfs file-handle from any wrapper file 
    ** handle.  */</comment>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFile</name> <init>= <expr><operator>(</operator><name>sqlite3_file</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppFile</name> <operator>=</operator> <operator>(</operator><name>sqlite3_file</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileControl</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>op</name><operator>==</operator><name>SQLITE_FCNTL_VFSNAME</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"cksm/%z"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><name>pArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmSectorSize</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xSectorSize</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by a cksm-file.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmDeviceCharacteristics</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xDeviceCharacteristics</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Create a shared memory file mapping */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmShmMap</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iPg</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>pgsz</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bExtend</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <specifier>volatile</specifier> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmMap</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>,<argument><expr><name>iPg</name></expr></argument>,<argument><expr><name>pgsz</name></expr></argument>,<argument><expr><name>bExtend</name></expr></argument>,<argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Perform locking on a shared-memory segment */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmShmLock</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmLock</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>,<argument><expr><name>offset</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Memory barrier operation on shared memory */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cksmShmBarrier</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmBarrier</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Unmap a shared memory segment */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmShmUnmap</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deleteFlag</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xShmUnmap</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>,<argument><expr><name>deleteFlag</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Fetch a page of a memory-mapped file */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmFetch</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iAmt</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CksmFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>CksmFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>computeCksm</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFetch</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFetch</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Release a memory-mapped page */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmUnfetch</name><parameter_list>(<parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pPage</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xUnfetch</name></name></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xUnfetch</name></name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>, <argument><expr><name>pPage</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open a cksm file handle.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pOutFlags</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>CksmFile</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pSubFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pSubVfs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pSubVfs</name> <operator>=</operator> <call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>SQLITE_OPEN_MAIN_DB</name><operator>|</operator><name>SQLITE_OPEN_WAL</name><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name><name>pSubVfs</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>pSubVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>CksmFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pSubFile</name> <operator>=</operator> <call><name>ORIGFILE</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>cksm_io_methods</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pSubVfs</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>pSubVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pSubFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>cksm_open_done</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>SQLITE_OPEN_WAL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_file</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><call><name>sqlite3_database_file_object</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xFileControl</name></name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>SQLITE_FCNTL_CKSM_FILE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name></name> <operator>=</operator> <operator>(</operator><name>CksmFile</name><operator>*</operator><operator>)</operator><name>pDb</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name><operator>-&gt;</operator><name>pPartner</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pPartner</name><operator>-&gt;</operator><name>pPartner</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isWal</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>computeCksm</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pPartner</name><operator>-&gt;</operator><name>computeCksm</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isWal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>computeCksm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zFName</name></name> <operator>=</operator> <name>zName</name></expr>;</expr_stmt>
<label><name>cksm_open_done</name>:</label>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pFile</name><operator>-&gt;</operator><name>pMethods</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** All other VFS methods are pass-thrus.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmDelete</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dirSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDelete</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmAccess</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pResOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xAccess</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmFullPathname</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nOut</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xFullPathname</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>zPath</name></expr></argument>,<argument><expr><name>nOut</name></expr></argument>,<argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>cksmDlOpen</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPath</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlOpen</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cksmDlError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zErrMsg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlError</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<expr_stmt><expr><specifier>static</specifier> <macro><name>void</name> <argument_list>(<argument>*cksmDlSym(sqlite3_vfs *pVfs, void *p, const char *zSym)</argument>)</argument_list></macro><operator>(</operator><name>void</name><operator>)</operator><block>{
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlSym</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></expr></expr_stmt>
<function><type><specifier>static</specifier> <name>void</name></type> <name>cksmDlClose</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHandle</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xDlClose</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmRandomness</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zBufOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xRandomness</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmSleep</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMicro</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xSleep</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmCurrentTime</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pTimeOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xCurrentTime</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmGetLastError</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xGetLastError</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmCurrentTimeInt64</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pOrig</name> <init>= <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pOrig</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&gt;=</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pOrig</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pOrig</name><operator>-&gt;</operator><name>xCurrentTimeInt64</name></name><argument_list>(<argument><expr><name>pOrig</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pOrig</name><operator>-&gt;</operator><name>xCurrentTime</name></name><argument_list>(<argument><expr><name>pOrig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><operator>(</operator><name>r</name><operator>*</operator><literal type="number">86400000.0</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmSetSystemCall</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_syscall_ptr</name></type> <name>pCall</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xSetSystemCall</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>zName</name></expr></argument>,<argument><expr><name>pCall</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>sqlite3_syscall_ptr</name></type> <name>cksmGetSystemCall</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xGetSystemCall</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cksmNextSystemCall</name><parameter_list>(<parameter><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>xNextSystemCall</name><argument_list>(<argument><expr><call><name>ORIGVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Register the verify_checksum() SQL function.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmRegisterFunc</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>db</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"verify_checksum"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                   <argument><expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITE_INNOCUOUS</name><operator>|</operator><name>SQLITE_DETERMINISTIC</name></expr></argument>,
                   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cksmVerifyFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_CKSUMVFS_INIT_FUNCNAME</name></cpp:ifdef>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_CKSUMVFS_INIT_FUNCNAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                   <argument><expr><name>SQLITE_UTF8</name><operator>|</operator><name>SQLITE_DIRECTONLY</name></expr></argument>,
                   <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cksmInitFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Register the cksum VFS as the default VFS for the system.
** Also make arrangements to automatically register the "verify_checksum()"
** SQL function on each new database connection.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cksmRegisterVfs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> <modifier>*</modifier></type><name>pOrig</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="string">"cksmvfs"</literal></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pOrig</name> <operator>=</operator> <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pOrig</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>cksm_vfs</name><operator>.</operator><name>iVersion</name></name> <operator>=</operator> <name><name>pOrig</name><operator>-&gt;</operator><name>iVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cksm_vfs</name><operator>.</operator><name>pAppData</name></name> <operator>=</operator> <name>pOrig</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cksm_vfs</name><operator>.</operator><name>szOsFile</name></name> <operator>=</operator> <name><name>pOrig</name><operator>-&gt;</operator><name>szOsFile</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>CksmFile</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksm_vfs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_auto_extension</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><name>cksmRegisterFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CKSUMVFS_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* This variant of the initializer runs when the extension is
** statically linked.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_register_cksumvfs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>NotUsed</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>NotUsed</name></expr>;</expr_stmt>
  <return>return <expr><call><name>cksmRegisterVfs</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sqlite3_unregister_cksumvfs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><literal type="string">"cksmvfs"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksm_vfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_cancel_auto_extension</name><argument_list>(<argument><expr><operator>(</operator><call><call><name>void</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></call><operator>)</operator><name>cksmRegisterFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(SQLITE_CKSUMVFS_STATIC */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CKSUMVFS_STATIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* This variant of the initializer function is used when the
** extension is shared library to be loaded at run-time.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>
<macro><name>__declspec</name><argument_list>(<argument>dllexport</argument>)</argument_list></macro>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/* 
** This routine is called by sqlite3_load_extension() when the
** extension is first loaded.
***/</comment>
<function><type><name>int</name></type> <name>sqlite3_cksumvfs_init</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>sqlite3_api_routines</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pzErrMsg</name></expr>;</expr_stmt> <comment type="block">/* not used */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>cksmRegisterFunc</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>cksmRegisterVfs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK_LOAD_PERMANENTLY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CKSUMVFS_STATIC) */</comment>
</unit>
