<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/fts5/fts5_varint.c"><comment type="block">/*
** 2015 May 30
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** Routines for varint serialization and deserialization.
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>

<comment type="block">/*
** This is a copy of the sqlite3GetVarint32() routine from the SQLite core.
** Except, this version does handle the single byte case that the core
** version depends on being handled before its function is called.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5GetVarint32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

  <comment type="block">/* The 1-byte case. Overwhelmingly the most common. */</comment>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* a: p0 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Values between 0 and 127 */</comment>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* The 2-byte case */</comment>
  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* b: p1 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Values between 128 and 16383 */</comment>
    <expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>a</name> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* The 3-byte case */</comment>
  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">14</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* a: p0&lt;&lt;14 | p2 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* Values between 16384 and 2097151 */</comment>
    <expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">0x7f</literal><operator>&lt;&lt;</operator><literal type="number">14</literal><operator>)</operator><operator>|</operator><operator>(</operator><literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>a</name> <operator>|</operator> <name>b</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* A 32-bit varint is used to store size information in btrees.
  ** Objects are rarely larger than 2MiB limit of a 3-byte varint.
  ** A 3-byte varint is sufficient, for example, to record the size
  ** of a 1048569-byte BLOB or string.
  **
  ** We only unroll the first 1-, 2-, and 3- byte cases.  The very
  ** rare larger cases can be handled by the slower 64-bit varint
  ** routine.
  */</comment>
  <block>{<block_content>
    <decl_stmt><decl><type><name>u64</name></type> <name>v64</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><name>v64</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>n</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>&lt;=</operator><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>n</name></expr>;</return>
  </block_content>}</block>
</block_content>}</block></function>


<comment type="block">/*
** Bitmasks used by sqlite3GetVarint().  These precomputed constants
** are defined here rather than simply putting the constant expressions
** inline in order to work around bugs in the RVT compiler.
**
** SLOT_2_0     A mask for  (0x7f&lt;&lt;14) | 0x7f
**
** SLOT_4_2_0   A mask for  (0x7f&lt;&lt;28) | SLOT_2_0
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOT_2_0</name></cpp:macro>     <cpp:value>0x001fc07f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SLOT_4_2_0</name></cpp:macro>   <cpp:value>0xf01fc07f</cpp:value></cpp:define>

<comment type="block">/*
** Read a 64-bit variable-length integer from memory starting at p[0].
** Return the number of bytes read.  The value is stored in *v.
*/</comment>
<function><type><name>u8</name></type> <name>sqlite3Fts5GetVarint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u64</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* a: p0 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* b: p1 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Verify that constants are precomputed correctly */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SLOT_2_0</name> <operator>==</operator> <operator>(</operator><operator>(</operator><literal type="number">0x7f</literal><operator>&lt;&lt;</operator><literal type="number">14</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0x7f</literal><operator>)</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>SLOT_4_2_0</name> <operator>==</operator> <operator>(</operator><operator>(</operator><literal type="number">0xfU</literal><operator>&lt;&lt;</operator><literal type="number">28</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0x7f</literal><operator>&lt;&lt;</operator><literal type="number">14</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><literal type="number">0x7f</literal><operator>)</operator><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">14</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* a: p0&lt;&lt;14 | p2 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <name>SLOT_2_0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* CSE1 from below */</comment>
  <expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <name>SLOT_2_0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>&lt;&lt;</operator><literal type="number">14</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* b: p1&lt;&lt;14 | p3 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <name>SLOT_2_0</name></expr>;</expr_stmt>
    <comment type="block">/* moved CSE1 up */</comment>
    <comment type="block">/* a &amp;= (0x7f&lt;&lt;14)|(0x7f); */</comment>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">4</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* a: p0&lt;&lt;14 | p2 (masked) */</comment>
  <comment type="block">/* b: p1&lt;&lt;14 | p3 (unmasked) */</comment>
  <comment type="block">/* 1:save off p0&lt;&lt;21 | p1&lt;&lt;14 | p2&lt;&lt;7 | p3 (masked) */</comment>
  <comment type="block">/* moved CSE1 up */</comment>
  <comment type="block">/* a &amp;= (0x7f&lt;&lt;14)|(0x7f); */</comment>
  <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <name>SLOT_2_0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
  <comment type="block">/* s: p0&lt;&lt;14 | p2 (masked) */</comment>

  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">14</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* a: p0&lt;&lt;28 | p2&lt;&lt;14 | p4 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* we can skip these cause they were (effectively) done above in calc'ing s */</comment>
    <comment type="block">/* a &amp;= (0x7f&lt;&lt;28)|(0x7f&lt;&lt;14)|(0x7f); */</comment>
    <comment type="block">/* b &amp;= (0x7f&lt;&lt;14)|(0x7f); */</comment>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name><operator>&gt;&gt;</operator><literal type="number">18</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u64</name><operator>)</operator><name>s</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal> <operator>|</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">5</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* 2:save off p0&lt;&lt;21 | p1&lt;&lt;14 | p2&lt;&lt;7 | p3 (masked) */</comment>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>s</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>
  <comment type="block">/* s: p0&lt;&lt;21 | p1&lt;&lt;14 | p2&lt;&lt;7 | p3 (masked) */</comment>

  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>&lt;&lt;</operator><literal type="number">14</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* b: p1&lt;&lt;28 | p3&lt;&lt;14 | p5 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <comment type="block">/* we can skip this cause it was (effectively) done above in calc'ing s */</comment>
    <comment type="block">/* b &amp;= (0x7f&lt;&lt;28)|(0x7f&lt;&lt;14)|(0x7f); */</comment>
    <expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <name>SLOT_2_0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name><operator>&gt;&gt;</operator><literal type="number">18</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u64</name><operator>)</operator><name>s</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal> <operator>|</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">6</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">14</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* a: p2&lt;&lt;28 | p4&lt;&lt;14 | p6 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>a</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <name>SLOT_4_2_0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <name>SLOT_2_0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name><operator>&gt;&gt;</operator><literal type="number">11</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u64</name><operator>)</operator><name>s</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal> <operator>|</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">7</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* CSE2 from below */</comment>
  <expr_stmt><expr><name>a</name> <operator>&amp;=</operator> <name>SLOT_2_0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>&lt;&lt;</operator><literal type="number">14</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* b: p3&lt;&lt;28 | p5&lt;&lt;14 | p7 (unmasked) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>b</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr>)</condition>
  <block>{<block_content>
    <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <name>SLOT_4_2_0</name></expr>;</expr_stmt>
    <comment type="block">/* moved CSE2 up */</comment>
    <comment type="block">/* a &amp;= (0x7f&lt;&lt;14)|(0x7f); */</comment>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u64</name><operator>)</operator><name>s</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal> <operator>|</operator> <name>a</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">8</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name><operator>&lt;&lt;</operator><literal type="number">15</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>|=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
  <comment type="block">/* a: p4&lt;&lt;29 | p6&lt;&lt;15 | p8 (unmasked) */</comment>

  <comment type="block">/* moved CSE2 up */</comment>
  <comment type="block">/* a &amp;= (0x7f&lt;&lt;29)|(0x7f&lt;&lt;15)|(0xff); */</comment>
  <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <name>SLOT_2_0</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>s</name> <operator>=</operator> <name>s</name><operator>&lt;&lt;</operator><literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>s</name> <operator>|=</operator> <name>b</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u64</name><operator>)</operator><name>s</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal> <operator>|</operator> <name>a</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">9</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The variable-length integer encoding is as follows:
**
** KEY:
**         A = 0xxxxxxx    7 bits of data and one flag bit
**         B = 1xxxxxxx    7 bits of data and one flag bit
**         C = xxxxxxxx    8 bits of data
**
**  7 bits - A
** 14 bits - BA
** 21 bits - BBA
** 28 bits - BBBA
** 35 bits - BBBBA
** 42 bits - BBBBBA
** 49 bits - BBBBBBA
** 56 bits - BBBBBBBA
** 64 bits - BBBBBBBBC
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_NOINLINE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_NOINLINE</name></cpp:macro> <cpp:value>SQLITE_NOINLINE</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_NOINLINE</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Write a 64-bit variable-length integer to memory starting at p[0].
** The length of data write will be between 1 and 9 bytes.  The number
** of bytes written is returned.
**
** A variable-length integer consists of the lower 7 bits of each byte
** for all bytes that have the 8th bit set and one byte with the 8th
** bit clear.  Except, if we get to the 9th byte, it stores the full
** 8 bits and is the last byte.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name> <name>FTS5_NOINLINE</name></type> <name>fts5PutVarint64</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>u64</name><operator>)</operator><literal type="number">0xff000000</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">7</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">9</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>    
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <do>do<block>{<block_content>
    <expr_stmt><expr><name><name>buf</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name>v</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition>;</do>
  <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>n</name><operator>&lt;=</operator><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5PutVarint</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>v</name><operator>&lt;=</operator><literal type="number">0x7f</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>v</name><operator>&amp;</operator><literal type="number">0x7f</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name><operator>&lt;=</operator><literal type="number">0x3fff</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">7</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x7f</literal><operator>)</operator><operator>|</operator><literal type="number">0x80</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>v</name><operator>&amp;</operator><literal type="number">0x7f</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>fts5PutVarint64</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>sqlite3Fts5GetVarintLen</name><parameter_list>(<parameter><decl><type><name>u32</name></type> <name>iVal</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if( iVal&lt;(1 &lt;&lt; 7 ) ) return 1;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iVal</name><operator>&gt;=</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iVal</name><operator>&lt;</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iVal</name><operator>&lt;</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iVal</name><operator>&lt;</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">5</literal></expr>;</return>
</block_content>}</block></function>
</unit>
