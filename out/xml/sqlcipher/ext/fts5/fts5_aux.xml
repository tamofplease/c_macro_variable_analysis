<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/fts5/fts5_aux.c"><comment type="block">/*
** 2014 May 31
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>                 <comment type="block">/* amalgamator: keep */</comment>

<comment type="block">/*
** Object used to iterate through all "coalesced phrase instances" in 
** a single column of the current row. If the phrase instances in the
** column being considered do not overlap, this object simply iterates
** through them. Or, if they do overlap (share one or more tokens in
** common), each set of overlapping instances is treated as a single
** match. See documentation for the highlight() auxiliary function for
** details.
**
** Usage is:
**
**   for(rc = fts5CInstIterNext(pApi, pFts, iCol, &amp;iter);
**      (rc==SQLITE_OK &amp;&amp; 0==fts5CInstIterEof(&amp;iter);
**      rc = fts5CInstIterNext(&amp;iter)
**   ){
**     printf("instance starts at %d, ends at %d\n", iter.iStart, iter.iEnd);
**   }
**
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>CInstIter</name></name></type> <name>CInstIter</name>;</typedef>
<struct>struct <name>CInstIter</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl>;</decl_stmt>   <comment type="block">/* API offered by current FTS version */</comment>
  <decl_stmt><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl>;</decl_stmt>              <comment type="block">/* First arg to pass to pApi functions */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>                       <comment type="block">/* Column to search */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iInst</name></decl>;</decl_stmt>                      <comment type="block">/* Next phrase instance index */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInst</name></decl>;</decl_stmt>                      <comment type="block">/* Total number of phrase instances */</comment>

  <comment type="block">/* Output variables */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iStart</name></decl>;</decl_stmt>                     <comment type="block">/* First token in coalesced phrase instance */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iEnd</name></decl>;</decl_stmt>                       <comment type="block">/* Last token in coalesced phrase instance */</comment>
}</block>;</struct>

<comment type="block">/*
** Advance the iterator to the next coalesced phrase instance. Return
** an SQLite error code if an error occurs, or SQLITE_OK otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CInstIterNext</name><parameter_list>(<parameter><decl><type><name>CInstIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStart</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEnd</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iInst</name></name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nInst</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ip</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>ic</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>io</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pIter</name><operator>-&gt;</operator><name>pApi</name><operator>-&gt;</operator><name>xInst</name></name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pFts</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iInst</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>ic</name><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>iCol</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iEnd</name> <init>= <expr><name>io</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <call><name><name>pIter</name><operator>-&gt;</operator><name>pApi</name><operator>-&gt;</operator><name>xPhraseSize</name></name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pFts</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iStart</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStart</name></name> <operator>=</operator> <name>io</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEnd</name></name> <operator>=</operator> <name>iEnd</name></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>io</name><operator>&lt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>iEnd</name></name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>iEnd</name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iEnd</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEnd</name></name> <operator>=</operator> <name>iEnd</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iInst</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Initialize the iterator object indicated by the final parameter to 
** iterate through coalesced phrase instances in column iCol.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CInstIterInit</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>,
  <parameter><decl><type><name>CInstIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CInstIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pApi</name></name> <operator>=</operator> <name>pApi</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pFts</name></name> <operator>=</operator> <name>pFts</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <name>iCol</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInstCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nInst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CInstIterNext</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>



<comment type="block" format="doxygen">/*************************************************************************
** Start of highlight() implementation.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>HighlightContext</name></name></type> <name>HighlightContext</name>;</typedef>
<struct>struct <name>HighlightContext</name> <block>{
  <decl_stmt><decl><type><name>CInstIter</name></type> <name>iter</name></decl>;</decl_stmt>                 <comment type="block">/* Coalesced Instance Iterator */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iPos</name></decl>;</decl_stmt>                       <comment type="block">/* Current token offset in zIn[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iRangeStart</name></decl>;</decl_stmt>                <comment type="block">/* First token to include */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iRangeEnd</name></decl>;</decl_stmt>                  <comment type="block">/* If non-zero, last token to include */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOpen</name></decl>;</decl_stmt>              <comment type="block">/* Opening highlight */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zClose</name></decl>;</decl_stmt>             <comment type="block">/* Closing highlight */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIn</name></decl>;</decl_stmt>                <comment type="block">/* Input text */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nIn</name></decl>;</decl_stmt>                        <comment type="block">/* Size of input text in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>                       <comment type="block">/* Current offset within zIn[] */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl>;</decl_stmt>                     <comment type="block">/* Output value */</comment>
}</block>;</struct>

<comment type="block">/*
** Append text to the HighlightContext output string - p-&gt;zOut. Argument
** z points to a buffer containing n bytes of text to append. If n is 
** negative, everything up until the first '\0' is appended to the output.
**
** If *pRc is set to any value other than SQLITE_OK when this function is 
** called, it is a no-op. If an error (i.e. an OOM condition) is encountered, 
** *pRc is set to an error code before returning. 
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5HighlightAppend</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, 
  <parameter><decl><type><name>HighlightContext</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>z</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zOut</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%z%.*s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zOut</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zOut</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Tokenizer callback used by implementation of highlight() function.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5HighlightCb</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>,                 <comment type="block">/* Pointer to HighlightContext object */</comment>
  <parameter><decl><type><name>int</name></type> <name>tflags</name></decl></parameter>,                     <comment type="block">/* Mask of FTS5_TOKEN_* flags */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>,             <comment type="block">/* Buffer containing token */</comment>
  <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>,                     <comment type="block">/* Size of token in bytes */</comment>
  <parameter><decl><type><name>int</name></type> <name>iStartOff</name></decl></parameter>,                  <comment type="block">/* Start offset of token */</comment>
  <parameter><decl><type><name>int</name></type> <name>iEndOff</name></decl></parameter>                     <comment type="block">/* End offset of token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>HighlightContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>HighlightContext</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iPos</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>tflags</name> <operator>&amp;</operator> <name>FTS5_TOKEN_COLOCATED</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>iPos</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>iPos</name></name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iRangeEnd</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>iPos</name><argument_list type="generic">&lt;<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iRangeStart</name></name> <operator>||</operator> <name>iPos</name></expr></argument>&gt;</argument_list></name><name><name>p</name><operator>-&gt;</operator><name>iRangeEnd</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iRangeStart</name></name> <operator>&amp;&amp;</operator> <name>iPos</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>iRangeStart</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iOff</name></name> <operator>=</operator> <name>iStartOff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iPos</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iStart</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zIn</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iStartOff</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>iOff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zOpen</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iOff</name></name> <operator>=</operator> <name>iStartOff</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iPos</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iEnd</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iRangeEnd</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iStart</name></name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>iRangeStart</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zOpen</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zIn</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iEndOff</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>iOff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zClose</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iOff</name></name> <operator>=</operator> <name>iEndOff</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CInstIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iRangeEnd</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iPos</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>iRangeEnd</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>zIn</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iEndOff</name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>iOff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iOff</name></name> <operator>=</operator> <name>iEndOff</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iPos</name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iStart</name></name> <operator>&amp;&amp;</operator> <name>iPos</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iEnd</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zClose</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of highlight() function.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5HighlightFunction</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,   <comment type="block">/* API offered by current FTS version */</comment>
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,              <comment type="block">/* First arg to pass to pApi functions */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Context for returning result/error */</comment>
  <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,                       <comment type="block">/* Number of values in apVal[] array */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Array of trailing arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>HighlightContext</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nVal</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="string">"wrong number of arguments to function highlight()"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>iCol</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HighlightContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>zOpen</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>zClose</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnText</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>zIn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>nIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>.</operator><name>zIn</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CInstIterInit</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xTokenize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>zIn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>nIn</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name>fts5HighlightCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>zIn</name><index>[<expr><name><name>ctx</name><operator>.</operator><name>iOff</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>nIn</name></name> <operator>-</operator> <name><name>ctx</name><operator>.</operator><name>iOff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>.</operator><name>zOut</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>zOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/*
** End of highlight() implementation.
**************************************************************************/</comment>

<comment type="block">/*
** Context object passed to the fts5SentenceFinderCb() function.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Fts5SFinder</name></name></type> <name>Fts5SFinder</name>;</typedef>
<struct>struct <name>Fts5SFinder</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iPos</name></decl>;</decl_stmt>                       <comment type="block">/* Current token position */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFirstAlloc</name></decl>;</decl_stmt>                <comment type="block">/* Allocated size of aFirst[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFirst</name></decl>;</decl_stmt>                     <comment type="block">/* Number of entries in aFirst[] */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aFirst</name></decl>;</decl_stmt>                    <comment type="block">/* Array of first token in each sentence */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDoc</name></decl>;</decl_stmt>               <comment type="block">/* Document being tokenized */</comment>
}</block>;</struct>

<comment type="block">/*
** Add an entry to the Fts5SFinder.aFirst[] array. Grow the array if
** necessary. Return SQLITE_OK if successful, or SQLITE_NOMEM if an
** error occurs.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SentenceFinderAdd</name><parameter_list>(<parameter><decl><type><name>Fts5SFinder</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iAdd</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nFirstAlloc</name></name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>nFirst</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>nFirstAlloc</name></name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>nFirstAlloc</name></name><operator>*</operator><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aNew</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>aNew</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aFirst</name></name></expr></argument>, <argument><expr><name>nNew</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aFirst</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nFirstAlloc</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>nFirst</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>iAdd</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is an xTokenize() callback used by the auxiliary snippet()
** function. Its job is to identify tokens that are the first in a sentence.
** For each such token, an entry is added to the SFinder.aFirst[] array.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SentenceFinderCb</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>,                 <comment type="block">/* Pointer to HighlightContext object */</comment>
  <parameter><decl><type><name>int</name></type> <name>tflags</name></decl></parameter>,                     <comment type="block">/* Mask of FTS5_TOKEN_* flags */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>,             <comment type="block">/* Buffer containing token */</comment>
  <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>,                     <comment type="block">/* Size of token in bytes */</comment>
  <parameter><decl><type><name>int</name></type> <name>iStartOff</name></decl></parameter>,                  <comment type="block">/* Start offset of token */</comment>
  <parameter><decl><type><name>int</name></type> <name>iEndOff</name></decl></parameter>                     <comment type="block">/* End offset of token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>iEndOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>tflags</name> <operator>&amp;</operator> <name>FTS5_TOKEN_COLOCATED</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5SFinder</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Fts5SFinder</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>iStartOff</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>zDoc</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>c</name><operator>!=</operator><literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>!=</operator><literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>!=</operator><name>iStartOff</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name><operator>==</operator><literal type="char">'.'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">':'</literal><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SentenceFinderAdd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SentenceFinderAdd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SnippetScore</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,   <comment type="block">/* API offered by current FTS version */</comment>
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,              <comment type="block">/* First arg to pass to pApi functions */</comment>
  <parameter><decl><type><name>int</name></type> <name>nDocsize</name></decl></parameter>,                   <comment type="block">/* Size of column in tokens */</comment>
  <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aSeen</name></decl></parameter>,           <comment type="block">/* Array with one element per query phrase */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>,                       <comment type="block">/* Column to score */</comment>
  <parameter><decl><type><name>int</name></type> <name>iPos</name></decl></parameter>,                       <comment type="block">/* Starting offset to score */</comment>
  <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>,                     <comment type="block">/* Max tokens per snippet */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnScore</name></decl></parameter>,                   <comment type="block">/* OUT: Score */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piPos</name></decl></parameter>                      <comment type="block">/* OUT: Adjusted offset */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ic</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iFirst</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nInst</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nScore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iEnd</name> <init>= <expr><operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name>iPos</name> <operator>+</operator> <name>nToken</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInstCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nInst</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInst</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>ic</name><operator>==</operator><name>iCol</name> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&gt;=</operator><name>iPos</name> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&lt;</operator><name>iEnd</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>nScore</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>aSeen</name><index>[<expr><name>ip</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1000</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aSeen</name><index>[<expr><name>ip</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iFirst</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iFirst</name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>iLast</name> <operator>=</operator> <name>iOff</name> <operator>+</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseSize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>pnScore</name> <operator>=</operator> <name>nScore</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>piPos</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iAdj</name> <init>= <expr><name>iFirst</name> <operator>-</operator> <operator>(</operator><name>nToken</name> <operator>-</operator> <operator>(</operator><name>iLast</name><operator>-</operator><name>iFirst</name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iAdj</name><operator>+</operator><name>nToken</name><operator>)</operator><operator>&gt;</operator><name>nDocsize</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iAdj</name> <operator>=</operator> <name>nDocsize</name> <operator>-</operator> <name>nToken</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>iAdj</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iAdj</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>piPos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>iAdj</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the value in pVal interpreted as utf-8 text. Except, if pVal 
** contains a NULL value, return a pointer to a static string zero
** bytes in length instead of a NULL pointer.
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fts5ValueToText</name><parameter_list>(<parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zRet</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>zRet</name></expr> ?</condition><then> <expr><name>zRet</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of snippet() function.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SnippetFunction</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,   <comment type="block">/* API offered by current FTS version */</comment>
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,              <comment type="block">/* First arg to pass to pApi functions */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Context for returning result/error */</comment>
  <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,                       <comment type="block">/* Number of values in apVal[] array */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Array of trailing arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>HighlightContext</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>                       <comment type="block">/* 1st argument to snippet() */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zEllips</name></decl>;</decl_stmt>            <comment type="block">/* 4th argument to snippet() */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nToken</name></decl>;</decl_stmt>                     <comment type="block">/* 5th argument to snippet() */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Number of instance matches this row */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Used to iterate through instances */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name></decl>;</decl_stmt>                    <comment type="block">/* Number of phrases in query */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>aSeen</name></decl>;</decl_stmt>           <comment type="block">/* Array of "seen instance" flags */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iBestCol</name></decl>;</decl_stmt>                   <comment type="block">/* Column containing best snippet */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iBestStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* First token of best snippet */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBestScore</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* Score of best snippet */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nColSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Total size of iBestCol in tokens */</comment>
  <decl_stmt><decl><type><name>Fts5SFinder</name></type> <name>sFinder</name></decl>;</decl_stmt>            <comment type="block">/* Used to find the beginnings of sentences */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nVal</name><operator>!=</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="string">"wrong number of arguments to function snippet()"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>nCol</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HighlightContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iCol</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>zOpen</name></name> <operator>=</operator> <call><name>fts5ValueToText</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>zClose</name></name> <operator>=</operator> <call><name>fts5ValueToText</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zEllips</name> <operator>=</operator> <call><name>fts5ValueToText</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nToken</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>iBestCol</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>iCol</name><operator>&gt;=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>iCol</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>nPhrase</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aSeen</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nPhrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>aSeen</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInstCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sFinder</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5SFinder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>iCol</name><operator>==</operator><name>i</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nDoc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nDocsize</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>sFinder</name><operator>.</operator><name>iPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>sFinder</name><operator>.</operator><name>nFirst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnText</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sFinder</name><operator>.</operator><name>zDoc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xTokenize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, 
          <argument><expr><name><name>sFinder</name><operator>.</operator><name>zDoc</name></name></expr></argument>, <argument><expr><name>nDoc</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sFinder</name></expr></argument>,<argument><expr><name>fts5SentenceFinderCb</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnSize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nDocsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

      <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><name>nInst</name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ip</name></decl>, <decl><type ref="prev"/><name>ic</name></decl>, <decl><type ref="prev"/><name>io</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iAdj</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nScore</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>jj</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInst</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>ic</name><operator>!=</operator><name>i</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>io</name><operator>&gt;</operator><name>nDocsize</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aSeen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nPhrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SnippetScore</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>nDocsize</name></expr></argument>, <argument><expr><name>aSeen</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
            <argument><expr><name>io</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nScore</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iAdj</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>nScore</name><operator>&gt;</operator><name>nBestScore</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>nBestScore</name> <operator>=</operator> <name>nScore</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>iBestCol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>iBestStart</name> <operator>=</operator> <name>iAdj</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nColSize</name> <operator>=</operator> <name>nDocsize</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>sFinder</name><operator>.</operator><name>nFirst</name></name> <operator>&amp;&amp;</operator> <name>nDocsize</name><operator>&gt;</operator><name>nToken</name></expr> )</condition><block>{<block_content>
          <for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>jj</name><operator>&lt;</operator><operator>(</operator><name><name>sFinder</name><operator>.</operator><name>nFirst</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>sFinder</name><operator>.</operator><name>aFirst</name><index>[<expr><name>jj</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><name>io</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
          </block_content>}</block></for>

          <if_stmt><if>if<condition>( <expr><name><name>sFinder</name><operator>.</operator><name>aFirst</name><index>[<expr><name>jj</name></expr>]</index></name><operator>&lt;</operator><name>io</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aSeen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nPhrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5SnippetScore</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>nDocsize</name></expr></argument>, <argument><expr><name>aSeen</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, 
              <argument><expr><name><name>sFinder</name><operator>.</operator><name>aFirst</name><index>[<expr><name>jj</name></expr>]</index></name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nScore</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>nScore</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>sFinder</name><operator>.</operator><name>aFirst</name><index>[<expr><name>jj</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">120</literal></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>nScore</name><operator>&gt;</operator><name>nBestScore</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><name>nBestScore</name> <operator>=</operator> <name>nScore</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>iBestCol</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>iBestStart</name> <operator>=</operator> <name><name>sFinder</name><operator>.</operator><name>aFirst</name><index>[<expr><name>jj</name></expr>]</index></name></expr>;</expr_stmt>
              <expr_stmt><expr><name>nColSize</name> <operator>=</operator> <name>nDocsize</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnText</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>iBestCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>zIn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>nIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>nColSize</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnSize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>iBestCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nColSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>.</operator><name>zIn</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CInstIterInit</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>iBestCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>iRangeStart</name></name> <operator>=</operator> <name>iBestStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>iRangeEnd</name></name> <operator>=</operator> <name>iBestStart</name> <operator>+</operator> <name>nToken</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>iBestStart</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>zEllips</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Advance iterator ctx.iter so that it points to the first coalesced
    ** phrase instance at or following position iBestStart. */</comment>
    <while>while<condition>( <expr><name><name>ctx</name><operator>.</operator><name>iter</name><operator>.</operator><name>iStart</name></name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>.</operator><name>iter</name><operator>.</operator><name>iStart</name></name><operator>&lt;</operator><name>iBestStart</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5CInstIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xTokenize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>zIn</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>nIn</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>,<argument><expr><name>fts5HighlightCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>.</operator><name>iRangeEnd</name></name><operator>&gt;=</operator><operator>(</operator><name>nColSize</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>zIn</name><index>[<expr><name><name>ctx</name><operator>.</operator><name>iOff</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>nIn</name></name> <operator>-</operator> <name><name>ctx</name><operator>.</operator><name>iOff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fts5HighlightAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>zEllips</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>.</operator><name>zOut</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>zOut</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aSeen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>sFinder</name><operator>.</operator><name>aFirst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/************************************************************************/</comment>

<comment type="block">/*
** The first time the bm25() function is called for a query, an instance
** of the following structure is allocated and populated.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Fts5Bm25Data</name></name></type> <name>Fts5Bm25Data</name>;</typedef>
<struct>struct <name>Fts5Bm25Data</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name></decl>;</decl_stmt>                    <comment type="block">/* Number of phrases in query */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>avgdl</name></decl>;</decl_stmt>                   <comment type="block">/* Average number of tokens in each row */</comment>
  <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>aIDF</name></decl>;</decl_stmt>                   <comment type="block">/* IDF for each phrase */</comment>
  <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>aFreq</name></decl>;</decl_stmt>                  <comment type="block">/* Array used to calculate phrase freq. */</comment>
}</block>;</struct>

<comment type="block">/*
** Callback used by fts5Bm25GetData() to count the number of rows in the
** table matched by each individual phrase within the query.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5CountCb</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>                 <comment type="block">/* Pointer to sqlite3_int64 variable */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_int64</name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><operator>(</operator><name>sqlite3_int64</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>pn</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set *ppData to point to the Fts5Bm25Data object for the current query. 
** If the object has not already been allocated, allocate and populate it
** now.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5Bm25GetData</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Bm25Data</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppData</name></decl></parameter>           <comment type="block">/* OUT: bm25-data object for this query */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>Fts5Bm25Data</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>                <comment type="block">/* Object to return */</comment>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Fts5Bm25Data</name><operator>*</operator><operator>)</operator><call><name><name>pApi</name><operator>-&gt;</operator><name>xGetAuxdata</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name></decl>;</decl_stmt>                  <comment type="block">/* Number of phrases in query */</comment>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* Number of rows in table */</comment>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nToken</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* Number of tokens in table */</comment>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl>;</decl_stmt>          <comment type="block">/* Bytes of space to allocate */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Allocate the Fts5Bm25Data object */</comment>
    <expr_stmt><expr><name>nPhrase</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Bm25Data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nPhrase</name><operator>*</operator><literal type="number">2</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Fts5Bm25Data</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>=</operator> <name>nPhrase</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aIDF</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aFreq</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aIDF</name><index>[<expr><name>nPhrase</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Calculate the average document length for this FTS5 table */</comment>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xRowCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name>nRow</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnTotalSize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>avgdl</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>nToken</name>  <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>nRow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Calculate an IDF for each phrase in the query */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nPhrase</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nHit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xQueryPhrase</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nHit</name></expr></argument>, <argument><expr><name>fts5CountCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* Calculate the IDF (Inverse Document Frequency) for phrase i.
        ** This is done using the standard BM25 formula as found on wikipedia:
        **
        **   IDF = log( (N - nHit + 0.5) / (nHit + 0.5) )
        **
        ** where "N" is the total number of documents in the set and nHit
        ** is the number that contain at least one instance of the phrase
        ** under consideration.
        **
        ** The problem with this is that if (N &lt; 2*nHit), the IDF is 
        ** negative. Which is undesirable. So the mimimum allowable IDF is
        ** (1e-6) - roughly the same as a term that appears in just over
        ** half of set of 5,000,000 documents.  */</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>idf</name> <init>= <expr><call><name>log</name><argument_list>( <argument><expr><operator>(</operator><name>nRow</name> <operator>-</operator> <name>nHit</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>nHit</name> <operator>+</operator> <literal type="number">0.5</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>idf</name><operator>&lt;=</operator><literal type="number">0.0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>idf</name> <operator>=</operator> <literal type="number">1e-6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aIDF</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>idf</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xSetAuxdata</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of bm25() function.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5Bm25Function</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,   <comment type="block">/* API offered by current FTS version */</comment>
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,              <comment type="block">/* First arg to pass to pApi functions */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Context for returning result/error */</comment>
  <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,                       <comment type="block">/* Number of values in apVal[] array */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Array of trailing arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>k1</name> <init>= <expr><literal type="number">1.2</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Constant "k1" from BM25 formula */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>b</name> <init>= <expr><literal type="number">0.75</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Constant "b" from BM25 formula */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Error code */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>score</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>             <comment type="block">/* SQL function return value */</comment>
  <decl_stmt><decl><type><name>Fts5Bm25Data</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>            <comment type="block">/* Values allocated/calculated once only */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Iterator variable */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInst</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* Value returned by xInstCount() */</comment>
  <decl_stmt><decl><type><name>double</name></type> <name>D</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Total number of tokens in row */</comment>
  <decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>aFreq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Array of phrase freq. for current row */</comment>

  <comment type="block">/* Calculate the phrase frequency (symbol "f(qi,D)" in the documentation)
  ** for each phrase in the query for the current row. */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5Bm25GetData</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>aFreq</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>aFreq</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aFreq</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pData</name><operator>-&gt;</operator><name>nPhrase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInstCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nInst</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ip</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>ic</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>io</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInst</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>double</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>nVal</name> <operator>&gt;</operator> <name>ic</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>sqlite3_value_double</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><name>ic</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1.0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>aFreq</name><index>[<expr><name>ip</name></expr>]</index></name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Figure out the total size of the current row in tokens. */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nTok</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnSize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>D</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>nTok</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Determine and return the BM25 score for the current row. Or, if an
  ** error has occurred, throw an exception. */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pData</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>score</name> <operator>+=</operator> <name><name>pData</name><operator>-&gt;</operator><name>aIDF</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator>
          <operator>(</operator> <name><name>aFreq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>k1</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>)</operator> <operator>/</operator> 
          <operator>(</operator> <name><name>aFreq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>k1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>b</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>D</name> <operator>/</operator> <name><name>pData</name><operator>-&gt;</operator><name>avgdl</name></name><operator>)</operator> <operator>)</operator>
      <operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_result_double</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal> <operator>*</operator> <name>score</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5AuxInit</name><parameter_list>(<parameter><decl><type><name>fts5_api</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>Builtin</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFunc</name></decl>;</decl_stmt>            <comment type="block">/* Function name (nul-terminated) */</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl>;</decl_stmt>              <comment type="block">/* User-data pointer */</comment>
    <decl_stmt><decl><type><name>fts5_extension_function</name></type> <name>xFunc</name></decl>;</decl_stmt><comment type="block">/* Callback function */</comment>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xDestroy</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>      <comment type="block">/* Destructor function */</comment>
  }</block> <decl><name><name>aBuiltin</name> <index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"snippet"</literal></expr>,   <expr><literal type="number">0</literal></expr>, <expr><name>fts5SnippetFunction</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"highlight"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>fts5HighlightFunction</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"bm25"</literal></expr>,      <expr><literal type="number">0</literal></expr>, <expr><name>fts5Bm25Function</name></expr>,    <expr><literal type="number">0</literal></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* To iterate through builtin functions */</comment>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aBuiltin</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xCreateFunction</name></name><argument_list>(<argument><expr><name>pApi</name></expr></argument>,
        <argument><expr><name><name>aBuiltin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zFunc</name></expr></argument>,
        <argument><expr><name><name>aBuiltin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pUserData</name></expr></argument>,
        <argument><expr><name><name>aBuiltin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xFunc</name></expr></argument>,
        <argument><expr><name><name>aBuiltin</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xDestroy</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
