<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/fts5/fts5_index.c"><comment type="block">/*
** 2014 May 31
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** Low level access to the FTS index stored in the database file. The 
** routines in this file file implement all read and write access to the
** %_data table. Other parts of the system access this functionality via
** the interface defined in fts5Int.h.
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>

<comment type="block">/*
** Overview:
**
** The %_data table contains all the FTS indexes for an FTS5 virtual table.
** As well as the main term index, there may be up to 31 prefix indexes.
** The format is similar to FTS3/4, except that:
**
**   * all segment b-tree leaf data is stored in fixed size page records 
**     (e.g. 1000 bytes). A single doclist may span multiple pages. Care is 
**     taken to ensure it is possible to iterate in either direction through 
**     the entries in a doclist, or to seek to a specific entry within a 
**     doclist, without loading it into memory.
**
**   * large doclists that span many pages have associated "doclist index"
**     records that contain a copy of the first rowid on each page spanned by
**     the doclist. This is used to speed up seek operations, and merges of
**     large doclists with very small doclists.
**
**   * extra fields in the "structure record" record the state of ongoing
**     incremental merge operations.
**
*/</comment>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_OPT_WORK_UNIT</name></cpp:macro>  <cpp:value>1000</cpp:value></cpp:define>  <comment type="block">/* Number of leaf pages per optimize step */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_WORK_UNIT</name></cpp:macro>      <cpp:value>64</cpp:value></cpp:define>    <comment type="block">/* Number of leaf pages in unit of work */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_MIN_DLIDX_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>     <comment type="block">/* Add dlidx if this many empty pages */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_MAIN_PREFIX</name></cpp:macro> <cpp:value>'0'</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FTS5_MAX_PREFIX_INDEXES</name> <operator>&gt;</operator> <literal type="number">31</literal></expr></cpp:if>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"FTS5_MAX_PREFIX_INDEXES is too large"</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Details:
**
** The %_data table managed by this module,
**
**     CREATE TABLE %_data(id INTEGER PRIMARY KEY, block BLOB);
**
** , contains the following 5 types of records. See the comments surrounding
** the FTS5_*_ROWID macros below for a description of how %_data rowids are 
** assigned to each fo them.
**
** 1. Structure Records:
**
**   The set of segments that make up an index - the index structure - are
**   recorded in a single record within the %_data table. The record consists
**   of a single 32-bit configuration cookie value followed by a list of 
**   SQLite varints. If the FTS table features more than one index (because
**   there are one or more prefix indexes), it is guaranteed that all share
**   the same cookie value.
**
**   Immediately following the configuration cookie, the record begins with
**   three varints:
**
**     + number of levels,
**     + total number of segments on all levels,
**     + value of write counter.
**
**   Then, for each level from 0 to nMax:
**
**     + number of input segments in ongoing merge.
**     + total number of segments in level.
**     + for each segment from oldest to newest:
**         + segment id (always &gt; 0)
**         + first leaf page number (often 1, always greater than 0)
**         + final leaf page number
**
** 2. The Averages Record:
**
**   A single record within the %_data table. The data is a list of varints.
**   The first value is the number of rows in the index. Then, for each column
**   from left to right, the total number of tokens in the column for all
**   rows of the table.
**
** 3. Segment leaves:
**
**   TERM/DOCLIST FORMAT:
**
**     Most of each segment leaf is taken up by term/doclist data. The 
**     general format of term/doclist, starting with the first term
**     on the leaf page, is:
**
**         varint : size of first term
**         blob:    first term data
**         doclist: first doclist
**         zero-or-more {
**           varint:  number of bytes in common with previous term
**           varint:  number of bytes of new term data (nNew)
**           blob:    nNew bytes of new term data
**           doclist: next doclist
**         }
**
**     doclist format:
**
**         varint:  first rowid
**         poslist: first poslist
**         zero-or-more {
**           varint:  rowid delta (always &gt; 0)
**           poslist: next poslist
**         }
**
**     poslist format:
**
**         varint: size of poslist in bytes multiplied by 2, not including
**                 this field. Plus 1 if this entry carries the "delete" flag.
**         collist: collist for column 0
**         zero-or-more {
**           0x01 byte
**           varint: column number (I)
**           collist: collist for column I
**         }
**
**     collist format:
**
**         varint: first offset + 2
**         zero-or-more {
**           varint: offset delta + 2
**         }
**
**   PAGE FORMAT
**
**     Each leaf page begins with a 4-byte header containing 2 16-bit 
**     unsigned integer fields in big-endian format. They are:
**
**       * The byte offset of the first rowid on the page, if it exists
**         and occurs before the first term (otherwise 0).
**
**       * The byte offset of the start of the page footer. If the page
**         footer is 0 bytes in size, then this field is the same as the
**         size of the leaf page in bytes.
**
**     The page footer consists of a single varint for each term located
**     on the page. Each varint is the byte offset of the current term
**     within the page, delta-compressed against the previous value. In
**     other words, the first varint in the footer is the byte offset of
**     the first term, the second is the byte offset of the second less that
**     of the first, and so on.
**
**     The term/doclist format described above is accurate if the entire
**     term/doclist data fits on a single leaf page. If this is not the case,
**     the format is changed in two ways:
**
**       + if the first rowid on a page occurs before the first term, it
**         is stored as a literal value:
**
**             varint:  first rowid
**
**       + the first term on each page is stored in the same way as the
**         very first term of the segment:
**
**             varint : size of first term
**             blob:    first term data
**
** 5. Segment doclist indexes:
**
**   Doclist indexes are themselves b-trees, however they usually consist of
**   a single leaf record only. The format of each doclist index leaf page 
**   is:
**
**     * Flags byte. Bits are:
**         0x01: Clear if leaf is also the root page, otherwise set.
**
**     * Page number of fts index leaf page. As a varint.
**
**     * First rowid on page indicated by previous field. As a varint.
**
**     * A list of varints, one for each subsequent termless page. A 
**       positive delta if the termless page contains at least one rowid, 
**       or an 0x00 byte otherwise.
**
**   Internal doclist index nodes are:
**
**     * Flags byte. Bits are:
**         0x01: Clear for root page, otherwise set.
**
**     * Page number of first child page. As a varint.
**
**     * Copy of first rowid on page indicated by previous field. As a varint.
**
**     * A list of delta-encoded varints - the first rowid on each subsequent
**       child page. 
**
*/</comment>

<comment type="block">/*
** Rowids for the averages and structure records in the %_data table.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_AVERAGES_ROWID</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>    <comment type="block">/* Rowid used for the averages record */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_STRUCTURE_ROWID</name></cpp:macro>   <cpp:value>10</cpp:value></cpp:define>    <comment type="block">/* The structure record */</comment>

<comment type="block">/*
** Macros determining the rowids used by segment leaves and dlidx leaves
** and nodes. All nodes and leaves are stored in the %_data table with large
** positive rowids.
**
** Each segment has a unique non-zero 16-bit id.
**
** The rowid for each segment leaf is found by passing the segment id and 
** the leaf page number to the FTS5_SEGMENT_ROWID macro. Leaves are numbered
** sequentially starting from 1.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_DATA_ID_B</name></cpp:macro>     <cpp:value>16</cpp:value></cpp:define>     <comment type="block">/* Max seg id number 65535 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_DATA_DLI_B</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>     <comment type="block">/* Doclist-index flag (1 bit) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_DATA_HEIGHT_B</name></cpp:macro>  <cpp:value>5</cpp:value></cpp:define>     <comment type="block">/* Max dlidx tree height of 32 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_DATA_PAGE_B</name></cpp:macro>   <cpp:value>31</cpp:value></cpp:define>     <comment type="block">/* Max page number of 2147483648 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5_dri</name><parameter_list>(<parameter><type><name>segid</name></type></parameter>, <parameter><type><name>dlidx</name></type></parameter>, <parameter><type><name>height</name></type></parameter>, <parameter><type><name>pgno</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(                                 \
 ((i64)(segid)  &lt;&lt; (FTS5_DATA_PAGE_B+FTS5_DATA_HEIGHT_B+FTS5_DATA_DLI_B)) +    \
 ((i64)(dlidx)  &lt;&lt; (FTS5_DATA_PAGE_B + FTS5_DATA_HEIGHT_B)) +                  \
 ((i64)(height) &lt;&lt; (FTS5_DATA_PAGE_B)) +                                       \
 ((i64)(pgno))                                                                 \
)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_SEGMENT_ROWID</name><parameter_list>(<parameter><type><name>segid</name></type></parameter>, <parameter><type><name>pgno</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>fts5_dri(segid, 0, 0, pgno)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_DLIDX_ROWID</name><parameter_list>(<parameter><type><name>segid</name></type></parameter>, <parameter><type><name>height</name></type></parameter>, <parameter><type><name>pgno</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fts5_dri(segid, 1, height, pgno)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
<function><type><name>int</name></type> <name>sqlite3Fts5Corrupt</name><parameter_list>()</parameter_list> <block>{<block_content> <return>return <expr><name>SQLITE_CORRUPT_VTAB</name></expr>;</return> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Each time a blob is read from the %_data table, it is padded with this
** many zero bytes. This makes it easier to decode the various record formats
** without overreading if the records are corrupt.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_DATA_ZERO_PADDING</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_DATA_PADDING</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>Fts5Data</name></name></type> <name>Fts5Data</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5DlidxIter</name></name></type> <name>Fts5DlidxIter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5DlidxLvl</name></name></type> <name>Fts5DlidxLvl</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5DlidxWriter</name></name></type> <name>Fts5DlidxWriter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5Iter</name></name></type> <name>Fts5Iter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5PageWriter</name></name></type> <name>Fts5PageWriter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5SegIter</name></name></type> <name>Fts5SegIter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5DoclistIter</name></name></type> <name>Fts5DoclistIter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5SegWriter</name></name></type> <name>Fts5SegWriter</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5Structure</name></name></type> <name>Fts5Structure</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5StructureLevel</name></name></type> <name>Fts5StructureLevel</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5StructureSegment</name></name></type> <name>Fts5StructureSegment</name>;</typedef>

<struct>struct <name>Fts5Data</name> <block>{
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>                          <comment type="block">/* Pointer to buffer containing record */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nn</name></decl>;</decl_stmt>                         <comment type="block">/* Size of record in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>szLeaf</name></decl>;</decl_stmt>                     <comment type="block">/* Size of leaf without page-index */</comment>
}</block>;</struct>

<comment type="block">/*
** One object per %_data table.
*/</comment>
<struct>struct <name>Fts5Index</name> <block>{
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl>;</decl_stmt>            <comment type="block">/* Virtual table configuration */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDataTbl</name></decl>;</decl_stmt>                 <comment type="block">/* Name of %_data table */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nWorkUnit</name></decl>;</decl_stmt>                  <comment type="block">/* Leaf pages in a "unit" of work */</comment>

  <comment type="block">/*
  ** Variables related to the accumulation of tokens and doclists within the
  ** in-memory hash tables before they are flushed to disk.
  */</comment>
  <decl_stmt><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name></decl>;</decl_stmt>                <comment type="block">/* Hash table for in-memory data */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPendingData</name></decl>;</decl_stmt>               <comment type="block">/* Current bytes of pending data */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iWriteRowid</name></decl>;</decl_stmt>                <comment type="block">/* Rowid for current doc being written */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bDelete</name></decl>;</decl_stmt>                    <comment type="block">/* Current write is a delete */</comment>

  <comment type="block">/* Error state. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Current error code */</comment>

  <comment type="block">/* State used by the fts5DataXXX() functions. */</comment>
  <decl_stmt><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pReader</name></decl>;</decl_stmt>          <comment type="block">/* RO incr-blob open on %_data table */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pWriter</name></decl>;</decl_stmt>          <comment type="block">/* "INSERT ... %_data VALUES(?,?)" */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pDeleter</name></decl>;</decl_stmt>         <comment type="block">/* "DELETE FROM %_data ... id&gt;=? AND id&lt;=?" */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pIdxWriter</name></decl>;</decl_stmt>       <comment type="block">/* "INSERT ... %_idx VALUES(?,?,?,?)" */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pIdxDeleter</name></decl>;</decl_stmt>      <comment type="block">/* "DELETE FROM %_idx WHERE segid=?" */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pIdxSelect</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRead</name></decl>;</decl_stmt>                      <comment type="block">/* Total number of blocks read */</comment>

  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pDataVersion</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iStructVersion</name></decl>;</decl_stmt>             <comment type="block">/* data_version when pStruct read */</comment>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl>;</decl_stmt>         <comment type="block">/* Current db structure (or NULL) */</comment>
}</block>;</struct>

<struct>struct <name>Fts5DoclistIter</name> <block>{
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aEof</name></decl>;</decl_stmt>                       <comment type="block">/* Pointer to 1 byte past end of doclist */</comment>

  <comment type="block">/* Output variables. aPoslist==0 at EOF */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aPoslist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPoslist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nSize</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** The contents of the "structure" record for each index are represented
** using an Fts5Structure record in memory. Which uses instances of the 
** other Fts5StructureXXX types as components.
*/</comment>
<struct>struct <name>Fts5StructureSegment</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name></decl>;</decl_stmt>                     <comment type="block">/* Segment id */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pgnoFirst</name></decl>;</decl_stmt>                  <comment type="block">/* First leaf page number in segment */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>pgnoLast</name></decl>;</decl_stmt>                   <comment type="block">/* Last leaf page number in segment */</comment>
}</block>;</struct>
<struct>struct <name>Fts5StructureLevel</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nMerge</name></decl>;</decl_stmt>                     <comment type="block">/* Number of segments in incr-merge */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSeg</name></decl>;</decl_stmt>                       <comment type="block">/* Total number of segments on level */</comment>
  <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>aSeg</name></decl>;</decl_stmt>     <comment type="block">/* Array of segments. aSeg[0] is oldest. */</comment>
}</block>;</struct>
<struct>struct <name>Fts5Structure</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nRef</name></decl>;</decl_stmt>                       <comment type="block">/* Object reference count */</comment>
  <decl_stmt><decl><type><name>u64</name></type> <name>nWriteCounter</name></decl>;</decl_stmt>              <comment type="block">/* Total leaves written to level 0 */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSegment</name></decl>;</decl_stmt>                   <comment type="block">/* Total segments in this structure */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nLevel</name></decl>;</decl_stmt>                     <comment type="block">/* Number of levels in this index */</comment>
  <decl_stmt><decl><type><name>Fts5StructureLevel</name></type> <name><name>aLevel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* Array of nLevel level objects */</comment>
}</block>;</struct>

<comment type="block">/*
** An object of type Fts5SegWriter is used to write to segments.
*/</comment>
<struct>struct <name>Fts5PageWriter</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>pgno</name></decl>;</decl_stmt>                       <comment type="block">/* Page number for this page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iPrevPgidx</name></decl>;</decl_stmt>                 <comment type="block">/* Previous value written into pgidx */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf</name></decl>;</decl_stmt>                 <comment type="block">/* Buffer containing leaf data */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>pgidx</name></decl>;</decl_stmt>               <comment type="block">/* Buffer containing page-index */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>term</name></decl>;</decl_stmt>                <comment type="block">/* Buffer containing previous term on page */</comment>
}</block>;</struct>
<struct>struct <name>Fts5DlidxWriter</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>pgno</name></decl>;</decl_stmt>                       <comment type="block">/* Page number for this page */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bPrevValid</name></decl>;</decl_stmt>                 <comment type="block">/* True if iPrev is valid */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iPrev</name></decl>;</decl_stmt>                      <comment type="block">/* Previous rowid value written to page */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf</name></decl>;</decl_stmt>                 <comment type="block">/* Buffer containing page data */</comment>
}</block>;</struct>
<struct>struct <name>Fts5SegWriter</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name></decl>;</decl_stmt>                     <comment type="block">/* Segid to write to */</comment>
  <decl_stmt><decl><type><name>Fts5PageWriter</name></type> <name>writer</name></decl>;</decl_stmt>          <comment type="block">/* PageWriter object */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iPrevRowid</name></decl>;</decl_stmt>                 <comment type="block">/* Previous rowid written to current leaf */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>bFirstRowidInDoclist</name></decl>;</decl_stmt>        <comment type="block">/* True if next rowid is first in doclist */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>bFirstRowidInPage</name></decl>;</decl_stmt>           <comment type="block">/* True if next rowid is first in page */</comment>
  <comment type="block">/* TODO1: Can use (writer.pgidx.n==0) instead of bFirstTermInPage */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>bFirstTermInPage</name></decl>;</decl_stmt>            <comment type="block">/* True if next term will be first in leaf */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nLeafWritten</name></decl>;</decl_stmt>               <comment type="block">/* Number of leaf pages written */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nEmpty</name></decl>;</decl_stmt>                     <comment type="block">/* Number of contiguous term-less nodes */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>nDlidx</name></decl>;</decl_stmt>                     <comment type="block">/* Allocated size of aDlidx[] array */</comment>
  <decl_stmt><decl><type><name>Fts5DlidxWriter</name> <modifier>*</modifier></type><name>aDlidx</name></decl>;</decl_stmt>        <comment type="block">/* Array of Fts5DlidxWriter objects */</comment>

  <comment type="block">/* Values to insert into the %_idx table */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>btterm</name></decl>;</decl_stmt>              <comment type="block">/* Next term to insert into %_idx table */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iBtPage</name></decl>;</decl_stmt>                    <comment type="block">/* Page number corresponding to btterm */</comment>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>Fts5CResult</name></name></type> <name>Fts5CResult</name>;</typedef>
<struct>struct <name>Fts5CResult</name> <block>{
  <decl_stmt><decl><type><name>u16</name></type> <name>iFirst</name></decl>;</decl_stmt>                     <comment type="block">/* aSeg[] index of firstest iterator */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>bTermEq</name></decl>;</decl_stmt>                     <comment type="block">/* True if the terms are equal */</comment>
}</block>;</struct>

<comment type="block">/*
** Object for iterating through a single segment, visiting each term/rowid
** pair in the segment.
**
** pSeg:
**   The segment to iterate through.
**
** iLeafPgno:
**   Current leaf page number within segment.
**
** iLeafOffset:
**   Byte offset within the current leaf that is the first byte of the 
**   position list data (one byte passed the position-list size field).
**   rowid field of the current entry. Usually this is the size field of the
**   position list data. The exception is if the rowid for the current entry 
**   is the last thing on the leaf page.
**
** pLeaf:
**   Buffer containing current leaf page data. Set to NULL at EOF.
**
** iTermLeafPgno, iTermLeafOffset:
**   Leaf page number containing the last term read from the segment. And
**   the offset immediately following the term data.
**
** flags:
**   Mask of FTS5_SEGITER_XXX values. Interpreted as follows:
**
**   FTS5_SEGITER_ONETERM:
**     If set, set the iterator to point to EOF after the current doclist 
**     has been exhausted. Do not proceed to the next term in the segment.
**
**   FTS5_SEGITER_REVERSE:
**     This flag is only ever set if FTS5_SEGITER_ONETERM is also set. If
**     it is set, iterate through rowid in descending order instead of the
**     default ascending order.
**
** iRowidOffset/nRowidOffset/aRowidOffset:
**     These are used if the FTS5_SEGITER_REVERSE flag is set.
**
**     For each rowid on the page corresponding to the current term, the
**     corresponding aRowidOffset[] entry is set to the byte offset of the
**     start of the "position-list-size" field within the page.
**
** iTermIdx:
**     Index of current term on iTermLeafPgno.
*/</comment>
<struct>struct <name>Fts5SegIter</name> <block>{
  <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name></decl>;</decl_stmt>     <comment type="block">/* Segment to iterate through */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>                      <comment type="block">/* Mask of configuration flags */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iLeafPgno</name></decl>;</decl_stmt>                  <comment type="block">/* Current leaf page number */</comment>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name></decl>;</decl_stmt>                <comment type="block">/* Current leaf data */</comment>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pNextLeaf</name></decl>;</decl_stmt>            <comment type="block">/* Leaf page (iLeafPgno+1) */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLeafOffset</name></decl>;</decl_stmt>                <comment type="block">/* Byte offset within current leaf */</comment>

  <comment type="block">/* Next method */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xNext</name>)<parameter_list>(<parameter><decl><type><name>Fts5Index</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block">/* The page and offset from which the current term was read. The offset 
  ** is the offset of the first rowid in the current doclist.  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iTermLeafPgno</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iTermLeafOffset</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>iPgidxOff</name></decl>;</decl_stmt>                  <comment type="block">/* Next offset in pgidx */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iEndofDoclist</name></decl>;</decl_stmt>

  <comment type="block">/* The following are only used if the FTS5_SEGITER_REVERSE flag is set. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iRowidOffset</name></decl>;</decl_stmt>               <comment type="block">/* Current entry in aRowidOffset[] */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRowidOffset</name></decl>;</decl_stmt>               <comment type="block">/* Allocated size of aRowidOffset[] array */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aRowidOffset</name></decl>;</decl_stmt>              <comment type="block">/* Array of offset to rowid fields */</comment>

  <decl_stmt><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pDlidx</name></decl>;</decl_stmt>          <comment type="block">/* If there is a doclist-index */</comment>

  <comment type="block">/* Variables populated based on current entry. */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>term</name></decl>;</decl_stmt>                <comment type="block">/* Current term */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>                     <comment type="block">/* Current rowid */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPos</name></decl>;</decl_stmt>                       <comment type="block">/* Number of bytes in current position list */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>bDel</name></decl>;</decl_stmt>                        <comment type="block">/* True if the delete flag is set */</comment>
}</block>;</struct>

<comment type="block">/*
** Argument is a pointer to an Fts5Data structure that contains a 
** leaf page.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_SZLEAF_OK</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert( \
    (x)-&gt;szLeaf==(x)-&gt;nn || (x)-&gt;szLeaf==fts5GetU16(&amp;(x)-&gt;p[2]) \
)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_SEGITER_ONETERM</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_SEGITER_REVERSE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<comment type="block">/* 
** Argument is a pointer to an Fts5Data structure that contains a leaf
** page. This macro evaluates to true if the leaf contains no terms, or
** false if it contains at least one term.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5LeafIsTermless</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;szLeaf &gt;= (x)-&gt;nn)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5LeafTermOff</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fts5GetU16(&amp;(x)-&gt;p[(x)-&gt;szLeaf + (i)*2]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5LeafFirstRowidOff</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fts5GetU16((x)-&gt;p))</cpp:value></cpp:define>

<comment type="block">/*
** Object for iterating through the merged results of one or more segments,
** visiting each term/rowid pair in the merged data.
**
** nSeg is always a power of two greater than or equal to the number of
** segments that this object is merging data from. Both the aSeg[] and
** aFirst[] arrays are sized at nSeg entries. The aSeg[] array is padded
** with zeroed objects - these are handled as if they were iterators opened
** on empty segments.
**
** The results of comparing segments aSeg[N] and aSeg[N+1], where N is an
** even number, is stored in aFirst[(nSeg+N)/2]. The "result" of the 
** comparison in this context is the index of the iterator that currently
** points to the smaller term/rowid combination. Iterators at EOF are
** considered to be greater than all other iterators.
**
** aFirst[1] contains the index in aSeg[] of the iterator that points to
** the smallest key overall. aFirst[0] is unused. 
**
** poslist:
**   Used by sqlite3Fts5IterPoslist() when the poslist needs to be buffered.
**   There is no way to tell if this is populated or not.
*/</comment>
<struct>struct <name>Fts5Iter</name> <block>{
  <decl_stmt><decl><type><name>Fts5IndexIter</name></type> <name>base</name></decl>;</decl_stmt>             <comment type="block">/* Base class containing output vars */</comment>

  <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIndex</name></decl>;</decl_stmt>              <comment type="block">/* Index that owns this iterator */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>poslist</name></decl>;</decl_stmt>             <comment type="block">/* Buffer containing current poslist */</comment>
  <decl_stmt><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl>;</decl_stmt>            <comment type="block">/* Restrict matches to these columns */</comment>

  <comment type="block">/* Invoked to set output variables. */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xSetOutputs</name>)<parameter_list>(<parameter><decl><type><name>Fts5Iter</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <decl_stmt><decl><type><name>int</name></type> <name>nSeg</name></decl>;</decl_stmt>                       <comment type="block">/* Size of aSeg[] array */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bRev</name></decl>;</decl_stmt>                       <comment type="block">/* True to iterate in reverse order */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name>bSkipEmpty</name></decl>;</decl_stmt>                  <comment type="block">/* True to skip deleted entries */</comment>

  <decl_stmt><decl><type><name>i64</name></type> <name>iSwitchRowid</name></decl>;</decl_stmt>               <comment type="block">/* Firstest rowid of other than aFirst[1] */</comment>
  <decl_stmt><decl><type><name>Fts5CResult</name> <modifier>*</modifier></type><name>aFirst</name></decl>;</decl_stmt>            <comment type="block">/* Current merge state (see above) */</comment>
  <decl_stmt><decl><type><name>Fts5SegIter</name></type> <name><name>aSeg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>            <comment type="block">/* Array of segment iterators */</comment>
}</block>;</struct>


<comment type="block">/*
** An instance of the following type is used to iterate through the contents
** of a doclist-index record.
**
** pData:
**   Record containing the doclist-index data.
**
** bEof:
**   Set to true once iterator has reached EOF.
**
** iOff:
**   Set to the current offset within record pData.
*/</comment>
<struct>struct <name>Fts5DlidxLvl</name> <block>{
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>              <comment type="block">/* Data for current page of this level */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>                     <comment type="block">/* Current offset into pData */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bEof</name></decl>;</decl_stmt>                     <comment type="block">/* At EOF already */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iFirstOff</name></decl>;</decl_stmt>                <comment type="block">/* Used by reverse iterators */</comment>

  <comment type="block">/* Output variables */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iLeafPgno</name></decl>;</decl_stmt>                <comment type="block">/* Page number of current leaf page */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>                   <comment type="block">/* First rowid on leaf iLeafPgno */</comment>
}</block>;</struct>
<struct>struct <name>Fts5DlidxIter</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nLvl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5DlidxLvl</name></type> <name><name>aLvl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5PutU16</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>, <parameter><decl><type><name>u16</name></type> <name>iVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>aOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aOut</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name><operator>&amp;</operator><literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>u16</name></type> <name>fts5GetU16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aIn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator><operator>(</operator><name>u16</name><operator>)</operator><name><name>aIn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name><name>aIn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function> 

<comment type="block">/*
** Allocate and return a buffer at least nByte bytes in size.
**
** If an OOM error is encountered, return NULL and set the error code in
** the Fts5Index handle passed as the first argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fts5IdxMalloc</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Compare the contents of the pLeft buffer with the pRight/nRight blob.
**
** Return -ve if pLeft is smaller than pRight, 0 if they are equal or
** +ve if pRight is smaller than pLeft. In other words:
**
**     res = *pLeft - *pRight
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5BufferCompareBlob</name><parameter_list>(
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pLeft</name></decl></parameter>,              <comment type="block">/* Left hand side of comparison */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pRight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nRight</name></decl></parameter>    <comment type="block">/* Right hand side of comparison */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCmp</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>pLeft</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>nRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pLeft</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>pRight</name></expr></argument>, <argument><expr><name>nCmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>res</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>pLeft</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name>nRight</name><operator>)</operator></expr> </then><else>: <expr><name>res</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Compare the contents of the two buffers using memcmp(). If one buffer
** is a prefix of the other, it is considered the lesser.
**
** Return -ve if pLeft is smaller than pRight, 0 if they are equal or
** +ve if pRight is smaller than pLeft. In other words:
**
**     res = *pLeft - *pRight
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5BufferCompare</name><parameter_list>(<parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pLeft</name></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pRight</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCmp</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>nCmp</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>pLeft</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pRight</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nCmp</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pLeft</name><operator>-&gt;</operator><name>p</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nCmp</name><operator>&lt;=</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pRight</name><operator>-&gt;</operator><name>p</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fts5Memcmp</name><argument_list>(<argument><expr><name><name>pLeft</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pRight</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>nCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>res</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name><name>pLeft</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name><name>pRight</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator></expr> </then><else>: <expr><name>res</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5LeafFirstTermOff</name><parameter_list>(<parameter><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close the read-only blob handle, if it is open.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5IndexCloseReader</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pReader</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_blob_close</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Retrieve a record from the %_data table.
**
** If an error occurs, NULL is returned and an error left in the 
** Fts5Index object.
*/</comment>
<function><type><specifier>static</specifier> <name>Fts5Data</name> <modifier>*</modifier></type><name>fts5DataRead</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name></expr> )</condition><block>{<block_content>
      <comment type="block">/* This call may return SQLITE_ABORT if there has been a savepoint
      ** rollback since it was last used. In this case a new blob handle
      ** is required.  */</comment>
      <decl_stmt><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_blob_reopen</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name> <operator>=</operator> <name>pBlob</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Fts5IndexCloseReader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ABORT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the blob handle is not open at this point, open it and seek 
    ** to the requested entry.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_blob_open</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, 
          <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>, <argument><expr><literal type="string">"block"</literal></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If either of the sqlite3_blob_open() or sqlite3_blob_reopen() calls
    ** above returned SQLITE_ERROR, return SQLITE_CORRUPT_VTAB instead.
    ** All the reasons those functions might return SQLITE_ERROR - missing
    ** table, missing row, non-blob/text in block column - indicate 
    ** backing store corruption.  */</comment>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ERROR</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Read blob data into this buffer */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><call><name>sqlite3_blob_bytes</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nAlloc</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Data</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nByte</name> <operator>+</operator> <name>FTS5_DATA_PADDING</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <operator>(</operator><name>Fts5Data</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pRet</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nn</name></name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>aOut</name> <operator>=</operator> <name><name>pRet</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pRet</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_blob_read</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name></expr></argument>, <argument><expr><name>aOut</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <comment type="block">/* TODO1: Fix this */</comment>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>nByte</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>nByte</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>=</operator> <call><name>fts5GetU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRet</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRead</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>pRet</name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>==</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Release a reference to data record returned by an earlier call to
** fts5DataRead().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DataRelease</name><parameter_list>(<parameter><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Fts5Data</name> <modifier>*</modifier></type><name>fts5LeafRead</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pRet</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pRet</name><operator>-&gt;</operator><name>nn</name></name><operator>&lt;</operator><literal type="number">4</literal> <operator>||</operator> <name><name>pRet</name><operator>-&gt;</operator><name>szLeaf</name></name><operator>&gt;</operator><name><name>pRet</name><operator>-&gt;</operator><name>nn</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5IndexPrepareStmt</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStmt</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>zSql</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
          <argument><expr><name>SQLITE_PREPARE_PERSISTENT</name><operator>|</operator><name>SQLITE_PREPARE_NO_VTAB</name></expr></argument>,
          <argument><expr><name>ppStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** INSERT OR REPLACE a record into the %_data table.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DataWrite</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pWriter</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5IndexPrepareStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>, <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"REPLACE INTO '%q'.'%q_data'(id, block) VALUES(?,?)"</literal></expr></argument>, 
          <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Execute the following SQL:
**
**     DELETE FROM %_data WHERE id BETWEEN $iFirst AND $iLast
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DataDelete</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iFirst</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iLast</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDeleter</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(
        <argument><expr><literal type="string">"DELETE FROM '%q'.'%q_data' WHERE id&gt;=? AND id&lt;=?"</literal></expr></argument>, 
          <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>fts5IndexPrepareStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pDeleter</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDeleter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDeleter</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>iLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDeleter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDeleter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Remove all records associated with segment iSegid.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DataRemoveSegment</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSegid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iFirst</name> <init>= <expr><call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name>iSegid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLast</name> <init>= <expr><call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name>iSegid</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5DataDelete</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>, <argument><expr><name>iLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pIdxDeleter</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5IndexPrepareStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pIdxDeleter</name></name></expr></argument>, <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"DELETE FROM '%q'.'%q_idx' WHERE segid=?"</literal></expr></argument>,
          <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxDeleter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iSegid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxDeleter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxDeleter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Release a reference to an Fts5Structure object returned by an earlier 
** call to fts5StructureRead() or fts5StructureDecode().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StructureRelease</name><parameter_list>(<parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pStruct</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>&gt;=</operator><operator>(</operator><operator>--</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nRef</name></name><operator>)</operator></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nRef</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StructureRef</name><parameter_list>(<parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nRef</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sqlite3Fts5StructureRef</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5StructureRef</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>sqlite3Fts5StructureRelease</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Structure</name><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>sqlite3Fts5StructureTest</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name><operator>!=</operator><operator>(</operator><name>Fts5Structure</name><operator>*</operator><operator>)</operator><name>pStruct</name></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_ABORT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Ensure that structure object (*pp) is writable.
**
** This function is a no-op if (*pRc) is not SQLITE_OK when it is called. If
** an error occurs, (*pRc) is set to an SQLite error code before returning.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StructureMakeWritable</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nRef</name></name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Structure</name></expr></argument>)</argument_list></sizeof><operator>+</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nLevel</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureLevel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>Fts5Structure</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aSeg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureSegment</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pNew</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nSeg</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name></name> <operator>=</operator> <operator>(</operator><name>Fts5StructureSegment</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aSeg</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRef</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Deserialize and return the structure record currently stored in serialized
** form within buffer pData/nData.
**
** The Fts5Structure.aLevel[] and each Fts5StructureLevel.aSeg[] array
** are over-allocated by one slot. This allows the structure contents
** to be more easily edited.
**
** If an error occurs, *ppOut is set to NULL and an SQLite error code
** returned. Otherwise, *ppOut is set to point to the new object and
** SQLITE_OK returned.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StructureDecode</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,                <comment type="block">/* Buffer containing serialized structure */</comment>
  <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>,                      <comment type="block">/* Size of buffer pData in bytes */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piCookie</name></decl></parameter>,                  <comment type="block">/* Configuration cookie value */</comment>
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>           <comment type="block">/* OUT: Deserialized object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nLevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nSegment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl>;</decl_stmt>            <comment type="block">/* Bytes of space to allocate at pRet */</comment>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Structure object to return */</comment>

  <comment type="block">/* Grab the cookie value */</comment>
  <if_stmt><if>if<condition>( <expr><name>piCookie</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>piCookie</name> <operator>=</operator> <call><name>sqlite3Fts5Get32</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

  <comment type="block">/* Read the total number of levels and segments from the start of the
  ** structure record.  */</comment>
  <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>nLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>nSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLevel</name><operator>&gt;</operator><name>FTS5_MAX_SEGMENT</name>   <operator>||</operator> <name><name>nLevel</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal>
   <operator>||</operator> <name>nSegment</name></expr></argument>&gt;</argument_list></name><name>FTS5_MAX_SEGMENT</name> <operator>||</operator> <name>nSegment</name><operator>&lt;</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <return>return <expr><name>FTS5_CORRUPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <operator>(</operator>
      <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Structure</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>                    <comment type="block">/* Main structure */</comment>
      <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureLevel</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nLevel</name><operator>-</operator><literal type="number">1</literal><operator>)</operator>    <comment type="block">/* aLevel[] array */</comment>
  <operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRet</name> <operator>=</operator> <operator>(</operator><name>Fts5Structure</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pRet</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nLevel</name></name> <operator>=</operator> <name>nLevel</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>nSegment</name></name> <operator>=</operator> <name>nSegment</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRet</name><operator>-&gt;</operator><name>nWriteCounter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iLvl</name><operator>&lt;</operator><name>nLevel</name></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pRet</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iSeg</name></decl>;</decl_stmt>

      <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>nData</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>nTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>nTotal</name><operator>&lt;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name></name> <operator>=</operator> <operator>(</operator><name>Fts5StructureSegment</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, 
            <argument><expr><name>nTotal</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureSegment</name></expr></argument>)</argument_list></sizeof></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nSegment</name> <operator>-=</operator> <name>nTotal</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>=</operator> <name>nTotal</name></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>iSeg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeg</name><operator>&lt;</operator><name>nTotal</name></expr>;</condition> <incr><expr><name>iSeg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>nData</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name><operator>&lt;</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if<condition>( <expr><name>iLvl</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pLvl</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>nMerge</name> <operator>&amp;&amp;</operator> <name>nTotal</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>iLvl</name><operator>==</operator><name>nLevel</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>nSegment</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>pRet</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Add a level to the Fts5Structure.aLevel[] array of structure object
** (*ppStruct).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StructureAddLevel</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStruct</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5StructureMakeWritable</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>ppStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name> <init>= <expr><operator>*</operator><name>ppStruct</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nLevel</name> <init>= <expr><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name> <init>= <expr><operator>(</operator>
        <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Structure</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>                  <comment type="block">/* Main structure */</comment>
        <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureLevel</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nLevel</name><operator>+</operator><literal type="number">1</literal><operator>)</operator>  <comment type="block">/* aLevel[] array */</comment>
    <operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>pStruct</name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pStruct</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>nLevel</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureLevel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>ppStruct</name> <operator>=</operator> <name>pStruct</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Extend level iLvl so that there is room for at least nExtra more
** segments.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StructureExtendLevel</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iLvl</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nExtra</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bInsert</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>aNew</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <operator>(</operator><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>+</operator> <name>nExtra</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureSegment</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name>aNew</name> <operator>=</operator> <call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>aNew</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>bInsert</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aNew</name><index>[<expr><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureSegment</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nMove</name> <init>= <expr><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureSegment</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aNew</name><index>[<expr><name>nExtra</name></expr>]</index></name></expr></argument>, <argument><expr><name>aNew</name></expr></argument>, <argument><expr><name>nMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureSegment</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Fts5Structure</name> <modifier>*</modifier></type><name>fts5StructureReadUncached</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCookie</name></decl>;</decl_stmt>                    <comment type="block">/* Configuration cookie */</comment>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STRUCTURE_ROWID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* TODO: Do we need this if the leaf-index is appended? Probably... */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pData</name><operator>-&gt;</operator><name>nn</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FTS5_DATA_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>fts5StructureDecode</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>nn</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCookie</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pConfig</name><operator>-&gt;</operator><name>pgsz</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>iCookie</name></name><operator>!=</operator><name>iCookie</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3Fts5ConfigLoad</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>iCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>i64</name></type> <name>fts5IndexDataVersion</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iVersion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pDataVersion</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>fts5IndexPrepareStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pDataVersion</name></name></expr></argument>, 
          <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"PRAGMA %Q.data_version"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>)</argument_list></call></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataVersion</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iVersion</name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataVersion</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>iVersion</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Read, deserialize and return the structure record.
**
** The Fts5Structure.aLevel[] and each Fts5StructureLevel.aSeg[] array
** are over-allocated as described for function fts5StructureDecode() 
** above.
**
** If an error occurs, NULL is returned and an error code left in the
** Fts5Index handle. If an error has already occurred when this function
** is called, it is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>Fts5Structure</name> <modifier>*</modifier></type><name>fts5StructureRead</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iStructVersion</name></name> <operator>=</operator> <call><name>fts5IndexDataVersion</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name> <operator>=</operator> <call><name>fts5StructureReadUncached</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  else{
    Fts5Structure *pTest = fts5StructureReadUncached(p);
    if( pTest ){
      int i, j;
      assert_nc( p-&gt;pStruct-&gt;nSegment==pTest-&gt;nSegment );
      assert_nc( p-&gt;pStruct-&gt;nLevel==pTest-&gt;nLevel );
      for(i=0; i&lt;pTest-&gt;nLevel; i++){
        assert_nc( p-&gt;pStruct-&gt;aLevel[i].nMerge==pTest-&gt;aLevel[i].nMerge );
        assert_nc( p-&gt;pStruct-&gt;aLevel[i].nSeg==pTest-&gt;aLevel[i].nSeg );
        for(j=0; j&lt;pTest-&gt;aLevel[i].nSeg; j++){
          Fts5StructureSegment *p1 = &amp;pTest-&gt;aLevel[i].aSeg[j];
          Fts5StructureSegment *p2 = &amp;p-&gt;pStruct-&gt;aLevel[i].aSeg[j];
          assert_nc( p1-&gt;iSegid==p2-&gt;iSegid );
          assert_nc( p1-&gt;pgnoFirst==p2-&gt;pgnoFirst );
          assert_nc( p1-&gt;pgnoLast==p2-&gt;pgnoLast );
        }
      }
      fts5StructureRelease(pTest);
    }
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iStructVersion</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StructureRef</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StructureInvalidate</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return the total number of segments in index structure pStruct. This
** function is only ever used as part of assert() conditions.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StructureCountSegments</name><parameter_list>(<parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nSegment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Total number of segments */</comment>
  <if_stmt><if>if<condition>( <expr><name>pStruct</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name></decl>;</decl_stmt>                     <comment type="block">/* Used to iterate through levels */</comment>
    <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iLvl</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>nSegment</name> <operator>+=</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>nSegment</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5BufferSafeAppendBlob</name><parameter_list>(<parameter><type><name>pBuf</name></type></parameter>, <parameter><type><name>pBlob</name></type></parameter>, <parameter><type><name>nBlob</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{     \
  assert( (pBuf)-&gt;nSpace&gt;=((pBuf)-&gt;n+nBlob) );             \
  memcpy(&amp;(pBuf)-&gt;p[(pBuf)-&gt;n], pBlob, nBlob);             \
  (pBuf)-&gt;n += nBlob;                                      \
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5BufferSafeAppendVarint</name><parameter_list>(<parameter><type><name>pBuf</name></type></parameter>, <parameter><type><name>iVal</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{                \
  (pBuf)-&gt;n += sqlite3Fts5PutVarint(&amp;(pBuf)-&gt;p[(pBuf)-&gt;n], (iVal));  \
  assert( (pBuf)-&gt;nSpace&gt;=(pBuf)-&gt;n );                          \
}</cpp:value></cpp:define>


<comment type="block">/*
** Serialize and store the "structure" record.
**
** If an error occurs, leave an error code in the Fts5Index object. If an
** error has already occurred, this function is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StructureWrite</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf</name></decl>;</decl_stmt>               <comment type="block">/* Buffer to serialize record into */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name></decl>;</decl_stmt>                     <comment type="block">/* Used to iterate through levels */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iCookie</name></decl>;</decl_stmt>                  <comment type="block">/* Cookie value to store */</comment>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name><operator>==</operator><call><name>fts5StructureCountSegments</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Append the current configuration cookie */</comment>
    <expr_stmt><expr><name>iCookie</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>iCookie</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iCookie</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iCookie</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3Fts5BufferSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal><operator>+</operator><literal type="number">9</literal><operator>+</operator><literal type="number">9</literal><operator>+</operator><literal type="number">9</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5Put32</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>iCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>i64</name><operator>)</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nWriteCounter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iLvl</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iSeg</name></decl>;</decl_stmt>                     <comment type="block">/* Used to iterate through segments */</comment>
      <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name><operator>&lt;=</operator><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

      <for>for<control>(<init><expr><name>iSeg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeg</name><operator>&lt;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name></expr>;</condition> <incr><expr><name>iSeg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name><operator>.</operator><name>iSegid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name><operator>.</operator><name>pgnoFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name><operator>.</operator><name>pgnoLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>fts5DataWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STRUCTURE_ROWID</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void fts5DebugStructure(int*,Fts5Buffer*,Fts5Structure*);
static void fts5PrintStructure(const char *zCaption, Fts5Structure *pStruct){
  int rc = SQLITE_OK;
  Fts5Buffer buf;
  memset(&amp;buf, 0, sizeof(buf));
  fts5DebugStructure(&amp;rc, &amp;buf, pStruct);
  fprintf(stdout, "%s: %s\n", zCaption, buf.p);
  fflush(stdout);
  fts5BufferFree(&amp;buf);
}
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>fts5PrintStructure</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5SegmentSize</name><parameter_list>(<parameter><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">1</literal> <operator>+</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name> <operator>-</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return a copy of index structure pStruct. Except, promote as many 
** segments as possible to level iPromote. If an OOM occurs, NULL is 
** returned.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StructurePromoteTo</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iPromote</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>szPromote</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>il</name></decl>, <decl><type ref="prev"/><name>is</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pOut</name> <init>= <expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iPromote</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pOut</name><operator>-&gt;</operator><name>nMerge</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>il</name><operator>=</operator><name>iPromote</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>il</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>il</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>il</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <for>for<control>(<init><expr><name>is</name><operator>=</operator><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>is</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>is</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name>fts5SegmentSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>is</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>sz</name><operator>&gt;</operator><name>szPromote</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>fts5StructureExtendLevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>, <argument><expr><name>iPromote</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pOut</name><operator>-&gt;</operator><name>aSeg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>is</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureSegment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pOut</name><operator>-&gt;</operator><name>nSeg</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name><operator>--</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** A new segment has just been written to level iLvl of index structure
** pStruct. This function determines if any segments should be promoted
** as a result. Segments are promoted in two scenarios:
**
**   a) If the segment just written is smaller than one or more segments
**      within the previous populated level, it is promoted to the previous
**      populated level.
**
**   b) If the segment just written is larger than the newest segment on
**      the next populated level, then that segment, and any other adjacent
**      segments that are also smaller than the one just written, are 
**      promoted. 
**
** If one or more segments are promoted, the structure object is updated
** to reflect this.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StructurePromote</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>int</name></type> <name>iLvl</name></decl></parameter>,                       <comment type="block">/* Index level just updated */</comment>
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>          <comment type="block">/* Index structure */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iTst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iPromote</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>szPromote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Promote anything this size or smaller */</comment>
    <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name></decl>;</decl_stmt>   <comment type="block">/* Segment just written */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>szSeg</name></decl>;</decl_stmt>                    <comment type="block">/* Size of segment just written */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nSeg</name> <init>= <expr><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>nSeg</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pSeg</name> <operator>=</operator> <operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name><name>aSeg</name><index>[<expr><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>szSeg</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name> <operator>-</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/* Check for condition (a) */</comment>
    <for>for<control>(<init><expr><name>iTst</name><operator>=</operator><name>iLvl</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iTst</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iTst</name></expr>]</index></name><operator>.</operator><name>nSeg</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>iTst</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <if_stmt><if>if<condition>( <expr><name>iTst</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>szMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pTst</name> <init>= <expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iTst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTst</name><operator>-&gt;</operator><name>nMerge</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pTst</name><operator>-&gt;</operator><name>nSeg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name><name>pTst</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pgnoLast</name> <operator>-</operator> <name><name>pTst</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pgnoFirst</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>sz</name><operator>&gt;</operator><name>szMax</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>szMax</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><name>szMax</name><operator>&gt;=</operator><name>szSeg</name></expr> )</condition><block>{<block_content>
        <comment type="block">/* Condition (a) is true. Promote the newest segment on level 
        ** iLvl to level iTst.  */</comment>
        <expr_stmt><expr><name>iPromote</name> <operator>=</operator> <name>iTst</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>szPromote</name> <operator>=</operator> <name>szMax</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If condition (a) is not met, assume (b) is true. StructurePromoteTo()
    ** is a no-op if it is not.  */</comment>
    <if_stmt><if>if<condition>( <expr><name>iPromote</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iPromote</name> <operator>=</operator> <name>iLvl</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>szPromote</name> <operator>=</operator> <name>szSeg</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5StructurePromoteTo</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iPromote</name></expr></argument>, <argument><expr><name>szPromote</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Advance the iterator passed as the only argument. If the end of the 
** doclist-index page is reached, return non-zero.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DlidxLvlNext</name><parameter_list>(<parameter><decl><type><name>Fts5DlidxLvl</name> <modifier>*</modifier></type><name>pLvl</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iFirstOff</name></name> <operator>=</operator> <name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>iOff</name><operator>=</operator><name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name></expr>;</init> <condition><expr><name>iOff</name><operator>&lt;</operator><name><name>pData</name><operator>-&gt;</operator><name>nn</name></name></expr>;</condition> <incr><expr><name>iOff</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt> 
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><name><name>pData</name><operator>-&gt;</operator><name>nn</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iVal</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iLeafPgno</name></name> <operator>+=</operator> <operator>(</operator><name>iOff</name> <operator>-</operator> <name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>+=</operator> <name>iVal</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name><name>pLvl</name><operator>-&gt;</operator><name>bEof</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Advance the iterator passed as the only argument.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DlidxIterNextR</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLvl</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5DlidxLvl</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><name>iLvl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iLvl</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nLvl</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>fts5DlidxLvlNext</name><argument_list>(<argument><expr><name>pLvl</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iLvl</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nLvl</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5DlidxIterNextR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iLvl</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bEof</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pLvl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5DlidxLvl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
            <argument><expr><call><name>FTS5_DLIDX_ROWID</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name>iLvl</name></expr></argument>, <argument><expr><name><name>pLvl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iLeafPgno</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fts5DlidxLvlNext</name><argument_list>(<argument><expr><name>pLvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bEof</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DlidxIterNext</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>fts5DlidxIterNextR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The iterator passed as the first argument has the following fields set
** as follows. This function sets up the rest of the iterator so that it
** points to the first rowid in the doclist-index.
**
**   pData:
**     pointer to doclist-index record, 
**
** When this function is called pIter-&gt;iLeafPgno is the page number the
** doclist is associated with (the one featuring the term).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DlidxIterFirst</name><parameter_list>(<parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nLvl</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>fts5DlidxLvlNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bEof</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DlidxIterEof</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bEof</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DlidxIterLast</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Advance each level to the last entry on the last page */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>pIter</name><operator>-&gt;</operator><name>nLvl</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5DlidxLvl</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><call><name>fts5DlidxLvlNext</name><argument_list>(<argument><expr><name>pLvl</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5DlidxLvl</name> <modifier>*</modifier></type><name>pChild</name> <init>= <expr><operator>&amp;</operator><name><name>pLvl</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pChild</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pChild</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5DlidxLvl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pChild</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
          <argument><expr><call><name>FTS5_DLIDX_ROWID</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Move the iterator passed as the only argument to the previous entry.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DlidxLvlPrev</name><parameter_list>(<parameter><decl><type><name>Fts5DlidxLvl</name> <modifier>*</modifier></type><name>pLvl</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;=</operator><name><name>pLvl</name><operator>-&gt;</operator><name>iFirstOff</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>iVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iLimit</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nZero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Currently iOff points to the first byte of a varint. This block 
    ** decrements iOff until it points to the first byte of the previous 
    ** varint. Taking care not to read any memory locations that occur
    ** before the buffer in memory.  */</comment>
    <expr_stmt><expr><name>iLimit</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>iOff</name><operator>&gt;</operator><literal type="number">9</literal></expr> ?</condition><then> <expr><name>iOff</name><operator>-</operator><literal type="number">9</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iOff</name><operator>--</operator></expr>;</init> <condition><expr><name>iOff</name><operator>&gt;</operator><name>iLimit</name></expr>;</condition> <incr><expr><name>iOff</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>a</name><index>[<expr><name>iOff</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>-=</operator> <name>iVal</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iLeafPgno</name></name><operator>--</operator></expr>;</expr_stmt>

    <comment type="block">/* Skip backwards past any 0x00 varints. */</comment>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><name>iOff</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>ii</name><operator>&gt;=</operator><name><name>pLvl</name><operator>-&gt;</operator><name>iFirstOff</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>ii</name></expr>]</index></name><operator>==</operator><literal type="number">0x00</literal></expr>;</condition> <incr><expr><name>ii</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>nZero</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>ii</name><operator>&gt;=</operator><name><name>pLvl</name><operator>-&gt;</operator><name>iFirstOff</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>ii</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> )</condition><block>{<block_content>
      <comment type="block">/* The byte immediately before the last 0x00 byte has the 0x80 bit
      ** set. So the last 0x00 is only a varint 0 if there are 8 more 0x80
      ** bytes before a[ii]. */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>bZero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* True if last 0x00 counts */</comment>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>ii</name><operator>-</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;=</operator><name><name>pLvl</name><operator>-&gt;</operator><name>iFirstOff</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>ii</name><operator>-</operator><name>j</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
        <expr_stmt><expr><name>bZero</name> <operator>=</operator> <operator>(</operator><name>j</name><operator>&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>bZero</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nZero</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iLeafPgno</name></name> <operator>-=</operator> <name>nZero</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>iOff</name></name> <operator>=</operator> <name>iOff</name> <operator>-</operator> <name>nZero</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name><name>pLvl</name><operator>-&gt;</operator><name>bEof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DlidxIterPrevR</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLvl</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5DlidxLvl</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><name>iLvl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iLvl</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nLvl</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>fts5DlidxLvlPrev</name><argument_list>(<argument><expr><name>pLvl</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iLvl</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nLvl</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5DlidxIterPrevR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iLvl</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bEof</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pLvl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5DlidxLvl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
            <argument><expr><call><name>FTS5_DLIDX_ROWID</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name>iLvl</name></expr></argument>, <argument><expr><name><name>pLvl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iLeafPgno</name></expr></argument>)</argument_list></call></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name></name></expr> )</condition><block>{<block_content>
          <while>while<condition>( <expr><call><name>fts5DlidxLvlNext</name><argument_list>(<argument><expr><name>pLvl</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
          <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bEof</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DlidxIterPrev</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>fts5DlidxIterPrevR</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Free a doclist-index iterator object allocated by fts5DlidxIterInit().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DlidxIterFree</name><parameter_list>(<parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pIter</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nLvl</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>fts5DlidxIterInit</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Fts5 Backend to iterate within */</comment>
  <parameter><decl><type><name>int</name></type> <name>bRev</name></decl></parameter>,                       <comment type="block">/* True for ORDER BY ASC */</comment>
  <parameter><decl><type><name>int</name></type> <name>iSegid</name></decl></parameter>,                     <comment type="block">/* Segment id */</comment>
  <parameter><decl><type><name>int</name></type> <name>iLeafPg</name></decl></parameter>                     <comment type="block">/* Leaf page number to load dlidx for */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bDone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>bDone</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5DlidxIter</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>i</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5DlidxLvl</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>Fts5DlidxIter</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><call><name>FTS5_DLIDX_ROWID</name><argument_list>(<argument><expr><name>iSegid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iLeafPg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5DlidxLvl</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pLvl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5DlidxLvl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pLvl</name><operator>-&gt;</operator><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0001</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>bDone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nLvl</name></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSegid</name></name> <operator>=</operator> <name>iSegid</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bRev</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5DlidxIterFirst</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fts5DlidxIterLast</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5DlidxIterFree</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pIter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>i64</name></type> <name>fts5DlidxIterRowid</name><parameter_list>(<parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iRowid</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DlidxIterPgno</name><parameter_list>(<parameter><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>pIter</name><operator>-&gt;</operator><name>aLvl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iLeafPgno</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Load the next leaf page into the segment iterator.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterNextPage</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>              <comment type="block">/* Iterator to advance to next page */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pNextLeaf</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pNextLeaf</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNextLeaf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name><operator>&lt;=</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <call><name>fts5LeafRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
        <argument><expr><call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>pLeaf</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pLeaf</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>fts5LeafIsTermless</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name></expr>]</index></name></expr></argument>,
          <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Argument p points to a buffer containing a varint to be interpreted as a
** position list size field. Read the varint and return the number of bytes
** read. Before returning, set *pnSz to the number of bytes in the position
** list, and *pbDel to true if the delete flag is set, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5GetPoslistSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnSz</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbDel</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nSz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>nSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>nSz</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnSz</name> <operator>=</operator> <name>nSz</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pbDel</name> <operator>=</operator> <name>nSz</name> <operator>&amp;</operator> <literal type="number">0x0001</literal></expr>;</expr_stmt>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Fts5SegIter.iLeafOffset currently points to the first byte of a
** position-list size field. Read the value of the field and store it
** in the following variables:
**
**   Fts5SegIter.nPos
**   Fts5SegIter.bDel
**
** Leave Fts5SegIter.iLeafOffset pointing to the first byte of the 
** position list content (if any).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterLoadNPos</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Offset to read at */</comment>
    <expr_stmt><expr><call><name>ASSERT_SZLEAF_OK</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iEod</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>bDel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nPos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>iEod</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>bDel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>iOff</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>iEod</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nPos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>iOff</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nSz</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>, <argument><expr><name>nSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>bDel</name></name> <operator>=</operator> <operator>(</operator><name>nSz</name> <operator>&amp;</operator> <literal type="number">0x0001</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nPos</name></name> <operator>=</operator> <name>nSz</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nPos</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterLoadRowid</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>        <comment type="block">/* Buffer to read data from */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT_SZLEAF_OK</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5SegIterNextPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Fts5SegIter.iLeafOffset currently points to the first byte of the 
** "nSuffix" field of a term. Function parameter nKeep contains the value
** of the "nPrefix" field (if there was one - it is passed 0 if this is
** the first term in the segment).
**
** This function populates:
**
**   Fts5SegIter.term
**   Fts5SegIter.rowid
**
** accordingly and leaves (Fts5SegIter.iLeafOffset) set to the content of
** the first position list. The position list belonging to document 
** (Fts5SegIter.iRowid).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterLoadTerm</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKeep</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>        <comment type="block">/* Buffer to read data from */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* Offset to read at */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nNew</name></decl>;</decl_stmt>                       <comment type="block">/* Bytes of new data */</comment>

  <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>+</operator><name>nNew</name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>||</operator> <name>nKeep</name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name> <operator>||</operator> <name>nNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>nKeep</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>nNew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name><operator>&lt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>nSpace</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>nNew</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nExtra</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>nExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>+=</operator> <name>nExtra</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>fts5SegIterLoadRowid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterNext</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterNext_Reverse</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterNext_None</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterSetNext</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_REVERSE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5SegIterNext_Reverse</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5SegIterNext_None</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>xNext</name></name> <operator>=</operator> <name>fts5SegIterNext</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Initialize the iterator object pIter to iterate through the entries in
** segment pSeg. The iterator is left pointing to the first entry when 
** this function returns.
**
** If an error occurs, Fts5Index.rc is set to an appropriate error code. If 
** an error has already occurred when this function is called, it is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterInit</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS index object */</comment>
  <parameter><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>,     <comment type="block">/* Description of segment */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>              <comment type="block">/* Object to populate */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* This happens if the segment is being used as an input to an incremental
    ** merge and all data has already been "trimmed". See function
    ** fts5TrimSegments() for details. In this case leave the iterator empty.
    ** The caller will see the (pIter-&gt;pLeaf==0) and assume the iterator is
    ** at EOF already. */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5SegIterSetNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name></name> <operator>=</operator> <name>pSeg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5SegIterNextPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name><operator>&gt;</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><call><name>fts5LeafFirstTermOff</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5SegIterLoadTerm</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5SegIterLoadNPos</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is only ever called on iterators created by calls to
** Fts5IndexQuery() with the FTS5INDEX_QUERY_DESC flag set.
**
** The iterator is in an unusual state when this function is called: the
** Fts5SegIter.iLeafOffset variable is set to the offset of the start of
** the position-list size field for the first relevant rowid on the page.
** Fts5SegIter.rowid is set, but nPos and bDel are not.
**
** This function advances the iterator so that it points to the last 
** relevant rowid on the page and, if necessary, initializes the 
** aRowidOffset[] and iRowidOffset variables. At this point the iterator
** is in its regular state - Fts5SegIter.iLeafOffset points to the first
** byte of the position list content associated with said rowid.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterReverseInitPage</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>eDetail</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iRowidOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT_SZLEAF_OK</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u64</name></type> <name>iDelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* todo */</comment>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nPos</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bDummy</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetPoslistSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>nPos</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>n</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>+=</operator> <name>iDelta</name></expr>;</expr_stmt>

    <comment type="block">/* If necessary, grow the pIter-&gt;aRowidOffset[] array. */</comment>
    <if_stmt><if>if<condition>( <expr><name>iRowidOffset</name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>nRowidOffset</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>nRowidOffset</name></name> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aNew</name> <init>= <expr><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc64</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aRowidOffset</name></name></expr></argument>,<argument><expr><name>nNew</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>aNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aRowidOffset</name></name> <operator>=</operator> <name>aNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nRowidOffset</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aRowidOffset</name><index>[<expr><name>iRowidOffset</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowidOffset</name></name> <operator>=</operator> <name>iRowidOffset</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5SegIterLoadNPos</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
**
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterReverseNewPage</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_REVERSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_ONETERM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FTS5_SEGMENT_ROWID</name><argument_list>(
          <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr></argument>
    )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
      <comment type="block">/* iTermLeafOffset may be equal to szLeaf if the term is the last
      ** thing on the page - i.e. the first rowid is on the following page.
      ** In this case leave pIter-&gt;pLeaf==0, this iterator is at EOF. */</comment>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafOffset</name></name><operator>&lt;</operator><name><name>pNew</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafOffset</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iRowidOff</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>iRowidOff</name> <operator>=</operator> <call><name>fts5LeafFirstRowidOff</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>iRowidOff</name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>iRowidOff</name><operator>&gt;=</operator><name><name>pNew</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iRowidOff</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5SegIterReverseInitPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return true if the iterator passed as the second argument currently
** points to a delete marker. A delete marker is an entry with a 0 byte
** position-list.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5MultiIterIsEmpty</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>&amp;&amp;</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Advance iterator pIter to the next entry.
**
** This version of fts5SegIterNext() is only used by reverse iterators.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterNext_Reverse</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,             <comment type="block">/* Iterator to advance */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbUnused</name></decl></parameter>                   <comment type="block">/* Unused */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_REVERSE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNextLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pbUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowidOffset</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u64</name></type> <name>iDelta</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowidOffset</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aRowidOffset</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowidOffset</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5SegIterLoadNPos</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nPos</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>-=</operator> <name>iDelta</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>fts5SegIterReverseNewPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Advance iterator pIter to the next entry.
**
** This version of fts5SegIterNext() is only used if detail=none and the
** iterator is not a reverse direction iterator.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterNext_None</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,             <comment type="block">/* Iterator to advance */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbNewTerm</name></decl></parameter>                  <comment type="block">/* OUT: Set for new term */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_REVERSE</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT_SZLEAF_OK</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr>;</expr_stmt>

  <comment type="block">/* Next entry is on the next page */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name></name> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5SegIterNextPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* Next entry is on the current page */</comment>
    <decl_stmt><decl><type><name>i64</name></type> <name>iDelta</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>+=</operator> <name>iDelta</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_ONETERM</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nKeep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>!=</operator><call><name>fts5LeafFirstTermOff</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nKeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5SegIterLoadTerm</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>nKeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nList</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5HashScanNext</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5HashScanEntry</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zTerm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pList</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>next_none_eof</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>pList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name> <operator>=</operator> <name>nList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>=</operator> <name>nList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name>nList</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zTerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>pbNewTerm</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pbNewTerm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <goto>goto <name>next_none_eof</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>fts5SegIterLoadNPos</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return;</return>
 <label><name>next_none_eof</name>:</label>
  <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Advance iterator pIter to the next entry. 
**
** If an error occurs, Fts5Index.rc is set to an appropriate error code. It 
** is not considered an error if the iterator reaches EOF. If an error has 
** already occurred when this function is called, it is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterNext</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,             <comment type="block">/* Iterator to advance */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbNewTerm</name></decl></parameter>                  <comment type="block">/* OUT: Set for new term */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bNewTerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nKeep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pbNewTerm</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>pbNewTerm</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Search for the end of the position list within the current page. */</comment>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT_SZLEAF_OK</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>+</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nPos</name></name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* The next entry is on the current page. */</comment>
    <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>iOff</name><operator>&lt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>bNewTerm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>!=</operator><call><name>fts5LeafFirstTermOff</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nKeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>u64</name></type> <name>iDelta</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>+=</operator> <name>iDelta</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>iDelta</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>

  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_ONETERM</name><operator>)</operator> <operator>||</operator> <name>pbNewTerm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_ONETERM</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5HashScanNext</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5HashScanEntry</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zTerm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pList</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>pList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name> <operator>=</operator> <name>nList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>=</operator> <name>nList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name>nList</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zTerm</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>zTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><name>pList</name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pbNewTerm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="block">/* Next entry is not on the current page */</comment>
    <while>while<condition>( <expr><name>iOff</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5SegIterNextPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pLeaf</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pLeaf</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>ASSERT_SZLEAF_OK</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iOff</name> <operator>=</operator> <call><name>fts5LeafFirstRowidOff</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&lt;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>

        <if_stmt><if>if<condition>( <expr><name><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name><operator>&gt;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>+</operator> <call><name>fts5GetVarint32</name><argument_list>(
              <argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if>
      <if type="elseif">else if<condition>( <expr><name><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name><operator>&gt;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>+</operator> <call><name>fts5GetVarint32</name><argument_list>(
            <argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bNewTerm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>iOff</name><operator>&lt;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Check if the iterator is now at EOF. If so, return early. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>bNewTerm</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_ONETERM</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fts5SegIterLoadTerm</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>nKeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5SegIterLoadNPos</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pbNewTerm</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pbNewTerm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* The following could be done by calling fts5SegIterLoadNPos(). But
      ** this block is particularly performance critical, so equivalent
      ** code is inlined.  */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>nSz</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name><operator>&lt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr></argument>, <argument><expr><name>nSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>bDel</name></name> <operator>=</operator> <operator>(</operator><name>nSz</name> <operator>&amp;</operator> <literal type="number">0x0001</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nPos</name></name> <operator>=</operator> <name>nSz</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nPos</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SWAPVAL</name><parameter_list>(<parameter><type><name>T</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ T tmp; tmp=a; a=b; b=tmp; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5IndexSkipVarint</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>iOff</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{            \
  int iEnd = iOff+9;                              \
  while( (a[iOff++] &amp; 0x80) &amp;&amp; iOff&lt;iEnd );       \
}</cpp:value></cpp:define>

<comment type="block">/*
** Iterator pIter currently points to the first rowid in a doclist. This
** function sets the iterator up so that iterates in reverse order through
** the doclist.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterReverse</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pDlidx</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pDlidx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pgnoLast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>pDlidx</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pgnoLast</name> <operator>=</operator> <call><name>fts5DlidxIterPgno</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pLast</name> <operator>=</operator> <call><name>fts5LeafRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name>iSegid</name></expr></argument>, <argument><expr><name>pgnoLast</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></init></decl>;</decl_stmt>         <comment type="block">/* Current leaf data */</comment>

    <comment type="block">/* Currently, Fts5SegIter.iLeafOffset points to the first byte of
    ** position-list content for the current rowid. Back it up so that it
    ** points to the start of the position-list size field. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iPoslist</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iPoslist</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafOffset</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iPoslist</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>fts5IndexSkipVarint</name><argument_list>(<argument><expr><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>iPoslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iPoslist</name></expr>;</expr_stmt>

    <comment type="block">/* If this condition is true then the largest rowid for the current
    ** term may not be stored on the current page. So search forward to
    ** see where said rowid really is.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name><operator>&gt;=</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>pgno</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name></name></expr></init></decl>;</decl_stmt>

      <comment type="block">/* The last rowid in the doclist may not be on the current page. Search
      ** forward to find the page containing the last rowid.  */</comment>
      <for>for<control>(<init><expr><name>pgno</name><operator>=</operator><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>&amp;&amp;</operator> <name>pgno</name><operator>&lt;=</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name></expr>;</condition> <incr><expr><name>pgno</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>i64</name></type> <name>iAbs</name> <init>= <expr><call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><call><name>fts5LeafRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iAbs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>iRowid</name></decl>, <decl><type ref="prev"/><name>bTermless</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>iRowid</name> <operator>=</operator> <call><name>fts5LeafFirstRowidOff</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>bTermless</name> <operator>=</operator> <call><name>fts5LeafIsTermless</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>iRowid</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>SWAPVAL</name><argument_list>(<argument><expr><name>Fts5Data</name><operator>*</operator></expr></argument>, <argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>pgnoLast</name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>bTermless</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* If pLast is NULL at this point, then the last rowid for this doclist
  ** lies on the page currently indicated by the iterator. In this case 
  ** pIter-&gt;iLeafOffset is already set to point to the position-list size
  ** field associated with the first relevant rowid on the page.
  **
  ** Or, if pLast is non-NULL, then it is the page that contains the last
  ** rowid. In this case configure the iterator so that it points to the
  ** first rowid on this page.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>pLast</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <name>pLast</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name> <operator>=</operator> <name>pgnoLast</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>fts5LeafFirstRowidOff</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;</operator><name><name>pLast</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLast</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><call><name>fts5LeafIsTermless</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name><name>pLast</name><operator>-&gt;</operator><name>nn</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <call><name>fts5LeafFirstTermOff</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5SegIterReverseInitPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Iterator pIter currently points to the first rowid of a doclist.
** There is a doclist-index associated with the final term on the current 
** page. If the current term is the last term on the page, load the 
** doclist-index from disk and initialize an iterator at (pIter-&gt;pDlidx).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterLoadDlidx</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iSeg</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bRev</name> <init>= <expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_REVERSE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* Current leaf data */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_ONETERM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pDlidx</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Check if the current doclist ends on this page. If it does, return
  ** early without loading the doclist-index (as it belongs to a different
  ** term. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name> 
   <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name><operator>&lt;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> 
  )</condition><block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pDlidx</name></name> <operator>=</operator> <call><name>fts5DlidxIterInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bRev</name></expr></argument>, <argument><expr><name>iSeg</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** The iterator object passed as the second argument currently contains
** no valid values except for the Fts5SegIter.pLeaf member variable. This
** function searches the leaf page for a term matching (pTerm/nTerm).
**
** If the specified term is found on the page, then the iterator is left
** pointing to it. If argument bGe is zero and the term is not found,
** the iterator is left pointing at EOF.
**
** If bGe is non-zero and the specified term is not found, then the
** iterator is left pointing to the smallest term in the segment that
** is larger than the specified term, even if this term is not on the
** current page.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5LeafSeek</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Leave any error code here */</comment>
  <parameter><decl><type><name>int</name></type> <name>bGe</name></decl></parameter>,                        <comment type="block">/* True for a &gt;= search */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,             <comment type="block">/* Iterator to seek */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>      <comment type="block">/* Term to search for */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u32</name></type> <name>iOff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>u32</name><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>u32</name></type> <name>nMatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>nKeep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>nNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>iTermOff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>iPgidx</name></decl>;</decl_stmt>                     <comment type="block">/* Current offset in pgidx */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bEndOfPage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>iPgidx</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iPgidx</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iPgidx</name></expr>]</index></name></expr></argument>, <argument><expr><name>iTermOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name>iTermOff</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;</operator><name>n</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>

    <comment type="block">/* Figure out how many new bytes are in this term */</comment>
    <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>, <argument><expr><name>nNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nKeep</name><operator>&lt;</operator><name>nMatch</name></expr> )</condition><block>{<block_content>
      <goto>goto <name>search_failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nKeep</name><operator>&gt;=</operator><name>nMatch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nKeep</name><operator>==</operator><name>nMatch</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>u32</name></type> <name>nCmp</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>nCmp</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><call><name>MIN</name><argument_list>(<argument><expr><name>nNew</name></expr></argument>, <argument><expr><name>nTerm</name><operator>-</operator><name>nMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCmp</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>a</name><index>[<expr><name>iOff</name><operator>+</operator><name>i</name></expr>]</index></name><operator>!=</operator><name><name>pTerm</name><index>[<expr><name>nMatch</name><operator>+</operator><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>nMatch</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>u32</name><operator>)</operator><name>nTerm</name><operator>==</operator><name>nMatch</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name>nNew</name></expr> )</condition><block>{<block_content>
          <goto>goto <name>search_success</name>;</goto>
        </block_content>}</block></if><else>else<block>{<block_content>
          <goto>goto <name>search_failed</name>;</goto>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>nNew</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>iOff</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>&gt;</argument_list></name><name><name>pTerm</name><index>[<expr><name>nMatch</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <goto>goto <name>search_failed</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>iPgidx</name><operator>&gt;=</operator><name>n</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>bEndOfPage</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>iPgidx</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iPgidx</name></expr>]</index></name></expr></argument>, <argument><expr><name>nKeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iTermOff</name> <operator>+=</operator> <name>nKeep</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name>iTermOff</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;=</operator><name>n</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Read the nKeep field of the next term. */</comment>
    <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>, <argument><expr><name>nKeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

 <label><name>search_failed</name>:</label>
  <if_stmt><if>if<condition>( <expr><name>bGe</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>bEndOfPage</name></expr> )</condition><block>{<block_content>
    <do>do <block>{<block_content>
      <expr_stmt><expr><call><name>fts5SegIterNextPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>fts5LeafIsTermless</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iPgidx</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>iPgidx</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iPgidx</name></expr>]</index></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>i64</name><operator>)</operator><name>iOff</name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>nKeep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>iTermOff</name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>;</do>
  </block_content>}</block></if></if_stmt>

 <label><name>search_success</name>:</label>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>i64</name><operator>)</operator><name>iOff</name><operator>+</operator><name>nNew</name><operator>&gt;</operator><name>n</name> <operator>||</operator> <name>nNew</name><operator>&lt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name> <operator>+</operator> <name>nNew</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafOffset</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>nKeep</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>nNew</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>iPgidx</name><operator>&gt;=</operator><name>n</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nExtra</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>iPgidx</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iPgidx</name></expr>]</index></name></expr></argument>, <argument><expr><name>nExtra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name>iTermOff</name> <operator>+</operator> <name>nExtra</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iPgidxOff</name></name> <operator>=</operator> <name>iPgidx</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fts5SegIterLoadRowid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5SegIterLoadNPos</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>sqlite3_stmt</name> <modifier>*</modifier></type><name>fts5IdxSelectStmt</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pIdxSelect</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5IndexPrepareStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pIdxSelect</name></name></expr></argument>, <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"SELECT pgno FROM '%q'.'%q_idx' WHERE "</literal>
          <literal type="string">"segid=? AND term&lt;=? ORDER BY term DESC LIMIT 1"</literal></expr></argument>,
          <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>pIdxSelect</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Initialize the object pIter to point to term pTerm/nTerm within segment
** pSeg. If there is no such term in the index, the iterator is set to EOF.
**
** If an error occurs, Fts5Index.rc is set to an appropriate error code. If 
** an error has already occurred when this function is called, it is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterSeekInit</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>,     <comment type="block">/* Term to seek to */</comment>
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,                      <comment type="block">/* Mask of FTS5INDEX_XXX flags */</comment>
  <parameter><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>,     <comment type="block">/* Description of segment */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>              <comment type="block">/* Object to populate */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iPg</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bGe</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_SCAN</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bDlidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* True if there is a doclist-index */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pIdxSelect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>bGe</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_DESC</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pTerm</name> <operator>&amp;&amp;</operator> <name>nTerm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name></name> <operator>=</operator> <name>pSeg</name></expr>;</expr_stmt>

  <comment type="block">/* This block sets stack variable iPg to the leaf page number that may
  ** contain term (pTerm/nTerm), if it is present in the segment. */</comment>
  <expr_stmt><expr><name>pIdxSelect</name> <operator>=</operator> <call><name>fts5IdxSelectStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>val</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>iPg</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>val</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bDlidx</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&amp;</operator> <literal type="number">0x0001</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>iPg</name><operator>&lt;</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iPg</name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bDlidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name> <operator>=</operator> <name>iPg</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5SegIterNextPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5LeafSeek</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bGe</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>bGe</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FTS5_SEGITER_ONETERM</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_DESC</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FTS5_SEGITER_REVERSE</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>bDlidx</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5SegIterLoadDlidx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_DESC</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5SegIterReverse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5SegIterSetNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Either:
  **
  **   1) an error has occurred, or
  **   2) the iterator points to EOF, or
  **   3) the iterator points to an entry with term (pTerm/nTerm), or
  **   4) the FTS5INDEX_QUERY_SCAN flag was set and the iterator points
  **      to an entry with a term greater than or equal to (pTerm/nTerm).
  */</comment>
  <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name>                                       <comment type="block">/* 1 */</comment>
   <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal>                                               <comment type="block">/* 2 */</comment>
   <operator>||</operator> <call><name>fts5BufferCompareBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal>          <comment type="block">/* 3 */</comment>
   <operator>||</operator> <operator>(</operator><name>bGe</name> <operator>&amp;&amp;</operator> <call><name>fts5BufferCompareBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr></argument>  <comment type="block">/* 4 */</comment>
  )</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Initialize the object pIter to point to term pTerm/nTerm within the
** in-memory hash table. If there is no such term in the hash-table, the 
** iterator is set to EOF.
**
** If an error occurs, Fts5Index.rc is set to an appropriate error code. If 
** an error has already occurred when this function is called, it is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterHashInit</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>,     <comment type="block">/* Term to seek to */</comment>
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,                      <comment type="block">/* Mask of FTS5INDEX_XXX flags */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>              <comment type="block">/* Object to populate */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pTerm</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_SCAN</name><operator>)</operator></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3Fts5HashScanInit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5HashScanEntry</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>z</name></expr> ?</condition><then> <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pList</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pLeaf</name> <operator>=</operator> <call><name>fts5IdxMalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pLeaf</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><name>pList</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3Fts5HashQuery</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Data</name></expr></argument>)</argument_list></sizeof></expr></argument>, 
        <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pLeaf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nList</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pLeaf</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pLeaf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>pTerm</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <name>nTerm</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FTS5_SEGITER_ONETERM</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>pLeaf</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>=</operator> <name>nList</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <name>pLeaf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_DESC</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FTS5_SEGITER_REVERSE</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5SegIterReverseInitPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fts5SegIterLoadNPos</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5SegIterSetNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Zero the iterator passed as the only argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterClear</name><parameter_list>(<parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNextLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5DlidxIterFree</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pDlidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aRowidOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5SegIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>

<comment type="block">/*
** This function is used as part of the big assert() procedure implemented by
** fts5AssertMultiIterSetup(). It ensures that the result currently stored
** in *pRes is the correct result of comparing the current positions of the
** two iterators.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5AssertComparisonResult</name><parameter_list>(
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>,
  <parameter><decl><type><name>Fts5CResult</name> <modifier>*</modifier></type><name>pRes</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name>p1</name> <operator>-</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><name>p2</name> <operator>-</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>||</operator> <name><name>p2</name><operator>-&gt;</operator><name>pLeaf</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>iFirst</name></name><operator>==</operator><name>i2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p2</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>iFirst</name></name><operator>==</operator><name>i1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nMin</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>fts5Memcmp</name><argument_list>(<argument><expr><name><name>p1</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>p2</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>nMin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>res</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name> <operator>-</operator> <name><name>p2</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><name>res</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>bTermEq</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name><operator>!=</operator><name><name>p2</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>iRowid</name></name><operator>)</operator><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>bTermEq</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if<condition>( <expr><name>res</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>iFirst</name></name><operator>==</operator><name>i1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>iFirst</name></name><operator>==</operator><name>i2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is a no-op unless SQLITE_DEBUG is defined when this module
** is compiled. In that case, this function is essentially an assert() 
** statement used to verify that the contents of the pIter-&gt;aFirst[] array
** are correct.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5AssertMultiIterSetup</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pFirst</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pFirst</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>bEof</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check that pIter-&gt;iSwitchRowid is set correctly. */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p1</name><operator>==</operator><name>pFirst</name> 
           <operator>||</operator> <name><name>p1</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal> 
           <operator>||</operator> <call><name>fts5BufferCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFirst</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call> 
           <operator>||</operator> <name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>iSwitchRowid</name></name>
           <operator>||</operator> <operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iSwitchRowid</name></name><operator>)</operator><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5CResult</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5AssertComparisonResult</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5CResult</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5AssertComparisonResult</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>fts5AssertMultiIterSetup</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Do the comparison necessary to populate pIter-&gt;aFirst[iOut].
**
** If the returned value is non-zero, then it is the index of an entry
** in the pIter-&gt;aSeg[] array that is (a) not at EOF, and (b) pointing
** to a key that is a duplicate of another, higher priority, 
** segment-iterator in the pSeg-&gt;aSeg[] array.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5MultiIterDoCompare</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i1</name></decl>;</decl_stmt>                         <comment type="block">/* Index of left-hand Fts5SegIter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i2</name></decl>;</decl_stmt>                         <comment type="block">/* Index of right-hand Fts5SegIter */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iRes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p1</name></decl>;</decl_stmt>                <comment type="block">/* Left-hand Fts5SegIter */</comment>
  <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p2</name></decl>;</decl_stmt>                <comment type="block">/* Right-hand Fts5SegIter */</comment>
  <decl_stmt><decl><type><name>Fts5CResult</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><name>iOut</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>iOut</name><argument_list type="generic">&lt;<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>&amp;&amp;</operator> <name>iOut</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>iOut</name><operator>&gt;=</operator><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i1</name> <operator>=</operator> <operator>(</operator><name>iOut</name> <operator>-</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>i2</name> <operator>=</operator> <name>i1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>i1</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><name>iOut</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i2</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><name>iOut</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i1</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i2</name></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>bTermEq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>           <comment type="block">/* If p1 is at EOF */</comment>
    <expr_stmt><expr><name>iRes</name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>p2</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>     <comment type="block">/* If p2 is at EOF */</comment>
    <expr_stmt><expr><name>iRes</name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>fts5BufferCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p2</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>res</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>i2</name><operator>&gt;</operator><name>i1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>i2</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>bTermEq</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name><name>p2</name><operator>-&gt;</operator><name>iRowid</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p1</name><operator>-&gt;</operator><name>bDel</name></name> <operator>=</operator> <name><name>p2</name><operator>-&gt;</operator><name>bDel</name></name></expr>;</expr_stmt>
        <return>return <expr><name>i2</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>p1</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>&gt;</operator> <name><name>p2</name><operator>-&gt;</operator><name>iRowid</name></name><operator>)</operator><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>res</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>res</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iRes</name> <operator>=</operator> <name>i1</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iRes</name> <operator>=</operator> <name>i2</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>iFirst</name></name> <operator>=</operator> <operator>(</operator><name>u16</name><operator>)</operator><name>iRes</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Move the seg-iter so that it points to the first rowid on page iLeafPgno.
** It is an error if leaf iLeafPgno does not exist or contains no rowids.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterGotoPage</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,             <comment type="block">/* Iterator to advance */</comment>
  <parameter><decl><type><name>int</name></type> <name>iLeafPgno</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iLeafPgno</name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>iLeafPgno</name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNextLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNextLeaf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name> <operator>=</operator> <name>iLeafPgno</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5SegIterNextPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name><operator>==</operator><name>iLeafPgno</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>ALWAYS</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>fts5LeafFirstRowidOff</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><literal type="number">4</literal> <operator>||</operator> <name>iOff</name><operator>&gt;=</operator><name>n</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <name>iOff</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5SegIterLoadNPos</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Advance the iterator passed as the second argument until it is at or 
** past rowid iFrom. Regardless of the value of iFrom, the iterator is
** always advanced at least once.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegIterNextFrom</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,             <comment type="block">/* Iterator to advance */</comment>
  <parameter><decl><type><name>i64</name></type> <name>iMatch</name></decl></parameter>                      <comment type="block">/* Advance iterator at least this far */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>bRev</name> <init>= <expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_REVERSE</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pDlidx</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pDlidx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLeafPgno</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bMove</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_ONETERM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pDlidx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>bRev</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <while>while<condition>( <expr><operator>!</operator><call><name>fts5DlidxIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>iMatch</name><operator>&gt;</operator><call><name>fts5DlidxIterRowid</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iLeafPgno</name> <operator>=</operator> <call><name>fts5DlidxIterPgno</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5DlidxIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>iLeafPgno</name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iLeafPgno</name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5SegIterGotoPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iLeafPgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bMove</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNextLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iMatch</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>!</operator><call><name>fts5DlidxIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>iMatch</name><operator>&lt;</operator><call><name>fts5DlidxIterRowid</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5DlidxIterPrev</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>iLeafPgno</name> <operator>=</operator> <call><name>fts5DlidxIterPgno</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>fts5DlidxIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>iLeafPgno</name><operator>&lt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>iLeafPgno</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafPgno</name></name> <operator>=</operator> <name>iLeafPgno</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5SegIterReverseNewPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bMove</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <do>do<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>bMove</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pIter</name><operator>-&gt;</operator><name>xNext</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>bRev</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&gt;=</operator><name>iMatch</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>bRev</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&lt;=</operator><name>iMatch</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>bMove</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition>;</do>
</block_content>}</block></function>


<comment type="block">/*
** Free the iterator object passed as the second argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MultiIterFree</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pIter</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>fts5SegIterClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MultiIterAdvanced</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend to iterate within */</comment>
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,                <comment type="block">/* Iterator to update aFirst[] array for */</comment>
  <parameter><decl><type><name>int</name></type> <name>iChanged</name></decl></parameter>,                   <comment type="block">/* Index of sub-iterator just advanced */</comment>
  <parameter><decl><type><name>int</name></type> <name>iMinset</name></decl></parameter>                     <comment type="block">/* Minimum entry in aFirst[] to set */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name><operator>+</operator><name>iChanged</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><name>iMinset</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name>i</name><operator>/</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iEq</name></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iEq</name> <operator>=</operator> <call><name>fts5MultiIterDoCompare</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iEq</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>pSeg</name><operator>-&gt;</operator><name>xNext</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>+</operator> <name>iEq</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Sub-iterator iChanged of iterator pIter has just been advanced. It still
** points to the same term though - just a different rowid. This function
** attempts to update the contents of the pIter-&gt;aFirst[] accordingly.
** If it does so successfully, 0 is returned. Otherwise 1.
**
** If non-zero is returned, the caller should call fts5MultiIterAdvanced()
** on the iterator instead. That function does the same as this one, except
** that it deals with more complicated cases as well.
*/</comment> 
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5MultiIterAdvanceRowid</name><parameter_list>(
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,                <comment type="block">/* Iterator to update aFirst[] array for */</comment>
  <parameter><decl><type><name>int</name></type> <name>iChanged</name></decl></parameter>,                   <comment type="block">/* Index of sub-iterator just advanced */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFirst</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iChanged</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>iSwitchRowid</name></name>
   <operator>||</operator> <operator>(</operator><name><name>pNew</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iSwitchRowid</name></name><operator>)</operator><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name></expr>
  )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pOther</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iChanged</name> <operator>^</operator> <literal type="number">0x0001</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSwitchRowid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name></expr> ?</condition><then> <expr><name>SMALLEST_INT64</name></expr> </then><else>: <expr><name>LARGEST_INT64</name></expr></else></ternary></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name><operator>+</operator><name>iChanged</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</init> <condition><expr><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>=</operator><name>i</name><operator>/</operator><literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5CResult</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pNew</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>bTermEq</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pOther</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>pRes</name><operator>-&gt;</operator><name>bTermEq</name></name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>iRowid</name></name><operator>==</operator><name><name>pOther</name><operator>-&gt;</operator><name>iRowid</name></name></expr> )</condition><block>{<block_content>
          <return>return <expr><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>pOther</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&gt;</operator><name><name>pNew</name><operator>-&gt;</operator><name>iRowid</name></name><operator>)</operator><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSwitchRowid</name></name> <operator>=</operator> <name><name>pOther</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>pNew</name> <operator>=</operator> <name>pOther</name></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>pOther</name><operator>-&gt;</operator><name>iRowid</name></name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iSwitchRowid</name></name><operator>)</operator><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSwitchRowid</name></name> <operator>=</operator> <name><name>pOther</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>iFirst</name></name> <operator>=</operator> <operator>(</operator><name>u16</name><operator>)</operator><operator>(</operator><name>pNew</name> <operator>-</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name></name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>pOther</name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><name>i</name> <operator>^</operator> <literal type="number">0x0001</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppFirst</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set the pIter-&gt;bEof variable based on the state of the sub-iterators.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MultiIterSetEof</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>bEof</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSwitchRowid</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Move the iterator to the next entry. 
**
** If an error occurs, an error code is left in Fts5Index.rc. It is not 
** considered an error if the iterator reaches EOF, or if it is already at 
** EOF when this function is called.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MultiIterNext</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bFrom</name></decl></parameter>,                      <comment type="block">/* True if argument iFrom is valid */</comment>
  <parameter><decl><type><name>i64</name></type> <name>iFrom</name></decl></parameter>                       <comment type="block">/* Advance at least as far as this */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>bUseFrom</name> <init>= <expr><name>bFrom</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iFirst</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bNewTerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iFirst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bUseFrom</name> <operator>&amp;&amp;</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pDlidx</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5SegIterNextFrom</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><name>iFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name><name>pSeg</name><operator>-&gt;</operator><name>xNext</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bNewTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bNewTerm</name> 
     <operator>||</operator> <call><name>fts5MultiIterAdvanceRowid</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSeg</name></expr></argument>)</argument_list></call></expr>
    )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5MultiIterAdvanced</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5MultiIterSetEof</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pSeg</name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>fts5AssertMultiIterSetup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pSeg</name><operator>==</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>bSkipEmpty</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name><name>pIter</name><operator>-&gt;</operator><name>xSetOutputs</name></name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>bUseFrom</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MultiIterNext2</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbNewTerm</name></decl></parameter>                  <comment type="block">/* OUT: True if *might* be new term */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>bSkipEmpty</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pbNewTerm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <do>do<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iFirst</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iFirst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bNewTerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>pSeg</name><operator>-&gt;</operator><name>xNext</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bNewTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bNewTerm</name> 
       <operator>||</operator> <call><name>fts5MultiIterAdvanceRowid</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSeg</name></expr></argument>)</argument_list></call></expr>
      )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5MultiIterAdvanced</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5MultiIterSetEof</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pbNewTerm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5AssertMultiIterSetup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>while<condition>( <expr><call><name>fts5MultiIterIsEmpty</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr> )</condition>;</do>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IterSetOutputs_Noop</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pUnused1</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pUnused2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>pUnused1</name></expr></argument>, <argument><expr><name>pUnused2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Fts5Iter</name> <modifier>*</modifier></type><name>fts5MultiIterAlloc</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend to iterate within */</comment>
  <parameter><decl><type><name>int</name></type> <name>nSeg</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nSlot</name></decl>;</decl_stmt>                      <comment type="block">/* Power of two &gt;= nSeg */</comment>

  <for>for<control>(<init><expr><name>nSlot</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>nSlot</name><operator>&lt;</operator><name>nSeg</name></expr>;</condition> <incr><expr><name>nSlot</name><operator>=</operator><name>nSlot</name><operator>*</operator><literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>fts5IdxMalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Iter</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>                  <comment type="block">/* pNew */</comment>
      <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5SegIter</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nSlot</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator>   <comment type="block">/* pNew-&gt;aSeg[] */</comment>
      <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5CResult</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nSlot</name></expr></argument>         <comment type="block">/* pNew-&gt;aFirst[] */</comment>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>=</operator> <name>nSlot</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aFirst</name></name> <operator>=</operator> <operator>(</operator><name>Fts5CResult</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>nSlot</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pIndex</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>xSetOutputs</name></name> <operator>=</operator> <name>fts5IterSetOutputs_Noop</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5PoslistCallback</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nChunk</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>nChunk</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nChunk</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Buffer</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></argument>, <argument><expr><name>pChunk</name></expr></argument>, <argument><expr><name>nChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>PoslistCallbackCtx</name></name></type> <name>PoslistCallbackCtx</name>;</typedef>
<struct>struct <name>PoslistCallbackCtx</name> <block>{
  <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>               <comment type="block">/* Append to this buffer */</comment>
  <decl_stmt><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl>;</decl_stmt>            <comment type="block">/* Restrict matches to this column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eState</name></decl>;</decl_stmt>                     <comment type="block">/* See above */</comment>
}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>PoslistOffsetsCtx</name></name></type> <name>PoslistOffsetsCtx</name>;</typedef>
<struct>struct <name>PoslistOffsetsCtx</name> <block>{
  <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>               <comment type="block">/* Append to this buffer */</comment>
  <decl_stmt><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl>;</decl_stmt>            <comment type="block">/* Restrict matches to this column */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iRead</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iWrite</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** TODO: Make this more efficient!
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5IndexColsetTest</name><parameter_list>(<parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pColset</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pColset</name><operator>-&gt;</operator><name>aiCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>iCol</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5PoslistOffsetsCallback</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nChunk</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PoslistOffsetsCtx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>(</operator><name>PoslistOffsetsCtx</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>nChunk</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nChunk</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>nChunk</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iVal</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pChunk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iVal</name> <operator>+=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>iRead</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>iRead</name></name> <operator>=</operator> <name>iVal</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>fts5IndexColsetTest</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pColset</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name>iVal</name> <operator>+</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>iWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>iWrite</name></name> <operator>=</operator> <name>iVal</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5PoslistFilterCallback</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nChunk</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PoslistCallbackCtx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>(</operator><name>PoslistCallbackCtx</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>nChunk</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nChunk</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Search through to find the first varint with value 1. This is the
    ** start of the next columns hits. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iStart</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pCtx</name><operator>-&gt;</operator><name>eState</name></name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name>pChunk</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>fts5IndexColsetTest</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pColset</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>eState</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>eState</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <do>do <block>{<block_content>
      <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>nChunk</name> <operator>&amp;&amp;</operator> <name><name>pChunk</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="number">0x01</literal></expr> )</condition><block>{<block_content>
        <while>while<condition>( <expr><name><name>pChunk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if<condition>( <expr><name><name>pCtx</name><operator>-&gt;</operator><name>eState</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pChunk</name><index>[<expr><name>iStart</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><name>iStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><name>nChunk</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>iStart</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>nChunk</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>eState</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>fts5FastGetVarint32</name><argument_list>(<argument><expr><name>pChunk</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>eState</name></name> <operator>=</operator> <call><name>fts5IndexColsetTest</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pColset</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pCtx</name><operator>-&gt;</operator><name>eState</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pChunk</name><index>[<expr><name>iStart</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name><operator>-</operator><name>iStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>iStart</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>nChunk</name></expr> )</condition>;</do>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5ChunkIterate</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Index object */</comment>
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>,              <comment type="block">/* Poslist of this iterator */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,                     <comment type="block">/* Context pointer for xChunk callback */</comment>
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xChunk</name>)<parameter_list>(<parameter><decl><type><name>Fts5Index</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nRem</name> <init>= <expr><name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name></expr></init></decl>;</decl_stmt>          <comment type="block">/* Number of bytes still to come */</comment>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pChunk</name> <init>= <expr><operator>&amp;</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pSeg</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nChunk</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>nRem</name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>-</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pgno</name> <init>= <expr><name><name>pSeg</name><operator>-&gt;</operator><name>iLeafPgno</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pgnoSave</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* This function does not work with detail=none databases. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pSeg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FTS5_SEGITER_REVERSE</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pgnoSave</name> <operator>=</operator> <name>pgno</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>xChunk</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>pChunk</name></expr></argument>, <argument><expr><name>nChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nRem</name> <operator>-=</operator> <name>nChunk</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nRem</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pSeg</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>pgno</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>fts5LeafRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pData</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>pChunk</name> <operator>=</operator> <operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nChunk</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>nRem</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pgno</name><operator>==</operator><name>pgnoSave</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pNextLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pNextLeaf</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pData</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
** Iterator pIter currently points to a valid entry (not EOF). This
** function appends the position list data for the current entry to
** buffer pBuf. It does not make a copy of the position-list size
** field.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SegiterPoslist</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pBuf</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pSeg</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>fts5BufferGrow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name><operator>+</operator><name>FTS5_DATA_ZERO_PADDING</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>p</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>nSpace</name></name> <operator>&gt;=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name><operator>+</operator><name>FTS5_DATA_ZERO_PADDING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>+</operator><name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FTS5_DATA_ZERO_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pColset</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5ChunkIterate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pBuf</name></expr></argument>, <argument><expr><name>fts5PoslistCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>PoslistCallbackCtx</name></type> <name>sCtx</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pBuf</name></name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pColset</name></name> <operator>=</operator> <name>pColset</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>eState</name></name> <operator>=</operator> <call><name>fts5IndexColsetTest</name><argument_list>(<argument><expr><name>pColset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>sCtx</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>sCtx</name><operator>.</operator><name>eState</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5ChunkIterate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><name>fts5PoslistFilterCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>PoslistOffsetsCtx</name></type> <name>sCtx</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pBuf</name></name> <operator>=</operator> <name>pBuf</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sCtx</name><operator>.</operator><name>pColset</name></name> <operator>=</operator> <name>pColset</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5ChunkIterate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>sCtx</name></expr></argument>, <argument><expr><name>fts5PoslistOffsetsCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Parameter pPos points to a buffer containing a position list, size nPos.
** This function filters it according to pColset (which must be non-NULL)
** and sets pIter-&gt;base.pData/nData to point to the new position list.
** If memory is required for the new position list, use buffer pIter-&gt;poslist.
** Or, if the new position list is a contiguous subset of the input, set
** pIter-&gt;base.pData/nData to point directly to it.
**
** This function is a no-op if *pRc is other than SQLITE_OK when it is
** called. If an OOM error is encountered, *pRc is set to SQLITE_NOMEM
** before returning.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IndexExtractColset</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl></parameter>,            <comment type="block">/* Colset to filter on */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pPos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPos</name></decl></parameter>,       <comment type="block">/* Position list */</comment>
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pPos</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aCopy</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pEnd</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><index>[<expr><name>nPos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>    <comment type="block">/* One byte past end of position list */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iCurrent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pColset</name><operator>-&gt;</operator><name>nCol</name></name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>sqlite3Fts5BufferSize</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <while>while<condition>( <expr><name><name>pColset</name><operator>-&gt;</operator><name>aiCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>iCurrent</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name><name>pColset</name><operator>-&gt;</operator><name>nCol</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>

      <comment type="block">/* Advance pointer p until it points to pEnd or an 0x01 byte that is
      ** not part of a varint */</comment>
      <while>while<condition>( <expr><name>p</name><operator>&lt;</operator><name>pEnd</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>!=</operator><literal type="number">0x01</literal></expr> )</condition><block>{<block_content>
        <while>while<condition>( <expr><operator>*</operator><name>p</name><operator>++</operator> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
      </block_content>}</block></while>

      <if_stmt><if>if<condition>( <expr><name><name>pColset</name><operator>-&gt;</operator><name>aiCol</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>iCurrent</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pColset</name><operator>-&gt;</operator><name>nCol</name></name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name>aCopy</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name>p</name><operator>-</operator><name>aCopy</name></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>, <argument><expr><name>aCopy</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><name>aCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>p</name><operator>&gt;=</operator><name>pEnd</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>aCopy</name> <operator>=</operator> <name>p</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>iCurrent</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iCurrent</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iCurrent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<comment type="block">/*
** xSetOutputs callback used by detail=none tables.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IterSetOutputs_None</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** xSetOutputs callback used by detail=full and detail=col tables when no
** column filters are specified.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IterSetOutputs_Nocolset</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pColset</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>iLeafOffset</name></name><operator>+</operator><name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name><operator>&lt;=</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* All data is stored on the current page. Populate the output 
    ** variables to point into the body of the page object. */</comment>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pSeg</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* The data is distributed over two or more pages. Copy it into the
    ** Fts5Iter.poslist buffer and then set the output pointer to point
    ** to this buffer.  */</comment>
    <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5SegiterPoslist</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** xSetOutputs callback used when the Fts5Colset object has nCol==0 (match
** against no columns at all).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IterSetOutputs_ZeroColset</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** xSetOutputs callback used by detail=col when there is a column filter
** and there are 100 or more columns. Also called as a fallback from
** fts5IterSetOutputs_Col100 if the column-list spans more than one page.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IterSetOutputs_Col</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5SegiterPoslist</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pColset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** xSetOutputs callback used when: 
**
**   * detail=col,
**   * there is a column filter, and
**   * the table contains 100 or fewer columns. 
**
** The last point is to ensure all column numbers are stored as 
** single-byte varints.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IterSetOutputs_Col100</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>)</parameter_list><block>{<block_content>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_COLUMNS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pColset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>iLeafOffset</name></name><operator>+</operator><name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name><operator>&gt;</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5IterSetOutputs_Col</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pSeg</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pEnd</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>a</name><index>[<expr><name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>iPrev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aiCol</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pColset</name><operator>-&gt;</operator><name>aiCol</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aiColEnd</name> <init>= <expr><operator>&amp;</operator><name><name>aiCol</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>pColset</name><operator>-&gt;</operator><name>nCol</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aOut</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iPrevOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>a</name><operator>&lt;</operator><name>pEnd</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iPrev</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>a</name><operator>++</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <while>while<condition>( <expr><operator>*</operator><name>aiCol</name><operator>&lt;</operator><name>iPrev</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>aiCol</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>aiCol</name><operator>==</operator><name>aiColEnd</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>setoutputs_col_out</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></while>
      <if_stmt><if>if<condition>( <expr><operator>*</operator><name>aiCol</name><operator>==</operator><name>iPrev</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>aOut</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><operator>(</operator><name>iPrev</name> <operator>-</operator> <name>iPrevOut</name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>iPrevOut</name> <operator>=</operator> <name>iPrev</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

<label><name>setoutputs_col_out</name>:</label>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name>aOut</name> <operator>-</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** xSetOutputs callback used by detail=full when there is a column filter.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IterSetOutputs_Full</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pColset</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pColset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>iLeafOffset</name></name><operator>+</operator><name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name><operator>&lt;=</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* All data is stored on the current page. Populate the output 
    ** variables to point into the body of the page object. */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pSeg</name><operator>-&gt;</operator><name>iLeafOffset</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5IndexExtractColset</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pColset</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>nPos</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* The data is distributed over two or more pages. Copy it into the
    ** Fts5Iter.poslist buffer and then set the output pointer to point
    ** to this buffer.  */</comment>
    <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5SegiterPoslist</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><name>pColset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>poslist</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IterSetOutputCb</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pIter</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><name>pRc</name><operator>)</operator><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>xSetOutputs</name></name> <operator>=</operator> <name>fts5IterSetOutputs_None</name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <if type="elseif">else if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pColset</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>xSetOutputs</name></name> <operator>=</operator> <name>fts5IterSetOutputs_Nocolset</name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <if type="elseif">else if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>pColset</name><operator>-&gt;</operator><name>nCol</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>xSetOutputs</name></name> <operator>=</operator> <name>fts5IterSetOutputs_ZeroColset</name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <if type="elseif">else if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>xSetOutputs</name></name> <operator>=</operator> <name>fts5IterSetOutputs_Full</name></expr>;</expr_stmt>
    </block_content>}</block></if>

    <else>else<block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_COLUMNS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name><operator>&lt;=</operator><literal type="number">100</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>xSetOutputs</name></name> <operator>=</operator> <name>fts5IterSetOutputs_Col100</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5BufferSize</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>poslist</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>xSetOutputs</name></name> <operator>=</operator> <name>fts5IterSetOutputs_Col</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Allocate a new Fts5Iter object.
**
** The new object will be used to iterate through data in structure pStruct.
** If iLevel is -ve, then all data in all segments is merged. Or, if iLevel
** is zero or greater, data from the first nSegment segments on level iLevel
** is merged.
**
** The iterator initially points to the first term/rowid entry in the 
** iterated data.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MultiIterNew</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend to iterate within */</comment>
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>,         <comment type="block">/* Structure of specific index */</comment>
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,                      <comment type="block">/* FTS5INDEX_QUERY_XXX flags */</comment>
  <parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl></parameter>,            <comment type="block">/* Colset to filter on (or NULL) */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>,     <comment type="block">/* Term to seek to (or NULL/0) */</comment>
  <parameter><decl><type><name>int</name></type> <name>iLevel</name></decl></parameter>,                     <comment type="block">/* Level to iterate (-1 for all) */</comment>
  <parameter><decl><type><name>int</name></type> <name>nSegment</name></decl></parameter>,                   <comment type="block">/* Number of segments to merge (iLevel&gt;=0) */</comment>
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>                <comment type="block">/* New object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nSeg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                   <comment type="block">/* Number of segment-iters in use */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iSeg</name></decl>;</decl_stmt>                       <comment type="block">/* Used to iterate through segments */</comment>
  <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>pTerm</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nTerm</name><operator>==</operator><literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>iLevel</name><operator>&lt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate space for the new multi-seg-iterator. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iLevel</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name><operator>==</operator><call><name>fts5StructureCountSegments</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nSeg</name> <operator>=</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nSeg</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>nSeg</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLevel</name></expr>]</index></name><operator>.</operator><name>nSeg</name></expr></argument>, <argument><expr><name>nSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>pNew</name> <operator>=</operator> <call><name>fts5MultiIterAlloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>fts5MultiIterNew_post_check</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>bRev</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal><operator>!=</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_DESC</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>bSkipEmpty</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0</literal><operator>!=</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_SKIPEMPTY</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pColset</name></name> <operator>=</operator> <name>pColset</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_NOOUTPUT</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5IterSetOutputCb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Initialize each of the component segment iterators. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iLevel</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pEnd</name> <init>= <expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr> )</condition><block>{<block_content>
        <comment type="block">/* Add a segment iterator for the current contents of the hash table. */</comment>
        <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iIter</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fts5SegIterHashInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>pLvl</name><operator>=</operator><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>pLvl</name><operator>&lt;</operator><name>pEnd</name></expr>;</condition> <incr><expr><name>pLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><expr><name>iSeg</name><operator>=</operator><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iSeg</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>iSeg</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iIter</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>pTerm</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>fts5SegIterInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><call><name>fts5SegIterSeekInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>pLvl</name> <operator>=</operator> <operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLevel</name></expr>]</index></name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>iSeg</name><operator>=</operator><name>nSeg</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iSeg</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>iSeg</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>fts5SegIterInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iIter</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iIter</name><operator>==</operator><name>nSeg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* If the above was successful, each component iterators now points 
  ** to the first entry in its segment. In this case initialize the 
  ** aFirst[] array. Or, if an error has occurred, free the iterator
  ** object and set the output variable to NULL.  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name>iIter</name><operator>=</operator><name><name>pNew</name><operator>-&gt;</operator><name>nSeg</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iIter</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>iIter</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iEq</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iEq</name> <operator>=</operator> <call><name>fts5MultiIterDoCompare</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>iIter</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iEq</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pSeg</name><operator>-&gt;</operator><name>xNext</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>fts5MultiIterAdvanced</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>iEq</name></expr></argument>, <argument><expr><name>iIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fts5MultiIterSetEof</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5AssertMultiIterSetup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>bSkipEmpty</name></name> <operator>&amp;&amp;</operator> <call><name>fts5MultiIterIsEmpty</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5MultiIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pNew</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name><name>pNew</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>pNew</name><operator>-&gt;</operator><name>xSetOutputs</name></name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>fts5MultiIterFree</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>fts5MultiIterNew_post_check</name>:</label>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>ppOut</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
** Create an Fts5Iter that iterates through the doclist provided
** as the second argument.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MultiIterNew2</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend to iterate within */</comment>
  <parameter><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,                <comment type="block">/* Doclist to iterate through */</comment>
  <parameter><decl><type><name>int</name></type> <name>bDesc</name></decl></parameter>,                      <comment type="block">/* True for descending rowid order */</comment>
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>                <comment type="block">/* New object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>fts5MultiIterAlloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>FTS5_SEGITER_ONETERM</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pData</name><operator>-&gt;</operator><name>szLeaf</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iLeafOffset</name></name> <operator>=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iEndofDoclist</name></name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>nn</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>bDesc</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>bRev</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>FTS5_SEGITER_REVERSE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5SegIterReverseInitPage</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fts5SegIterLoadNPos</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>pData</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>fts5SegIterSetNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return true if the iterator is at EOF or if an error has occurred. 
** False otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5MultiIterEof</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pIter</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name>
      <operator>||</operator> <operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name><operator>.</operator><name>pLeaf</name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>==</operator><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>bEof</name></name></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>bEof</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the rowid of the entry that the iterator currently points
** to. If the iterator points to EOF when this function is called the
** results are undefined.
*/</comment>
<function><type><specifier>static</specifier> <name>i64</name></type> <name>fts5MultiIterRowid</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name><operator>.</operator><name>pLeaf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name><operator>.</operator><name>iRowid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Move the iterator to the next entry at or following iMatch.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MultiIterNextFrom</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, 
  <parameter><decl><type><name>i64</name></type> <name>iMatch</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5MultiIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>fts5MultiIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iRowid</name> <operator>=</operator> <call><name>fts5MultiIterRowid</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iRowid</name><operator>&gt;=</operator><name>iMatch</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pIter</name><operator>-&gt;</operator><name>bRev</name></name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iRowid</name><operator>&lt;=</operator><name>iMatch</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to a buffer containing the term associated with the 
** entry that the iterator currently points to.
*/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>fts5MultiIterTerm</name><parameter_list>(<parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pn</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Allocate a new segment-id for the structure pStruct. The new segment
** id must be between 1 and 65335 inclusive, and must not be used by 
** any currently existing segment. If a free segment id cannot be found,
** SQLITE_FULL is returned.
**
** If an error has already occurred, this function is a no-op. 0 is 
** returned in this case.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5AllocateSegid</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name><operator>&gt;=</operator><name>FTS5_MAX_SEGMENT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_FULL</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* FTS5_MAX_SEGMENT is currently defined as 2000. So the following
      ** array is 63 elements, or 252 bytes, in size.  */</comment>
      <decl_stmt><decl><type><name>u32</name></type> <name><name>aUsed</name><index>[<expr><operator>(</operator><name>FTS5_MAX_SEGMENT</name><operator>+</operator><literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name></decl>, <decl><type ref="prev"/><name>iSeg</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u32</name></type> <name>mask</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aUsed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aUsed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iLvl</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><expr><name>iSeg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeg</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name></expr>;</condition> <incr><expr><name>iSeg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>iId</name> <init>= <expr><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name><operator>.</operator><name>iSegid</name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name>iId</name><operator>&lt;=</operator><name>FTS5_MAX_SEGMENT</name> <operator>&amp;&amp;</operator> <name>iId</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>aUsed</name><index>[<expr><operator>(</operator><name>iId</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>u32</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>iId</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>

      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>aUsed</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0xFFFFFFFF</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <expr_stmt><expr><name>mask</name> <operator>=</operator> <name><name>aUsed</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>iSegid</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>mask</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>iSegid</name><operator>)</operator></expr>;</condition> <incr><expr><name>iSegid</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <expr_stmt><expr><name>iSegid</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">32</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
      <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iLvl</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><expr><name>iSeg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeg</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name></expr>;</condition> <incr><expr><name>iSeg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>iSegid</name><operator>!=</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name><operator>.</operator><name>iSegid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>iSegid</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iSegid</name><operator>&lt;=</operator><name>FTS5_MAX_SEGMENT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

      <block>{<block_content>
        <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pIdxSelect</name> <init>= <expr><call><name>fts5IdxSelectStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>u8</name></type> <name><name>aBlob</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iSegid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>aBlob</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_ROW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pIdxSelect</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>iSegid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Discard all data currently cached in the hash-tables.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IndexDiscardData</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>nPendingData</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5HashClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPendingData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return the size of the prefix, in bytes, that buffer 
** (pNew/&lt;length-unknown&gt;) shares with buffer (pOld/nOld).
**
** Buffer (pNew/&lt;length-unknown&gt;) is guaranteed to be greater 
** than buffer (pOld/nOld).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PrefixCompress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nOld</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pOld</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nOld</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pOld</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>pNew</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteDlidxClear</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bFlush</name></decl></parameter>                      <comment type="block">/* If true, write dlidx to disk */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>bFlush</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pWriter</name><operator>-&gt;</operator><name>nDlidx</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>buf</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>nDlidx</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5DlidxWriter</name> <modifier>*</modifier></type><name>pDlidx</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>bFlush</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>pgno</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5DataWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
          <argument><expr><call><name>FTS5_DLIDX_ROWID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>bPrevValid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** Grow the pWriter-&gt;aDlidx[] array to at least nLvl elements in size.
** Any new array elements are zeroed before returning.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5WriteDlidxGrow</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nLvl</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>nLvl</name><operator>&gt;=</operator><name><name>pWriter</name><operator>-&gt;</operator><name>nDlidx</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5DlidxWriter</name> <modifier>*</modifier></type><name>aDlidx</name> <init>= <expr><operator>(</operator><name>Fts5DlidxWriter</name><operator>*</operator><operator>)</operator><call><name>sqlite3_realloc64</name><argument_list>(
        <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5DlidxWriter</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nLvl</name></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>aDlidx</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5DlidxWriter</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>nLvl</name> <operator>-</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>nDlidx</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aDlidx</name><index>[<expr><name><name>pWriter</name><operator>-&gt;</operator><name>nDlidx</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name></name> <operator>=</operator> <name>aDlidx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>nDlidx</name></name> <operator>=</operator> <name>nLvl</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If the current doclist-index accumulating in pWriter-&gt;aDlidx[] is large
** enough, flush it to disk and return 1. Otherwise discard it and return
** zero.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5WriteFlushDlidx</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>bFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If there were FTS5_MIN_DLIDX_SIZE or more empty leaf pages written
  ** to the database, also write the doclist-index to disk.  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>buf</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>nEmpty</name></name><operator>&gt;=</operator><name>FTS5_MIN_DLIDX_SIZE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>bFlag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fts5WriteDlidxClear</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>bFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>nEmpty</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>bFlag</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is called whenever processing of the doclist for the 
** last term on leaf page (pWriter-&gt;iBtPage) is completed. 
**
** The doclist-index for that term is currently stored in-memory within the
** Fts5SegWriter.aDlidx[] array. If it is large enough, this function
** writes it out to disk. Or, if it is too small to bother with, discards
** it.
**
** Fts5SegWriter.btterm currently contains the first term on page iBtPage.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteFlushBtree</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>bFlag</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iBtPage</name></name> <operator>||</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>nEmpty</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWriter</name><operator>-&gt;</operator><name>iBtPage</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>bFlag</name> <operator>=</operator> <call><name>fts5WriteFlushDlidx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>pWriter</name><operator>-&gt;</operator><name>btterm</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>pWriter</name><operator>-&gt;</operator><name>btterm</name><operator>.</operator><name>p</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <comment type="block">/* The following was already done in fts5WriteInit(): */</comment>
    <comment type="block">/* sqlite3_bind_int(p-&gt;pIdxWriter, 1, pWriter-&gt;iSegid); */</comment>
    <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxWriter</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>btterm</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxWriter</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>bFlag</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><name><name>pWriter</name><operator>-&gt;</operator><name>iBtPage</name></name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxWriter</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iBtPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This is called once for each leaf page except the first that contains
** at least one term. Argument (nTerm/pTerm) is the split-key - a term that
** is larger than all terms written to earlier leaves, and equal to or
** smaller than the first term on the new leaf.
**
** If an error occurs, an error code is left in Fts5Index.rc. If an error
** has already occurred when this function is called, it is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteBtreeTerm</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>,         <comment type="block">/* Writer object */</comment>
  <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>      <comment type="block">/* First term on new page */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fts5WriteFlushBtree</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>btterm</name></name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iBtPage</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>pgno</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is called when flushing a leaf page that contains no
** terms at all to disk.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteBtreeNoTerm</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>          <comment type="block">/* Writer object */</comment>
)</parameter_list><block>{<block_content>
  <comment type="block">/* If there were no rowids on the leaf page either and the doclist-index
  ** has already been started, append an 0x00 byte to it.  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstRowidInPage</name></name> <operator>&amp;&amp;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>buf</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5DlidxWriter</name> <modifier>*</modifier></type><name>pDlidx</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>bPrevValid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Increment the "number of sequential leaves without a term" counter. */</comment>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>nEmpty</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>i64</name></type> <name>fts5DlidxExtractFirstRowid</name><parameter_list>(<parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>iOff</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>iRowid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Rowid iRowid has just been appended to the current leaf page. It is the
** first on the page. This function appends an appropriate entry to the current
** doclist-index.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteDlidxAppend</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, 
  <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bDone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>bDone</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iVal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5DlidxWriter</name> <modifier>*</modifier></type><name>pDlidx</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pgsz</name></name></expr> )</condition><block>{<block_content>
      <comment type="block">/* The current doclist-index page is full. Write it to disk and push
      ** a copy of iRowid (which will become the first rowid on the next
      ** doclist-index leaf page) up into the next level of the b-tree 
      ** hierarchy. If the node being flushed is currently the root node,
      ** also push its first rowid upwards. */</comment>
      <expr_stmt><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>    <comment type="block">/* Not the root node */</comment>
      <expr_stmt><expr><call><name>fts5DataWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
          <argument><expr><call><name>FTS5_DLIDX_ROWID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5WriteDlidxGrow</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pDlidx</name> <operator>=</operator> <operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pDlidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>buf</name><operator>.</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>i64</name></type> <name>iFirst</name> <init>= <expr><call><name>fts5DlidxExtractFirstRowid</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block">/* This was the root node. Push its first rowid up to the new root. */</comment>
        <expr_stmt><expr><name><name>pDlidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pgno</name> <operator>=</operator> <name><name>pDlidx</name><operator>-&gt;</operator><name>pgno</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDlidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDlidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDlidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pDlidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bPrevValid</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pDlidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iPrev</name> <operator>=</operator> <name>iFirst</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>sqlite3Fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>bPrevValid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>pgno</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>bDone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pDlidx</name><operator>-&gt;</operator><name>bPrevValid</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iVal</name> <operator>=</operator> <name>iRowid</name> <operator>-</operator> <name><name>pDlidx</name><operator>-&gt;</operator><name>iPrev</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iPgno</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>pgno</name></name></expr> </then><else>: <expr><name><name>pDlidx</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pgno</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>!</operator><name>bDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>iPgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iVal</name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDlidx</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>bPrevValid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDlidx</name><operator>-&gt;</operator><name>iPrev</name></name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteFlushLeaf</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u8</name></type> <name><name>zero</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5PageWriter</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>pgidx</name><operator>.</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>==</operator><operator>(</operator><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstTermInPage</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Set the szLeaf header field. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal><operator>==</operator><call><name>fts5GetU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5PutU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u16</name><operator>)</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstTermInPage</name></name></expr> )</condition><block>{<block_content>
    <comment type="block">/* No term was written to this page. */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pgidx</name><operator>.</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5WriteBtreeNoTerm</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* Append the pgidx to the page buffer. Set the szLeaf header field. */</comment>
    <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pgidx</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pgidx</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Write the page out to disk */</comment>
  <expr_stmt><expr><name>iRowid</name> <operator>=</operator> <call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5DataWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Initialize the next page. */</comment>
  <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>pgidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>iPrevPgidx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>pgno</name></name><operator>++</operator></expr>;</expr_stmt>

  <comment type="block">/* Increase the leaves written counter */</comment>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>nLeafWritten</name></name><operator>++</operator></expr>;</expr_stmt>

  <comment type="block">/* The new leaf holds no terms or rowids */</comment>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstTermInPage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstRowidInPage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Append term pTerm/nTerm to the segment being written by the writer passed
** as the second argument.
**
** If an error occurs, set the Fts5Index.rc error code. If an error has 
** already occurred, this function is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteAppendTerm</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter> 
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nPrefix</name></decl>;</decl_stmt>                    <comment type="block">/* Bytes of prefix compression for term */</comment>
  <decl_stmt><decl><type><name>Fts5PageWriter</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pPgidx</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>pgidx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMin</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name><operator>&gt;=</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">4</literal> <operator>||</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>bFirstTermInPage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* If the current leaf page is full, flush it to disk. */</comment>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name> <operator>+</operator> <name><name>pPgidx</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>nTerm</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pgsz</name></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5WriteFlushLeaf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5BufferGrow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>nTerm</name><operator>+</operator><name>FTS5_DATA_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* TODO1: Updating pgidx here. */</comment>
  <expr_stmt><expr><name><name>pPgidx</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(
      <argument><expr><operator>&amp;</operator><name><name>pPgidx</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pPgidx</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>iPrevPgidx</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPage</name><operator>-&gt;</operator><name>iPrevPgidx</name></name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  fts5PutU16(&amp;pPgidx-&gt;p[pPgidx-&gt;n], pPage-&gt;buf.n);
  pPgidx-&gt;n += 2;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if<condition>( <expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstTermInPage</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nPrefix</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pPage</name><operator>-&gt;</operator><name>pgno</name></name><operator>!=</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* This is the first term on a leaf that is not the leftmost leaf in
      ** the segment b-tree. In this case it is necessary to add a term to
      ** the b-tree hierarchy that is (a) larger than the largest term 
      ** already written to the segment and (b) smaller than or equal to
      ** this term. In other words, a prefix of (pTerm/nTerm) that is one
      ** byte longer than the longest prefix (pTerm/nTerm) shares with the
      ** previous term. 
      **
      ** Usually, the previous term is available in pPage-&gt;term. The exception
      ** is if this is the first term written in an incremental-merge step.
      ** In this case the previous term is not available, so just write a
      ** copy of (pTerm/nTerm) into the parent node. This is slightly
      ** inefficient, but still correct.  */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>nTerm</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pPage</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>fts5PrefixCompress</name><argument_list>(<argument><expr><name>nMin</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5WriteBtreeTerm</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>pPage</name> <operator>=</operator> <operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nPrefix</name> <operator>=</operator> <call><name>fts5PrefixCompress</name><argument_list>(<argument><expr><name>nMin</name></expr></argument>, <argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>nPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Append the number of bytes of new data, then the term data itself
  ** to the page. */</comment>
  <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>nTerm</name> <operator>-</operator> <name>nPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>nTerm</name> <operator>-</operator> <name>nPrefix</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTerm</name><index>[<expr><name>nPrefix</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Update the Fts5PageWriter.term field. */</comment>
  <expr_stmt><expr><call><name>fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstTermInPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstRowidInPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstRowidInDoclist</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <operator>(</operator><name><name>pWriter</name><operator>-&gt;</operator><name>nDlidx</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>buf</name><operator>.</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pgno</name> <operator>=</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pgno</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Append a rowid and position-list size field to the writers output. 
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteAppendRowid</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5PageWriter</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name> <operator>+</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pgidx</name><operator>.</operator><name>n</name></name><operator>)</operator><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pgsz</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5WriteFlushLeaf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If this is to be the first rowid written to the page, set the 
    ** rowid-pointer in the page-header. Also append a value to the dlidx
    ** buffer, in case a doclist-index is required.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstRowidInPage</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5PutU16</name><argument_list>(<argument><expr><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u16</name><operator>)</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5WriteDlidxAppend</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Write the rowid. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstRowidInDoclist</name></name> <operator>||</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>bFirstRowidInPage</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <name>iRowid</name><operator>&gt;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>iPrevRowid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>iRowid</name> <operator>-</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>iPrevRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iPrevRowid</name></name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstRowidInDoclist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstRowidInPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteAppendPoslistData</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5PageWriter</name> <modifier>*</modifier></type><name>pPage</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>aData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>nData</name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pgsz</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> 
     <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name> <operator>+</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pgidx</name><operator>.</operator><name>n</name></name> <operator>+</operator> <name>n</name><operator>)</operator><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pgsz</name></name></expr> 
  )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nReq</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pgsz</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name> <operator>-</operator> <name><name>pPage</name><operator>-&gt;</operator><name>pgidx</name><operator>.</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCopy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>nCopy</name><operator>&lt;</operator><name>nReq</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>dummy</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>nCopy</name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>nCopy</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>nCopy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>-=</operator> <name>nCopy</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5WriteFlushLeaf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPage</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Flush any data cached by the writer object to the database. Free any
** allocations associated with the writer.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteFinish</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>,         <comment type="block">/* Writer object */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnLeaf</name></decl></parameter>                     <comment type="block">/* OUT: Number of leaf pages in b-tree */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5PageWriter</name> <modifier>*</modifier></type><name>pLeaf</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pLeaf</name><operator>-&gt;</operator><name>pgno</name></name><operator>&gt;=</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pLeaf</name><operator>-&gt;</operator><name>buf</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5WriteFlushLeaf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnLeaf</name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>pgno</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pLeaf</name><operator>-&gt;</operator><name>pgno</name></name><operator>&gt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5WriteFlushBtree</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>pgidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>btterm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>nDlidx</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDlidx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5WriteInit</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iSegid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nBuffer</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pgsz</name></name> <operator>+</operator> <name>FTS5_DATA_PADDING</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5SegWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iSegid</name></name> <operator>=</operator> <name>iSegid</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fts5WriteDlidxGrow</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>pgno</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>bFirstTermInPage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iBtPage</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>buf</name><operator>.</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>pgidx</name><operator>.</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Grow the two buffers to pgsz + padding bytes in size. */</comment>
  <expr_stmt><expr><call><name>sqlite3Fts5BufferSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>pgidx</name></name></expr></argument>, <argument><expr><name>nBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5BufferSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>nBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pIdxWriter</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5IndexPrepareStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pIdxWriter</name></name></expr></argument>, <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
          <argument><expr><literal type="string">"INSERT INTO '%q'.'%q_idx'(segid,term,pgno) VALUES(?,?,?)"</literal></expr></argument>, 
          <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* Initialize the 4-byte leaf-page header to 0x00. */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>writer</name><operator>.</operator><name>buf</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <comment type="block">/* Bind the current output segment id to the index-writer. This is an
    ** optimization over binding the same value over and over as rows are
    ** inserted into %_idx by the current writer.  */</comment>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxWriter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Iterator pIter was used to iterate through the input segments of on an
** incremental merge operation. This function is called if the incremental
** merge step has finished but the input has not been completely exhausted.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5TrimSegments</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pSeg</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* no-op */</comment>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* All keys from this input segment have been transfered to the output.
      ** Set both the first and last page-numbers to 0 to indicate that the
      ** segment is now empty. */</comment>
      <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><name><name>pSeg</name><operator>-&gt;</operator><name>iTermLeafOffset</name></name></expr></init></decl>;</decl_stmt>     <comment type="block">/* Offset on new first leaf page */</comment>
      <decl_stmt><decl><type><name>i64</name></type> <name>iLeafRowid</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iId</name> <init>= <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name></type> <name><name>aHdr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>iLeafRowid</name> <operator>=</operator> <call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name>iId</name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>fts5LeafRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iLeafRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pData</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;</operator><name><name>pData</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
          <comment type="block">/* This can occur if the pages that the segments occupy overlap - if
          ** a single page has been assigned to more than one segment. In
          ** this case a prior iteration of this loop may have corrupted the
          ** segment currently being trimmed.  */</comment>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fts5BufferGrow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>nn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>aHdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>szLeaf</name></name><operator>-</operator><name>iOff</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <comment type="block">/* Set the szLeaf field */</comment>
            <expr_stmt><expr><call><name>fts5PutU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u16</name><operator>)</operator><name><name>buf</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <comment type="block">/* Set up the new page-index array */</comment>
          <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>iLeafPgno</name></name><operator>==</operator><name><name>pSeg</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name> 
           <operator>&amp;&amp;</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iEndofDoclist</name></name><operator>&lt;</operator><name><name>pData</name><operator>-&gt;</operator><name>szLeaf</name></name>
           <operator>&amp;&amp;</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iPgidxOff</name></name><operator>&lt;=</operator><name><name>pData</name><operator>-&gt;</operator><name>nn</name></name></expr>
          )</condition><block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>nDiff</name> <init>= <expr><name><name>pData</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>-</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iEndofDoclist</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>n</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>nDiff</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, 
                <argument><expr><name><name>pData</name><operator>-&gt;</operator><name>nn</name></name> <operator>-</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iPgidxOff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pSeg</name><operator>-&gt;</operator><name>iPgidxOff</name></name></expr>]</index></name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>iTermLeafPgno</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fts5DataDelete</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name>iId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>iLeafRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fts5DataWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iLeafRowid</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MergeChunkCallback</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pChunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nChunk</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5SegWriter</name> <modifier>*</modifier></type><name>pWriter</name> <init>= <expr><operator>(</operator><name>Fts5SegWriter</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5WriteAppendPoslistData</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pChunk</name></expr></argument>, <argument><expr><name>nChunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
**
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IndexMergeLevel</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStruct</name></decl></parameter>,       <comment type="block">/* IN/OUT: Stucture of index */</comment>
  <parameter><decl><type><name>int</name></type> <name>iLvl</name></decl></parameter>,                       <comment type="block">/* Level to read input from */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnRem</name></decl></parameter>                      <comment type="block">/* Write up to this many output leaves */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name> <init>= <expr><operator>*</operator><name>ppStruct</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvlOut</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* Iterator to read input data */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRem</name> <init>= <expr><ternary><condition><expr><name>pnRem</name></expr> ?</condition><then> <expr><operator>*</operator><name>pnRem</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>  <comment type="block">/* Output leaf pages left to write */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nInput</name></decl>;</decl_stmt>                     <comment type="block">/* Number of input segments */</comment>
  <decl_stmt><decl><type><name>Fts5SegWriter</name></type> <name>writer</name></decl>;</decl_stmt>           <comment type="block">/* Writer object */</comment>
  <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name></decl>;</decl_stmt>     <comment type="block">/* Output segment */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>term</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bOldest</name></decl>;</decl_stmt>                    <comment type="block">/* True if the output segment is the oldest */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eDetail</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><name>FTS5INDEX_QUERY_NOOUTPUT</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bTermWritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* True if current term already output */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iLvl</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name><operator>&lt;=</operator><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5SegWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pLvlOut</name> <operator>=</operator> <operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pLvlOut</name><operator>-&gt;</operator><name>nSeg</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nInput</name> <operator>=</operator> <name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSeg</name> <operator>=</operator> <operator>&amp;</operator><name><name>pLvlOut</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name><name>pLvlOut</name><operator>-&gt;</operator><name>nSeg</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fts5WriteInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>writer</name><operator>.</operator><name>writer</name><operator>.</operator><name>pgno</name></name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>writer</name><operator>.</operator><name>iBtPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name> <init>= <expr><call><name>fts5AllocateSegid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Extend the Fts5Structure object as required to ensure the output
    ** segment exists. */</comment>
    <if_stmt><if>if<condition>( <expr><name>iLvl</name><operator>==</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>-</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5StructureAddLevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>ppStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStruct</name> <operator>=</operator> <operator>*</operator><name>ppStruct</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5StructureExtendLevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>, <argument><expr><name>iLvl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pLvl</name> <operator>=</operator> <operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pLvlOut</name> <operator>=</operator> <operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fts5WriteInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name>iSegid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Add the new segment to the output level */</comment>
    <expr_stmt><expr><name>pSeg</name> <operator>=</operator> <operator>&amp;</operator><name><name>pLvlOut</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name><name>pLvlOut</name><operator>-&gt;</operator><name>nSeg</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvlOut</name><operator>-&gt;</operator><name>nSeg</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name> <operator>=</operator> <name>iSegid</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="block">/* Read input from all segments in the input level */</comment>
    <expr_stmt><expr><name>nInput</name> <operator>=</operator> <name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>bOldest</name> <operator>=</operator> <operator>(</operator><name><name>pLvlOut</name><operator>-&gt;</operator><name>nSeg</name></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>==</operator><name>iLvl</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iLvl</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><call><name>fts5MultiIterNew</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iLvl</name></expr></argument>, <argument><expr><name>nInput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIter</name></expr></argument>)</argument_list></call></expr>;</init>
      <condition><expr><call><name>fts5MultiIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>;</condition>
      <incr><expr><call><name>fts5MultiIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></incr>
  )</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSegIter</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nPos</name></decl>;</decl_stmt>                     <comment type="block">/* position-list size field value */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pTerm</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pTerm</name> <operator>=</operator> <call><name>fts5MultiIterTerm</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nTerm</name><operator>!=</operator><name><name>term</name><operator>.</operator><name>n</name></name> <operator>||</operator> <call><name>fts5Memcmp</name><argument_list>(<argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name><name>term</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>pnRem</name> <operator>&amp;&amp;</operator> <name><name>writer</name><operator>.</operator><name>nLeafWritten</name></name><operator>&gt;</operator><name>nRem</name></expr> )</condition><block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bTermWritten</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check for key annihilation. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pSegIter</name><operator>-&gt;</operator><name>nPos</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>bOldest</name> <operator>||</operator> <name><name>pSegIter</name><operator>-&gt;</operator><name>bDel</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>bTermWritten</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <comment type="block">/* This is a new term. Append a term to the output segment. */</comment>
      <expr_stmt><expr><call><name>fts5WriteAppendTerm</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>bTermWritten</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Append the rowid to the output */</comment>
    <comment type="block">/* WRITEPOSLISTSIZE */</comment>
    <expr_stmt><expr><call><name>fts5WriteAppendRowid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><call><name>fts5MultiIterRowid</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pSegIter</name><operator>-&gt;</operator><name>bDel</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>writer</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pSegIter</name><operator>-&gt;</operator><name>nPos</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>writer</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Append the position-list data to the output */</comment>
      <expr_stmt><expr><name>nPos</name> <operator>=</operator> <name><name>pSegIter</name><operator>-&gt;</operator><name>nPos</name></name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name><name>pSegIter</name><operator>-&gt;</operator><name>bDel</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>writer</name><operator>.</operator><name>buf</name></name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5ChunkIterate</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSegIter</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name>fts5MergeChunkCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Flush the last leaf page to disk. Set the output segment b-tree height
  ** and last leaf page number at the same time.  */</comment>
  <expr_stmt><expr><call><name>fts5WriteFinish</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pIter</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>fts5MultiIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Remove the redundant segments from the %_data table */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nInput</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>fts5DataRemoveSegment</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iSegid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Remove the redundant segments from the input level */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name><operator>!=</operator><name>nInput</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nMove</name> <init>= <expr><operator>(</operator><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>-</operator> <name>nInput</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureSegment</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>nInput</name></expr>]</index></name></expr></argument>, <argument><expr><name>nMove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name> <operator>-=</operator> <name>nInput</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>-=</operator> <name>nInput</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pLvlOut</name><operator>-&gt;</operator><name>nSeg</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5TrimSegments</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name> <operator>=</operator> <name>nInput</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>fts5MultiIterFree</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pnRem</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pnRem</name> <operator>-=</operator> <name><name>writer</name><operator>.</operator><name>nLeafWritten</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Do up to nPg pages of automerge work on the index.
**
** Return true if any changes were actually made, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5IndexMerge</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStruct</name></decl></parameter>,       <comment type="block">/* IN/OUT: Current structure of index */</comment>
  <parameter><decl><type><name>int</name></type> <name>nPg</name></decl></parameter>,                        <comment type="block">/* Pages of work to do */</comment>
  <parameter><decl><type><name>int</name></type> <name>nMin</name></decl></parameter>                        <comment type="block">/* Minimum number of segments to merge */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nRem</name> <init>= <expr><name>nPg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name> <init>= <expr><operator>*</operator><name>ppStruct</name></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>nRem</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name></decl>;</decl_stmt>                   <comment type="block">/* To iterate through levels */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iBestLvl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Level offering the most input segments */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nBest</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>              <comment type="block">/* Number of input segments on best level */</comment>

    <comment type="block">/* Set iBestLvl to the level to read input segments from. */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iLvl</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name><operator>&gt;</operator><name>nBest</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>iBestLvl</name> <operator>=</operator> <name>iLvl</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nBest</name> <operator>=</operator> <name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name><operator>&gt;</operator><name>nBest</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>nBest</name> <operator>=</operator> <name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>iBestLvl</name> <operator>=</operator> <name>iLvl</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="block">/* If nBest is still 0, then the index must be empty. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
    <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>nBest</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iLvl</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if<condition>( <expr><name>nBest</name><operator>&lt;</operator><name>nMin</name> <operator>&amp;&amp;</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iBestLvl</name></expr>]</index></name><operator>.</operator><name>nMerge</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>bRet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5IndexMergeLevel</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStruct</name></expr></argument>, <argument><expr><name>iBestLvl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iBestLvl</name></expr>]</index></name><operator>.</operator><name>nMerge</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5StructurePromote</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iBestLvl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>ppStruct</name> <operator>=</operator> <name>pStruct</name></expr>;</expr_stmt>
  <return>return <expr><name>bRet</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** A total of nLeaf leaf pages of data has just been flushed to a level-0
** segment. This function updates the write-counter accordingly and, if
** necessary, performs incremental merge work.
**
** If an error occurs, set the Fts5Index.rc error code. If an error has 
** already occurred, this function is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IndexAutomerge</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStruct</name></decl></parameter>,       <comment type="block">/* IN/OUT: Current structure of index */</comment>
  <parameter><decl><type><name>int</name></type> <name>nLeaf</name></decl></parameter>                       <comment type="block">/* Number of output leaves just written */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nAutomerge</name></name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ALWAYS</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ppStruct</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name> <init>= <expr><operator>*</operator><name>ppStruct</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u64</name></type> <name>nWrite</name></decl>;</decl_stmt>                   <comment type="block">/* Initial value of write-counter */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nWork</name></decl>;</decl_stmt>                    <comment type="block">/* Number of work-quanta to perform */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nRem</name></decl>;</decl_stmt>                     <comment type="block">/* Number of leaf pages left to write */</comment>

    <comment type="block">/* Update the write-counter. While doing so, set nWork. */</comment>
    <expr_stmt><expr><name>nWrite</name> <operator>=</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>nWriteCounter</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nWork</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>nWrite</name> <operator>+</operator> <name>nLeaf</name><operator>)</operator> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nWorkUnit</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>nWrite</name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nWorkUnit</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nWriteCounter</name></name> <operator>+=</operator> <name>nLeaf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nRem</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nWorkUnit</name></name> <operator>*</operator> <name>nWork</name> <operator>*</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fts5IndexMerge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ppStruct</name></expr></argument>, <argument><expr><name>nRem</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nAutomerge</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IndexCrisismerge</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStruct</name></decl></parameter>        <comment type="block">/* IN/OUT: Current structure of index */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nCrisis</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCrisisMerge</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name> <init>= <expr><operator>*</operator><name>ppStruct</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name><operator>&gt;=</operator><name>nCrisis</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5IndexMergeLevel</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStruct</name></expr></argument>, <argument><expr><name>iLvl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>&gt;</operator><operator>(</operator><name>iLvl</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5StructurePromote</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iLvl</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iLvl</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>ppStruct</name> <operator>=</operator> <name>pStruct</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5IndexReturn</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>Fts5FlushCtx</name></name></type> <name>Fts5FlushCtx</name>;</typedef>
<struct>struct <name>Fts5FlushCtx</name> <block>{
  <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5SegWriter</name></type> <name>writer</name></decl>;</decl_stmt> 
}</block>;</struct>

<comment type="block">/*
** Buffer aBuf[] contains a list of varints, all small enough to fit
** in a 32-bit integer. Return the size of the largest prefix of this 
** list nMax bytes or less in size.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5PoslistPrefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMax</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>dummy</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>ret</name><operator>&lt;</operator><name>nMax</name></expr> )</condition><block>{<block_content>
    <while>while<condition>( <expr><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>ret</name></expr>]</index></name></expr></argument>, <argument><expr><name>dummy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>ret</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&gt;</operator> <name>nMax</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Flush the contents of in-memory hash table iHash to a new level-0 
** segment on disk. Also update the corresponding structure record.
**
** If an error occurs, set the Fts5Index.rc error code. If an error has 
** already occurred, this function is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5FlushOneHash</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Hash</name> <modifier>*</modifier></type><name>pHash</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pgnoLast</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Last leaf page number in segment */</comment>

  <comment type="block">/* Obtain a reference to the index structure and allocate a new segment-id
  ** for the new level-0 segment.  */</comment>
  <expr_stmt><expr><name>pStruct</name> <operator>=</operator> <call><name>fts5StructureRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iSegid</name> <operator>=</operator> <call><name>fts5AllocateSegid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StructureInvalidate</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>iSegid</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pgsz</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>pgsz</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eDetail</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name></decl>;</decl_stmt>   <comment type="block">/* New segment within pStruct */</comment>
    <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>             <comment type="block">/* Buffer in which to assemble leaf page */</comment>
    <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pPgidx</name></decl>;</decl_stmt>           <comment type="block">/* Buffer in which to assemble pgidx */</comment>

    <decl_stmt><decl><type><name>Fts5SegWriter</name></type> <name>writer</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5WriteInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name>iSegid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pBuf</name> <operator>=</operator> <operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>writer</name><operator>.</operator><name>buf</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pPgidx</name> <operator>=</operator> <operator>&amp;</operator><name><name>writer</name><operator>.</operator><name>writer</name><operator>.</operator><name>pgidx</name></name></expr>;</expr_stmt>

    <comment type="block">/* fts5WriteInit() should have initialized the buffers to (most likely)
    ** the maximum space required. */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>nSpace</name></name><operator>&gt;=</operator><operator>(</operator><name>pgsz</name> <operator>+</operator> <name>FTS5_DATA_PADDING</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>||</operator> <name><name>pPgidx</name><operator>-&gt;</operator><name>nSpace</name></name><operator>&gt;=</operator><operator>(</operator><name>pgsz</name> <operator>+</operator> <name>FTS5_DATA_PADDING</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Begin scanning through hash table entries. This loop runs once for each
    ** term/doclist currently stored within the hash table. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3Fts5HashScanInit</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>sqlite3Fts5HashScanEof</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTerm</name></decl>;</decl_stmt>          <comment type="block">/* Buffer containing term */</comment>
      <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pDoclist</name></decl>;</decl_stmt>         <comment type="block">/* Pointer to doclist for this term */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>nDoclist</name></decl>;</decl_stmt>               <comment type="block">/* Size of doclist in bytes */</comment>

      <comment type="block">/* Write the term for this entry to disk. */</comment>
      <expr_stmt><expr><call><name>sqlite3Fts5HashScanEntry</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zTerm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDoclist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nDoclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5WriteAppendTerm</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zTerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><name>zTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>writer</name><operator>.</operator><name>bFirstRowidInPage</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pgsz</name><operator>&gt;=</operator><operator>(</operator><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name><name>pPgidx</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>nDoclist</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block>{<block_content>
        <comment type="block">/* The entire doclist will fit on the current leaf. */</comment>
        <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>pDoclist</name></expr></argument>, <argument><expr><name>nDoclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>u64</name></type> <name>iDelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="block">/* The entire doclist will not fit on this leaf. The following 
        ** loop iterates through the poslists that make up the current 
        ** doclist.  */</comment>
        <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iOff</name><operator>&lt;</operator><name>nDoclist</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDoclist</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>iRowid</name> <operator>+=</operator> <name>iDelta</name></expr>;</expr_stmt>
          
          <if_stmt><if>if<condition>( <expr><name><name>writer</name><operator>.</operator><name>bFirstRowidInPage</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>fts5PutU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u16</name><operator>)</operator><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* first rowid on page */</comment>
            <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>writer</name><operator>.</operator><name>bFirstRowidInPage</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>fts5WriteDlidxAppend</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+=</operator> <call><name>sqlite3Fts5PutVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>&lt;=</operator><name><name>pBuf</name><operator>-&gt;</operator><name>nSpace</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

          <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>nDoclist</name> <operator>&amp;&amp;</operator> <name><name>pDoclist</name><index>[<expr><name>iOff</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>iOff</name><operator>++</operator></expr>;</expr_stmt>
              <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>nDoclist</name> <operator>&amp;&amp;</operator> <name><name>pDoclist</name><index>[<expr><name>iOff</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>iOff</name><operator>++</operator></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name><name>pPgidx</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator><operator>&gt;=</operator><name>pgsz</name></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><call><name>fts5WriteFlushLeaf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>bDummy</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nPos</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nCopy</name> <init>= <expr><call><name>fts5GetPoslistSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDoclist</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bDummy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>nCopy</name> <operator>+=</operator> <name>nPos</name></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name><name>pPgidx</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name>nCopy</name><operator>)</operator> <operator>&lt;=</operator> <name>pgsz</name></expr> )</condition><block>{<block_content>
              <comment type="block">/* The entire poslist will fit on the current leaf. So copy
              ** it in one go. */</comment>
              <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDoclist</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if><else>else<block>{<block_content>
              <comment type="block">/* The entire poslist will not fit on this leaf. So it needs
              ** to be broken into sections. The only qualification being
              ** that each varint must be stored contiguously.  */</comment>
              <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pPoslist</name> <init>= <expr><operator>&amp;</operator><name><name>pDoclist</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>int</name></type> <name>iPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
              <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>nSpace</name> <init>= <expr><name>pgsz</name> <operator>-</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>-</operator> <name><name>pPgidx</name><operator>-&gt;</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if<condition>( <expr><operator>(</operator><name>nCopy</name> <operator>-</operator> <name>iPos</name><operator>)</operator><operator>&lt;=</operator><name>nSpace</name></expr> )</condition><block>{<block_content>
                  <expr_stmt><expr><name>n</name> <operator>=</operator> <name>nCopy</name> <operator>-</operator> <name>iPos</name></expr>;</expr_stmt>
                </block_content>}</block></if><else>else<block>{<block_content>
                  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>fts5PoslistPrefix</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPoslist</name><index>[<expr><name>iPos</name></expr>]</index></name></expr></argument>, <argument><expr><name>nSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pPoslist</name><index>[<expr><name>iPos</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>iPos</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name><name>pPgidx</name><operator>-&gt;</operator><name>n</name></name><operator>)</operator><operator>&gt;=</operator><name>pgsz</name></expr> )</condition><block>{<block_content>
                  <expr_stmt><expr><call><name>fts5WriteFlushLeaf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if<condition>( <expr><name>iPos</name><operator>&gt;=</operator><name>nCopy</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
              </block_content>}</block></while>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>nCopy</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
      </block_content>}</block></else></if_stmt>

      <comment type="block">/* TODO2: Doclist terminator written here. */</comment>
      <comment type="block">/* pBuf-&gt;p[pBuf-&gt;n++] = '\0'; */</comment>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>&lt;=</operator><name><name>pBuf</name><operator>-&gt;</operator><name>nSpace</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3Fts5HashScanNext</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>sqlite3Fts5HashClear</name><argument_list>(<argument><expr><name>pHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5WriteFinish</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>writer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pgnoLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the Fts5Structure. It is written back to the database by the
    ** fts5StructureRelease() call below.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5StructureAddLevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5StructureExtendLevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pSeg</name> <operator>=</operator> <operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>aSeg</name><index>[ <expr><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nSeg</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name> <operator>=</operator> <name>iSegid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name> <operator>=</operator> <name>pgnoLast</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5StructurePromote</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5IndexAutomerge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStruct</name></expr></argument>, <argument><expr><name>pgnoLast</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5IndexCrisismerge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StructureWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Flush any data stored in the in-memory hash tables to the database.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IndexFlush</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <comment type="block">/* Unless it is empty, flush the hash table to disk */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nPendingData</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPendingData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5FlushOneHash</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Fts5Structure</name> <modifier>*</modifier></type><name>fts5IndexOptimizeStruct</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Structure</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nSeg</name> <init>= <expr><name><name>pStruct</name><operator>-&gt;</operator><name>nSegment</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Figure out if this structure requires optimization. A structure does
  ** not require optimization if either:
  **
  **  + it consists of fewer than two segments, or 
  **  + all segments are on the same level, or
  **  + all segments except one are currently inputs to a merge operation.
  **
  ** In the first case, return NULL. In the second, increment the ref-count
  ** on *pStruct and return a copy of the pointer to it.
  */</comment>
  <if_stmt><if>if<condition>( <expr><name>nSeg</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nThis</name> <init>= <expr><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nSeg</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nThis</name><operator>==</operator><name>nSeg</name> <operator>||</operator> <operator>(</operator><name>nThis</name><operator>==</operator><name>nSeg</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nMerge</name><operator>==</operator><name>nThis</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5StructureRef</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>pStruct</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nMerge</name><operator>&lt;=</operator><name>nThis</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <operator>(</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureLevel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>Fts5Structure</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <name>nSeg</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5StructureSegment</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nLevel</name></name> <operator>=</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nWriteCounter</name></name> <operator>=</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>nWriteCounter</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pLvl</name> <operator>=</operator> <operator>&amp;</operator><name><name>pNew</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name></name> <operator>=</operator> <operator>(</operator><name>Fts5StructureSegment</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name></decl>, <decl><type ref="prev"/><name>iSeg</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iSegOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <comment type="block">/* Iterate through all segments, from oldest to newest. Add them to
      ** the new Fts5Level object so that pLvl-&gt;aSeg[0] is the oldest
      ** segment in the data structure.  */</comment>
      <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iLvl</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>iLvl</name><operator>--</operator></expr></incr>)</control><block>{<block_content>
        <for>for<control>(<init><expr><name>iSeg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeg</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name></expr>;</condition> <incr><expr><name>iSeg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iSegOut</name></expr>]</index></name> <operator>=</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>iSegOut</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nSegment</name></name> <operator>=</operator> <name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name> <operator>=</operator> <name>nSeg</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pNew</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5IndexOptimize</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5IndexFlush</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pStruct</name> <operator>=</operator> <call><name>fts5StructureRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StructureInvalidate</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>pStruct</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>fts5IndexOptimizeStruct</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pNew</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pNew</name><operator>-&gt;</operator><name>nSegment</name></name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pNew</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content/>}</block></for>
    <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pNew</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nRem</name> <init>= <expr><name>FTS5_OPT_WORK_UNIT</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5IndexMergeLevel</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pNew</name></expr></argument>, <argument><expr><name>iLvl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>fts5StructureWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>

<comment type="block">/*
** This is called to implement the special "VALUES('merge', $nMerge)"
** INSERT command.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexMerge</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMerge</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name> <init>= <expr><call><name>fts5StructureRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pStruct</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nMin</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nUsermerge</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5StructureInvalidate</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nMerge</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pNew</name> <init>= <expr><call><name>fts5IndexOptimizeStruct</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStruct</name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nMin</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nMerge</name> <operator>=</operator> <name>nMerge</name><operator>*</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pStruct</name> <operator>&amp;&amp;</operator> <name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>fts5IndexMerge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStruct</name></expr></argument>, <argument><expr><name>nMerge</name></expr></argument>, <argument><expr><name>nMin</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5StructureWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5AppendRowid</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iDelta</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5AppendPoslist</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>i64</name></type> <name>iDelta</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pMulti</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nData</name> <init>= <expr><name><name>pMulti</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><name>nData</name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <name>FTS5_DATA_ZERO_PADDING</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nData</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>fts5BufferGrow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>nData</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name><name>pMulti</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FTS5_DATA_ZERO_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DoclistIterNext</name><parameter_list>(<parameter><decl><type><name>Fts5DoclistIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>aPoslist</name></name> <operator>+</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nSize</name></name> <operator>+</operator> <name><name>pIter</name><operator>-&gt;</operator><name>nPoslist</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aPoslist</name></name> <operator>||</operator> <operator>(</operator><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>aPoslist</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>&gt;=</operator><name><name>pIter</name><operator>-&gt;</operator><name>aEof</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aPoslist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iDelta</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name> <operator>+=</operator> <name>iDelta</name></expr>;</expr_stmt>

    <comment type="block">/* Read position list size */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nPos</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nSize</name></name> <operator>=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nPoslist</name></name> <operator>=</operator> <operator>(</operator><name>nPos</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nPoslist</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>nSize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aPoslist</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aPoslist</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>nPoslist</name></name></expr>]</index></name><operator>&gt;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aEof</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aPoslist</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DoclistIterInit</name><parameter_list>(
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5DoclistIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aPoslist</name></name> <operator>=</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>p</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aEof</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5DoclistIterNext</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block">/*
** Append a doclist to buffer pBuf.
**
** This function assumes that space within the buffer has already been
** allocated.
*/</comment>
static void fts5MergeAppendDocid(
  Fts5Buffer *pBuf,               <comment type="block">/* Buffer to write to */</comment>
  i64 *piLastRowid,               <comment type="block">/* IN/OUT: Previous rowid written (if any) */</comment>
  i64 iRowid                      <comment type="block">/* Rowid to append */</comment>
){
  assert( pBuf-&gt;n!=0 || (*piLastRowid)==0 );
  fts5BufferSafeAppendVarint(pBuf, iRowid - *piLastRowid);
  *piLastRowid = iRowid;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5MergeAppendDocid</name><parameter_list>(<parameter><type><name>pBuf</name></type></parameter>, <parameter><type><name>iLastRowid</name></type></parameter>, <parameter><type><name>iRowid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{       \
  assert( (pBuf)-&gt;n!=0 || (iLastRowid)==0 );                   \
  fts5BufferSafeAppendVarint((pBuf), (iRowid) - (iLastRowid)); \
  (iLastRowid) = (iRowid);                                     \
}</cpp:value></cpp:define>

<comment type="block">/*
** Swap the contents of buffer *p1 with that of *p2.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5BufferSwap</name><parameter_list>(<parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <operator>*</operator><name>p2</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p2</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5NextRowid</name><parameter_list>(<parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piOff</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>piRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>piOff</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>u64</name></type> <name>iVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>piOff</name> <operator>=</operator> <name>i</name> <operator>+</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>piRowid</name> <operator>+=</operator> <name>iVal</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This is the equivalent of fts5MergePrefixLists() for detail=none mode.
** In this case the buffers consist of a delta-encoded list of rowids only.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MergeRowidLists</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,                 <comment type="block">/* First list to merge */</comment>
  <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>,                       <comment type="block">/* Number of entries in apBuf[] */</comment>
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>                <comment type="block">/* Array of other lists to merge into p1 */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>p2</name> <init>= <expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>out</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>nBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nBuf</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5BufferSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <name><name>p2</name><operator>-&gt;</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5NextRowid</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRowid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5NextRowid</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRowid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>i1</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>||</operator> <name>i2</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>i1</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i2</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>iRowid1</name><operator>&lt;</operator><name>iRowid2</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iOut</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>iRowid1</name><operator>&gt;</operator><name>iOut</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>iRowid1</name> <operator>-</operator> <name>iOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOut</name> <operator>=</operator> <name>iRowid1</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5NextRowid</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRowid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iOut</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>iRowid2</name><operator>&gt;</operator><name>iOut</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>iRowid2</name> <operator>-</operator> <name>iOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOut</name> <operator>=</operator> <name>iRowid2</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>i1</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iRowid1</name><operator>==</operator><name>iRowid2</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5NextRowid</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRowid1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5NextRowid</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRowid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>fts5BufferSwap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>PrefixMerger</name></name></type> <name>PrefixMerger</name>;</typedef>
<struct>struct <name>PrefixMerger</name> <block>{
  <decl_stmt><decl><type><name>Fts5DoclistIter</name></type> <name>iter</name></decl>;</decl_stmt>           <comment type="block">/* Doclist iterator */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iPos</name></decl>;</decl_stmt>                       <comment type="block">/* For iterating through a position list */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aPos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PrefixMerger</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>            <comment type="block">/* Next in docid/poslist order */</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5PrefixMergerInsertByRowid</name><parameter_list>(
  <parameter><decl><type><name>PrefixMerger</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppHead</name></decl></parameter>, 
  <parameter><decl><type><name>PrefixMerger</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>aPoslist</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>PrefixMerger</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><name>ppHead</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><operator>*</operator><name>pp</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iRowid</name></name><operator>&gt;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name><name>iter</name><operator>.</operator><name>iRowid</name></name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5PrefixMergerInsertByPosition</name><parameter_list>(
  <parameter><decl><type><name>PrefixMerger</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppHead</name></decl></parameter>, 
  <parameter><decl><type><name>PrefixMerger</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>PrefixMerger</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><name>ppHead</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><operator>*</operator><name>pp</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>iPos</name></name><operator>&gt;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>iPos</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Array aBuf[] contains nBuf doclists. These are all merged in with the
** doclist in buffer p1.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MergePrefixLists</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>,                 <comment type="block">/* First list to merge */</comment>
  <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>,                       <comment type="block">/* Number of buffers in array aBuf[] */</comment>
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>                <comment type="block">/* Other lists to merge in */</comment> 
)</parameter_list><block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fts5PrefixMergerNextPosition</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> \
  <cpp:value>sqlite3Fts5PoslistNext64((p)-&gt;aPos,(p)-&gt;iter.nPoslist,&amp;(p)-&gt;iOff,&amp;(p)-&gt;iPos)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_MERGE_NLIST</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>
  <decl_stmt><decl><type><name>PrefixMerger</name></type> <name><name>aMerger</name><index>[<expr><name>FTS5_MERGE_NLIST</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PrefixMerger</name> <modifier>*</modifier></type><name>pHead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>out</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>tmp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLastRowid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Initialize a doclist-iterator for each input buffer. Arrange them in
  ** a linked-list starting at pHead in ascending order of rowid. Avoid
  ** linking any iterators already at EOF into the linked list at all. */</comment> 
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nBuf</name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>aMerger</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>aMerger</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aMerger</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PrefixMerger</name></expr></argument>)</argument_list></sizeof><operator>*</operator><operator>(</operator><name>nBuf</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pHead</name> <operator>=</operator> <operator>&amp;</operator><name><name>aMerger</name><index>[<expr><name>nBuf</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5DoclistIterInit</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHead</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nBuf</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>fts5DoclistIterInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aMerger</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5PrefixMergerInsertByRowid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pHead</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aMerger</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nOut</name> <operator>+=</operator> <name><name>aBuf</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>nOut</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>nOut</name> <operator>+=</operator> <name><name>p1</name><operator>-&gt;</operator><name>n</name></name> <operator>+</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">10</literal><operator>*</operator><name>nBuf</name></expr>;</expr_stmt>

  <comment type="block">/* The maximum size of the output is equal to the sum of the
  ** input sizes + 1 varint (9 bytes). The extra varint is because if the
  ** first rowid in one input is a large negative number, and the first in
  ** the other a non-negative number, the delta for the non-negative
  ** number will be larger on disk than the literal integer value
  ** was.  
  **
  ** Or, if the input position-lists are corrupt, then the output might
  ** include up to (nBuf+1) extra 10-byte positions created by interpreting -1
  ** (the value PoslistNext64() uses for EOF) as a position and appending
  ** it to the output. This can happen at most once for each input 
  ** position-list, hence (nBuf+1) 10 byte paddings.  */</comment>
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5BufferSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <while>while<condition>( <expr><name>pHead</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5MergeAppendDocid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name>iLastRowid</name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pHead</name><operator>-&gt;</operator><name>pNext</name></name> <operator>&amp;&amp;</operator> <name>iLastRowid</name><operator>==</operator><name><name>pHead</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iRowid</name></name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Merge data from two or more poslists */</comment>
      <decl_stmt><decl><type><name>i64</name></type> <name>iPrev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nTmp</name> <init>= <expr><name>FTS5_DATA_ZERO_PADDING</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nMerge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PrefixMerger</name> <modifier>*</modifier></type><name>pSave</name> <init>= <expr><name>pHead</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>PrefixMerger</name> <modifier>*</modifier></type><name>pThis</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nTail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>pHead</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <while>while<condition>( <expr><name>pSave</name> <operator>&amp;&amp;</operator> <name><name>pSave</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iRowid</name></name><operator>==</operator><name>iLastRowid</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>PrefixMerger</name> <modifier>*</modifier></type><name>pNext</name> <init>= <expr><name><name>pSave</name><operator>-&gt;</operator><name>pNext</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>pSave</name><operator>-&gt;</operator><name>iOff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSave</name><operator>-&gt;</operator><name>iPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pSave</name><operator>-&gt;</operator><name>aPos</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pSave</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>aPoslist</name><index>[<expr><name><name>pSave</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>nSize</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5PrefixMergerNextPosition</name><argument_list>(<argument><expr><name>pSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nTmp</name> <operator>+=</operator> <name><name>pSave</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>nPoslist</name></name> <operator>+</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>nMerge</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5PrefixMergerInsertByPosition</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pHead</name></expr></argument>, <argument><expr><name>pSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pSave</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if<condition>( <expr><name>pHead</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pHead</name><operator>-&gt;</operator><name>pNext</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <comment type="block">/* See the earlier comment in this function for an explanation of why
      ** corrupt input position lists might cause the output to consume
      ** at most nMerge*10 bytes of unexpected space. */</comment>
      <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5BufferSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name>nTmp</name><operator>+</operator><name>nMerge</name><operator>*</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pThis</name> <operator>=</operator> <name>pHead</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pHead</name> <operator>=</operator> <name><name>pThis</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5PoslistSafeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPrev</name></expr></argument>, <argument><expr><name><name>pThis</name><operator>-&gt;</operator><name>iPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5PrefixMergerNextPosition</name><argument_list>(<argument><expr><name>pThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5PrefixMergerInsertByPosition</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pHead</name></expr></argument>, <argument><expr><name>pThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while<condition>( <expr><name><name>pHead</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>pThis</name> <operator>=</operator> <name>pHead</name></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pThis</name><operator>-&gt;</operator><name>iPos</name></name><operator>!=</operator><name>iPrev</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3Fts5PoslistSafeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPrev</name></expr></argument>, <argument><expr><name><name>pThis</name><operator>-&gt;</operator><name>iPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>fts5PrefixMergerNextPosition</name><argument_list>(<argument><expr><name>pThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pHead</name> <operator>=</operator> <name><name>pThis</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5PrefixMergerInsertByPosition</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pHead</name></expr></argument>, <argument><expr><name>pThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if<condition>( <expr><name><name>pHead</name><operator>-&gt;</operator><name>iPos</name></name><operator>!=</operator><name>iPrev</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3Fts5PoslistSafeAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPrev</name></expr></argument>, <argument><expr><name><name>pHead</name><operator>-&gt;</operator><name>iPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>nTail</name> <operator>=</operator> <name><name>pHead</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>nPoslist</name></name> <operator>-</operator> <name><name>pHead</name><operator>-&gt;</operator><name>iOff</name></name></expr>;</expr_stmt>

      <comment type="block">/* WRITEPOSLISTSIZE */</comment>
      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name><name>tmp</name><operator>.</operator><name>n</name></name><operator>+</operator><name>nTail</name><operator>&lt;=</operator><name>nTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>tmp</name><operator>.</operator><name>n</name></name><operator>+</operator><name>nTail</name><operator>&lt;=</operator><name>nTmp</name><operator>+</operator><name>nMerge</name><operator>*</operator><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>tmp</name><operator>.</operator><name>n</name></name><operator>+</operator><name>nTail</name><operator>&gt;</operator><name>nTmp</name><operator>-</operator><name>FTS5_DATA_ZERO_PADDING</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5BufferSafeAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name><name>tmp</name><operator>.</operator><name>n</name></name><operator>+</operator><name>nTail</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nTail</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHead</name><operator>-&gt;</operator><name>aPos</name><index>[<expr><name><name>pHead</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>nTail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pHead</name> <operator>=</operator> <name>pSave</name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nBuf</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>PrefixMerger</name> <modifier>*</modifier></type><name>pX</name> <init>= <expr><operator>&amp;</operator><name><name>aMerger</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pX</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>aPoslist</name></name> <operator>&amp;&amp;</operator> <name><name>pX</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iRowid</name></name><operator>==</operator><name>iLastRowid</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>fts5DoclistIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pX</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>fts5PrefixMergerInsertByRowid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pHead</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Copy poslist from pHead to output */</comment>
      <decl_stmt><decl><type><name>PrefixMerger</name> <modifier>*</modifier></type><name>pThis</name> <init>= <expr><name>pHead</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Fts5DoclistIter</name> <modifier>*</modifier></type><name>pI</name> <init>= <expr><operator>&amp;</operator><name><name>pThis</name><operator>-&gt;</operator><name>iter</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5BufferSafeAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name><name>pI</name><operator>-&gt;</operator><name>aPoslist</name></name></expr></argument>, <argument><expr><name><name>pI</name><operator>-&gt;</operator><name>nPoslist</name></name><operator>+</operator><name><name>pI</name><operator>-&gt;</operator><name>nSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5DoclistIterNext</name><argument_list>(<argument><expr><name>pI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pHead</name> <operator>=</operator> <name><name>pThis</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5PrefixMergerInsertByRowid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pHead</name></expr></argument>, <argument><expr><name>pThis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>.</operator><name>p</name><index>[<expr><name><name>out</name><operator>.</operator><name>n</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FTS5_DATA_ZERO_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>p1</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5SetupPrefixIter</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Index to read from */</comment>
  <parameter><decl><type><name>int</name></type> <name>bDesc</name></decl></parameter>,                      <comment type="block">/* True for "ORDER BY rowid DESC" */</comment>
  <parameter><decl><type><name>int</name></type> <name>iIdx</name></decl></parameter>,                       <comment type="block">/* Index to scan for data */</comment>
  <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>,                     <comment type="block">/* Buffer containing prefix to match */</comment>
  <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>,                     <comment type="block">/* Size of buffer pToken in bytes */</comment>
  <parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl></parameter>,            <comment type="block">/* Restrict matches to these columns */</comment>
  <parameter><decl><type><name>Fts5Iter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppIter</name></decl></parameter>          <comment type="block">/* OUT: New iterator */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>aBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMerge</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xMerge</name>)<parameter_list>(<parameter><decl><type><name>Fts5Index</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xAppend</name>)<parameter_list>(<parameter><decl><type><name>Fts5Index</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>i64</name></type></decl></parameter>, <parameter><decl><type><name>Fts5Iter</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>xMerge</name> <operator>=</operator> <name>fts5MergeRowidLists</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xAppend</name> <operator>=</operator> <name>fts5AppendRowid</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nMerge</name> <operator>=</operator> <name>FTS5_MERGE_NLIST</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nBuf</name> <operator>=</operator> <name>nMerge</name><operator>*</operator><literal type="number">8</literal></expr>;</expr_stmt>   <comment type="block">/* Sufficient to merge (16^8)==(2^32) lists */</comment>
    <expr_stmt><expr><name>xMerge</name> <operator>=</operator> <name>fts5MergePrefixLists</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xAppend</name> <operator>=</operator> <name>fts5AppendPoslist</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>aBuf</name> <operator>=</operator> <operator>(</operator><name>Fts5Buffer</name><operator>*</operator><operator>)</operator><call><name>fts5IdxMalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pStruct</name> <operator>=</operator> <call><name>fts5StructureRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>aBuf</name> <operator>&amp;&amp;</operator> <name>pStruct</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><name>FTS5INDEX_QUERY_SCAN</name> 
                    <operator>|</operator> <name>FTS5INDEX_QUERY_SKIPEMPTY</name> 
                    <operator>|</operator> <name>FTS5INDEX_QUERY_NOOUTPUT</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>iLastRowid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>p1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>     <comment type="block">/* Iterator used to gather data from index */</comment>
    <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>doclist</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bNewTerm</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>doclist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>doclist</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iIdx</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>dummy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>f2</name> <init>= <expr><name>FTS5INDEX_QUERY_SKIPEMPTY</name><operator>|</operator><name>FTS5INDEX_QUERY_NOOUTPUT</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pToken</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>FTS5_MAIN_PREFIX</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5MultiIterNew</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>, <argument><expr><name>f2</name></expr></argument>, <argument><expr><name>pColset</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5IterSetOutputCb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init>;</init>
        <condition><expr><call><name>fts5MultiIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>;</condition>
        <incr><expr><call><name>fts5MultiIterNext2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr></incr>
      )</control><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>p1</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>p1</name><operator>-&gt;</operator><name>xSetOutputs</name></name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>xAppend</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name><operator>-</operator><name>iLastRowid</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>iLastRowid</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>fts5MultiIterFree</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pToken</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>FTS5_MAIN_PREFIX</name> <operator>+</operator> <name>iIdx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5MultiIterNew</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pColset</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5IterSetOutputCb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>( <comment type="block">/* no-op */</comment> <init>;</init>
        <condition><expr><call><name>fts5MultiIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>;</condition>
        <incr><expr><call><name>fts5MultiIterNext2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bNewTerm</name></expr></argument>)</argument_list></call></expr></incr>
    )</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>p1</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>p1</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name> <init>= <expr><name><name>pSeg</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pTerm</name> <init>= <expr><name><name>pSeg</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>p1</name><operator>-&gt;</operator><name>xSetOutputs</name></name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>nToken</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>&lt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>bNewTerm</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>nTerm</name><operator>&lt;</operator><name>nToken</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>pTerm</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>nData</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>p1</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name><operator>&lt;=</operator><name>iLastRowid</name> <operator>&amp;&amp;</operator> <name><name>doclist</name><operator>.</operator><name>n</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>doclist</name><operator>.</operator><name>n</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name>i</name><operator>*</operator><name>nMerge</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>iStore</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i1</name><operator>+</operator><name>nMerge</name><operator>&lt;=</operator><name>nBuf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <for>for<control>(<init><expr><name>iStore</name><operator>=</operator><name>i1</name></expr>;</init> <condition><expr><name>iStore</name><operator>&lt;</operator><name>i1</name><operator>+</operator><name>nMerge</name></expr>;</condition> <incr><expr><name>iStore</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><name><name>aBuf</name><index>[<expr><name>iStore</name></expr>]</index></name><operator>.</operator><name>n</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
              <expr_stmt><expr><call><name>fts5BufferSwap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>doclist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>iStore</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>doclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></for>
          <if_stmt><if>if<condition>( <expr><name>iStore</name><operator>==</operator><name>i1</name><operator>+</operator><name>nMerge</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>xMerge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doclist</name></expr></argument>, <argument><expr><name>nMerge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>i1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>iStore</name><operator>=</operator><name>i1</name></expr>;</init> <condition><expr><name>iStore</name><operator>&lt;</operator><name>i1</name><operator>+</operator><name>nMerge</name></expr>;</condition> <incr><expr><name>iStore</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
              <expr_stmt><expr><call><name>fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>iStore</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>iLastRowid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>xAppend</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>p1</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name><operator>-</operator><name>iLastRowid</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iLastRowid</name> <operator>=</operator> <name><name>p1</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>iRowid</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>nBuf</name><operator>%</operator><name>nMerge</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nBuf</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><name>nMerge</name></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iFree</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>xMerge</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>doclist</name></expr></argument>, <argument><expr><name>nMerge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <for>for<control>(<init><expr><name>iFree</name><operator>=</operator><name>i</name></expr>;</init> <condition><expr><name>iFree</name><operator>&lt;</operator><name>i</name><operator>+</operator><name>nMerge</name></expr>;</condition> <incr><expr><name>iFree</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><name>iFree</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fts5MultiIterFree</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>fts5IdxMalloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Data</name></expr></argument>)</argument_list></sizeof><operator>+</operator><name><name>doclist</name><operator>.</operator><name>n</name></name><operator>+</operator><name>FTS5_DATA_ZERO_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pData</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pData</name><operator>-&gt;</operator><name>nn</name></name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>szLeaf</name></name> <operator>=</operator> <name><name>doclist</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>doclist</name><operator>.</operator><name>n</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pData</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>doclist</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>doclist</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5MultiIterNew2</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>, <argument><expr><name>ppIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>doclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Indicate that all subsequent calls to sqlite3Fts5IndexWrite() pertain
** to the document with rowid iRowid.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexBeginWrite</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDelete</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate the hash table if it has not already been allocated */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <call><name>sqlite3Fts5HashNew</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>nPendingData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Flush the hash table to disk if required */</comment>
  <if_stmt><if>if<condition>( <expr><name>iRowid</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>iWriteRowid</name></name> 
   <operator>||</operator> <operator>(</operator><name>iRowid</name><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>iWriteRowid</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>bDelete</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator>
   <operator>||</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nPendingData</name></name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nHashSize</name></name><operator>)</operator></expr> 
  )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5IndexFlush</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iWriteRowid</name></name> <operator>=</operator> <name>iRowid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bDelete</name></name> <operator>=</operator> <name>bDelete</name></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Commit data to disk.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexSync</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5IndexFlush</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5IndexCloseReader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Discard any data stored in the in-memory hash tables. Do not write it
** to the database. Additionally, assume that the contents of the %_data
** table may have changed on disk. So any in-memory caches of %_data 
** records must be invalidated.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexRollback</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>sqlite3Fts5IndexCloseReader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5IndexDiscardData</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StructureInvalidate</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* assert( p-&gt;rc==SQLITE_OK ); */</comment>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The %_data table is completely empty when this function is called. This
** function populates it with the initial structure objects for each index,
** and the initial version of the "averages" record (a zero-byte blob).
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexReinit</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Structure</name></type> <name>s</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5StructureInvalidate</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5IndexDiscardData</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Structure</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5DataWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_AVERAGES_ROWID</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StructureWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open a new Fts5Index handle. If the bCreate argument is true, create
** and initialize the underlying %_data table.
**
** If successful, set *pp to point to the new object and return SQLITE_OK.
** Otherwise, set *pp to NULL and return an SQLite error code.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexOpen</name><parameter_list>(
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bCreate</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>                   <comment type="block">/* New object */</comment>

  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name> <operator>=</operator> <operator>(</operator><name>Fts5Index</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name> <operator>=</operator> <name>pConfig</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nWorkUnit</name></name> <operator>=</operator> <name>FTS5_WORK_UNIT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zDataTbl</name></name> <operator>=</operator> <call><name>sqlite3Fts5Mprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="string">"%s_data"</literal></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>zDataTbl</name></name> <operator>&amp;&amp;</operator> <name>bCreate</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5CreateTable</name><argument_list>(
          <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="string">"id INTEGER PRIMARY KEY, block BLOB"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5CreateTable</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><literal type="string">"idx"</literal></expr></argument>, 
            <argument><expr><literal type="string">"segid, term, pgno, PRIMARY KEY(segid, term)"</literal></expr></argument>, 
            <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexReinit</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5IndexClose</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close a handle opened by an earlier call to sqlite3Fts5IndexOpen().
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexClose</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pReader</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5StructureInvalidate</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDeleter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxDeleter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIdxSelect</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pDataVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5HashFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Argument p points to a buffer containing utf-8 text that is n bytes in 
** size. Return the number of bytes in the nChar character prefix of the
** buffer, or 0 if there are less than nChar characters in total.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexCharlenToBytelen</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nChar</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nChar</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><name>nByte</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>      <comment type="block">/* Input contains fewer than nChar chars */</comment>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>p</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name><operator>&gt;=</operator><literal type="number">0xc0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><name>nByte</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <while>while<condition>( <expr><operator>(</operator><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator><operator>==</operator><literal type="number">0x80</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;=</operator><name>nByte</name></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>nChar</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
          <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** pIn is a UTF-8 encoded string, nIn bytes in size. Return the number of
** unicode characters in the string.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5IndexCharlen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nIn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nChar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>nIn</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>pIn</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>&gt;=</operator><literal type="number">0xc0</literal></expr> )</condition><block>{<block_content>
      <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>nIn</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pIn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator><operator>==</operator><literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nChar</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>nChar</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Insert or remove data to or from the index. Each time a document is 
** added to or removed from the index, this function is called one or more
** times.
**
** For an insert, it must be called once for each token in the new document.
** If the operation is a delete, it must be called (at least) once for each
** unique token in the document with an iCol value less than zero. The iPos
** argument is ignored for a delete.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexWrite</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Index to write to */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>,                       <comment type="block">/* Column token appears in (-ve -&gt; delete) */</comment>
  <parameter><decl><type><name>int</name></type> <name>iPos</name></decl></parameter>,                       <comment type="block">/* Position of token within column */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>  <comment type="block">/* Token to add or remove to or from index */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                          <comment type="block">/* Used to iterate through indexes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>iCol</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator><operator>==</operator><name><name>p</name><operator>-&gt;</operator><name>bDelete</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Add the entry to the main terms index. */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5HashWrite</name><argument_list>(
      <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iWriteRowid</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>iPos</name></expr></argument>, <argument><expr><name>FTS5_MAIN_PREFIX</name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nPrefix</name></name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nChar</name> <init>= <expr><name><name>pConfig</name><operator>-&gt;</operator><name>aPrefix</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><call><name>sqlite3Fts5IndexCharlenToBytelen</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>, <argument><expr><name>nChar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5HashWrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pHash</name></name></expr></argument>, 
          <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iWriteRowid</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>iPos</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>FTS5_MAIN_PREFIX</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>pToken</name></expr></argument>,
          <argument><expr><name>nByte</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open a new iterator to iterate though all rowid that match the 
** specified token or token prefix.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexQuery</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS index to query */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>, <comment type="block">/* Token (or prefix) to query for */</comment>
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,                      <comment type="block">/* Mask of FTS5INDEX_QUERY_X flags */</comment>
  <parameter><decl><type><name>Fts5Colset</name> <modifier>*</modifier></type><name>pColset</name></decl></parameter>,            <comment type="block">/* Match these columns only */</comment>
  <parameter><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppIter</name></decl></parameter>          <comment type="block">/* OUT: New iterator object */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If the QUERY_SCAN flag is set, all other flags must be clear. */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_SCAN</name><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>flags</name><operator>==</operator><name>FTS5INDEX_QUERY_SCAN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5BufferSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name>nToken</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Index to search */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iPrefixIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* +1 prefix index */</comment>
    <if_stmt><if>if<condition>( <expr><name>nToken</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* Figure out which index to search and set iIdx accordingly. If this
    ** is a prefix query for which there is no prefix index, set iIdx to
    ** greater than pConfig-&gt;nPrefix to indicate that the query will be
    ** satisfied by scanning multiple terms in the main index.
    **
    ** If the QUERY_TEST_NOIDX flag was specified, then this must be a
    ** prefix-query. Instead of using a prefix-index (if one exists), 
    ** evaluate the prefix query using the main FTS index. This is used
    ** for internal sanity checking by the integrity-check in debug 
    ** mode only.  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>bPrefixIndex</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_TEST_NOIDX</name><operator>)</operator></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_PREFIX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iIdx</name> <operator>=</operator> <literal type="number">1</literal><operator>+</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nPrefix</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_PREFIX</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nChar</name> <init>= <expr><call><name>fts5IndexCharlen</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>iIdx</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iIdx</name><operator>&lt;=</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nPrefix</name></name></expr>;</condition> <incr><expr><name>iIdx</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nIdxChar</name> <init>= <expr><name><name>pConfig</name><operator>-&gt;</operator><name>aPrefix</name><index>[<expr><name>iIdx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>nIdxChar</name><operator>==</operator><name>nChar</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>nIdxChar</name><operator>==</operator><name>nChar</name><operator>+</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iPrefixIdx</name> <operator>=</operator> <name>iIdx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>iIdx</name><operator>&lt;=</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nPrefix</name></name></expr> )</condition><block>{<block_content>
      <comment type="block">/* Straight index lookup */</comment>
      <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name> <init>= <expr><call><name>fts5StructureRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>)</operator><operator>(</operator><name>FTS5_MAIN_PREFIX</name> <operator>+</operator> <name>iIdx</name><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pStruct</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5MultiIterNew</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>FTS5INDEX_QUERY_SKIPEMPTY</name></expr></argument>, 
            <argument><expr><name>pColset</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>nToken</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRet</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <comment type="block">/* Scan multiple terms in the main index */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>bDesc</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FTS5INDEX_QUERY_DESC</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5SetupPrefixIter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bDesc</name></expr></argument>, <argument><expr><name>iPrefixIdx</name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>nToken</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pColset</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pRet</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>pColset</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5IterSetOutputCb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pRet</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name><name>pRet</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pRet</name><operator>-&gt;</operator><name>xSetOutputs</name></name><argument_list>(<argument><expr><name>pRet</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5IterClose</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5IndexIter</name><operator>*</operator><operator>)</operator><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pRet</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5IndexCloseReader</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>ppIter</name> <operator>=</operator> <operator>(</operator><name>Fts5IndexIter</name><operator>*</operator><operator>)</operator><name>pRet</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return true if the iterator passed as the only argument is at EOF.
*/</comment>
<comment type="block">/*
** Move to the next matching rowid. 
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IterNext</name><parameter_list>(<parameter><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIndexIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>(</operator><name>Fts5Iter</name><operator>*</operator><operator>)</operator><name>pIndexIter</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5MultiIterNext</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Move to the next matching term/rowid. Used by the fts5vocab module.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IterNextScan</name><parameter_list>(<parameter><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIndexIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>(</operator><name>Fts5Iter</name><operator>*</operator><operator>)</operator><name>pIndexIter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fts5MultiIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5SegIter</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[ <expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>&amp;&amp;</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><name>FTS5_MAIN_PREFIX</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pLeaf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Move to the next matching rowid that occurs at or after iMatch. The
** definition of "at or after" depends on whether this iterator iterates
** in ascending or descending rowid order.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IterNextFrom</name><parameter_list>(<parameter><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIndexIter</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iMatch</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>(</operator><name>Fts5Iter</name><operator>*</operator><operator>)</operator><name>pIndexIter</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5MultiIterNextFrom</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>iMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the current term.
*/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlite3Fts5IterTerm</name><parameter_list>(<parameter><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIndexIter</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>fts5MultiIterTerm</name><argument_list>(<argument><expr><operator>(</operator><name>Fts5Iter</name><operator>*</operator><operator>)</operator><name>pIndexIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>z</name> <operator>||</operator> <name>n</name><operator>&lt;=</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pn</name> <operator>=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>z</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close an iterator opened by an earlier call to sqlite3Fts5IndexQuery().
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5IterClose</name><parameter_list>(<parameter><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIndexIter</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>pIndexIter</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>(</operator><name>Fts5Iter</name><operator>*</operator><operator>)</operator><name>pIndexIter</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIndex</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pIndex</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fts5MultiIterFree</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5IndexCloseReader</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Read and decode the "averages" record from the database. 
**
** Parameter anSize must point to an array of size nCol, where nCol is
** the number of user defined columns in the FTS table.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexGetAverages</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>pnRow</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>anSize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pnRow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>anSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_AVERAGES_ROWID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pData</name><operator>-&gt;</operator><name>nn</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><name>pnRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iCol</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pData</name><operator>-&gt;</operator><name>nn</name></name> <operator>&amp;&amp;</operator> <name>iCol</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>anSize</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Replace the current "averages" record with the contents of the buffer 
** supplied as the second argument.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexSetAverages</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5DataWrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_AVERAGES_ROWID</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Return the total number of blocks this module has read from the %_data
** table since it was created.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexReads</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>nRead</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Set the 32-bit cookie value stored at the start of all structure 
** records to the value passed as the second argument.
**
** Return SQLITE_OK if successful, or an SQLite error code if an error
** occurs.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexSetCookie</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                              <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>    <comment type="block">/* Configuration object */</comment>
  <decl_stmt><decl><type><name>u8</name></type> <name><name>aCookie</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>                       <comment type="block">/* Binary representation of iNew */</comment>
  <decl_stmt><decl><type><name>sqlite3_blob</name> <modifier>*</modifier></type><name>pBlob</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5Put32</name><argument_list>(<argument><expr><name>aCookie</name></expr></argument>, <argument><expr><name>iNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_blob_open</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zDataTbl</name></name></expr></argument>, 
      <argument><expr><literal type="string">"block"</literal></expr></argument>, <argument><expr><name>FTS5_STRUCTURE_ROWID</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlob</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_blob_write</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>, <argument><expr><name>aCookie</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_blob_close</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5IndexLoadConfig</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>pStruct</name> <operator>=</operator> <call><name>fts5StructureRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*************************************************************************
**************************************************************************
** Below this point is the implementation of the integrity-check 
** functionality.
*/</comment>

<comment type="block">/*
** Return a simple checksum value based on the arguments.
*/</comment>
<function><type><name>u64</name></type> <name>sqlite3Fts5IndexEntryCksum</name><parameter_list>(
  <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iPos</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iIdx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pTerm</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nTerm</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>ret</name> <init>= <expr><name>iRowid</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><name>ret</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>iCol</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><name>ret</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>iPos</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iIdx</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><name>ret</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>FTS5_MAIN_PREFIX</name> <operator>+</operator> <name>iIdx</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nTerm</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>+=</operator> <operator>(</operator><name>ret</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name><name>pTerm</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
<comment type="block">/*
** This function is purely an internal test. It does not contribute to 
** FTS functionality, or even the integrity-check, in any way.
**
** Instead, it tests that the same set of pgno/rowid combinations are 
** visited regardless of whether the doclist-index identified by parameters
** iSegid/iLeaf is iterated in forwards or reverse order.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5TestDlidxReverse</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iSegid</name></decl></parameter>,                     <comment type="block">/* Segment id to load from */</comment>
  <parameter><decl><type><name>int</name></type> <name>iLeaf</name></decl></parameter>                       <comment type="block">/* Load doclist-index for this leaf */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pDlidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>cksum1</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>cksum2</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>pDlidx</name><operator>=</operator><call><name>fts5DlidxIterInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iSegid</name></expr></argument>, <argument><expr><name>iLeaf</name></expr></argument>)</argument_list></call></expr>;</init>
      <condition><expr><call><name>fts5DlidxIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>;</condition>
      <incr><expr><call><name>fts5DlidxIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr></incr>
  )</control><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><call><name>fts5DlidxIterRowid</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pgno</name> <init>= <expr><call><name>fts5DlidxIterPgno</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pgno</name><operator>&gt;</operator><name>iLeaf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cksum1</name> <operator>+=</operator> <name>iRowid</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><name>pgno</name><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fts5DlidxIterFree</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDlidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>pDlidx</name><operator>=</operator><call><name>fts5DlidxIterInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iSegid</name></expr></argument>, <argument><expr><name>iLeaf</name></expr></argument>)</argument_list></call></expr>;</init>
      <condition><expr><call><name>fts5DlidxIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>;</condition>
      <incr><expr><call><name>fts5DlidxIterPrev</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr></incr>
  )</control><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><call><name>fts5DlidxIterRowid</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pgno</name> <init>= <expr><call><name>fts5DlidxIterPgno</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>fts5DlidxIterPgno</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call><operator>&gt;</operator><name>iLeaf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cksum2</name> <operator>+=</operator> <name>iRowid</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><name>pgno</name><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fts5DlidxIterFree</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDlidx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>cksum1</name><operator>!=</operator><name>cksum2</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5QueryCksum</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Fts5 index object */</comment>
  <parameter><decl><type><name>int</name></type> <name>iIdx</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>,                  <comment type="block">/* Index key to query for */</comment>
  <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,                          <comment type="block">/* Size of index key in bytes */</comment>
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,                      <comment type="block">/* Flags for Fts5IndexQuery */</comment>
  <parameter><decl><type><name>u64</name> <modifier>*</modifier></type><name>pCksum</name></decl></parameter>                     <comment type="block">/* IN/OUT: Checksum value */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>eDetail</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>cksum</name> <init>= <expr><operator>*</operator><name>pCksum</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3Fts5IndexQuery</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <call><name>ALWAYS</name><argument_list>(<argument><expr><name>pIter</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>rowid</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>cksum</name> <operator>^=</operator> <call><name>sqlite3Fts5IndexEntryCksum</name><argument_list>(<argument><expr><name>rowid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iIdx</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>Fts5PoslistReader</name></type> <name>sReader</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><call><name>sqlite3Fts5PoslistReaderInit</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sReader</name></expr></argument>)</argument_list></call></expr>;</init>
          <condition><expr><name><name>sReader</name><operator>.</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr>;</condition>
          <incr><expr><call><name>sqlite3Fts5PoslistReaderNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sReader</name></expr></argument>)</argument_list></call></expr></incr>
      )</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><call><name>FTS5_POS2COLUMN</name><argument_list>(<argument><expr><name><name>sReader</name><operator>.</operator><name>iPos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><call><name>FTS5_POS2OFFSET</name><argument_list>(<argument><expr><name><name>sReader</name><operator>.</operator><name>iPos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cksum</name> <operator>^=</operator> <call><name>sqlite3Fts5IndexEntryCksum</name><argument_list>(<argument><expr><name>rowid</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>, <argument><expr><name>iIdx</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNext</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3Fts5IterClose</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pCksum</name> <operator>=</operator> <name>cksum</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check if buffer z[], size n bytes, contains as series of valid utf-8
** encoded codepoints. If so, return 0. Otherwise, if the buffer does not
** contain valid utf-8, return non-zero.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5TestUtf8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator><operator>==</operator><literal type="number">0x00</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
    if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator><operator>==</operator><literal type="number">0xC0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&gt;=</operator><name>n</name> <operator>||</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator><operator>!=</operator><literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
    if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator><operator>==</operator><literal type="number">0xE0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>&gt;=</operator><name>n</name> <operator>||</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator><operator>!=</operator><literal type="number">0x80</literal> <operator>||</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator><operator>!=</operator><literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
    if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF8</literal><operator>)</operator><operator>==</operator><literal type="number">0xF0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>+</operator><literal type="number">3</literal><operator>&gt;=</operator><name>n</name> <operator>||</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator><operator>!=</operator><literal type="number">0x80</literal> <operator>||</operator> <operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator><operator>!=</operator><literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>z</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator><operator>!=</operator><literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is also purely an internal test. It does not contribute to 
** FTS functionality, or even the integrity-check, in any way.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5TestTerm</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pPrev</name></decl></parameter>,              <comment type="block">/* Previous term */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,           <comment type="block">/* Possibly new term to test */</comment>
  <parameter><decl><type><name>u64</name></type> <name>expected</name></decl></parameter>,
  <parameter><decl><type><name>u64</name> <modifier>*</modifier></type><name>pCksum</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pPrev</name><operator>-&gt;</operator><name>n</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>pPrev</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else
  if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pPrev</name><operator>-&gt;</operator><name>n</name></name><operator>!=</operator><name>n</name> <operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>pPrev</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u64</name></type> <name>cksum3</name> <init>= <expr><operator>*</operator><name>pCksum</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pPrev</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>  <comment type="block">/* term sans prefix-byte */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name> <init>= <expr><name><name>pPrev</name><operator>-&gt;</operator><name>n</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* Size of zTerm in bytes */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iIdx</name> <init>= <expr><operator>(</operator><name><name>pPrev</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>FTS5_MAIN_PREFIX</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>iIdx</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>FTS5INDEX_QUERY_PREFIX</name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u64</name></type> <name>ck1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u64</name></type> <name>ck2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Check that the results returned for ASC and DESC queries are
    ** the same. If not, call this corruption.  */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5QueryCksum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iIdx</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name>flags</name><operator>|</operator><name>FTS5INDEX_QUERY_DESC</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5QueryCksum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iIdx</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>ck1</name><operator>!=</operator><name>ck2</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* If this is a prefix query, check that the results returned if the
    ** the index is disabled are the same. In both ASC and DESC order. 
    **
    ** This check may only be performed if the hash table is empty. This
    ** is because the hash table only supports a single scan query at
    ** a time, and the multi-iter loop from which this function is called
    ** is already performing such a scan. 
    **
    ** Also only do this if buffer zTerm contains nTerm bytes of valid
    ** utf-8. Otherwise, the last part of the buffer contents might contain
    ** a non-utf-8 sequence that happens to be a prefix of a valid utf-8
    ** character stored in the main fts index, which will cause the
    ** test to fail.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nPendingData</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>fts5TestUtf8</name><argument_list>(<argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>iIdx</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name>flags</name><operator>|</operator><name>FTS5INDEX_QUERY_TEST_NOIDX</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ck2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5QueryCksum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iIdx</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>ck1</name><operator>!=</operator><name>ck2</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>iIdx</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name>flags</name><operator>|</operator><name>FTS5INDEX_QUERY_TEST_NOIDX</name><operator>|</operator><name>FTS5INDEX_QUERY_DESC</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ck2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5QueryCksum</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iIdx</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ck2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>ck1</name><operator>!=</operator><name>ck2</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>cksum3</name> <operator>^=</operator> <name>ck1</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>pPrev</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>cksum3</name><operator>!=</operator><name>expected</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pCksum</name> <operator>=</operator> <name>cksum3</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></function>
 
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>fts5TestDlidxReverse</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>fts5TestTerm</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>v</name></type></parameter>,<parameter><type><name>w</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Check that:
**
**   1) All leaves of pSeg between iFirst and iLast (inclusive) exist and
**      contain zero terms.
**   2) All leaves of pSeg between iNoRowid and iLast (inclusive) exist and
**      contain zero rowids.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IndexIntegrityCheckEmpty</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>,     <comment type="block">/* Segment to check internal consistency */</comment>
  <parameter><decl><type><name>int</name></type> <name>iFirst</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iNoRowid</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iLast</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Now check that the iter.nEmpty leaves following the current leaf
  ** (a) exist and (b) contain no terms. */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><name>iFirst</name></expr>;</init> <condition><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;=</operator><name>iLast</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name> <init>= <expr><call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>pLeaf</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>fts5LeafIsTermless</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>&gt;=</operator><name>iNoRowid</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>!=</operator><call><name>fts5LeafFirstRowidOff</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IntegrityCheckPgidx</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iTermOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf2</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>ii</name> <operator>=</operator> <name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>ii</name><operator>&lt;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIncr</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ii</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>, <argument><expr><name>nIncr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iTermOff</name> <operator>+=</operator> <name>nIncr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name>iTermOff</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;=</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iTermOff</name><operator>==</operator><name>nIncr</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><operator>(</operator><name>iOff</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&gt;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf1</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nKeep</name></decl>, <decl><type ref="prev"/><name>nByte</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nKeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nKeep</name><operator>&gt;</operator><name><name>buf1</name><operator>.</operator><name>n</name></name> <operator>||</operator> <operator>(</operator><name>iOff</name><operator>+</operator><name>nByte</name><operator>)</operator><operator>&gt;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>buf1</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>nKeep</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf1</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fts5BufferCompare</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>res</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf2</name></expr></argument>, <argument><expr><name><name>buf1</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name><name>buf1</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5IndexIntegrityCheckSegment</name><parameter_list>(
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* FTS5 backend object */</comment>
  <parameter><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name></decl></parameter>      <comment type="block">/* Segment to check internal consistency */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iIdxPrevLeaf</name> <init>= <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDlidxPrevLeaf</name> <init>= <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5IndexPrepareStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><call><name>sqlite3_mprintf</name><argument_list>(
      <argument><expr><literal type="string">"SELECT segid, term, (pgno&gt;&gt;1), (pgno&amp;1) FROM %Q.'%q_idx' WHERE segid=%d "</literal>
      <literal type="string">"ORDER BY 1, 2"</literal></expr></argument>,
      <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>
  )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Iterate through the b-tree hierarchy.  */</comment>
  <while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iRow</name></decl>;</decl_stmt>                     <comment type="block">/* Rowid for this leaf */</comment>
    <decl_stmt><decl><type><name>Fts5Data</name> <modifier>*</modifier></type><name>pLeaf</name></decl>;</decl_stmt>              <comment type="block">/* Data for this leaf */</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zIdxTerm</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nIdxTerm</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iIdxLeaf</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bIdxDlidx</name> <init>= <expr><call><name>sqlite3_column_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If the leaf in question has already been trimmed from the segment, 
    ** ignore this b-tree entry. Otherwise, load it into memory. */</comment>
    <if_stmt><if>if<condition>( <expr><name>iIdxLeaf</name><operator>&lt;</operator><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iRow</name> <operator>=</operator> <call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name>iIdxLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pLeaf</name> <operator>=</operator> <call><name>fts5LeafRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pLeaf</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <comment type="block">/* Check that the leaf contains at least one term, and that it is equal
    ** to or larger than the split-key in zIdxTerm.  Also check that if there
    ** is also a rowid pointer within the leaf page header, it points to a
    ** location before the term.  */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pLeaf</name><operator>-&gt;</operator><name>nn</name></name><operator>&lt;=</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>                   <comment type="block">/* Offset of first term on leaf */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>iRowidOff</name></decl>;</decl_stmt>              <comment type="block">/* Offset of first rowid on leaf */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name></decl>;</decl_stmt>                  <comment type="block">/* Size of term on leaf in bytes */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>                    <comment type="block">/* Comparison of term and split-key */</comment>

      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>fts5LeafFirstTermOff</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iRowidOff</name> <operator>=</operator> <call><name>fts5LeafFirstRowidOff</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iRowidOff</name><operator>&gt;=</operator><name>iOff</name> <operator>||</operator> <name>iOff</name><operator>&gt;=</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fts5Memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>zIdxTerm</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>nIdxTerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>res</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>res</name> <operator>=</operator> <name>nTerm</name> <operator>-</operator> <name>nIdxTerm</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>res</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>fts5IntegrityCheckPgidx</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <comment type="block">/* Now check that the iter.nEmpty leaves following the current leaf
    ** (a) exist and (b) contain no terms. */</comment>
    <expr_stmt><expr><call><name>fts5IndexIntegrityCheckEmpty</name><argument_list>(
        <argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>, <argument><expr><name>iIdxPrevLeaf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>iDlidxPrevLeaf</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>iIdxLeaf</name><operator>-</operator><literal type="number">1</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <comment type="block">/* If there is a doclist-index, check that it looks right. */</comment>
    <if_stmt><if>if<condition>( <expr><name>bIdxDlidx</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5DlidxIter</name> <modifier>*</modifier></type><name>pDlidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block">/* For iterating through doclist index */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>iPrevLeaf</name> <init>= <expr><name>iIdxLeaf</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name> <init>= <expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iPg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>i64</name></type> <name>iKey</name></decl>;</decl_stmt>

      <for>for<control>(<init><expr><name>pDlidx</name><operator>=</operator><call><name>fts5DlidxIterInit</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iSegid</name></expr></argument>, <argument><expr><name>iIdxLeaf</name></expr></argument>)</argument_list></call></expr>;</init>
          <condition><expr><call><name>fts5DlidxIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>;</condition>
          <incr><expr><call><name>fts5DlidxIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr></incr>
      )</control><block>{<block_content>

        <comment type="block">/* Check any rowid-less pages that occur before the current leaf. */</comment>
        <for>for<control>(<init><expr><name>iPg</name><operator>=</operator><name>iPrevLeaf</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>iPg</name><operator>&lt;</operator><call><name>fts5DlidxIterPgno</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iPg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><name>iKey</name> <operator>=</operator> <call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name>iSegid</name></expr></argument>, <argument><expr><name>iPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pLeaf</name> <operator>=</operator> <call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>pLeaf</name></expr> )</condition><block>{<block_content>
            <if_stmt><if>if<condition>( <expr><call><name>fts5LeafFirstRowidOff</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>iPrevLeaf</name> <operator>=</operator> <call><name>fts5DlidxIterPgno</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Check that the leaf page indicated by the iterator really does
        ** contain the rowid suggested by the same. */</comment>
        <expr_stmt><expr><name>iKey</name> <operator>=</operator> <call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name>iSegid</name></expr></argument>, <argument><expr><name>iPrevLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pLeaf</name> <operator>=</operator> <call><name>fts5DataRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>pLeaf</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>iRowidOff</name> <init>= <expr><call><name>fts5LeafFirstRowidOff</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>ASSERT_SZLEAF_OK</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>iRowidOff</name><operator>&gt;=</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>szLeaf</name></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
          </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><call><name>fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLeaf</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>iRowidOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if<condition>( <expr><name>iRowid</name><operator>!=</operator><call><name>fts5DlidxIterRowid</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
          </block_content>}</block></else></if_stmt>
          <expr_stmt><expr><call><name>fts5DataRelease</name><argument_list>(<argument><expr><name>pLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><name>iDlidxPrevLeaf</name> <operator>=</operator> <name>iPg</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5DlidxIterFree</name><argument_list>(<argument><expr><name>pDlidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5TestDlidxReverse</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iSegid</name></expr></argument>, <argument><expr><name>iIdxLeaf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iDlidxPrevLeaf</name> <operator>=</operator> <name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name></expr>;</expr_stmt>
      <comment type="block">/* TODO: Check there is no doclist index */</comment>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>iIdxPrevLeaf</name> <operator>=</operator> <name>iIdxLeaf</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Page iter.iLeaf must now be the rightmost leaf-page in the segment */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  if( p-&gt;rc==SQLITE_OK &amp;&amp; iter.iLeaf!=pSeg-&gt;pgnoLast ){
    p-&gt;rc = FTS5_CORRUPT;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/*
** Run internal checks to ensure that the FTS index (a) is internally 
** consistent and (b) contains entries for which the XOR of the checksums
** as calculated by sqlite3Fts5IndexEntryCksum() is cksum.
**
** Return SQLITE_CORRUPT if any of the internal checks fail, or if the
** checksum does not match. Return SQLITE_OK if all checks pass without
** error, or some other SQLite error code if another error (e.g. OOM)
** occurs.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexIntegrityCheck</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>cksum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bUseCksum</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>eDetail</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>cksum2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Checksum based on contents of indexes */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>poslist</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>   <comment type="block">/* Buffer used to hold a poslist */</comment>
  <decl_stmt><decl><type><name>Fts5Iter</name> <modifier>*</modifier></type><name>pIter</name></decl>;</decl_stmt>                <comment type="block">/* Used to iterate through entire index */</comment>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>pStruct</name></decl>;</decl_stmt>         <comment type="block">/* Index structure */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name></decl>, <decl><type ref="prev"/><name>iSeg</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <comment type="block">/* Used by extra internal tests only run if NDEBUG is not defined */</comment>
  <decl_stmt><decl><type><name>u64</name></type> <name>cksum3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                 <comment type="block">/* Checksum based on contents of indexes */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>term</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>      <comment type="block">/* Buffer used to hold most recent term */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>flags</name> <init>= <expr><name>FTS5INDEX_QUERY_NOOUTPUT</name></expr></init></decl>;</decl_stmt>
  
  <comment type="block">/* Load the FTS index structure */</comment>
  <expr_stmt><expr><name>pStruct</name> <operator>=</operator> <call><name>fts5StructureRead</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pStruct</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Check that the internal nodes of each segment match the leaves */</comment>
  <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iLvl</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <for>for<control>(<init><expr><name>iSeg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeg</name><operator>&lt;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name>nSeg</name></expr>;</condition> <incr><expr><name>iSeg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pStruct</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name><operator>.</operator><name><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>fts5IndexIntegrityCheckSegment</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pSeg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <comment type="block">/* The cksum argument passed to this function is a checksum calculated
  ** based on all expected entries in the FTS index (including prefix index
  ** entries). This block checks that a checksum calculated based on the
  ** actual contents of FTS index is identical.
  **
  ** Two versions of the same checksum are calculated. The first (stack
  ** variable cksum2) based on entries extracted from the full-text index
  ** while doing a linear scan of each individual index in turn. 
  **
  ** As each term visited by the linear scans, a separate query for the
  ** same term is performed. cksum3 is calculated based on the entries
  ** extracted by these queries.
  */</comment>
  <for>for<control>(<init><expr><call><name>fts5MultiIterNew</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pStruct</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIter</name></expr></argument>)</argument_list></call></expr>;</init>
      <condition><expr><call><name>fts5MultiIterEof</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>;</condition>
      <incr><expr><call><name>fts5MultiIterNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></incr>
  )</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>                      <comment type="block">/* Size of term in bytes */</comment>
    <decl_stmt><decl><type><name>i64</name></type> <name>iPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Position read from poslist */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Offset within poslist */</comment>
    <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><call><name>fts5MultiIterRowid</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>fts5MultiIterTerm</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* If this is a new term, query for it. Update cksum3 with the results. */</comment>
    <expr_stmt><expr><call><name>fts5TestTerm</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>cksum2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cksum3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>fts5MultiIterIsEmpty</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>cksum2</name> <operator>^=</operator> <call><name>sqlite3Fts5IndexEntryCksum</name><argument_list>(<argument><expr><name>iRowid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name><name>poslist</name><operator>.</operator><name>n</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5SegiterPoslist</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>aFirst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iFirst</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>poslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>poslist</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><literal type="string">"\0\0\0\0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3Fts5PoslistNext64</name><argument_list>(<argument><expr><name><name>poslist</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>poslist</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPos</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><call><name>FTS5_POS2COLUMN</name><argument_list>(<argument><expr><name>iPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iTokOff</name> <init>= <expr><call><name>FTS5_POS2OFFSET</name><argument_list>(<argument><expr><name>iPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cksum2</name> <operator>^=</operator> <call><name>sqlite3Fts5IndexEntryCksum</name><argument_list>(<argument><expr><name>iRowid</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>iTokOff</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fts5TestTerm</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cksum2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cksum3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fts5MultiIterFree</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>bUseCksum</name> <operator>&amp;&amp;</operator> <name>cksum</name><operator>!=</operator><name>cksum2</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>rc</name></name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>pStruct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>poslist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************
**************************************************************************
** Below this point is the implementation of the fts5_decode() scalar
** function only.
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<comment type="block">/*
** Decode a segment-data rowid from the %_data table. This function is
** the opposite of macro FTS5_SEGMENT_ROWID().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DecodeRowid</name><parameter_list>(
  <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>,                     <comment type="block">/* Rowid from %_data table */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piSegid</name></decl></parameter>,                   <comment type="block">/* OUT: Segment id */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbDlidx</name></decl></parameter>,                   <comment type="block">/* OUT: Dlidx flag */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piHeight</name></decl></parameter>,                  <comment type="block">/* OUT: Height */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piPgno</name></decl></parameter>                     <comment type="block">/* OUT: Page number */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>piPgno</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iRowid</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FTS5_DATA_PAGE_B</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>iRowid</name> <operator>&gt;&gt;=</operator> <name>FTS5_DATA_PAGE_B</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>piHeight</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iRowid</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FTS5_DATA_HEIGHT_B</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>iRowid</name> <operator>&gt;&gt;=</operator> <name>FTS5_DATA_HEIGHT_B</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pbDlidx</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iRowid</name> <operator>&amp;</operator> <literal type="number">0x0001</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>iRowid</name> <operator>&gt;&gt;=</operator> <name>FTS5_DATA_DLI_B</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>piSegid</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>iRowid</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>i64</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>FTS5_DATA_ID_B</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DebugRowid</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iKey</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name></decl>, <decl><type ref="prev"/><name>iHeight</name></decl>, <decl><type ref="prev"/><name>iPgno</name></decl>, <decl><type ref="prev"/><name>bDlidx</name></decl>;</decl_stmt>       <comment type="block">/* Rowid compenents */</comment>
  <expr_stmt><expr><call><name>fts5DecodeRowid</name><argument_list>(<argument><expr><name>iKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSegid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bDlidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHeight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>iSegid</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iKey</name><operator>==</operator><name>FTS5_AVERAGES_ROWID</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"{averages} "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"{structure}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if>
  <else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"{%ssegid=%d h=%d pgno=%d}"</literal></expr></argument>,
        <argument><expr><ternary><condition><expr><name>bDlidx</name></expr> ?</condition><then> <expr><literal type="string">"dlidx "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>iSegid</name></expr></argument>, <argument><expr><name>iHeight</name></expr></argument>, <argument><expr><name>iPgno</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DebugStructure</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,                       <comment type="block">/* IN/OUT: error code */</comment>
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>p</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iLvl</name></decl>, <decl><type ref="prev"/><name>iSeg</name></decl>;</decl_stmt>                 <comment type="block">/* Iterate through levels, segments */</comment>

  <for>for<control>(<init><expr><name>iLvl</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iLvl</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nLevel</name></name></expr>;</condition> <incr><expr><name>iLvl</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5StructureLevel</name> <modifier>*</modifier></type><name>pLvl</name> <init>= <expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aLevel</name><index>[<expr><name>iLvl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, 
        <argument><expr><literal type="string">" {lvl=%d nMerge=%d nSeg=%d"</literal></expr></argument>, <argument><expr><name>iLvl</name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nMerge</name></name></expr></argument>, <argument><expr><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iSeg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iSeg</name><operator>&lt;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>nSeg</name></name></expr>;</condition> <incr><expr><name>iSeg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>Fts5StructureSegment</name> <modifier>*</modifier></type><name>pSeg</name> <init>= <expr><operator>&amp;</operator><name><name>pLvl</name><operator>-&gt;</operator><name>aSeg</name><index>[<expr><name>iSeg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">" {id=%d leaves=%d..%d}"</literal></expr></argument>, 
          <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>iSegid</name></name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoFirst</name></name></expr></argument>, <argument><expr><name><name>pSeg</name><operator>-&gt;</operator><name>pgnoLast</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<comment type="block">/*
** This is part of the fts5_decode() debugging aid.
**
** Arguments pBlob/nBlob contain a serialized Fts5Structure object. This
** function appends a human-readable representation of the same object
** to the buffer passed as the second argument. 
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DecodeStructure</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,                       <comment type="block">/* IN/OUT: error code */</comment>
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pBlob</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBlob</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>Fts5Structure</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Decoded structure object */</comment>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StructureDecode</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>, <argument><expr><name>nBlob</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5DebugStructure</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StructureRelease</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<comment type="block">/*
** This is part of the fts5_decode() debugging aid.
**
** Arguments pBlob/nBlob contain an "averages" record. This function 
** appends a human-readable representation of record to the buffer passed 
** as the second argument. 
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DecodeAverages</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,                       <comment type="block">/* IN/OUT: error code */</comment>
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pBlob</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBlob</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSpace</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>nBlob</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u64</name></type> <name>iVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><name>zSpace</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zSpace</name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<comment type="block">/*
** Buffer (a/n) is assumed to contain a list of serialized varints. Read
** each varint and append its string representation to buffer pBuf. Return
** after either the input buffer is exhausted or a 0 value is read.
**
** The return value is the number of bytes read from the input buffer.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DecodePoslist</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>iOff</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<comment type="block">/*
** The start of buffer (a/n) contains the start of a doclist. The doclist
** may or may not finish within the buffer. This function appends a text
** representation of the part of the doclist that is present to buffer
** pBuf. 
**
** The return value is the number of bytes read from the input buffer.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5DecodeDoclist</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iDocid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iDocid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">" id=%lld"</literal></expr></argument>, <argument><expr><name>iDocid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nPos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bDel</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetPoslistSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">" nPos=%d%s"</literal></expr></argument>, <argument><expr><name>nPos</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bDel</name></expr>?</condition><then><expr><literal type="string">"*"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5DecodePoslist</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>iOff</name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iDelta</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>u64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iDocid</name> <operator>+=</operator> <name>iDelta</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">" id=%lld"</literal></expr></argument>, <argument><expr><name>iDocid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>iOff</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<comment type="block">/*
** This function is part of the fts5_decode() debugging function. It is 
** only ever used with detail=none tables.
**
** Buffer (pData/nData) contains a doclist in the format used by detail=none
** tables. This function appends a human-readable version of that list to
** buffer pBuf.
**
** If *pRc is other than SQLITE_OK when this function is called, it is a
** no-op. If an OOM or other error occurs within this function, *pRc is
** set to an SQLite error code before returning. The final state of buffer
** pBuf is undefined in this case.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DecodeRowidList</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,                       <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,               <comment type="block">/* Buffer to append text to */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>      <comment type="block">/* Data to decode list-of-rowids from */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><name>i</name><operator>&lt;</operator><name>nData</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zApp</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u64</name></type> <name>iVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>sqlite3Fts5GetVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iRowid</name> <operator>+=</operator> <name>iVal</name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><name>nData</name> <operator>&amp;&amp;</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0x00</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>i</name><operator>&lt;</operator><name>nData</name> <operator>&amp;&amp;</operator> <name><name>pData</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0x00</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>zApp</name> <operator>=</operator> <literal type="string">"+"</literal></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>zApp</name> <operator>=</operator> <literal type="string">"*"</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><literal type="string">" %lld%s"</literal></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>, <argument><expr><name>zApp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<comment type="block">/*
** The implementation of user-defined scalar function fts5_decode().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5DecodeFunction</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Function call context */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Number of args (always 2) */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Function arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>                     <comment type="block">/* Rowid for record being decoded */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iSegid</name></decl>,<decl><type ref="prev"/><name>iHeight</name></decl>,<decl><type ref="prev"/><name>iPgno</name></decl>,<decl><type ref="prev"/><name>bDlidx</name></decl>;</decl_stmt><comment type="block">/* Rowid components */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aBlob</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>         <comment type="block">/* Record to decode */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>s</name></decl>;</decl_stmt>                   <comment type="block">/* Build up text to return here */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nSpace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eDetailNone</name> <init>= <expr><operator>(</operator><call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nArg</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>iRowid</name> <operator>=</operator> <call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Make a copy of the second argument (a blob) in aBlob[]. The aBlob[]
  ** copy is followed by FTS5_DATA_ZERO_PADDING 0x00 bytes, which prevents
  ** buffer overreads even if the record is corrupt.  */</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aBlob</name> <operator>=</operator> <call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nSpace</name> <operator>=</operator> <name>n</name> <operator>+</operator> <name>FTS5_DATA_ZERO_PADDING</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>nSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>decode_out</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>aBlob</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>fts5DecodeRowid</name><argument_list>(<argument><expr><name>iRowid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSegid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bDlidx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iHeight</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fts5DebugRowid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>bDlidx</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Data</name></type> <name>dlidx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5DlidxLvl</name></type> <name>lvl</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>dlidx</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dlidx</name><operator>.</operator><name>nn</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lvl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5DlidxLvl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lvl</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <operator>&amp;</operator><name>dlidx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lvl</name><operator>.</operator><name>iLeafPgno</name></name> <operator>=</operator> <name>iPgno</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><call><name>fts5DlidxLvlNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lvl</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name><name>lvl</name><operator>.</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><call><name>fts5DlidxLvlNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lvl</name></expr></argument>)</argument_list></call></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, 
          <argument><expr><literal type="string">" %d(%lld)"</literal></expr></argument>, <argument><expr><name><name>lvl</name><operator>.</operator><name>iLeafPgno</name></name></expr></argument>, <argument><expr><name><name>lvl</name><operator>.</operator><name>iRowid</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iSegid</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iRowid</name><operator>==</operator><name>FTS5_AVERAGES_ROWID</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>fts5DecodeAverages</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>fts5DecodeStructure</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>eDetailNone</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>term</name></decl>;</decl_stmt>              <comment type="block">/* Current term read from page */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>szLeaf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iPgidxOff</name> <init>= <expr><name>szLeaf</name> <operator>=</operator> <call><name>fts5GetU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iTermOff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nKeep</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Decode any entries that occur before the first term. */</comment>
    <if_stmt><if>if<condition>( <expr><name>szLeaf</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iPgidxOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iPgidxOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>iTermOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iTermOff</name> <operator>=</operator> <name>szLeaf</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>fts5DecodeRowidList</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iTermOff</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name>iTermOff</name></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>szLeaf</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nAppend</name></decl>;</decl_stmt>

      <comment type="block">/* Read the term data for the next term*/</comment>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nAppend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>term</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>nKeep</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><name>nAppend</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(
          <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">" term=%.*s"</literal></expr></argument>, <argument><expr><name><name>term</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>term</name><operator>.</operator><name>p</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>nAppend</name></expr>;</expr_stmt>

      <comment type="block">/* Figure out where the doclist for this term ends */</comment>
      <if_stmt><if>if<condition>( <expr><name>iPgidxOff</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nIncr</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>iPgidxOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iPgidxOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nIncr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iTermOff</name> <operator>+=</operator> <name>nIncr</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iTermOff</name> <operator>=</operator> <name>szLeaf</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>fts5DecodeRowidList</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>iTermOff</name><operator>-</operator><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name>iTermOff</name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&lt;</operator><name>szLeaf</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nKeep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>term</name></decl>;</decl_stmt>              <comment type="block">/* Current term read from page */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>szLeaf</name></decl>;</decl_stmt>                   <comment type="block">/* Offset of pgidx in a[] */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iPgidxOff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iPgidxPrev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Previous value read from pgidx */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iTermOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iRowidOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nDoclist</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><literal type="string">"corrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>decode_out</name>;</goto>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iRowidOff</name> <operator>=</operator> <call><name>fts5GetU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iPgidxOff</name> <operator>=</operator> <name>szLeaf</name> <operator>=</operator> <call><name>fts5GetU16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iPgidxOff</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iPgidxOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>iTermOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iPgidxOff</name><operator>&gt;</operator><name>n</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
        <goto>goto <name>decode_out</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Decode the position list tail at the start of the page */</comment>
    <if_stmt><if>if<condition>( <expr><name>iRowidOff</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name>iRowidOff</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iTermOff</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name>iTermOff</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name>szLeaf</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;</operator><name>n</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      <goto>goto <name>decode_out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5DecodePoslist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iOff</name><operator>-</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Decode any more doclist data that appears on the page before the
    ** first term. */</comment>
    <expr_stmt><expr><name>nDoclist</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>iTermOff</name></expr> ?</condition><then> <expr><name>iTermOff</name></expr> </then><else>: <expr><name>szLeaf</name></expr></else></ternary><operator>)</operator> <operator>-</operator> <name>iOff</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nDoclist</name><operator>+</operator><name>iOff</name><operator>&gt;</operator><name>n</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      <goto>goto <name>decode_out</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fts5DecodeDoclist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nDoclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr><name>iPgidxOff</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>bFirst</name> <init>= <expr><operator>(</operator><name>iPgidxOff</name><operator>==</operator><name>szLeaf</name><operator>)</operator></expr></init></decl>;</decl_stmt>     <comment type="block">/* True for first term on page */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                            <comment type="block">/* Bytes of data */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>iEnd</name></decl>;</decl_stmt>
      
      <expr_stmt><expr><name>iPgidxOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iPgidxOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iPgidxPrev</name> <operator>+=</operator> <name>nByte</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>=</operator> <name>iPgidxPrev</name></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name>iPgidxOff</name><operator>&lt;</operator><name>n</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iPgidxOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <name>iPgidxPrev</name> <operator>+</operator> <name>nByte</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>iEnd</name> <operator>=</operator> <name>szLeaf</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>iEnd</name><operator>&gt;</operator><name>szLeaf</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><name>bFirst</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>&gt;</operator><name><name>term</name><operator>.</operator><name>n</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>term</name><operator>.</operator><name>n</name></name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>+</operator><name>nByte</name><operator>&gt;</operator><name>n</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>fts5BufferAppendBlob</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>term</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>nByte</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendPrintf</name><argument_list>(
          <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">" term=%.*s"</literal></expr></argument>, <argument><expr><name><name>term</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>term</name><operator>.</operator><name>p</name></name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5DecodeDoclist</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name>iEnd</name><operator>-</operator><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>term</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
 <label><name>decode_out</name>:</label>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef> 
<comment type="block">/*
** The implementation of user-defined scalar function fts5_rowid().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5RowidFunction</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Function call context */</comment>
  <parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>,                       <comment type="block">/* Number of args (always 2) */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Function arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><literal type="string">"should be: fts5_rowid(subject, ....)"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zArg</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"segment"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>segid</name></decl>, <decl><type ref="prev"/><name>pgno</name></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>!=</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, 
            <argument><expr><literal type="string">"should be: fts5_rowid('segment', segid, pgno))"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>segid</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pgno</name> <operator>=</operator> <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iRowid</name> <operator>=</operator> <call><name>FTS5_SEGMENT_ROWID</name><argument_list>(<argument><expr><name>segid</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, 
        <argument><expr><literal type="string">"first arg to fts5_rowid() must be 'segment'"</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>

<comment type="block">/*
** This is called as part of registering the FTS5 module with database
** connection db. It registers several user-defined scalar functions useful
** with FTS5.
**
** If successful, SQLITE_OK is returned. If an error occurs, some other
** SQLite error code is returned instead.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5IndexInit</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_create_function</name><argument_list>(
      <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"fts5_decode"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fts5DecodeFunction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(
        <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"fts5_decode_none"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, 
        <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>db</name></expr></argument>, <argument><expr><name>fts5DecodeFunction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_function</name><argument_list>(
        <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"fts5_rowid"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fts5RowidFunction</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>sqlite3Fts5IndexReset</name><parameter_list>(<parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pStruct</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>iStructVersion</name></name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>fts5IndexDataVersion</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>!=</operator><name><name>p</name><operator>-&gt;</operator><name>iStructVersion</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5StructureInvalidate</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>fts5IndexReturn</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
