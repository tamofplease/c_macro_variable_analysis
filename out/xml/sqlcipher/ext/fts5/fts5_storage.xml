<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/fts5/fts5_storage.c"><comment type="block">/*
** 2014 May 31
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
*/</comment>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>

<struct>struct <name>Fts5Storage</name> <block>{
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bTotalsValid</name></decl>;</decl_stmt>               <comment type="block">/* True if nTotalRow/aTotalSize[] are valid */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>nTotalRow</name></decl>;</decl_stmt>                  <comment type="block">/* Total number of rows in FTS table */</comment>
  <decl_stmt><decl><type><name>i64</name> <modifier>*</modifier></type><name>aTotalSize</name></decl>;</decl_stmt>                <comment type="block">/* Total sizes of each column */</comment> 
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name><name>aStmt</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FTS5_STMT_SCAN_ASC</name><operator>!=</operator><literal type="number">0</literal></expr></cpp:if> 
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"FTS5_STMT_SCAN_ASC mismatch"</cpp:literal></cpp:error> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FTS5_STMT_SCAN_DESC</name><operator>!=</operator><literal type="number">1</literal></expr></cpp:if> 
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"FTS5_STMT_SCAN_DESC mismatch"</cpp:literal></cpp:error> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FTS5_STMT_LOOKUP</name><operator>!=</operator><literal type="number">2</literal></expr></cpp:if>
<cpp:error># <cpp:directive>error</cpp:directive> <cpp:literal>"FTS5_STMT_LOOKUP mismatch"</cpp:literal></cpp:error> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_STMT_INSERT_CONTENT</name></cpp:macro>  <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_STMT_REPLACE_CONTENT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_STMT_DELETE_CONTENT</name></cpp:macro>  <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_STMT_REPLACE_DOCSIZE</name></cpp:macro>  <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_STMT_DELETE_DOCSIZE</name></cpp:macro>  <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_STMT_LOOKUP_DOCSIZE</name></cpp:macro>  <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_STMT_REPLACE_CONFIG</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_STMT_SCAN</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<comment type="block">/*
** Prepare the two insert statements - Fts5Storage.pInsertContent and
** Fts5Storage.pInsertDocsize - if they have not already been prepared.
** Return SQLITE_OK if successful, or an SQLite error code if an error
** occurs.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageGetStmt</name><parameter_list>(
  <parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                 <comment type="block">/* Storage handle */</comment>
  <parameter><decl><type><name>int</name></type> <name>eStmt</name></decl></parameter>,                      <comment type="block">/* FTS5_STMT_XXX constant */</comment>
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStmt</name></decl></parameter>,          <comment type="block">/* OUT: Prepared statement handle */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>                 <comment type="block">/* OUT: Error message (if any) */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If there is no %_docsize table, there should be no requests for 
  ** statements to operate on it.  */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name> <operator>||</operator> <operator>(</operator>
        <name>eStmt</name><operator>!=</operator><name>FTS5_STMT_REPLACE_DOCSIZE</name> 
     <operator>&amp;&amp;</operator> <name>eStmt</name><operator>!=</operator><name>FTS5_STMT_DELETE_DOCSIZE</name> 
     <operator>&amp;&amp;</operator> <name>eStmt</name><operator>!=</operator><name>FTS5_STMT_LOOKUP_DOCSIZE</name> 
  <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eStmt</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eStmt</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aStmt</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azStmt</name><index>[]</index></name> <init>= <expr><block>{
      <expr><literal type="string">"SELECT %s FROM %s T WHERE T.%Q &gt;= ? AND T.%Q &lt;= ? ORDER BY T.%Q ASC"</literal></expr>,
      <expr><literal type="string">"SELECT %s FROM %s T WHERE T.%Q &lt;= ? AND T.%Q &gt;= ? ORDER BY T.%Q DESC"</literal></expr>,
      <expr><literal type="string">"SELECT %s FROM %s T WHERE T.%Q=?"</literal></expr>,               <comment type="block">/* LOOKUP  */</comment>

      <expr><literal type="string">"INSERT INTO %Q.'%q_content' VALUES(%s)"</literal></expr>,         <comment type="block">/* INSERT_CONTENT  */</comment>
      <expr><literal type="string">"REPLACE INTO %Q.'%q_content' VALUES(%s)"</literal></expr>,        <comment type="block">/* REPLACE_CONTENT */</comment>
      <expr><literal type="string">"DELETE FROM %Q.'%q_content' WHERE id=?"</literal></expr>,         <comment type="block">/* DELETE_CONTENT  */</comment>
      <expr><literal type="string">"REPLACE INTO %Q.'%q_docsize' VALUES(?,?)"</literal></expr>,       <comment type="block">/* REPLACE_DOCSIZE  */</comment>
      <expr><literal type="string">"DELETE FROM %Q.'%q_docsize' WHERE id=?"</literal></expr>,         <comment type="block">/* DELETE_DOCSIZE  */</comment>

      <expr><literal type="string">"SELECT sz FROM %Q.'%q_docsize' WHERE id=?"</literal></expr>,      <comment type="block">/* LOOKUP_DOCSIZE  */</comment>

      <expr><literal type="string">"REPLACE INTO %Q.'%q_config' VALUES(?,?)"</literal></expr>,        <comment type="block">/* REPLACE_CONFIG */</comment>
      <expr><literal type="string">"SELECT %s FROM %s AS T"</literal></expr>,                         <comment type="block">/* SCAN */</comment>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pC</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <switch>switch<condition>( <expr><name>eStmt</name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>FTS5_STMT_SCAN</name></expr>:</case>
        <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>azStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name></expr></argument>, 
            <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContentExprlist</name></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContent</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>FTS5_STMT_SCAN_ASC</name></expr>:</case>
      <case>case <expr><name>FTS5_STMT_SCAN_DESC</name></expr>:</case>
        <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>azStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContentExprlist</name></name></expr></argument>, 
            <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContent</name></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContentRowid</name></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContentRowid</name></name></expr></argument>,
            <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContentRowid</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>FTS5_STMT_LOOKUP</name></expr>:</case>
        <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>azStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name></expr></argument>, 
            <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContentExprlist</name></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContent</name></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zContentRowid</name></name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>FTS5_STMT_INSERT_CONTENT</name></expr>:</case> 
      <case>case <expr><name>FTS5_STMT_REPLACE_CONTENT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><name><name>pC</name><operator>-&gt;</operator><name>nCol</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zBind</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>zBind</name> <operator>=</operator> <call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>nCol</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>zBind</name></expr> )</condition><block>{<block_content>
          <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><name><name>zBind</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>zBind</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><name><name>zBind</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>azStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zBind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zBind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>

      <default>default:</default>
        <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>azStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pC</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name>SQLITE_PREPARE_PERSISTENT</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>eStmt</name><operator>&gt;</operator><name>FTS5_STMT_LOOKUP</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>f</name> <operator>|=</operator> <name>SQLITE_PREPARE_NO_VTAB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>bLock</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v3</name><argument_list>(<argument><expr><name><name>pC</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>bLock</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>pzErrMsg</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pzErrMsg</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>pC</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppStmt</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><operator>*</operator><name>ppStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5ExecPrintf</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFormat</name></decl></parameter>,
  <parameter><decl><type><modifier>...</modifier></type></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>                     <comment type="block">/* ... printf arguments */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_vmprintf</name><argument_list>(<argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Drop all shadow tables. Return SQLITE_OK if successful or an SQLite error
** code otherwise.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5DropAll</name><parameter_list>(<parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fts5ExecPrintf</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
      <argument><expr><literal type="string">"DROP TABLE IF EXISTS %Q.'%q_data';"</literal>
      <literal type="string">"DROP TABLE IF EXISTS %Q.'%q_idx';"</literal>
      <literal type="string">"DROP TABLE IF EXISTS %Q.'%q_config';"</literal></expr></argument>,
      <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,
      <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,
      <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExecPrintf</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
        <argument><expr><literal type="string">"DROP TABLE IF EXISTS %Q.'%q_docsize';"</literal></expr></argument>,
        <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NORMAL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExecPrintf</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
        <argument><expr><literal type="string">"DROP TABLE IF EXISTS %Q.'%q_content';"</literal></expr></argument>,
        <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5StorageRenameOne</name><parameter_list>(
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>,            <comment type="block">/* Current FTS5 configuration */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>,                       <comment type="block">/* IN/OUT: Error code */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTail</name></decl></parameter>,              <comment type="block">/* Tail of table name e.g. "data", "config" */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>               <comment type="block">/* New name of FTS5 table */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <call><name>fts5ExecPrintf</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, 
        <argument><expr><literal type="string">"ALTER TABLE %Q.'%q_%s' RENAME TO '%q_%s';"</literal></expr></argument>,
        <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zTail</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zTail</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5StorageRename</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>pStorage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>pStorage</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3Fts5StorageSync</name><argument_list>(<argument><expr><name>pStorage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>fts5StorageRenameOne</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StorageRenameOne</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="string">"idx"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fts5StorageRenameOne</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5StorageRenameOne</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="string">"docsize"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NORMAL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fts5StorageRenameOne</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Create the shadow table named zPost, with definition zDefn. Return
** SQLITE_OK if successful, or an SQLite error code otherwise.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5CreateTable</name><parameter_list>(
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>,            <comment type="block">/* FTS5 configuration */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPost</name></decl></parameter>,              <comment type="block">/* Shadow table to create (e.g. "content") */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDefn</name></decl></parameter>,              <comment type="block">/* Columns etc. for shadow table */</comment>
  <parameter><decl><type><name>int</name></type> <name>bWithout</name></decl></parameter>,                   <comment type="block">/* True for without rowid */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* OUT: Error message */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExecPrintf</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zErr</name></expr></argument>, <argument><expr><literal type="string">"CREATE TABLE %Q.'%q_%q'(%s)%s"</literal></expr></argument>,
      <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zPost</name></expr></argument>, <argument><expr><name>zDefn</name></expr></argument>, 
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_FTS5_NO_WITHOUT_ROWID</name></cpp:ifndef>
      <argument><expr><ternary><condition><expr><name>bWithout</name></expr>?</condition><then><expr><literal type="string">" WITHOUT ROWID"</literal></expr></then><else>:
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zErr</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
        <argument><expr><literal type="string">"fts5: error creating shadow table %q_%s: %s"</literal></expr></argument>, 
        <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zPost</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Open a new Fts5Index handle. If the bCreate argument is true, create
** and initialize the underlying tables 
**
** If successful, set *pp to point to the new object and return SQLITE_OK.
** Otherwise, set *pp to NULL and return an SQLite error code.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageOpen</name><parameter_list>(
  <parameter><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIndex</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bCreate</name></decl></parameter>, 
  <parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* OUT: Error message */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>                 <comment type="block">/* New object */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl>;</decl_stmt>            <comment type="block">/* Bytes of space to allocate */</comment>

  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Storage</name></expr></argument>)</argument_list></sizeof>               <comment type="block">/* Fts5Storage object */</comment>
        <operator>+</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>      <comment type="block">/* Fts5Storage.aTotalSize[] */</comment>
  <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name> <operator>=</operator> <operator>(</operator><name>Fts5Storage</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name></name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name> <operator>=</operator> <name>pConfig</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name> <operator>=</operator> <name>pIndex</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>bCreate</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NORMAL</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nDefn</name> <init>= <expr><literal type="number">32</literal> <operator>+</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name><operator>*</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDefn</name> <init>= <expr><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>+</operator> <operator>(</operator><name>sqlite3_int64</name><operator>)</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zDefn</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nDefn</name></expr></argument>, <argument><expr><name>zDefn</name></expr></argument>, <argument><expr><literal type="string">"id INTEGER PRIMARY KEY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iOff</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zDefn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>nDefn</name><operator>-</operator><name>iOff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>zDefn</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">", c%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zDefn</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5CreateTable</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><name>zDefn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zDefn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5CreateTable</name><argument_list>(
          <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><literal type="string">"docsize"</literal></expr></argument>, <argument><expr><literal type="string">"id INTEGER PRIMARY KEY, sz BLOB"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5CreateTable</name><argument_list>(
          <argument><expr><name>pConfig</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><literal type="string">"k PRIMARY KEY, v"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageConfigValue</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FTS5_CURRENT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5StorageClose</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Close a handle opened by an earlier call to sqlite3Fts5StorageOpen().
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageClose</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* Finalize all SQL statements */</comment>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aStmt</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><name><name>struct</name> <name>Fts5InsertCtx</name></name></type> <name>Fts5InsertCtx</name>;</typedef>
<struct>struct <name>Fts5InsertCtx</name> <block>{
  <decl_stmt><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>pStorage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>szCol</name></decl>;</decl_stmt>                      <comment type="block">/* Size of column value in tokens */</comment>
}</block>;</struct>

<comment type="block">/*
** Tokenization callback used when inserting tokens into the FTS index.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageInsertCallback</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>,                 <comment type="block">/* Pointer to Fts5InsertCtx object */</comment>
  <parameter><decl><type><name>int</name></type> <name>tflags</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>,             <comment type="block">/* Buffer containing token */</comment>
  <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>,                     <comment type="block">/* Size of token in bytes */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused1</name></decl></parameter>,                   <comment type="block">/* Start offset of token */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused2</name></decl></parameter>                    <comment type="block">/* End offset of token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5InsertCtx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>(</operator><name>Fts5InsertCtx</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIdx</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pStorage</name><operator>-&gt;</operator><name>pIndex</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>iUnused1</name></expr></argument>, <argument><expr><name>iUnused2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nToken</name><operator>&gt;</operator><name>FTS5_MAX_TOKEN_SIZE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nToken</name> <operator>=</operator> <name>FTS5_MAX_TOKEN_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>tflags</name> <operator>&amp;</operator> <name>FTS5_TOKEN_COLOCATED</name><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>szCol</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>szCol</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>sqlite3Fts5IndexWrite</name><argument_list>(<argument><expr><name>pIdx</name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>iCol</name></name></expr></argument>, <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>szCol</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** If a row with rowid iDel is present in the %_content table, add the
** delete-markers to the FTS index necessary to delete it. Do not actually
** remove the %_content row at this time though.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageDeleteFromIndex</name><parameter_list>(
  <parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>i64</name></type> <name>iDel</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pSeek</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* SELECT to read row iDel from %_data */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc2</name></decl>;</decl_stmt>                        <comment type="block">/* sqlite3_reset() return code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5InsertCtx</name></type> <name>ctx</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>apVal</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_LOOKUP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSeek</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pSeek</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pSeek</name></expr></argument>)</argument_list></call><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <return>return <expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pSeek</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pStorage</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexBeginWrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>iCol</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>iCol</name><operator>&lt;=</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>abUnindexed</name><index>[<expr><name>iCol</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zText</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nText</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pSeek</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>apVal</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pSeek</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <name>apVal</name><operator>!=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>pSeek</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zText</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pSeek</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nText</name> <operator>=</operator> <call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pSeek</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><if type="elseif">else if<condition>( <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>apVal</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>zText</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><name>iCol</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nText</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><name>iCol</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>szCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5Tokenize</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, <argument><expr><name>FTS5_TOKENIZE_DOCUMENT</name></expr></argument>, 
          <argument><expr><name>zText</name></expr></argument>, <argument><expr><name>nText</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>fts5StorageInsertCallback</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name><index>[<expr><name>iCol</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><name>i64</name><operator>)</operator><name><name>ctx</name><operator>.</operator><name>szCol</name></name></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name><index>[<expr><name>iCol</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name><operator>&lt;</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pSeek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Insert a record into the %_docsize table. Specifically, do:
**
**   INSERT OR REPLACE INTO %_docsize(id, sz) VALUES(iRowid, pBuf);
**
** If there is no %_docsize table (as happens if the columnsize=0 option
** is specified when the FTS5 table is created), this function is a no-op.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageInsertDocsize</name><parameter_list>(
  <parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                 <comment type="block">/* Storage module to write to */</comment>
  <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>,                     <comment type="block">/* id value */</comment>
  <parameter><decl><type><name>Fts5Buffer</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>                <comment type="block">/* sz value */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pReplace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_REPLACE_DOCSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>n</name></name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Load the contents of the "averages" record from disk into the 
** p-&gt;nTotalRow and p-&gt;aTotalSize[] variables. If successful, and if
** argument bCache is true, set the p-&gt;bTotalsValid flag to indicate
** that the contents of aTotalSize[] and nTotalRow are valid until
** further notice.
**
** Return SQLITE_OK if successful, or an SQLite error code if an error
** occurs.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageLoadTotals</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bCache</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bTotalsValid</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexGetAverages</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bTotalsValid</name></name> <operator>=</operator> <name>bCache</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Store the current contents of the p-&gt;nTotalRow and p-&gt;aTotalSize[] 
** variables in the "averages" record on disk.
**
** Return SQLITE_OK if successful, or an SQLite error code if an error
** occurs.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageSaveTotals</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexSetAverages</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Remove a row from the FTS table.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageDelete</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iDel</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pDel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>!=</operator><name>FTS5_CONTENT_NORMAL</name> <operator>||</operator> <name>apVal</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageLoadTotals</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Delete the index records */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageDeleteFromIndex</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iDel</name></expr></argument>, <argument><expr><name>apVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Delete the %_docsize record */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_DELETE_DOCSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pDel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Delete the %_content record */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NORMAL</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_DELETE_CONTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pDel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Delete all entries in the FTS5 index.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageDeleteAll</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bTotalsValid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* Delete the contents of the %_data and %_docsize tables. */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExecPrintf</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
      <argument><expr><literal type="string">"DELETE FROM %Q.'%q_data';"</literal> 
      <literal type="string">"DELETE FROM %Q.'%q_idx';"</literal></expr></argument>,
      <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>,
      <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5ExecPrintf</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
        <argument><expr><literal type="string">"DELETE FROM %Q.'%q_docsize';"</literal></expr></argument>,
        <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Reinitialize the %_data table. This call creates the initial structure
  ** and averages records.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexReinit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageConfigValue</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FTS5_CURRENT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5StorageRebuild</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pScan</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5InsertCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>rc2</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5InsertCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pStorage</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDeleteAll</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageLoadTotals</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_SCAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pScan</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name> <init>= <expr><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sqlite3Fts5BufferZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexBeginWrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>szCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>abUnindexed</name><index>[<expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zText</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nText</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5Tokenize</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, 
            <argument><expr><name>FTS5_TOKENIZE_DOCUMENT</name></expr></argument>,
            <argument><expr><name>zText</name></expr></argument>, <argument><expr><name>nText</name></expr></argument>,
            <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>,
            <argument><expr><name>fts5StorageInsertCallback</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>szCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name><index>[<expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>i64</name><operator>)</operator><name><name>ctx</name><operator>.</operator><name>szCol</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageInsertDocsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Write the averages record */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageSaveTotals</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5StorageOptimize</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3Fts5IndexOptimize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5StorageMerge</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nMerge</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3Fts5IndexMerge</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>nMerge</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5StorageReset</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>sqlite3Fts5IndexReset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Allocate a new rowid. This is used for "external content" tables when
** a NULL value is inserted into the rowid column. The new rowid is allocated
** by inserting a dummy row into the %_docsize table. The dummy will be
** overwritten later.
**
** If the %_docsize table does not exist, SQLITE_MISMATCH is returned. In
** this case the user is required to provide a rowid explicitly.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageNewRowid</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>piRowid</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_MISMATCH</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pReplace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_REPLACE_DOCSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>piRowid</name> <operator>=</operator> <call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Insert a new row into the FTS content table.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageContentInsert</name><parameter_list>(
  <parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>, 
  <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>piRowid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Insert the new row into the %_content table. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>!=</operator><name>FTS5_CONTENT_NORMAL</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_INTEGER</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>piRowid</name> <operator>=</operator> <call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageNewRowid</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>piRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pInsert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* Statement to write %_content table */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>                        <comment type="block">/* Counter variable */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_INSERT_CONTENT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pInsert</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;=</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pInsert</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>apVal</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pInsert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>piRowid</name> <operator>=</operator> <call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Insert new entries into the FTS index and %_docsize table.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageIndexInsert</name><parameter_list>(
  <parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>, 
  <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>Fts5InsertCtx</name></type> <name>ctx</name></decl>;</decl_stmt>              <comment type="block">/* Tokenization callback context object */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>buf</name></decl>;</decl_stmt>                 <comment type="block">/* Buffer used to build up %_docsize blob */</comment>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5Buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pStorage</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageLoadTotals</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexBeginWrite</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for<control>(<init><expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>szCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>abUnindexed</name><index>[<expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zText</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nText</name> <init>= <expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5Tokenize</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, 
          <argument><expr><name>FTS5_TOKENIZE_DOCUMENT</name></expr></argument>,
          <argument><expr><name>zText</name></expr></argument>, <argument><expr><name>nText</name></expr></argument>,
          <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>,
          <argument><expr><name>fts5StorageInsertCallback</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3Fts5BufferAppendVarint</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>szCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name><index>[<expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>i64</name><operator>)</operator><name><name>ctx</name><operator>.</operator><name>szCol</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name><operator>++</operator></expr>;</expr_stmt>

  <comment type="block">/* Write the %_docsize record */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageInsertDocsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>p</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageCount</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSuffix</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>pnRow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"SELECT count(*) FROM %Q.'%q_%s'"</literal></expr></argument>, 
      <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zSuffix</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pCnt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pnRow</name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pCnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Context object used by sqlite3Fts5StorageIntegrity().
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Fts5IntegrityCtx</name></name></type> <name>Fts5IntegrityCtx</name>;</typedef>
<struct>struct <name>Fts5IntegrityCtx</name> <block>{
  <decl_stmt><decl><type><name>i64</name></type> <name>iRowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>szCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>cksum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Termset</name> <modifier>*</modifier></type><name>pTermset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name></decl>;</decl_stmt>
}</block>;</struct>


<comment type="block">/*
** Tokenization callback used by integrity check.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageIntegrityCallback</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pContext</name></decl></parameter>,                 <comment type="block">/* Pointer to Fts5IntegrityCtx object */</comment>
  <parameter><decl><type><name>int</name></type> <name>tflags</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pToken</name></decl></parameter>,             <comment type="block">/* Buffer containing token */</comment>
  <parameter><decl><type><name>int</name></type> <name>nToken</name></decl></parameter>,                     <comment type="block">/* Size of token in bytes */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused1</name></decl></parameter>,                   <comment type="block">/* Start offset of token */</comment>
  <parameter><decl><type><name>int</name></type> <name>iUnused2</name></decl></parameter>                    <comment type="block">/* End offset of token */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5IntegrityCtx</name> <modifier>*</modifier></type><name>pCtx</name> <init>= <expr><operator>(</operator><name>Fts5IntegrityCtx</name><operator>*</operator><operator>)</operator><name>pContext</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Termset</name> <modifier>*</modifier></type><name>pTermset</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pTermset</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bPresent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iPos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>iUnused1</name></expr></argument>, <argument><expr><name>iUnused2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nToken</name><operator>&gt;</operator><name>FTS5_MAX_TOKEN_SIZE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>nToken</name> <operator>=</operator> <name>FTS5_MAX_TOKEN_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>tflags</name> <operator>&amp;</operator> <name>FTS5_TOKEN_COLOCATED</name><operator>)</operator><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>szCol</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>szCol</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <switch>switch<condition>( <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr> )</condition><block>{<block_content>
    <case>case <expr><name>FTS5_DETAIL_FULL</name></expr>:</case>
      <expr_stmt><expr><name>iPos</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>szCol</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>iCol</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>iCol</name></name></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>FTS5_DETAIL_COLUMNS</name></expr>:</case>
      <expr_stmt><expr><name>iPos</name> <operator>=</operator> <name><name>pCtx</name><operator>-&gt;</operator><name>iCol</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>iCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>iPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>iCol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5TermsetAdd</name><argument_list>(<argument><expr><name>pTermset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>bPresent</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>cksum</name></name> <operator>^=</operator> <call><name>sqlite3Fts5IndexEntryCksum</name><argument_list>(
        <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>iPos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><name><name>pCtx</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nPrefix</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nChar</name> <init>= <expr><name><name>pCtx</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>aPrefix</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><call><name>sqlite3Fts5IndexCharlenToBytelen</name><argument_list>(<argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nToken</name></expr></argument>, <argument><expr><name>nChar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nByte</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5TermsetAdd</name><argument_list>(<argument><expr><name>pTermset</name></expr></argument>, <argument><expr><name>ii</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bPresent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>bPresent</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>cksum</name></name> <operator>^=</operator> <call><name>sqlite3Fts5IndexEntryCksum</name><argument_list>(
            <argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>iPos</name></expr></argument>, <argument><expr><name>ii</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>pToken</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Check that the contents of the FTS index match that of the %_content
** table. Return SQLITE_OK if they do, or SQLITE_CORRUPT if not. Return
** some other SQLite error code if an error occurs while attempting to
** determine this.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageIntegrity</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5Config</name> <modifier>*</modifier></type><name>pConfig</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>aColSize</name></decl>;</decl_stmt>                  <comment type="block">/* Array of size pConfig-&gt;nCol */</comment>
  <decl_stmt><decl><type><name>i64</name> <modifier>*</modifier></type><name>aTotalSize</name></decl>;</decl_stmt>                <comment type="block">/* Array of size pConfig-&gt;nCol */</comment>
  <decl_stmt><decl><type><name>Fts5IntegrityCtx</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pScan</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bUseCksum</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts5IntegrityCtx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pConfig</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pConfig</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>aTotalSize</name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name><operator>*</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>aTotalSize</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>aColSize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>aTotalSize</name><index>[<expr><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aTotalSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>bUseCksum</name> <operator>=</operator> <operator>(</operator><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NORMAL</name>
           <operator>||</operator> <operator>(</operator><name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_EXTERNAL</name> <operator>&amp;&amp;</operator> <name>iArg</name><operator>)</operator>
  <operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>bUseCksum</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* Generate the expected index checksum based on the contents of the
    ** %_content table. This block stores the checksum in ctx.cksum. */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_SCAN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pScan</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc2</name></decl>;</decl_stmt>
      <while>while<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>iRowid</name></name> <operator>=</operator> <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>szCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StorageDocsize</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>iRowid</name></name></expr></argument>, <argument><expr><name>aColSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5TermsetNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>pTermset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>abUnindexed</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
          <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>iCol</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>szCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_COLUMNS</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5TermsetNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>.</operator><name>pTermset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zText</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nText</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5Tokenize</name><argument_list>(<argument><expr><name>pConfig</name></expr></argument>, 
                <argument><expr><name>FTS5_TOKENIZE_DOCUMENT</name></expr></argument>,
                <argument><expr><name>zText</name></expr></argument>, <argument><expr><name>nText</name></expr></argument>,
                <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ctx</name></expr></argument>,
                <argument><expr><name>fts5StorageIntegrityCallback</name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>.</operator><name>szCol</name></name><operator>!=</operator><name><name>aColSize</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><name><name>aTotalSize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>ctx</name><operator>.</operator><name>szCol</name></name></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>==</operator><name>FTS5_DETAIL_COLUMNS</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>sqlite3Fts5TermsetFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>pTermset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pTermset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>sqlite3Fts5TermsetFree</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>pTermset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>pTermset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></while>
      <expr_stmt><expr><name>rc2</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pScan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>rc2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Test that the "totals" (sometimes called "averages") record looks Ok */</comment>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageLoadTotals</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>aTotalSize</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Check that the %_docsize and %_content tables contain the expected
    ** number of rows.  */</comment>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>eContent</name></name><operator>==</operator><name>FTS5_CONTENT_NORMAL</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>nRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>nRow</name><operator>!=</operator><name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>i64</name></type> <name>nRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageCount</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"docsize"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>nRow</name><operator>!=</operator><name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Pass the expected checksum down to the FTS index module. It will
  ** verify, amongst other things, that it matches the checksum generated by
  ** inspecting the index itself.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexIntegrityCheck</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>cksum</name></name></expr></argument>, <argument><expr><name>bUseCksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>aTotalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Obtain an SQLite statement handle that may be used to read data from the
** %_content table.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageStmt</name><parameter_list>(
  <parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>eStmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErrMsg</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eStmt</name><operator>==</operator><name>FTS5_STMT_SCAN_ASC</name> 
       <operator>||</operator> <name>eStmt</name><operator>==</operator><name>FTS5_STMT_SCAN_DESC</name>
       <operator>||</operator> <name>eStmt</name><operator>==</operator><name>FTS5_STMT_LOOKUP</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>eStmt</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name><operator>==</operator><operator>*</operator><name>pp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Release an SQLite statement handle obtained via an earlier call to
** sqlite3Fts5StorageStmt(). The eStmt parameter passed to this function
** must match that passed to the sqlite3Fts5StorageStmt() call.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Fts5StorageStmtRelease</name><parameter_list>(
  <parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>eStmt</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eStmt</name><operator>==</operator><name>FTS5_STMT_SCAN_ASC</name>
       <operator>||</operator> <name>eStmt</name><operator>==</operator><name>FTS5_STMT_SCAN_DESC</name>
       <operator>||</operator> <name>eStmt</name><operator>==</operator><name>FTS5_STMT_LOOKUP</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>eStmt</name></expr>]</index></name> <operator>=</operator> <name>pStmt</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5StorageDecodeSizeArray</name><parameter_list>(
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>aCol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nCol</name></decl></parameter>,            <comment type="block">/* Array to populate */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aBlob</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBlob</name></decl></parameter>      <comment type="block">/* Record to read varints from */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>iOff</name><operator>&gt;=</operator><name>nBlob</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <call><name>fts5GetVarint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBlob</name><index>[<expr><name>iOff</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>aCol</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><operator>(</operator><name>iOff</name><operator>!=</operator><name>nBlob</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Argument aCol points to an array of integers containing one entry for
** each table column. This function reads the %_docsize record for the
** specified rowid and populates aCol[] with the results.
**
** An SQLite error code is returned if an error occurs, or SQLITE_OK
** otherwise.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageDocsize</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name></type> <name>iRowid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>aCol</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr></init></decl>;</decl_stmt>    <comment type="block">/* Number of user columns in table */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pLookup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>      <comment type="block">/* Statement to query %_docsize */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Return Code */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>bColumnsize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_LOOKUP_DOCSIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pLookup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pLookup</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bCorrupt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pLookup</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>SQLITE_ROW</name><operator>==</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pLookup</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>aBlob</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pLookup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nBlob</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pLookup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>fts5StorageDecodeSizeArray</name><argument_list>(<argument><expr><name>aCol</name></expr></argument>, <argument><expr><name>nCol</name></expr></argument>, <argument><expr><name>aBlob</name></expr></argument>, <argument><expr><name>nBlob</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>bCorrupt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pLookup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bCorrupt</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5StorageSize</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>pnToken</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fts5StorageLoadTotals</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pnToken</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pnToken</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iCol</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pnToken</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aTotalSize</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_RANGE</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5StorageRowCount</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>i64</name> <modifier>*</modifier></type><name>pnRow</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fts5StorageLoadTotals</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* nTotalRow being zero does not necessarily indicate a corrupt 
    ** database - it might be that the FTS5 table really does contain zero
    ** rows. However this function is only called from the xRowCount() API,
    ** and there is no way for that API to be invoked if the table contains
    ** no rows. Hence the FTS5_CORRUPT return.  */</comment>
    <expr_stmt><expr><operator>*</operator><name>pnRow</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nTotalRow</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Flush any data currently held in-memory to disk.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts5StorageSync</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iLastRowid</name> <init>= <expr><call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bTotalsValid</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5StorageSaveTotals</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bTotalsValid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexSync</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_set_last_insert_rowid</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>iLastRowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5StorageRollback</name><parameter_list>(<parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bTotalsValid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3Fts5IndexRollback</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5StorageConfigValue</name><parameter_list>(
  <parameter><decl><type><name>Fts5Storage</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iVal</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pReplace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>fts5StorageGetStmt</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>FTS5_STMT_REPLACE_CONFIG</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pVal</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_value</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pReplace</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>pVal</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iNew</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>iCookie</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexSetCookie</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name>iNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>iCookie</name></name> <operator>=</operator> <name>iNew</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
