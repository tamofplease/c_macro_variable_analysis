<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/fts5/fts5_test_mi.c"><comment type="block">/*
** 2015 Aug 04
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains test code only, it is not included in release 
** versions of FTS5. It contains the implementation of an FTS5 auxiliary
** function very similar to the FTS4 function matchinfo():
**
**     https://www.sqlite.org/fts3.html#matchinfo
**
** Known differences are that:
**
**  1) this function uses the FTS5 definition of "matchable phrase", which
**     excludes any phrases that are part of an expression sub-tree that
**     does not match the current row. This comes up for MATCH queries 
**     such as:
**
**         "a OR (b AND c)"
**
**     In FTS4, if a single row contains instances of tokens "a" and "c", 
**     but not "b", all instances of "c" are considered matches. In FTS5,
**     they are not (as the "b AND c" sub-tree does not match the current
**     row.
**
**  2) For the values returned by 'x' that apply to all rows of the table, 
**     NEAR constraints are not considered. But for the number of hits in
**     the current row, they are.
**     
** This file exports a single function that may be called to register the
** matchinfo() implementation with a database handle:
**
**   int sqlite3Fts5TestRegisterMatchinfo(sqlite3 *db);
*/</comment>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_FTS5</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>Fts5MatchinfoCtx</name></name></type> <name>Fts5MatchinfoCtx</name>;</typedef>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_AMALGAMATION</name></cpp:ifndef>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>u32</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>Fts5MatchinfoCtx</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>                       <comment type="block">/* Number of cols in FTS5 table */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name></decl>;</decl_stmt>                    <comment type="block">/* Number of phrases in FTS5 query */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zArg</name></decl>;</decl_stmt>                     <comment type="block">/* nul-term'd copy of 2nd arg */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRet</name></decl>;</decl_stmt>                       <comment type="block">/* Number of elements in aRet[] */</comment>
  <decl_stmt><decl><type><name>u32</name> <modifier>*</modifier></type><name>aRet</name></decl>;</decl_stmt>                      <comment type="block">/* Array of 32-bit unsigned ints to return */</comment>
}</block>;</struct>



<comment type="block">/*
** Return a pointer to the fts5_api pointer for database connection db.
** If an error occurs, return NULL and leave an error in the database 
** handle (accessible using sqlite3_errcode()/errmsg()).
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5_api_from_db</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>fts5_api</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppApi</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppApi</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT fts5(?1)"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_pointer</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>ppApi</name></expr></argument>, <argument><expr><literal type="string">"fts5_api_ptr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** Argument f should be a flag accepted by matchinfo() (a valid character
** in the string passed as the second argument). If it is not, -1 is 
** returned. Otherwise, if f is a valid matchinfo flag, the value returned
** is the number of 32-bit integers added to the output array if the
** table has nCol columns and the query nPhrase phrases.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5MatchinfoFlagsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nCol</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPhrase</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>f</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>f</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="char">'p'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'c'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'x'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>nCol</name> <operator>*</operator> <name>nPhrase</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'y'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>nCol</name> <operator>*</operator> <name>nPhrase</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'b'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>nCol</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal><operator>)</operator> <operator>*</operator> <name>nPhrase</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'n'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>nCol</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'l'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>nCol</name></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case> <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>nCol</name></expr>;</expr_stmt> <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5MatchinfoIter</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,   <comment type="block">/* API offered by current FTS version */</comment>
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,              <comment type="block">/* First arg to pass to pApi functions */</comment>
  <parameter><decl><type><name>Fts5MatchinfoCtx</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>x</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>Fts5Context</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>Fts5MatchinfoCtx</name><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>char</name></type></decl></parameter>,<parameter><decl><type><name>u32</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>f</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>f</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>x</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aRet</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>fts5MatchinfoFlagsize</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nPhrase</name></name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5MatchinfoXCb</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pUserData</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5PhraseIter</name></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>, <decl><type ref="prev"/><name>iOff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name> <modifier>*</modifier></type><name>aOut</name> <init>= <expr><operator>(</operator><name>u32</name><operator>*</operator><operator>)</operator><name>pUserData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iPrev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseFirst</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>)</argument_list></call></expr>;</init> 
      <condition><expr><name>iCol</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> 
      <incr><expr><call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseNext</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>)</argument_list></call></expr></incr>
  )</control><block>{<block_content>
    <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>iCol</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>!=</operator><name>iPrev</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>iCol</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iPrev</name> <operator>=</operator> <name>iCol</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5MatchinfoGlobalCb</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,
  <parameter><decl><type><name>Fts5MatchinfoCtx</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>char</name></type> <name>f</name></decl></parameter>,
  <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>f</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="char">'p'</literal></expr>:</case>
      <expr_stmt><expr><name><name>aOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</expr_stmt> 
      <break>break;</break>

    <case>case <expr><literal type="char">'c'</literal></expr>:</case>
      <expr_stmt><expr><name><name>aOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</expr_stmt> 
      <break>break;</break>

    <case>case <expr><literal type="char">'x'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pPtr</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>aOut</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>nCol</name></name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xQueryPhrase</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pPtr</name></expr></argument>, <argument><expr><name>fts5MatchinfoXCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><literal type="char">'n'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nRow</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xRowCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aOut</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><name>nRow</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><literal type="char">'a'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xRowCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>nRow</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aOut</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nToken</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnTotalSize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><operator>(</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><name>nToken</name> <operator>+</operator> <name>nRow</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>nRow</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    </block_content>}</block>

  </block_content>}</block></switch>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5MatchinfoLocalCb</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,
  <parameter><decl><type><name>Fts5MatchinfoCtx</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,
  <parameter><decl><type><name>char</name></type> <name>f</name></decl></parameter>,
  <parameter><decl><type><name>u32</name> <modifier>*</modifier></type><name>aOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <switch>switch<condition>( <expr><name>f</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="char">'b'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iPhrase</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nInt</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <literal type="number">32</literal><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>nPhrase</name></name></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nInt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

      <for>for<control>(<init><expr><name>iPhrase</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iPhrase</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>iPhrase</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5PhraseIter</name></type> <name>iter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseFirstColumn</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>iPhrase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCol</name></expr></argument>)</argument_list></call></expr>;</init>
            <condition><expr><name>iCol</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> 
            <incr><expr><call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseNextColumn</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCol</name></expr></argument>)</argument_list></call></expr></incr>
        )</control><block>{<block_content>
          <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>iPhrase</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>+</operator><literal type="number">31</literal><operator>)</operator><operator>/</operator><literal type="number">32</literal><operator>)</operator> <operator>+</operator> <name>iCol</name><operator>/</operator><literal type="number">32</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>u32</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>iCol</name><operator>%</operator><literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><literal type="char">'x'</literal></expr>:</case>
    <case>case <expr><literal type="char">'y'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nMul</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>f</name><operator>==</operator><literal type="char">'x'</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iPhrase</name></decl>;</decl_stmt>

      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>nPhrase</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>i</name><operator>*</operator><name>nMul</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

      <for>for<control>(<init><expr><name>iPhrase</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iPhrase</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nPhrase</name></name></expr>;</condition> <incr><expr><name>iPhrase</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Fts5PhraseIter</name></type> <name>iter</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>, <decl><type ref="prev"/><name>iCol</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseFirst</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>iPhrase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>)</argument_list></call></expr>;</init> 
            <condition><expr><name>iOff</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> 
            <incr><expr><call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseNext</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>)</argument_list></call></expr></incr>
        )</control><block>{<block_content>
          <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>nMul</name> <operator>*</operator> <operator>(</operator><name>iCol</name> <operator>+</operator> <name>iPhrase</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>nCol</name></name><operator>)</operator></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><literal type="char">'l'</literal></expr>:</case> <block>{<block_content>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nToken</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnSize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>)</operator><name>nToken</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <break>break;</break>
    </block_content>}</block>

    <case>case <expr><literal type="char">'s'</literal></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nInst</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aOut</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>nCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInstCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nInst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name>nInst</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>iPhrase</name></decl>, <decl><type ref="prev"/><name>iOff</name></decl>, <decl><type ref="prev"/><name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iNextPhrase</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iNextOff</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>u32</name></type> <name>nSeq</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInst</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPhrase</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iNextPhrase</name> <operator>=</operator> <name>iPhrase</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>iNextOff</name> <operator>=</operator> <name>iOff</name><operator>+</operator><call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseSize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>j</name><operator>&lt;</operator><name>nInst</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>ip</name></decl>, <decl><type ref="prev"/><name>ic</name></decl>, <decl><type ref="prev"/><name>io</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xInst</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>ic</name><operator>!=</operator><name>iCol</name> <operator>||</operator> <name>io</name><operator>&gt;</operator><name>iNextOff</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><name>ip</name><operator>==</operator><name>iNextPhrase</name> <operator>&amp;&amp;</operator> <name>io</name><operator>==</operator><name>iNextOff</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><name>nSeq</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>iNextPhrase</name> <operator>=</operator> <name>ip</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>iNextOff</name> <operator>=</operator> <name>io</name> <operator>+</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseSize</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if<condition>( <expr><name>nSeq</name><operator>&gt;</operator><name><name>aOut</name><index>[<expr><name>iCol</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>aOut</name><index>[<expr><name>iCol</name></expr>]</index></name> <operator>=</operator> <name>nSeq</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for>

      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
 
<function><type><specifier>static</specifier> <name>Fts5MatchinfoCtx</name> <modifier>*</modifier></type><name>fts5MatchinfoNew</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,   <comment type="block">/* API offered by current FTS version */</comment>
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,              <comment type="block">/* First arg to pass to pApi functions */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Context for returning error message */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>                <comment type="block">/* Matchinfo flag string */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5MatchinfoCtx</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nPhrase</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nInt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nCol</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xColumnCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nPhrase</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xPhraseCount</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>nInt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>fts5MatchinfoFlagsize</name><argument_list>(<argument><expr><name>nCol</name></expr></argument>, <argument><expr><name>nPhrase</name></expr></argument>, <argument><expr><name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zErr</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"unrecognized matchinfo flag: %c"</literal></expr></argument>, <argument><expr><name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>nInt</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5MatchinfoCtx</name></expr></argument>)</argument_list></sizeof>          <comment type="block">/* The struct itself */</comment>
         <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nInt</name>               <comment type="block">/* The p-&gt;aRet[] array */</comment>
         <operator>+</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>                           <comment type="block">/* The p-&gt;zArg string */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Fts5MatchinfoCtx</name><operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_nomem</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nCol</name></name> <operator>=</operator> <name>nCol</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nPhrase</name></name> <operator>=</operator> <name>nPhrase</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aRet</name></name> <operator>=</operator> <operator>(</operator><name>u32</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRet</name></name> <operator>=</operator> <name>nInt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zArg</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aRet</name><index>[<expr><name>nInt</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zArg</name></name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5MatchinfoIter</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fts5MatchinfoGlobalCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5MatchinfoFunc</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>Fts5ExtensionApi</name> <modifier>*</modifier></type><name>pApi</name></decl></parameter>,   <comment type="block">/* API offered by current FTS version */</comment>
  <parameter><decl><type><name>Fts5Context</name> <modifier>*</modifier></type><name>pFts</name></decl></parameter>,              <comment type="block">/* First arg to pass to pApi functions */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Context for returning result/error */</comment>
  <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,                       <comment type="block">/* Number of values in apVal[] array */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Array of trailing arguments */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5MatchinfoCtx</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nVal</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zArg</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>apVal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>zArg</name> <operator>=</operator> <literal type="string">"pcx"</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Fts5MatchinfoCtx</name><operator>*</operator><operator>)</operator><call><name><name>pApi</name><operator>-&gt;</operator><name>xGetAuxdata</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zArg</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>fts5MatchinfoNew</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xSetAuxdata</name></name><argument_list>(<argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5MatchinfoIter</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><name>pFts</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>fts5MatchinfoLocalCb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <comment type="block">/* No errors has occured, so return a copy of the array of integers. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nRet</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>aRet</name></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5TestRegisterMatchinfo</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>fts5_api</name> <modifier>*</modifier></type><name>pApi</name></decl>;</decl_stmt>                 <comment type="block">/* FTS5 API functions */</comment>

  <comment type="block">/* Extract the FTS5 API pointer from the database handle. The 
  ** fts5_api_from_db() function above is copied verbatim from the 
  ** FTS5 documentation. Refer there for details. */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5_api_from_db</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* If fts5_api_from_db() returns NULL, then either FTS5 is not registered
  ** with this database handle, or an error (OOM perhaps?) has occurred.
  **
  ** Also check that the fts5_api object is version 2 or newer.  
  */</comment> 
  <if_stmt><if>if<condition>( <expr><name>pApi</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pApi</name><operator>-&gt;</operator><name>iVersion</name></name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Register the implementation of matchinfo() */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pApi</name><operator>-&gt;</operator><name>xCreateFunction</name></name><argument_list>(<argument><expr><name>pApi</name></expr></argument>, <argument><expr><literal type="string">"matchinfo"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fts5MatchinfoFunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_FTS5 */</comment>
</unit>
