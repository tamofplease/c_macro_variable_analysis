<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/fts5/fts5_vocab.c"><comment type="block">/*
** 2015 May 08
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This is an SQLite virtual table module implementing direct access to an
** existing FTS5 index. The module may create several different types of 
** tables:
**
** col:
**     CREATE TABLE vocab(term, col, doc, cnt, PRIMARY KEY(term, col));
**
**   One row for each term/column combination. The value of $doc is set to
**   the number of fts5 rows that contain at least one instance of term
**   $term within column $col. Field $cnt is set to the total number of 
**   instances of term $term in column $col (in any row of the fts5 table). 
**
** row:
**     CREATE TABLE vocab(term, doc, cnt, PRIMARY KEY(term));
**
**   One row for each term in the database. The value of $doc is set to
**   the number of fts5 rows that contain at least one instance of term
**   $term. Field $cnt is set to the total number of instances of term 
**   $term in the database.
**
** instance:
**     CREATE TABLE vocab(term, doc, col, offset, PRIMARY KEY(&lt;all-fields&gt;));
**
**   One row for each term instance in the database. 
*/</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts5Int.h"</cpp:file></cpp:include>


<typedef>typedef <type><name><name>struct</name> <name>Fts5VocabTable</name></name></type> <name>Fts5VocabTable</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts5VocabCursor</name></name></type> <name>Fts5VocabCursor</name>;</typedef>

<struct>struct <name>Fts5VocabTable</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFts5Tbl</name></decl>;</decl_stmt>                 <comment type="block">/* Name of fts5 table */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFts5Db</name></decl>;</decl_stmt>                  <comment type="block">/* Db containing fts5 table */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>                    <comment type="block">/* Database handle */</comment>
  <decl_stmt><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name></decl>;</decl_stmt>            <comment type="block">/* FTS5 global object for this database */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name></decl>;</decl_stmt>                      <comment type="block">/* FTS5_VOCAB_COL, ROW or INSTANCE */</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>bBusy</name></decl>;</decl_stmt>                 <comment type="block">/* True if busy */</comment>
}</block>;</struct>

<struct>struct <name>Fts5VocabCursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name></decl>;</decl_stmt>            <comment type="block">/* Statement holding lock on pIndex */</comment>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pFts5</name></decl>;</decl_stmt>               <comment type="block">/* Associated FTS5 table */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>bEof</name></decl>;</decl_stmt>                       <comment type="block">/* True if this cursor is at EOF */</comment>
  <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name></decl>;</decl_stmt>           <comment type="block">/* Term/rowid iterator object */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pStruct</name></decl>;</decl_stmt>                  <comment type="block">/* From sqlite3Fts5StructureRef() */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>nLeTerm</name></decl>;</decl_stmt>                    <comment type="block">/* Size of zLeTerm in bytes */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLeTerm</name></decl>;</decl_stmt>                  <comment type="block">/* (term &lt;= $zLeTerm) paramater, or NULL */</comment>

  <comment type="block">/* These are used by 'col' tables only */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name> <modifier>*</modifier></type><name>aCnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name> <modifier>*</modifier></type><name>aDoc</name></decl>;</decl_stmt>

  <comment type="block">/* Output values used by all tables. */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>rowid</name></decl>;</decl_stmt>                      <comment type="block">/* This table's current rowid value */</comment>
  <decl_stmt><decl><type><name>Fts5Buffer</name></type> <name>term</name></decl>;</decl_stmt>                <comment type="block">/* Current value of 'term' column */</comment>

  <comment type="block">/* Output values Used by 'instance' tables only */</comment>
  <decl_stmt><decl><type><name>i64</name></type> <name>iInstPos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iInstOff</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_VOCAB_COL</name></cpp:macro>      <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_VOCAB_ROW</name></cpp:macro>      <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_VOCAB_INSTANCE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_VOCAB_COL_SCHEMA</name></cpp:macro>  <cpp:value>"term, col, doc, cnt"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_VOCAB_ROW_SCHEMA</name></cpp:macro>  <cpp:value>"term, doc, cnt"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_VOCAB_INST_SCHEMA</name></cpp:macro> <cpp:value>"term, doc, col, offset"</cpp:value></cpp:define>

<comment type="block">/*
** Bits for the mask used as the idxNum value by xBestIndex/xFilter.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_VOCAB_TERM_EQ</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_VOCAB_TERM_GE</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS5_VOCAB_TERM_LE</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>


<comment type="block">/*
** Translate a string containing an fts5vocab table type to an 
** FTS5_VOCAB_XXX constant. If successful, set *peType to the output
** value and return SQLITE_OK. Otherwise, set *pzErr to an error message
** and return SQLITE_ERROR.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabTableType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>peType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zCopy</name> <init>= <expr><call><name>sqlite3Fts5Strndup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>zType</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts5Dequote</name><argument_list>(<argument><expr><name>zCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zCopy</name></expr></argument>, <argument><expr><literal type="string">"col"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>peType</name> <operator>=</operator> <name>FTS5_VOCAB_COL</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else

    if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zCopy</name></expr></argument>, <argument><expr><literal type="string">"row"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>peType</name> <operator>=</operator> <name>FTS5_VOCAB_ROW</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else
    if<condition>( <expr><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zCopy</name></expr></argument>, <argument><expr><literal type="string">"instance"</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>peType</name> <operator>=</operator> <name>FTS5_VOCAB_INSTANCE</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else
    <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"fts5vocab: unknown table type: %Q"</literal></expr></argument>, <argument><expr><name>zCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** The xDisconnect() virtual table method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabDisconnectMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5VocabTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5VocabTable</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The xDestroy() virtual table method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabDestroyMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5VocabTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5VocabTable</name><operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is the implementation of both the xConnect and xCreate
** methods of the FTS3 virtual table.
**
** The argv[] array contains the following:
**
**   argv[0]   -&gt; module name  ("fts5vocab")
**   argv[1]   -&gt; database name
**   argv[2]   -&gt; table name
**
** then:
**
**   argv[3]   -&gt; name of fts5 table
**   argv[4]   -&gt; type of fts5vocab table
**
** or, for tables in the TEMP schema only.
**
**   argv[3]   -&gt; name of fts5 tables database
**   argv[4]   -&gt; name of fts5 table
**   argv[5]   -&gt; type of fts5vocab table
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabInitVtab</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                    <comment type="block">/* The SQLite database connection */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,                     <comment type="block">/* Pointer to Fts5Global object */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                       <comment type="block">/* Number of elements in argv array */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,       <comment type="block">/* xCreate/xConnect argument array */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVTab</name></decl></parameter>,          <comment type="block">/* Write the resulting vtab structure here */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* Write any error message here */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azSchema</name><index>[]</index></name> <init>= <expr><block>{ 
    <expr><literal type="string">"CREATE TABlE vocab("</literal> <name>FTS5_VOCAB_COL_SCHEMA</name>  <literal type="string">")"</literal></expr>, 
    <expr><literal type="string">"CREATE TABlE vocab("</literal> <name>FTS5_VOCAB_ROW_SCHEMA</name>  <literal type="string">")"</literal></expr>,
    <expr><literal type="string">"CREATE TABlE vocab("</literal> <name>FTS5_VOCAB_INST_SCHEMA</name> <literal type="string">")"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>Fts5VocabTable</name> <modifier>*</modifier></type><name>pRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>             <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bDb</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>bDb</name> <operator>=</operator> <operator>(</operator><name>argc</name><operator>==</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"temp"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>bDb</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pzErr</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"wrong number of vtable arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                      <comment type="block">/* Bytes of space to allocate */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name> <init>= <expr><ternary><condition><expr><name>bDb</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTab</name> <init>= <expr><ternary><condition><expr><name>bDb</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zType</name> <init>= <expr><ternary><condition><expr><name>bDb</name></expr> ?</condition><then> <expr><name><name>argv</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nDb</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zDb</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>nTab</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zTab</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5VocabTableType</name><argument_list>(<argument><expr><name>zType</name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eType</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>azSchema</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_declare_vtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>azSchema</name><index>[<expr><name>eType</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5VocabTable</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nDb</name> <operator>+</operator> <name>nTab</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pRet</name> <operator>=</operator> <call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pRet</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>pGlobal</name></name> <operator>=</operator> <operator>(</operator><name>Fts5Global</name><operator>*</operator><operator>)</operator><name>pAux</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>eType</name></name> <operator>=</operator> <name>eType</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>zFts5Tbl</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pRet</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pRet</name><operator>-&gt;</operator><name>zFts5Db</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pRet</name><operator>-&gt;</operator><name>zFts5Tbl</name><index>[<expr><name>nTab</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>zFts5Tbl</name></name></expr></argument>, <argument><expr><name>zTab</name></expr></argument>, <argument><expr><name>nTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>zFts5Db</name></name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>nDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5Dequote</name><argument_list>(<argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>zFts5Tbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3Fts5Dequote</name><argument_list>(<argument><expr><name><name>pRet</name><operator>-&gt;</operator><name>zFts5Db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppVTab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name><operator>*</operator><operator>)</operator><name>pRet</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
** The xConnect() and xCreate() methods for the virtual table. All the
** work is done in function fts5VocabInitVtab().
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabConnectMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                    <comment type="block">/* Database connection */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,                     <comment type="block">/* Pointer to tokenizer hash table */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                       <comment type="block">/* Number of elements in argv array */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,       <comment type="block">/* xCreate/xConnect argument array */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,          <comment type="block">/* OUT: New sqlite3_vtab object */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* OUT: sqlite3_malloc'd error message */</comment>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>fts5VocabInitVtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pAux</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>ppVtab</name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabCreateMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                    <comment type="block">/* Database connection */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pAux</name></decl></parameter>,                     <comment type="block">/* Pointer to tokenizer hash table */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                       <comment type="block">/* Number of elements in argv array */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,       <comment type="block">/* xCreate/xConnect argument array */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,          <comment type="block">/* OUT: New sqlite3_vtab object */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* OUT: sqlite3_malloc'd error message */</comment>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>fts5VocabInitVtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pAux</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>ppVtab</name></expr></argument>, <argument><expr><name>pzErr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** Implementation of the xBestIndex method.
**
** Only constraints of the form:
**
**     term &lt;= ?
**     term == ?
**     term &gt;= ?
**
** are interpreted. Less-than and less-than-or-equal are treated 
** identically, as are greater-than and greater-than-or-equal.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabBestIndexMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pUnused</name></decl></parameter>,
  <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iTermEq</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iTermGe</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iTermLe</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idxNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nArg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM</name><argument_list>(<argument><expr><name>pUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nConstraint</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sqlite3_index_constraint</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraint</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>usable</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>iColumn</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>          <comment type="block">/* term column */</comment>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_EQ</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iTermEq</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_LE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iTermLe</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_LT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iTermLe</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_GE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iTermGe</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>op</name></name><operator>==</operator><name>SQLITE_INDEX_CONSTRAINT_GT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>iTermGe</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>iTermEq</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>idxNum</name> <operator>|=</operator> <name>FTS5_VOCAB_TERM_EQ</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iTermEq</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>nArg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iTermGe</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>idxNum</name> <operator>|=</operator> <name>FTS5_VOCAB_TERM_GE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iTermGe</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>nArg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>iTermLe</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>idxNum</name> <operator>|=</operator> <name>FTS5_VOCAB_TERM_LE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>aConstraintUsage</name><index>[<expr><name>iTermLe</name></expr>]</index></name><operator>.</operator><name>argvIndex</name> <operator>=</operator> <operator>++</operator><name>nArg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>estimatedCost</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* This virtual table always delivers results in ascending order of
  ** the "term" column (column 0). So if the user has requested this
  ** specifically - "ORDER BY term" or "ORDER BY term ASC" - set the
  ** sqlite3_index_info.orderByConsumed flag to tell the core the results
  ** are already in sorted order.  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name><operator>==</operator><literal type="number">1</literal> 
   <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iColumn</name><operator>==</operator><literal type="number">0</literal> 
   <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>desc</name><operator>==</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>idxNum</name></name> <operator>=</operator> <name>idxNum</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Implementation of xOpen method.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabOpenMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCsr</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5VocabTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5VocabTable</name><operator>*</operator><operator>)</operator><name>pVTab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5Table</name> <modifier>*</modifier></type><name>pFts5</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zSql</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>bBusy</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
       <argument><expr><literal type="string">"recursive definition for %s.%s"</literal></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zFts5Db</name></name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zFts5Tbl</name></name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zSql</name> <operator>=</operator> <call><name>sqlite3Fts5Mprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>,
      <argument><expr><literal type="string">"SELECT t.%Q FROM %Q.%Q AS t WHERE t.%Q MATCH '*id'"</literal></expr></argument>,
      <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zFts5Tbl</name></name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zFts5Db</name></name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zFts5Tbl</name></name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zFts5Tbl</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zSql</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>||</operator> <name>pStmt</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_ERROR</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>bBusy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pStmt</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call><operator>==</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iId</name> <init>= <expr><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pFts5</name> <operator>=</operator> <call><name>sqlite3Fts5TableFromCsrid</name><argument_list>(<argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>pGlobal</name></name></expr></argument>, <argument><expr><name>iId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pTab</name><operator>-&gt;</operator><name>bBusy</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pFts5</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pStmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pVTab</name><operator>-&gt;</operator><name>zErrMsg</name></name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(
            <argument><expr><literal type="string">"no such fts5 table: %s.%s"</literal></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zFts5Db</name></name></expr></argument>, <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>zFts5Tbl</name></name></expr></argument>
            )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5FlushToDisk</name><argument_list>(<argument><expr><name>pFts5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>nByte</name> <init>= <expr><name><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts5VocabCursor</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <operator>(</operator><name>Fts5VocabCursor</name><operator>*</operator><operator>)</operator><call><name>sqlite3Fts5MallocZero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>pCsr</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name></name> <operator>=</operator> <name>pFts5</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name> <operator>=</operator> <name>pStmt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aCnt</name></name> <operator>=</operator> <operator>(</operator><name>i64</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>aCnt</name><index>[<expr><name><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCsr</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab_cursor</name><operator>*</operator><operator>)</operator><name>pCsr</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fts5VocabResetCursor</name><parameter_list>(<parameter><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>rowid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5IterClose</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5StructureRelease</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStruct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStruct</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zLeTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zLeTerm</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Close the cursor.  For additional information see the documentation
** on the xClose method of the virtual table interface.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabCloseMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5VocabCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fts5VocabResetCursor</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts5BufferFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabInstanceNewTerm</name><parameter_list>(<parameter><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTerm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>zTerm</name> <operator>=</operator> <call><name>sqlite3Fts5IterTerm</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nCmp</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bCmp</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zLeTerm</name></name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>nCmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>bCmp</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>bCmp</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name><operator>&lt;</operator><name>nTerm</name><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlite3Fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><name>zTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabInstanceNext</name><parameter_list>(<parameter><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>eDetail</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5IndexIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>iInstPos</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>po</name> <init>= <expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>iInstOff</name></name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_NONE</name>
      <operator>||</operator> <call><name>sqlite3Fts5PoslistNext64</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><name>po</name></expr></argument>, <argument><expr><name>pp</name></expr></argument>)</argument_list></call></expr> 
  )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iInstPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iInstOff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNextScan</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5VocabInstanceNewTerm</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name> <operator>||</operator> <name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Advance the cursor to the next row in the table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabNextMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5VocabCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5VocabTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5VocabTable</name><operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCol</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5StructureTest</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pIndex</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStruct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>rowid</name></name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_VOCAB_INSTANCE</name></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name>fts5VocabInstanceNext</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_VOCAB_COL</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<init><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>++</operator></expr>;</init> <condition><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>&lt;</operator><name>nCol</name></expr>;</condition> <incr><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name><operator>!=</operator><name>FTS5_VOCAB_COL</name> <operator>||</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>&gt;=</operator><name>nCol</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTerm</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>zTerm</name> <operator>=</operator> <call><name>sqlite3Fts5IterTerm</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nTerm</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nCmp</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>bCmp</name> <init>= <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zLeTerm</name></name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>nCmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>bCmp</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>bCmp</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name><operator>&lt;</operator><name>nTerm</name><operator>)</operator></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <return>return <expr><name>SQLITE_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>sqlite3Fts5BufferSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>u8</name><operator>*</operator><operator>)</operator><name>zTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aCnt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nCol</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nCol</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_VOCAB_COL</name> <operator>||</operator> <name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_VOCAB_ROW</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>eDetail</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>u8</name> <modifier>*</modifier></type><name>pPos</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nPos</name></decl>;</decl_stmt>   <comment type="block">/* Position list */</comment>
        <decl_stmt><decl><type><name>i64</name></type> <name>iPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* 64-bit position read from poslist */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="block">/* Current offset within position list */</comment>

        <expr_stmt><expr><name>pPos</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>pData</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nPos</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>

        <switch>switch<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
          <case>case <expr><name>FTS5_VOCAB_ROW</name></expr>:</case>
            <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
              <while>while<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3Fts5PoslistNext64</name><argument_list>(<argument><expr><name>pPos</name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPos</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aCnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
              </block_content>}</block></while>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <break>break;</break>

          <case>case <expr><name>FTS5_VOCAB_COL</name></expr>:</case>
            <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
              <decl_stmt><decl><type><name>int</name></type> <name>iCol</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
              <while>while<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3Fts5PoslistNext64</name><argument_list>(<argument><expr><name>pPos</name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iPos</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><call><name>FTS5_POS2COLUMN</name><argument_list>(<argument><expr><name>iPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>!=</operator><name>ii</name></expr> )</condition><block>{<block_content>
                  <if_stmt><if>if<condition>( <expr><name>ii</name><operator>&gt;=</operator><name>nCol</name></expr> )</condition><block>{<block_content>
                    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
                    <break>break;</break>
                  </block_content>}</block></if></if_stmt>
                  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name><index>[<expr><name>ii</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><name>iCol</name> <operator>=</operator> <name>ii</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aCnt</name><index>[<expr><name>ii</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
              </block_content>}</block></while>
            </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_COLUMNS</name></expr> )</condition><block>{<block_content>
              <while>while<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3Fts5PoslistNext64</name><argument_list>(<argument><expr><name>pPos</name></expr></argument>, <argument><expr><name>nPos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iOff</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>iPos</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
                <expr_stmt><expr><call><name>assert_nc</name><argument_list>( <argument><expr><name>iPos</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iPos</name><operator>&lt;</operator><name>nCol</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if<condition>( <expr><name>iPos</name><operator>&gt;=</operator><name>nCol</name></expr> )</condition><block>{<block_content>
                  <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
                  <break>break;</break>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name><index>[<expr><name>iPos</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
              </block_content>}</block></while>
            </block_content>}</block></if><else>else<block>{<block_content>
              <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_NONE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <break>break;</break>

          <default>default:</default>
            <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_VOCAB_INSTANCE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>

        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IterNextScan</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_VOCAB_INSTANCE</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>zTerm</name> <operator>=</operator> <call><name>sqlite3Fts5IterTerm</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>nTerm</name><operator>!=</operator><name><name>pCsr</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name> 
          <operator>||</operator> <operator>(</operator><name>nTerm</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>)</argument_list></call><operator>)</operator></expr> 
          )</condition><block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if<condition>( <expr><call><name>sqlite3Fts5IterEof</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>FTS5_VOCAB_COL</name></expr> )</condition><block>{<block_content>
    <for>for<control>(<comment type="block">/* noop */</comment><init>;</init> <condition><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>&lt;</operator><name>nCol</name> <operator>&amp;&amp;</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
    <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name><operator>==</operator><name>nCol</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>FTS5_CORRUPT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This is the xFilter implementation for the virtual table.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabFilterMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* The cursor used for this query */</comment>
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>,                     <comment type="block">/* Strategy index */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zUnused</name></decl></parameter>,            <comment type="block">/* Unused */</comment>
  <parameter><decl><type><name>int</name></type> <name>nUnused</name></decl></parameter>,                    <comment type="block">/* Number of elements in apVal */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Arguments for the indexing scheme */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5VocabTable</name> <modifier>*</modifier></type><name>pTab</name> <init>= <expr><operator>(</operator><name>Fts5VocabTable</name><operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5VocabCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><name><name>pTab</name><operator>-&gt;</operator><name>eType</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name>FTS5INDEX_QUERY_SCAN</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nTerm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pEq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pGe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_value</name> <modifier>*</modifier></type><name>pLe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAM2</name><argument_list>(<argument><expr><name>zUnused</name></expr></argument>, <argument><expr><name>nUnused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>fts5VocabResetCursor</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>idxNum</name> <operator>&amp;</operator> <name>FTS5_VOCAB_TERM_EQ</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pEq</name> <operator>=</operator> <name><name>apVal</name><index>[<expr><name>iVal</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>idxNum</name> <operator>&amp;</operator> <name>FTS5_VOCAB_TERM_GE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pGe</name> <operator>=</operator> <name><name>apVal</name><index>[<expr><name>iVal</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>idxNum</name> <operator>&amp;</operator> <name>FTS5_VOCAB_TERM_LE</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pLe</name> <operator>=</operator> <name><name>apVal</name><index>[<expr><name>iVal</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>pEq</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zTerm</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nTerm</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name>pEq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pGe</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>zTerm</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pGe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nTerm</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name>pGe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pLe</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCopy</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pLe</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zCopy</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>zCopy</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name>pLe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zLeTerm</name></name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>zLeTerm</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>zLeTerm</name></name></expr></argument>, <argument><expr><name>zCopy</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>nLeTerm</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>Fts5Index</name> <modifier>*</modifier></type><name>pIndex</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pIndex</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts5IndexQuery</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>, <argument><expr><name>zTerm</name></expr></argument>, <argument><expr><name>nTerm</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pStruct</name></name> <operator>=</operator> <call><name>sqlite3Fts5StructureRef</name><argument_list>(<argument><expr><name>pIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <name>eType</name><operator>==</operator><name>FTS5_VOCAB_INSTANCE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5VocabInstanceNewTerm</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name> 
   <operator>&amp;&amp;</operator> <operator>(</operator><name>eType</name><operator>!=</operator><name>FTS5_VOCAB_INSTANCE</name> 
    <operator>||</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name><operator>!=</operator><name>FTS5_DETAIL_NONE</name><operator>)</operator></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts5VocabNextMethod</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** This is the xEof method of the virtual table. SQLite calls this 
** routine to find out if it has reached the end of a result set.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabEofMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5VocabCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pCsr</name><operator>-&gt;</operator><name>bEof</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabColumnMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* Cursor to retrieve value from */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Context for sqlite3_result_xxx() calls */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>                        <comment type="block">/* Index of column to read value from */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5VocabCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eDetail</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>eDetail</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Fts5VocabTable</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>eType</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(
        <argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>pCsr</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>term</name><operator>.</operator><name>n</name></name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>eType</name><operator>==</operator><name>FTS5_VOCAB_COL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iCol</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>iCol</name><operator>==</operator><literal type="number">2</literal> <operator>||</operator> <name>iCol</name><operator>==</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>!=</operator><name>FTS5_DETAIL_NONE</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>azCol</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iCol</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iVal</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iVal</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aCnt</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>eType</name><operator>==</operator><name>FTS5_VOCAB_ROW</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iCol</name><operator>==</operator><literal type="number">1</literal> <operator>||</operator> <name>iCol</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iCol</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iVal</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aDoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iVal</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>aCnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>==</operator><name>FTS5_VOCAB_INSTANCE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <switch>switch<condition>( <expr><name>iCol</name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>iRowid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>ii</name> <operator>=</operator> <call><name>FTS5_POS2COLUMN</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iInstPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_COLUMNS</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>ii</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>pCsr</name><operator>-&gt;</operator><name>iInstPos</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if<condition>( <expr><name>ii</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>nCol</name></name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name><name>pCsr</name><operator>-&gt;</operator><name>pFts5</name><operator>-&gt;</operator><name>pConfig</name><operator>-&gt;</operator><name>azCol</name><index>[<expr><name>ii</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
      <default>default:</default> <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iCol</name><operator>==</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>eDetail</name><operator>==</operator><name>FTS5_DETAIL_FULL</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>ii</name> <init>= <expr><call><name>FTS5_POS2OFFSET</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iInstPos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iVal</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* 
** This is the xRowid method. The SQLite core calls this routine to
** retrieve the rowid for the current row of the result set. The
** rowid should be written to *pRowid.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts5VocabRowidMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts5VocabCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts5VocabCursor</name><operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>rowid</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3Fts5VocabInit</name><parameter_list>(<parameter><decl><type><name>Fts5Global</name> <modifier>*</modifier></type><name>pGlobal</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_module</name></type> <name>fts5Vocab</name> <init>= <expr><block>{
    <comment type="block">/* iVersion      */</comment> <expr><literal type="number">2</literal></expr>,
    <comment type="block">/* xCreate       */</comment> <expr><name>fts5VocabCreateMethod</name></expr>,
    <comment type="block">/* xConnect      */</comment> <expr><name>fts5VocabConnectMethod</name></expr>,
    <comment type="block">/* xBestIndex    */</comment> <expr><name>fts5VocabBestIndexMethod</name></expr>,
    <comment type="block">/* xDisconnect   */</comment> <expr><name>fts5VocabDisconnectMethod</name></expr>,
    <comment type="block">/* xDestroy      */</comment> <expr><name>fts5VocabDestroyMethod</name></expr>,
    <comment type="block">/* xOpen         */</comment> <expr><name>fts5VocabOpenMethod</name></expr>,
    <comment type="block">/* xClose        */</comment> <expr><name>fts5VocabCloseMethod</name></expr>,
    <comment type="block">/* xFilter       */</comment> <expr><name>fts5VocabFilterMethod</name></expr>,
    <comment type="block">/* xNext         */</comment> <expr><name>fts5VocabNextMethod</name></expr>,
    <comment type="block">/* xEof          */</comment> <expr><name>fts5VocabEofMethod</name></expr>,
    <comment type="block">/* xColumn       */</comment> <expr><name>fts5VocabColumnMethod</name></expr>,
    <comment type="block">/* xRowid        */</comment> <expr><name>fts5VocabRowidMethod</name></expr>,
    <comment type="block">/* xUpdate       */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xBegin        */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xSync         */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xCommit       */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xRollback     */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xFindFunction */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xRename       */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xSavepoint    */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xRelease      */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xRollbackTo   */</comment> <expr><literal type="number">0</literal></expr>,
    <comment type="block">/* xShadowName   */</comment> <expr><literal type="number">0</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pGlobal</name></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>sqlite3_create_module_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"fts5vocab"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fts5Vocab</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
