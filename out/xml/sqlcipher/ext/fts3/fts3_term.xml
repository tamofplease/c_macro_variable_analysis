<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/fts3/fts3_term.c"><comment type="block">/*
** 2011 Jan 27
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file is not part of the production FTS code. It is only used for
** testing. It contains a virtual table implementation that provides direct 
** access to the full-text index of an FTS table. 
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fts3Int.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_CORE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>Fts3termTable</name></name></type> <name>Fts3termTable</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Fts3termCursor</name></name></type> <name>Fts3termCursor</name>;</typedef>

<struct>struct <name>Fts3termTable</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab</name></type> <name>base</name></decl>;</decl_stmt>              <comment type="block">/* Base class used by SQLite core */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iIndex</name></decl>;</decl_stmt>                     <comment type="block">/* Index for Fts3Table.aIndex[] */</comment>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3Tab</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>Fts3termCursor</name> <block>{
  <decl_stmt><decl><type><name>sqlite3_vtab_cursor</name></type> <name>base</name></decl>;</decl_stmt>       <comment type="block">/* Base class used by SQLite core */</comment>
  <decl_stmt><decl><type><name>Fts3MultiSegReader</name></type> <name>csr</name></decl>;</decl_stmt>        <comment type="block">/* Must be right after "base" */</comment>
  <decl_stmt><decl><type><name>Fts3SegFilter</name></type> <name>filter</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>isEof</name></decl>;</decl_stmt>                      <comment type="block">/* True if cursor is at EOF */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iRowid</name></decl>;</decl_stmt>           <comment type="block">/* Current 'rowid' value */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iDocid</name></decl>;</decl_stmt>           <comment type="block">/* Current 'docid' value */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iCol</name></decl>;</decl_stmt>                       <comment type="block">/* Current 'col' value */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iPos</name></decl>;</decl_stmt>                       <comment type="block">/* Current 'pos' value */</comment>
}</block>;</struct>

<comment type="block">/*
** Schema of the terms table.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS3_TERMS_SCHEMA</name></cpp:macro> <cpp:value>"CREATE TABLE x(term, docid, col, pos)"</cpp:value></cpp:define>

<comment type="block">/*
** This function does all the work for both the xConnect and xCreate methods.
** These tables have no persistent representation of their own, so xConnect
** and xCreate are identical operations.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termConnectMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,                    <comment type="block">/* Database connection */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,                     <comment type="block">/* Non-zero for an fts4prefix table */</comment>
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,                       <comment type="block">/* Number of elements in argv array */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>argv</name></decl></parameter>,       <comment type="block">/* xCreate/xConnect argument array */</comment>
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVtab</name></decl></parameter>,          <comment type="block">/* OUT: New sqlite3_vtab object */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzErr</name></decl></parameter>                    <comment type="block">/* OUT: sqlite3_malloc'd error message */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zDb</name></decl>;</decl_stmt>                <comment type="block">/* Name of database (e.g. "main") */</comment>
  <decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>zFts3</name></decl>;</decl_stmt>              <comment type="block">/* Name of fts3 table */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nDb</name></decl>;</decl_stmt>                        <comment type="block">/* Result of strlen(zDb) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nFts3</name></decl>;</decl_stmt>                      <comment type="block">/* Result of strlen(zFts3) */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nByte</name></decl>;</decl_stmt>            <comment type="block">/* Bytes of space to allocate here */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* value returned by declare_vtab() */</comment>
  <decl_stmt><decl><type><name>Fts3termTable</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>               <comment type="block">/* Virtual table object to return */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>==</operator><literal type="number">5</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>iIndex</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>argc</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* The user should specify a single argument - the name of an fts3 table. */</comment>
  <if_stmt><if>if<condition>( <expr><name>argc</name><operator>!=</operator><literal type="number">4</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3Fts3ErrMsg</name><argument_list>(<argument><expr><name>pzErr</name></expr></argument>,
        <argument><expr><literal type="string">"wrong number of arguments to fts4term constructor"</literal></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>zDb</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> 
  <expr_stmt><expr><name>nDb</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zFts3</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nFts3</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>zFts3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_declare_vtab</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>FTS3_TERMS_SCHEMA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts3termTable</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Fts3Table</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nDb</name> <operator>+</operator> <name>nFts3</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Fts3termTable</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc64</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name></name> <operator>=</operator> <operator>(</operator><name>Fts3Table</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zDb</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zDb</name><index>[<expr><name>nDb</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>nIndex</name></name> <operator>=</operator> <name>iIndex</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iIndex</name></name> <operator>=</operator> <name>iIndex</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zDb</name></name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>nDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>zFts3</name></expr></argument>, <argument><expr><name>nFts3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts3Dequote</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppVtab</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function does the work for both the xDisconnect and xDestroy methods.
** These tables have no persistent representation of their own, so xDisconnect
** and xDestroy are identical operations.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termDisconnectMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVtab</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3termTable</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Fts3termTable</name> <operator>*</operator><operator>)</operator><name>pVtab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <comment type="block">/* Free any prepared statements held */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>SizeofArray</name><argument_list>(<argument><expr><name><name>pFts3</name><operator>-&gt;</operator><name>aStmt</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name><name>pFts3</name><operator>-&gt;</operator><name>aStmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>pFts3</name><operator>-&gt;</operator><name>zSegmentsTbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS4AUX_EQ_CONSTRAINT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS4AUX_GE_CONSTRAINT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTS4AUX_LE_CONSTRAINT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<comment type="block">/*
** xBestIndex - Analyze a WHERE and ORDER BY clause.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termBestIndexMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3_index_info</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>pVTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* This vtab naturally does "ORDER BY term, docid, col, pos".  */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iColumn</name><operator>!=</operator><name>i</name> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>aOrderBy</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>desc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><name><name>pInfo</name><operator>-&gt;</operator><name>nOrderBy</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>orderByConsumed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xOpen - Open a cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termOpenMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab</name> <modifier>*</modifier></type><name>pVTab</name></decl></parameter>, <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppCsr</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3termCursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>            <comment type="block">/* Pointer to cursor object to return */</comment>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>pVTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pCsr</name> <operator>=</operator> <operator>(</operator><name>Fts3termCursor</name> <operator>*</operator><operator>)</operator><call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts3termCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pCsr</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Fts3termCursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppCsr</name> <operator>=</operator> <operator>(</operator><name>sqlite3_vtab_cursor</name> <operator>*</operator><operator>)</operator><name>pCsr</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xClose - Close a cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termCloseMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Fts3termTable</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator><operator>-&gt;</operator><name>pFts3Tab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts3termCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3termCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3Fts3SegmentsClose</name><argument_list>(<argument><expr><name>pFts3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts3SegReaderFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xNext - Advance the cursor to the next row, if any.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termNextMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3termCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3termCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3</name> <init>= <expr><operator>(</operator><operator>(</operator><name>Fts3termTable</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name><operator>)</operator><operator>-&gt;</operator><name>pFts3Tab</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>v</name></decl>;</decl_stmt>

  <comment type="block">/* Increment our pretend rowid value. */</comment>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iRowid</name></name><operator>++</operator></expr>;</expr_stmt>

  <comment type="block">/* Advance to the next term in the full-text index. */</comment>
  <if_stmt><if>if<condition>( <expr><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>aDoclist</name></name><operator>==</operator><literal type="number">0</literal> 
   <operator>||</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name><operator>&gt;=</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>aDoclist</name><index>[<expr><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>nDoclist</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts3SegReaderStep</name><argument_list>(<argument><expr><name>pFts3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_ROW</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>isEof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDocid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>aDoclist</name></name></expr>;</expr_stmt>

    <comment type="block">/* Read docid */</comment>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name> <operator>+=</operator> <call><name>sqlite3Fts3GetVarint</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>iDocid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name> <operator>+=</operator> <call><name>sqlite3Fts3GetVarint</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name> <operator>+=</operator> <call><name>sqlite3Fts3GetVarint</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iDocid</name></name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name> <operator>+=</operator> <call><name>sqlite3Fts3GetVarint</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>v</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name> <operator>+=</operator> <call><name>sqlite3Fts3GetVarint</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iCol</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name> <operator>+=</operator> <call><name>sqlite3Fts3GetVarint</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>pNext</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>iPos</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>v</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xFilter - Initialize a cursor to point at the start of its data.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termFilterMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* The cursor used for this query */</comment>
  <parameter><decl><type><name>int</name></type> <name>idxNum</name></decl></parameter>,                     <comment type="block">/* Strategy index */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idxStr</name></decl></parameter>,             <comment type="block">/* Unused */</comment>
  <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>,                       <comment type="block">/* Number of elements in apVal */</comment>
  <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>apVal</name></decl></parameter>           <comment type="block">/* Arguments for the indexing scheme */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3termCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3termCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts3termTable</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Fts3termTable</name> <operator>*</operator><operator>)</operator><name><name>pCursor</name><operator>-&gt;</operator><name>pVtab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Fts3Table</name> <modifier>*</modifier></type><name>pFts3</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pFts3Tab</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idxNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>idxStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>apVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>idxStr</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idxNum</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* In case this cursor is being reused, close and zero it. */</comment>
  <expr_stmt><expr><call><name>testcase</name><argument_list>(<argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>zTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Fts3SegReaderFinish</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>FTS3_SEGMENT_REQUIRE_POS</name><operator>|</operator><name>FTS3_SEGMENT_IGNORE_EMPTY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>FTS3_SEGMENT_SCAN</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts3SegReaderCursor</name><argument_list>(<argument><expr><name>pFts3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iIndex</name></name></expr></argument>, <argument><expr><name>FTS3_SEGCURSOR_ALL</name></expr></argument>,
      <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>zTerm</name></name></expr></argument>, <argument><expr><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name><operator>.</operator><name>nTerm</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3Fts3SegReaderStart</name><argument_list>(<argument><expr><name>pFts3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>csr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCsr</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>fts3termNextMethod</name><argument_list>(<argument><expr><name>pCursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xEof - Return true if the cursor is at EOF, or false otherwise.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termEofMethod</name><parameter_list>(<parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3termCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3termCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>pCsr</name><operator>-&gt;</operator><name>isEof</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xColumn - Return a column value.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termColumnMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* Cursor to retrieve value from */</comment>
  <parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,          <comment type="block">/* Context for sqlite3_result_xxx() calls */</comment>
  <parameter><decl><type><name>int</name></type> <name>iCol</name></decl></parameter>                        <comment type="block">/* Index of column to read value from */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3termCursor</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Fts3termCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iCol</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iCol</name><operator>&lt;=</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name>iCol</name></expr> )</condition><block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>zTerm</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>csr</name><operator>.</operator><name>nTerm</name></name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iDocid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>iPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** xRowid - Return the current rowid for the cursor.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>fts3termRowidMethod</name><parameter_list>(
  <parameter><decl><type><name>sqlite3_vtab_cursor</name> <modifier>*</modifier></type><name>pCursor</name></decl></parameter>,   <comment type="block">/* Cursor to retrieve value from */</comment>
  <parameter><decl><type><name>sqlite_int64</name> <modifier>*</modifier></type><name>pRowid</name></decl></parameter>            <comment type="block">/* OUT: Rowid value */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Fts3termCursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><operator>(</operator><name>Fts3termCursor</name> <operator>*</operator><operator>)</operator><name>pCursor</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRowid</name> <operator>=</operator> <name><name>pCsr</name><operator>-&gt;</operator><name>iRowid</name></name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Register the fts3term module with database connection db. Return SQLITE_OK
** if successful or an error code if sqlite3_create_module() fails.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3Fts3InitTerm</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>sqlite3_module</name></type> <name>fts3term_module</name> <init>= <expr><block>{
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* iVersion      */</comment>
     <expr><name>fts3termConnectMethod</name></expr>,       <comment type="block">/* xCreate       */</comment>
     <expr><name>fts3termConnectMethod</name></expr>,       <comment type="block">/* xConnect      */</comment>
     <expr><name>fts3termBestIndexMethod</name></expr>,     <comment type="block">/* xBestIndex    */</comment>
     <expr><name>fts3termDisconnectMethod</name></expr>,    <comment type="block">/* xDisconnect   */</comment>
     <expr><name>fts3termDisconnectMethod</name></expr>,    <comment type="block">/* xDestroy      */</comment>
     <expr><name>fts3termOpenMethod</name></expr>,          <comment type="block">/* xOpen         */</comment>
     <expr><name>fts3termCloseMethod</name></expr>,         <comment type="block">/* xClose        */</comment>
     <expr><name>fts3termFilterMethod</name></expr>,        <comment type="block">/* xFilter       */</comment>
     <expr><name>fts3termNextMethod</name></expr>,          <comment type="block">/* xNext         */</comment>
     <expr><name>fts3termEofMethod</name></expr>,           <comment type="block">/* xEof          */</comment>
     <expr><name>fts3termColumnMethod</name></expr>,        <comment type="block">/* xColumn       */</comment>
     <expr><name>fts3termRowidMethod</name></expr>,         <comment type="block">/* xRowid        */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xUpdate       */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xBegin        */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xSync         */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xCommit       */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xRollback     */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xFindFunction */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xRename       */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xSavepoint    */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xRelease      */</comment>
     <expr><literal type="number">0</literal></expr>,                           <comment type="block">/* xRollbackTo   */</comment>
     <expr><literal type="number">0</literal></expr>                            <comment type="block">/* xShadowName   */</comment>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>                         <comment type="block">/* Return code */</comment>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_create_module</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"fts4term"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fts3term_module</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_CORE) || defined(SQLITE_ENABLE_FTS3) */</comment>
</unit>
