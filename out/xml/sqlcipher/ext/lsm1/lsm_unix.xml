<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm_unix.c"><comment type="block">/*
** 2011-12-03
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** Unix-specific run-time environment implementation for LSM.
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__TINYC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/* workaround for ftruncate() visibility on gcc. */</comment>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>_XOPEN_SOURCE</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmInt.h"</cpp:file></cpp:include>

<comment type="block">/* There is no fdatasync() call on Android */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__ANDROID__</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>fdatasync</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fsync(x)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** An open file is an instance of the following object
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>PosixFile</name></name></type> <name>PosixFile</name>;</typedef>
<struct>struct <name>PosixFile</name> <block>{
  <decl_stmt><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>                  <comment type="block">/* The run-time environment */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>              <comment type="block">/* Full path to file */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>                         <comment type="block">/* The open file descriptor */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>shmfd</name></decl>;</decl_stmt>                      <comment type="block">/* Shared memory file-descriptor */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pMap</name></decl>;</decl_stmt>                     <comment type="block">/* Pointer to mapping of file fd */</comment>
  <decl_stmt><decl><type><name>off_t</name></type> <name>nMap</name></decl>;</decl_stmt>                     <comment type="block">/* Size of mapping at pMap in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nShm</name></decl>;</decl_stmt>                       <comment type="block">/* Number of entries in array apShm[] */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>apShm</name></decl>;</decl_stmt>                   <comment type="block">/* Array of 32K shared memory segments */</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>posixShmFile</name><parameter_list>(<parameter><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>zShm</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>lsmMalloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>nName</name><operator>+</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zShm</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zShm</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zShm</name><index>[<expr><name>nName</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-shm"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zShm</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsOpen</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFile</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>lsm_malloc</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PosixFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_NOMEM</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bReadonly</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LSM_OPEN_READONLY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>oflags</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>bReadonly</name></expr> ?</condition><then> <expr><name>O_RDONLY</name></expr> </then><else>: <expr><operator>(</operator><name>O_RDWR</name><operator>|</operator><name>O_CREAT</name><operator>)</operator></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PosixFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <name>zFile</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>lsm_free</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>errno</name><operator>==</operator><name>ENOENT</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsmErrorBkpt</name><argument_list>(<argument><expr><name>LSM_IOERR_NOENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppFile</name> <operator>=</operator> <operator>(</operator><name>lsm_file</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsWrite</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,                <comment type="block">/* File to write to */</comment>
  <parameter><decl><type><name>lsm_i64</name></type> <name>iOff</name></decl></parameter>,                   <comment type="block">/* Offset to write to */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,                    <comment type="block">/* Write data from this buffer */</comment>
  <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>                       <comment type="block">/* Bytes of data to write */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>iOff</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>offset</name><operator>!=</operator><name>iOff</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>prc</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>prc</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsTruncate</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,                <comment type="block">/* File to write to */</comment>
  <parameter><decl><type><name>lsm_i64</name></type> <name>nSize</name></decl></parameter>                   <comment type="block">/* Size to truncate file to */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>                <comment type="block">/* Return code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>prc</name></decl>;</decl_stmt>                        <comment type="block">/* Posix Return Code */</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sStat</name></decl>;</decl_stmt>              <comment type="block">/* Result of fstat() invocation */</comment>
  
  <expr_stmt><expr><name>prc</name> <operator>=</operator> <call><name>fstat</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>prc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sStat</name><operator>.</operator><name>st_size</name></name><operator>&gt;</operator><name>nSize</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>prc</name> <operator>=</operator> <call><name>ftruncate</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>nSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>prc</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsRead</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,                <comment type="block">/* File to read from */</comment>
  <parameter><decl><type><name>lsm_i64</name></type> <name>iOff</name></decl></parameter>,                   <comment type="block">/* Offset to read from */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,                    <comment type="block">/* Read data into this buffer */</comment>
  <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>                       <comment type="block">/* Bytes of data to read */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>off_t</name></type> <name>offset</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>lseek</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>iOff</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>offset</name><operator>!=</operator><name>iOff</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>prc</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>nData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>prc</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> 
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>prc</name><operator>&lt;</operator><name>nData</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><index>[<expr><name>prc</name></expr>]</index></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nData</name> <operator>-</operator> <name>prc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsSync</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LSM_NO_SYNC</name></cpp:ifndef>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>prc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pMap</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>prc</name> <operator>=</operator> <call><name>msync</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nMap</name></name></expr></argument>, <argument><expr><name>MS_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>prc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>prc</name> <operator>=</operator> <call><name>fdatasync</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>prc</name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pFile</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsSectorSize</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">512</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsRemap</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>lsm_i64</name></type> <name>iMin</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>,
  <parameter><decl><type><name>lsm_i64</name> <modifier>*</modifier></type><name>pnOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>off_t</name></type> <name>iSz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>prc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>

  <comment type="block">/* If the file is between 0 and 2MB in size, extend it in chunks of 256K.
  ** Thereafter, in chunks of 1MB at a time.  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>aIncrSz</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">256</literal><operator>*</operator><literal type="number">1024</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nIncrSz</name> <init>= <expr><name><name>aIncrSz</name><index>[<expr><name>iMin</name><operator>&gt;</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pMap</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pMap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnOut</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nMap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iMin</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>prc</name> <operator>=</operator> <call><name>fstat</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>prc</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iSz</name> <operator>=</operator> <name><name>buf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iSz</name><operator>&lt;</operator><name>iMin</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iSz</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>iMin</name> <operator>+</operator> <name>nIncrSz</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>nIncrSz</name><operator>)</operator> <operator>*</operator> <name>nIncrSz</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>prc</name> <operator>=</operator> <call><name>ftruncate</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>iSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>prc</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMap</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iSz</name></expr></argument>, <argument><expr><name>PROT_READ</name><operator>|</operator><name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pMap</name></name><operator>==</operator><name>MAP_FAILED</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nMap</name></name> <operator>=</operator> <name>iSz</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pMap</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnOut</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>nMap</name></name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsFullpath</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name> <init>= <expr><operator>*</operator><name>pnOut</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nReq</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>zName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>!=</operator><literal type="char">'/'</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nTmp</name> <init>= <expr><literal type="number">512</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>zTmp</name> <operator>=</operator> <call><name>lsmMalloc</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>nTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>zTmp</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>z</name> <operator>=</operator> <call><name>getcwd</name><argument_list>(<argument><expr><name>zTmp</name></expr></argument>, <argument><expr><name>nTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>z</name> <operator>||</operator> <name>errno</name><operator>!=</operator><name>ERANGE</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>nTmp</name> <operator>=</operator> <name>nTmp</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>zTmp</name> <operator>=</operator> <call><name>lsmReallocOrFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zTmp</name></expr></argument>, <argument><expr><name>nTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if<condition>( <expr><name>zTmp</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>z</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>z</name><operator>==</operator><name>zTmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>nTmp</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nReq</name> <operator>=</operator> <name>nTmp</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nReq</name><operator>&lt;=</operator><name>nBuf</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>zTmp</name></expr></argument>, <argument><expr><name>nTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>nTmp</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zOut</name><index>[<expr><name>nTmp</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nReq</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nReq</name><operator>&lt;=</operator><name>nBuf</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pnOut</name> <operator>=</operator> <name>nReq</name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsFileid</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBuf</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>prc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nReq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>buf</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nBuf</name> <operator>=</operator> <operator>*</operator><name>pnBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nReq</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_ino</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nReq</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nReq</name><operator>&gt;</operator><name>nBuf</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_OK</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>prc</name> <operator>=</operator> <call><name>fstat</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>prc</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>st_dev</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>pBuf</name><operator>)</operator><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_dev</name></name></expr></argument>)</argument_list></sizeof></expr>]</index><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><operator>.</operator><name>st_ino</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>st_ino</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsUnlink</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>prc</name> <init>= <expr><call><name>unlink</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>prc</name></expr> ?</condition><then> <expr><name>LSM_IOERR_BKPT</name></expr> </then><else>: <expr><name>LSM_OK</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsLock</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>short</name></type> <name><name>aType</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>F_UNLCK</name></expr>, <expr><name>F_RDLCK</name></expr>, <expr><name>F_WRLCK</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>lock</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aType</name><index>[<expr><name>LSM_LOCK_UNLOCK</name></expr>]</index></name><operator>==</operator><name>F_UNLCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aType</name><index>[<expr><name>LSM_LOCK_SHARED</name></expr>]</index></name><operator>==</operator><name>F_RDLCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aType</name><index>[<expr><name>LSM_LOCK_EXCL</name></expr>]</index></name><operator>==</operator><name>F_WRLCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eType</name><operator>&lt;</operator><call><name>array_size</name><argument_list>(<argument><expr><name>aType</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iLock</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iLock</name><operator>&lt;=</operator><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <name><name>aType</name><index>[<expr><name>eType</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_start</name></name> <operator>=</operator> <operator>(</operator><literal type="number">4096</literal><operator>-</operator><name>iLock</name><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_SETLK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>e</name><operator>==</operator><name>EACCES</name> <operator>||</operator> <name>e</name><operator>==</operator><name>EAGAIN</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_BUSY</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsTestLock</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>short</name></type> <name><name>aType</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>F_RDLCK</name></expr>, <expr><name>F_WRLCK</name></expr> }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>flock</name></name></type> <name>lock</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>==</operator><name>LSM_LOCK_SHARED</name> <operator>||</operator> <name>eType</name><operator>==</operator><name>LSM_LOCK_EXCL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aType</name><index>[<expr><name>LSM_LOCK_SHARED</name></expr>]</index></name><operator>==</operator><name>F_RDLCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>aType</name><index>[<expr><name>LSM_LOCK_EXCL</name></expr>]</index></name><operator>==</operator><name>F_WRLCK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eType</name><operator>&lt;</operator><call><name>array_size</name><argument_list>(<argument><expr><name>aType</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iLock</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iLock</name><operator>&lt;=</operator><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_whence</name></name> <operator>=</operator> <name>SEEK_SET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_len</name></name> <operator>=</operator> <name>nLock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_type</name></name> <operator>=</operator> <name><name>aType</name><index>[<expr><name>eType</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lock</name><operator>.</operator><name>l_start</name></name> <operator>=</operator> <operator>(</operator><literal type="number">4096</literal><operator>-</operator><name>iLock</name><operator>-</operator><name>nLock</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>fcntl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>F_GETLK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name><name>lock</name><operator>.</operator><name>l_type</name></name><operator>!=</operator><name>F_UNLCK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_BUSY</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsShmMap</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iChunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppShm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppShm</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>sz</name><operator>==</operator><name>LSM_SHM_CHUNK_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iChunk</name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nShm</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>apNew</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><name>iChunk</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>off_t</name></type> <name>nReq</name> <init>= <expr><name>nNew</name> <operator>*</operator> <name>LSM_SHM_CHUNK_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>sStat</name></decl>;</decl_stmt>

    <comment type="block">/* If the shared-memory file has not been opened, open it now. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>shmfd</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm</name> <init>= <expr><call><name>posixShmFile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zShm</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>shmfd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zShm</name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_CREAT</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>zShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>shmfd</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> 
        <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the shared-memory file is not large enough to contain the 
    ** requested chunk, cause it to grow.  */</comment>
    <if_stmt><if>if<condition>( <expr><call><name>fstat</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>shmfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sStat</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>sStat</name><operator>.</operator><name>st_size</name></name><operator>&lt;</operator><name>nReq</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>shmfd</name></name></expr></argument>, <argument><expr><name>nReq</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>apNew</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lsmRealloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>apNew</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>p</name><operator>-&gt;</operator><name>nShm</name></name></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nNew</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name><name>apNew</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name></name> <operator>=</operator> <name>apNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nShm</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iChunk</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iChunk</name></expr>]</index></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>LSM_SHM_CHUNK_SIZE</name></expr></argument>, 
        <argument><expr><name>PROT_READ</name><operator>|</operator><name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>shmfd</name></name></expr></argument>, <argument><expr><name>iChunk</name><operator>*</operator><name>LSM_SHM_CHUNK_SIZE</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iChunk</name></expr>]</index></name><operator>==</operator><name>MAP_FAILED</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iChunk</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppShm</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iChunk</name></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmPosixOsShmBarrier</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsShmUnmap</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDelete</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>shmfd</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nShm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>LSM_SHM_CHUNK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>shmfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>shmfd</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bDelete</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm</name> <init>= <expr><call><name>posixShmFile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zShm</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>zShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsClose</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
   <decl_stmt><decl><type><name>PosixFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>PosixFile</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
   <expr_stmt><expr><call><name>lsmPosixOsShmUnmap</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pMap</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
   <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>lsm_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>apShm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>lsm_free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsSleep</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>us</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  <comment type="block">/* Apparently on Android usleep() returns void */</comment>
  if( usleep(us) ) return LSM_IOERR;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************
** Memory allocation routines.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_HDR_SIZE</name></cpp:macro> <cpp:value>ROUND8( sizeof(size_t) )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>lsmPosixOsMalloc</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>m</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>N</name> <operator>+=</operator> <name>BLOCK_HDR_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><name>m</name><operator>)</operator> <operator>=</operator> <name>N</name></expr>;</expr_stmt>
  <return>return <expr><name>m</name> <operator>+</operator> <name>BLOCK_HDR_SIZE</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmPosixOsFree</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>(<expr><name>p</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name><operator>)</operator> <operator>-</operator> <name>BLOCK_HDR_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>lsmPosixOsRealloc</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>m</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><literal type="number">1</literal><operator>&gt;</operator><name>N</name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>lsmPosixOsFree</name><argument_list>( <argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>NULL</name><operator>==</operator><name>p</name></expr>)</condition><block>{<block_content>
    <return>return <expr><call><name>lsmPosixOsMalloc</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>re</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>m</name> <operator>-=</operator> <name>BLOCK_HDR_SIZE</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> <comment type="block">/* arguable: don't shrink */</comment>
    size_t * sz = (size_t*)m;
    if(*sz &gt;= (size_t)N){
      return p;
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>re</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name>m</name></expr></argument>, <argument><expr><name>N</name> <operator>+</operator> <name>BLOCK_HDR_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>(<expr><name>re</name></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>re</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><name>m</name><operator>)</operator> <operator>=</operator> <name>N</name></expr>;</expr_stmt>
      <return>return <expr><name>m</name> <operator>+</operator> <name>BLOCK_HDR_SIZE</name></expr>;</return>
    </block_content>}</block></if><else>else<block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>lsmPosixOsMSize</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type> <name>m</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>m</name><operator>-</operator><name>BLOCK_HDR_SIZE</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BLOCK_HDR_SIZE</name></cpp:undef>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_MUTEX_PTHREADS</name></cpp:ifdef> 
<comment type="block" format="doxygen">/*************************************************************************
** Mutex methods for pthreads based systems.  If LSM_MUTEX_PTHREADS is
** missing then a no-op implementation of mutexes found in lsm_mutex.c
** will be used instead.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>PthreadMutex</name></name></type> <name>PthreadMutex</name>;</typedef>
<struct>struct <name>PthreadMutex</name> <block>{
  <decl_stmt><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>mutex</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>owner</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>LSM_PTHREAD_STATIC_MUTEX</name></cpp:macro> <cpp:value>{ 0, PTHREAD_MUTEX_INITIALIZER, 0 }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>LSM_PTHREAD_STATIC_MUTEX</name></cpp:macro> <cpp:value>{ 0, PTHREAD_MUTEX_INITIALIZER }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexStatic</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iMutex</name></decl></parameter>,
  <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStatic</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>PthreadMutex</name></type> <name><name>sMutex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><name>LSM_PTHREAD_STATIC_MUTEX</name></expr>,
    <expr><name>LSM_PTHREAD_STATIC_MUTEX</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iMutex</name><operator>==</operator><name>LSM_MUTEX_GLOBAL</name> <operator>||</operator> <name>iMutex</name><operator>==</operator><name>LSM_MUTEX_HEAP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>LSM_MUTEX_GLOBAL</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>LSM_MUTEX_HEAP</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppStatic</name> <operator>=</operator> <operator>(</operator><name>lsm_mutex</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sMutex</name><index>[<expr><name>iMutex</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexNew</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PthreadMutex</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>           <comment type="block">/* Pointer to new mutex */</comment>
  <decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>attr</name></decl>;</decl_stmt>       <comment type="block">/* Attributes object */</comment>

  <expr_stmt><expr><name>pMutex</name> <operator>=</operator> <operator>(</operator><name>PthreadMutex</name> <operator>*</operator><operator>)</operator><call><name>lsmMallocZero</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PthreadMutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pMutex</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pMutex</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_settype</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>PTHREAD_MUTEX_RECURSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppNew</name> <operator>=</operator> <operator>(</operator><name>lsm_mutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmPosixOsMutexDel</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PthreadMutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>PthreadMutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmPosixOsMutexEnter</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PthreadMutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>PthreadMutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexTry</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>PthreadMutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>PthreadMutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>pthread_mutex_trylock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>ret</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <call><name>pthread_self</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmPosixOsMutexLeave</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PthreadMutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>PthreadMutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexHeld</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PthreadMutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>PthreadMutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>pMutex</name></expr> ?</condition><then> <expr><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexNotHeld</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>PthreadMutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>PthreadMutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>pMutex</name></expr> ?</condition><then> <expr><operator>!</operator><call><name>pthread_equal</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><call><name>pthread_self</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
** End of pthreads mutex implementation.
*************************************************************************/</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block" format="doxygen">/*************************************************************************
** Noop mutex implementation
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>NoopMutex</name></name></type> <name>NoopMutex</name>;</typedef>
<struct>struct <name>NoopMutex</name> <block>{
  <decl_stmt><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>                  <comment type="block">/* Environment handle (for xFree()) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bHeld</name></decl>;</decl_stmt>                      <comment type="block">/* True if mutex is held */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bStatic</name></decl>;</decl_stmt>                    <comment type="block">/* True for a static mutex */</comment>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>NoopMutex</name></type> <name><name>aStaticNoopMutex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexStatic</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iMutex</name></decl></parameter>,
  <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStatic</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iMutex</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>iMutex</name><operator>&lt;=</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>array_size</name><argument_list>(<argument><expr><name>aStaticNoopMutex</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppStatic</name> <operator>=</operator> <operator>(</operator><name>lsm_mutex</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>aStaticNoopMutex</name><index>[<expr><name>iMutex</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexNew</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><call><name>lsmMallocZero</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NoopMutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppNew</name> <operator>=</operator> <operator>(</operator><name>lsm_mutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>LSM_OK</name></expr> </then><else>: <expr><name>LSM_NOMEM_BKPT</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmPosixOsMutexDel</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list>  <block>{<block_content> 
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bStatic</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmPosixOsMutexEnter</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexTry</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmPosixOsMutexLeave</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexHeld</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmPosixOsMutexNotHeld</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block" format="doxygen">/***************************************************************************/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* else LSM_MUTEX_NONE */</comment>

<comment type="block">/* Without LSM_DEBUG, the MutexHeld tests are never called */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>lsmPosixOsMutexHeld</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>lsmPosixOsMutexNotHeld</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>lsm_env</name> <modifier>*</modifier></type><name>lsm_default_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>lsm_env</name></type> <name>posix_env</name> <init>= <expr><block>{
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lsm_env</name></expr></argument>)</argument_list></sizeof></expr>,         <comment type="block">/* nByte */</comment>
    <expr><literal type="number">1</literal></expr>,                       <comment type="block">/* iVersion */</comment>
    <comment type="block" format="doxygen">/***** file i/o ******************/</comment>
    <expr><literal type="number">0</literal></expr>,                       <comment type="block">/* pVfsCtx */</comment>
    <expr><name>lsmPosixOsFullpath</name></expr>,      <comment type="block">/* xFullpath */</comment>
    <expr><name>lsmPosixOsOpen</name></expr>,          <comment type="block">/* xOpen */</comment>
    <expr><name>lsmPosixOsRead</name></expr>,          <comment type="block">/* xRead */</comment>
    <expr><name>lsmPosixOsWrite</name></expr>,         <comment type="block">/* xWrite */</comment>
    <expr><name>lsmPosixOsTruncate</name></expr>,      <comment type="block">/* xTruncate */</comment>
    <expr><name>lsmPosixOsSync</name></expr>,          <comment type="block">/* xSync */</comment>
    <expr><name>lsmPosixOsSectorSize</name></expr>,    <comment type="block">/* xSectorSize */</comment>
    <expr><name>lsmPosixOsRemap</name></expr>,         <comment type="block">/* xRemap */</comment>
    <expr><name>lsmPosixOsFileid</name></expr>,        <comment type="block">/* xFileid */</comment>
    <expr><name>lsmPosixOsClose</name></expr>,         <comment type="block">/* xClose */</comment>
    <expr><name>lsmPosixOsUnlink</name></expr>,        <comment type="block">/* xUnlink */</comment>
    <expr><name>lsmPosixOsLock</name></expr>,          <comment type="block">/* xLock */</comment>
    <expr><name>lsmPosixOsTestLock</name></expr>,      <comment type="block">/* xTestLock */</comment>
    <expr><name>lsmPosixOsShmMap</name></expr>,        <comment type="block">/* xShmMap */</comment>
    <expr><name>lsmPosixOsShmBarrier</name></expr>,    <comment type="block">/* xShmBarrier */</comment>
    <expr><name>lsmPosixOsShmUnmap</name></expr>,      <comment type="block">/* xShmUnmap */</comment>
    <comment type="block" format="doxygen">/***** memory allocation *********/</comment>
    <expr><literal type="number">0</literal></expr>,                       <comment type="block">/* pMemCtx */</comment>
    <expr><name>lsmPosixOsMalloc</name></expr>,        <comment type="block">/* xMalloc */</comment>
    <expr><name>lsmPosixOsRealloc</name></expr>,       <comment type="block">/* xRealloc */</comment>
    <expr><name>lsmPosixOsFree</name></expr>,          <comment type="block">/* xFree */</comment>
    <expr><name>lsmPosixOsMSize</name></expr>,         <comment type="block">/* xSize */</comment>
    <comment type="block" format="doxygen">/***** mutexes *********************/</comment>
    <expr><literal type="number">0</literal></expr>,                       <comment type="block">/* pMutexCtx */</comment>
    <expr><name>lsmPosixOsMutexStatic</name></expr>,   <comment type="block">/* xMutexStatic */</comment>
    <expr><name>lsmPosixOsMutexNew</name></expr>,      <comment type="block">/* xMutexNew */</comment>
    <expr><name>lsmPosixOsMutexDel</name></expr>,      <comment type="block">/* xMutexDel */</comment>
    <expr><name>lsmPosixOsMutexEnter</name></expr>,    <comment type="block">/* xMutexEnter */</comment>
    <expr><name>lsmPosixOsMutexTry</name></expr>,      <comment type="block">/* xMutexTry */</comment>
    <expr><name>lsmPosixOsMutexLeave</name></expr>,    <comment type="block">/* xMutexLeave */</comment>
    <expr><name>lsmPosixOsMutexHeld</name></expr>,     <comment type="block">/* xMutexHeld */</comment>
    <expr><name>lsmPosixOsMutexNotHeld</name></expr>,  <comment type="block">/* xMutexNotHeld */</comment>
    <comment type="block" format="doxygen">/***** other *********************/</comment>
    <expr><name>lsmPosixOsSleep</name></expr>,         <comment type="block">/* xSleep */</comment>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>&amp;</operator><name>posix_env</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
