<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest_func.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>


<function><type><name>int</name></type> <name>do_work</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>Option</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aOpt</name> <index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"-nmerge"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"-nkb"</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>
  }</block></expr></init></decl>;</struct>

  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMerge</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nKB</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>usage</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>zDb</name> <operator>=</operator> <name><name>azArg</name><index>[<expr><name>nArg</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>nArg</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iSel</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testArgSelect</name><argument_list>(<argument><expr><name>aOpt</name></expr></argument>, <argument><expr><literal type="string">"option"</literal></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    <switch>switch<condition>( <expr><name>iSel</name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><operator>(</operator><name>nArg</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>usage</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nMerge</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><literal type="number">1</literal></expr>:</case>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>i</name><operator>==</operator><operator>(</operator><name>nArg</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>usage</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>nKB</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></for>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"lsm_open(): rc=%d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_open</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"lsm_open(): rc=%d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>LSM_CONFIG_BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>LSM_CONFIG_AUTOCHECKPOINT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_work</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>nMerge</name></expr></argument>, <argument><expr><name>nKB</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"lsm_work(): rc=%d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_checkpoint</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>

 <label><name>usage</name>:</label>
  <expr_stmt><expr><call><name>testPrintUsage</name><argument_list>(<argument><expr><literal type="string">"?-optimize? ?-n N? DATABASE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
**   lsmtest show ?-config LSM-CONFIG? DATABASE ?COMMAND ?PGNO??
*/</comment>
<function><type><name>int</name></type> <name>do_show</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>eOpt</name> <init>= <expr><name>LSM_INFO_DB_STRUCTURE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iPg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bConfig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zConfig</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

  <struct>struct <name>Option</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bConfig</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eOpt</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aOpt</name> <index>[]</index></name> <init>= <expr><block>{ 
    <expr><block>{ <expr><literal type="string">"array"</literal></expr>,       <expr><literal type="number">0</literal></expr>, <expr><name>LSM_INFO_ARRAY_STRUCTURE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"array-pages"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>LSM_INFO_ARRAY_PAGES</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"blocksize"</literal></expr>,   <expr><literal type="number">1</literal></expr>, <expr><name>LSM_CONFIG_BLOCK_SIZE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"pagesize"</literal></expr>,    <expr><literal type="number">1</literal></expr>, <expr><name>LSM_CONFIG_PAGE_SIZE</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"freelist"</literal></expr>,    <expr><literal type="number">0</literal></expr>, <expr><name>LSM_INFO_FREELIST</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"page-ascii"</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><name>LSM_INFO_PAGE_ASCII_DUMP</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"page-hex"</literal></expr>,    <expr><literal type="number">0</literal></expr>, <expr><name>LSM_INFO_PAGE_HEX_DUMP</name></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr> 
  }</block></expr></init></decl>;</struct>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                    <comment type="block">/* Index of DATABASE in azArg[] */</comment>

  <comment type="block">/* Check if there is a "-config" option: */</comment>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>&gt;</operator><literal type="number">1</literal> 
   <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-config"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>
  )</condition><block>{<block_content>
    <expr_stmt><expr><name>zConfig</name> <operator>=</operator> <name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>iDb</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&lt;</operator><operator>(</operator><name>iDb</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>usage</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&gt;</operator><operator>(</operator><name>iDb</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testArgSelect</name><argument_list>(<argument><expr><name>aOpt</name></expr></argument>, <argument><expr><literal type="string">"option"</literal></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><name>iDb</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>eOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>bConfig</name> <operator>=</operator> <name><name>aOpt</name><index>[<expr><name>eOpt</name></expr>]</index></name><operator>.</operator><name>bConfig</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>eOpt</name> <operator>=</operator> <name><name>aOpt</name><index>[<expr><name>eOpt</name></expr>]</index></name><operator>.</operator><name>eOpt</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>(</operator><name>bConfig</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>eOpt</name><operator>==</operator><name>LSM_INFO_FREELIST</name><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>bConfig</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>eOpt</name><operator>==</operator><name>LSM_CONFIG_BLOCK_SIZE</name><operator>)</operator>
     <operator>||</operator> <operator>(</operator><name>bConfig</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>eOpt</name><operator>==</operator><name>LSM_CONFIG_PAGE_SIZE</name><operator>)</operator></expr>
    )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>!=</operator><operator>(</operator><name>iDb</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>usage</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>!=</operator><operator>(</operator><name>iDb</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>usage</name>;</goto></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>iPg</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>azArg</name><index>[<expr><name>iDb</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zDb</name> <operator>=</operator> <name><name>azArg</name><index>[<expr><name>iDb</name></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_new</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdb_lsm_configure</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"lsm_new(): rc=%d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_open</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"lsm_open(): rc=%d\n"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>bConfig</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <switch>switch<condition>( <expr><name>eOpt</name></expr> )</condition><block>{<block_content>
        <case>case <expr><name>LSM_INFO_DB_STRUCTURE</name></expr>:</case>
        <case>case <expr><name>LSM_INFO_FREELIST</name></expr>:</case>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_info</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>eOpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>LSM_INFO_ARRAY_STRUCTURE</name></expr>:</case>
        <case>case <expr><name>LSM_INFO_ARRAY_PAGES</name></expr>:</case>
        <case>case <expr><name>LSM_INFO_PAGE_ASCII_DUMP</name></expr>:</case>
        <case>case <expr><name>LSM_INFO_PAGE_HEX_DUMP</name></expr>:</case>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsm_info</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>eOpt</name></expr></argument>, <argument><expr><name>iPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><literal type="string">"no chance"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></switch>

      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>z</name></expr> ?</condition><then> <expr><name>z</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>lsm_free</name><argument_list>(<argument><expr><call><name>lsm_get_env</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iRes</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>eOpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>iRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>

 <label><name>usage</name>:</label>
  <expr_stmt><expr><call><name>testPrintUsage</name><argument_list>(<argument><expr><literal type="string">"DATABASE ?array|page-ascii|page-hex PGNO?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
