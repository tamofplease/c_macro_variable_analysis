<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest4.c">
<comment type="block">/*
** This file contains test cases involving multiple database clients.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>

<comment type="block">/*
** The following code implements test cases "mc1.*".
**
** This test case uses one writer and $nReader readers. All connections
** are driven by a single thread. All connections are opened at the start
** of the test and remain open until the test is finished.
**
** The test consists of $nStep steps. Each step the following is performed:
**
**   1. The writer inserts $nWriteStep records into the db.
**
**   2. The writer checks that the contents of the db are as expected.
**
**   3. Each reader that currently has an open read transaction also checks
**      that the contents of the db are as expected (according to the snapshot
**      the read transaction is reading - see below).
**
** After step 1, reader 1 opens a read transaction. After step 2, reader
** 2 opens a read transaction, and so on. At step ($nReader+1), reader 1
** closes the current read transaction and opens a new one. And so on.
** The result is that at step N (for N &gt; $nReader), there exists a reader
** with an open read transaction reading the snapshot committed following
** steps (N-$nReader-1) to N. 
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Mctest</name></name></type> <name>Mctest</name>;</typedef>
<struct>struct <name>Mctest</name> <block>{
  <decl_stmt><decl><type><name>DatasourceDefn</name></type> <name>defn</name></decl>;</decl_stmt>            <comment type="block">/* Datasource to use */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nStep</name></decl>;</decl_stmt>                      <comment type="block">/* Total number of steps in test */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nWriteStep</name></decl>;</decl_stmt>                 <comment type="block">/* Number of rows to insert each step */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nReader</name></decl>;</decl_stmt>                    <comment type="block">/* Number of read connections */</comment>
}</block>;</struct>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_mc_test</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system to test */</comment>
  <parameter><decl><type><name>Mctest</name> <modifier>*</modifier></type><name>pTest</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: return code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nDomain</name> <init>= <expr><name><name>pTest</name><operator>-&gt;</operator><name>nStep</name></name> <operator>*</operator> <name><name>pTest</name><operator>-&gt;</operator><name>nWriteStep</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>              <comment type="block">/* Source of data */</comment>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>                    <comment type="block">/* First database connection (writer) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iReader</name></decl>;</decl_stmt>                    <comment type="block">/* Used to iterate through aReader */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iStep</name></decl>;</decl_stmt>                      <comment type="block">/* Current step in test */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iDot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                   <comment type="block">/* Current step in test */</comment>

  <comment type="block">/* Array of reader connections */</comment>
  <struct>struct <name>Reader</name> <block>{
    <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>                  <comment type="block">/* Connection handle */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iLast</name></decl>;</decl_stmt>                    <comment type="block">/* Current snapshot contains keys 0..iLast */</comment>
  }</block> <decl><modifier>*</modifier><name>aReader</name></decl>;</struct>

  <comment type="block">/* Create a data source */</comment>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTest</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Open the writer connection */</comment>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>testOpen</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate aReader */</comment>
  <expr_stmt><expr><name>aReader</name> <operator>=</operator> <operator>(</operator>struct <name>Reader</name> <operator>*</operator><operator>)</operator><call><name>testMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>aReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pTest</name><operator>-&gt;</operator><name>nReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>iReader</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iReader</name><operator>&lt;</operator><name><name>pTest</name><operator>-&gt;</operator><name>nReader</name></name></expr>;</condition> <incr><expr><name>iReader</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>aReader</name><index>[<expr><name>iReader</name></expr>]</index></name><operator>.</operator><name>pDb</name> <operator>=</operator> <call><name>testOpen</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for<control>(<init><expr><name>iStep</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iStep</name><operator>&lt;</operator><name><name>pTest</name><operator>-&gt;</operator><name>nStep</name></name></expr>;</condition> <incr><expr><name>iStep</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iLast</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iBegin</name></decl>;</decl_stmt>                   <comment type="block">/* Start read trans using aReader[iBegin] */</comment>

    <comment type="block">/* Insert nWriteStep more records into the database */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iFirst</name> <init>= <expr><name>iStep</name><operator>*</operator><name><name>pTest</name><operator>-&gt;</operator><name>nWriteStep</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iFirst</name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>nWriteStep</name></name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check that the db is Ok according to the writer */</comment>
    <expr_stmt><expr><name>iLast</name> <operator>=</operator> <operator>(</operator><name>iStep</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>pTest</name><operator>-&gt;</operator><name>nWriteStep</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testDbContents</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nDomain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iLast</name></expr></argument>, <argument><expr><name>iLast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Have reader (iStep % nReader) open a read transaction here. */</comment>
    <expr_stmt><expr><name>iBegin</name> <operator>=</operator> <operator>(</operator><name>iStep</name> <operator>%</operator> <name><name>pTest</name><operator>-&gt;</operator><name>nReader</name></name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iBegin</name><operator>&lt;</operator><name>iStep</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdb_commit</name><argument_list>(<argument><expr><name><name>aReader</name><index>[<expr><name>iBegin</name></expr>]</index></name><operator>.</operator><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>tdb_begin</name><argument_list>(<argument><expr><name><name>aReader</name><index>[<expr><name>iBegin</name></expr>]</index></name><operator>.</operator><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>aReader</name><index>[<expr><name>iBegin</name></expr>]</index></name><operator>.</operator><name>iLast</name> <operator>=</operator> <name>iLast</name></expr>;</expr_stmt>

    <comment type="block">/* Check that the db is Ok for each open reader */</comment>
    <for>for<control>(<init><expr><name>iReader</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iReader</name><operator>&lt;</operator><name><name>pTest</name><operator>-&gt;</operator><name>nReader</name></name> <operator>&amp;&amp;</operator> <name><name>aReader</name><index>[<expr><name>iReader</name></expr>]</index></name><operator>.</operator><name>iLast</name></expr>;</condition> <incr><expr><name>iReader</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>iLast</name> <operator>=</operator> <name><name>aReader</name><index>[<expr><name>iReader</name></expr>]</index></name><operator>.</operator><name>iLast</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testDbContents</name><argument_list>(
          <argument><expr><name><name>aReader</name><index>[<expr><name>iReader</name></expr>]</index></name><operator>.</operator><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nDomain</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>iLast</name></expr></argument>, <argument><expr><name>iLast</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Report progress */</comment>
    <expr_stmt><expr><call><name>testCaseProgress</name><argument_list>(<argument><expr><name>iStep</name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>nStep</name></name></expr></argument>, <argument><expr><call><name>testCaseNDot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Close all readers */</comment>
  <for>for<control>(<init><expr><name>iReader</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iReader</name><operator>&lt;</operator><name><name>pTest</name><operator>-&gt;</operator><name>nReader</name></name></expr>;</condition> <incr><expr><name>iReader</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aReader</name><index>[<expr><name>iReader</name></expr>]</index></name><operator>.</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>aReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Close the writer-connection and free the datasource */</comment>
  <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>test_mc</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system name */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>,           <comment type="block">/* Run test cases that match this pattern */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Mctest</name></type> <name><name>aTest</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><block>{ <expr><name>TEST_DATASOURCE_RANDOM</name></expr>, <expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>, <expr><literal type="number">100</literal></expr>,<expr><literal type="number">100</literal></expr> }</block></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>testCaseBegin</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="string">"mc1.%s.%d"</literal></expr></argument>, <argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>do_mc_test</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>(<argument><expr><operator>*</operator><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
