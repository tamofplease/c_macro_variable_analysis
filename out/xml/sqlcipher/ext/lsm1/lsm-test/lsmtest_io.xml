<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest_io.c">
<comment type="block">/*
** SUMMARY
**
**   This file implements the 'io' subcommand of the test program. It is used
**   for testing the performance of various combinations of write() and fsync()
**   system calls. All operations occur on a single file, which may or may not
**   exist when a test is started.
**
**   A test consists of a series of commands. Each command is either a write
**   or an fsync. A write is specified as "&lt;amount&gt;@&lt;offset&gt;", where &lt;amount&gt;
**   is the amount of data written, and &lt;offset&gt; is the offset of the file
**   to write to. An &lt;amount&gt; or an &lt;offset&gt; is specified as an integer number
**   of bytes. Or, if postfixed with a "K", "M" or "G", an integer number of
**   KB, MB or GB, respectively. An fsync is simply "S". All commands are
**   case-insensitive.
**
**   Example test program:
**
**        2M@6M 1492K@4M S 4096@4K S
**
**   This program writes 2 MB of data starting at the offset 6MB offset of
**   the file, followed by 1492 KB of data written at the 4MB offset of the
**   file, followed by a call to fsync(), a write of 4KB of data at byte
**   offset 4096, and finally another call to fsync().
**
**   Commands may either be specified on the command line (one command per
**   command line argument) or read from stdin. Commands read from stdin
**   must be separated by white-space.
**
** COMMAND LINE INVOCATION
**
**   The sub-command implemented in this file must be invoked with at least
**   two arguments - the path to the file to write to and the page-size to
**   use for writing. If there are more than two arguments, then each
**   subsequent argument is assumed to be a test command. If there are exactly
**   two arguments, the test commands are read from stdin.
**
**   A write command does not result in a single call to system call write().
**   Instead, the specified region is written sequentially using one or
**   more calls to write(), each of which writes not more than one page of
**   data. For example, if the page-size is 4KB, the command "2M@6M" results
**   in 512 calls to write(), each of which writes 4KB of data.
**
** EXAMPLES
**
**   Two equivalent examples:
**
**     $ lsmtest io testfile.db 4KB 2M@6M 1492K@4M S 4096@4K S
**     3544K written in 129 ms
**     $ echo "2M@6M 1492K@4M S 4096@4K S" | lsmtest io testfile.db 4096 
**     3544K written in 127 ms
**
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>IoContext</name></name></type> <name>IoContext</name>;</typedef>

<struct>struct <name>IoContext</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** As isspace(3)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>safe_isspace</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&amp;</operator><literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** As isdigit(3)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>safe_isdigit</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>c</name><operator>&amp;</operator><literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>i64</name></type> <name>getNextSize</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zIn</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzOut</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>i64</name></type> <name>iRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>zIn</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>safe_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* Process digits */</comment>
    <while>while<condition>( <expr><call><name>safe_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iRet</name> <operator>=</operator> <name>iRet</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>z</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="block">/* Process suffix */</comment>
    <switch>switch<condition>( <expr><operator>*</operator><name>z</name></expr> )</condition><block>{<block_content>
      <case>case <expr><literal type="char">'k'</literal></expr>:</case> <case>case <expr><literal type="char">'K'</literal></expr>:</case>
        <expr_stmt><expr><name>iRet</name> <operator>=</operator> <name>iRet</name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'m'</literal></expr>:</case> <case>case <expr><literal type="char">'M'</literal></expr>:</case>
        <expr_stmt><expr><name>iRet</name> <operator>=</operator> <name>iRet</name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><literal type="char">'g'</literal></expr>:</case> <case>case <expr><literal type="char">'G'</literal></expr>:</case>
        <expr_stmt><expr><name>iRet</name> <operator>=</operator> <name>iRet</name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if<condition>( <expr><name>pzOut</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pzOut</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>iRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>doOneCmd</name><parameter_list>(
  <parameter><decl><type><name>IoContext</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>aData</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>pgsz</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zCmd</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>zCmd</name></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><call><name>safe_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>z</name></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pzOut</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pzOut</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>c</name><operator>==</operator><literal type="char">'s'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'S'</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>pzOut</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pzOut</name> <operator>=</operator> <operator>&amp;</operator><name><name>z</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><call><name>fdatasync</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>safe_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>i64</name></type> <name>iOff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nPg</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iPg</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nByte</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>getNextSize</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>||</operator> <operator>*</operator><name>z</name><operator>!=</operator><literal type="char">'@'</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>bad_command</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>=</operator> <call><name>getNextSize</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name> <operator>||</operator> <operator>(</operator><call><name>safe_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>z</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>z</name><operator>!=</operator><literal type="char">'\0'</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>bad_command</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>pzOut</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pzOut</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>nPg</name> <operator>=</operator> <operator>(</operator><name>nByte</name><operator>+</operator><name>pgsz</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>pgsz</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>iOff</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iPg</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iPg</name><operator>&lt;</operator><name>nPg</name></expr>;</condition> <incr><expr><name>iPg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>pCtx</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pCtx</name><operator>-&gt;</operator><name>nWrite</name></name> <operator>+=</operator> <name>nByte</name><operator>/</operator><literal type="number">1024</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

 <label><name>bad_command</name>:</label>
  <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"unrecognized command: %s"</literal></expr></argument>, <argument><expr><name>zCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>readStdin</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nRead</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>nAlloc</name> <operator>=</operator> <name>nAlloc</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>zOut</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>nAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nRead</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zOut</name><index>[<expr><name>nOut</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>nAlloc</name><operator>-</operator><name>nOut</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>nRead</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>nOut</name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zOut</name><index>[<expr><name>nOut</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>pzOut</name> <operator>=</operator> <name>zOut</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>do_io</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nArg</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>azArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>IoContext</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pgsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zPgsz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zStdin</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>z</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aData</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IoContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>&lt;</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintUsage</name><argument_list>(<argument><expr><literal type="string">"FILE PGSZ ?CMD-1 ...?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zFile</name> <operator>=</operator> <name><name>azArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>zPgsz</name> <operator>=</operator> <name><name>azArg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pgsz</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>getNextSize</name><argument_list>(<argument><expr><name>zPgsz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pgsz</name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"Ridiculous page size: %d"</literal></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>aData</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aData</name></expr></argument>, <argument><expr><literal type="number">0x77</literal></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>ctx</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>O_RDWR</name><operator>|</operator><name>O_CREAT</name><operator>|</operator><name>_O_BINARY</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>.</operator><name>fd</name></name><operator>&lt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"open: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>nArg</name><operator>==</operator><literal type="number">2</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>readStdin</name><argument_list>(<argument><expr><operator>&amp;</operator><name>zStdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testTimeInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>zStdin</name></expr>;</expr_stmt>
    <while>while<condition>( <expr><operator>*</operator><name>z</name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doOneCmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>testTimeInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nArg</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>doOneCmd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>aData</name></expr></argument>, <argument><expr><name>pgsz</name></expr></argument>, <argument><expr><name><name>azArg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%dK written in %d ms\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>.</operator><name>nWrite</name></name></expr></argument>, <argument><expr><call><name>testTimeGet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>zStdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
