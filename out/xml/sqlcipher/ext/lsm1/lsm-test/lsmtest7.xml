<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest7.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>


<comment type="block">/*
** Test that the rules for when lsm_csr_next() and lsm_csr_prev() are
** enforced. Specifically:
**
**   * Both functions always return LSM_MISUSE if the cursor is at EOF
**     when they are called.
**
**   * lsm_csr_next() may only be used after lsm_csr_seek(LSM_SEEK_GE) or 
**     lsm_csr_first(). 
**
**   * lsm_csr_prev() may only be used after lsm_csr_seek(LSM_SEEK_LE) or 
**     lsm_csr_last().
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_test_api1_lsm</name><parameter_list>(<parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_cursor</name> <modifier>*</modifier></type><name>pCsr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_cursor</name> <modifier>*</modifier></type><name>pCsr2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_open</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_seek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="string">"jjj"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>LSM_SEEK_GE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_seek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="string">"jjj"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>LSM_SEEK_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_seek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="string">"jjj"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>LSM_SEEK_LEFAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_key</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_open</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCsr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_seek</name><argument_list>(<argument><expr><name>pCsr2</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>LSM_SEEK_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>lsm_csr_valid</name><argument_list>(<argument><expr><name>pCsr2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>lsm_csr_close</name><argument_list>(<argument><expr><name>pCsr2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_first</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_last</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_first</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><call><name>lsm_csr_valid</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_last</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><call><name>lsm_csr_valid</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_prev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_OK</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>lsm_csr_next</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>LSM_MISUSE</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>lsm_csr_close</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_test_api1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><call><name>testCaseBegin</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="string">"api1.lsm"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>DatasourceDefn</name></type> <name>defn</name> <init>= <expr><block>{ <expr><name>TEST_DATASOURCE_RANDOM</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">250</literal></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>testOpen</name><argument_list>(<argument><expr><literal type="string">"lsm_lomem"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>defn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>do_test_api1_lsm</name><argument_list>(<argument><expr><call><name>tdb_lsm</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>(<argument><expr><operator>*</operator><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>lsm_db</name> <modifier>*</modifier></type><name>newLsmConnection</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nPgsz</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nBlksz</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><name>nPgsz</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>nBlksz</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <call><name>lsm_new</name><argument_list>(<argument><expr><call><name>tdb_lsm_env</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>n1</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>LSM_CONFIG_PAGE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>n2</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>LSM_CONFIG_BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <call><name>lsm_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>db</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>testPagesize</name><parameter_list>(<parameter><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPgsz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBlksz</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>LSM_CONFIG_PAGE_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>LSM_CONFIG_BLOCK_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>n1</name></expr></argument>, <argument><expr><name>nPgsz</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><name>n2</name></expr></argument>, <argument><expr><name>nBlksz</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Test case "api2" tests that the default page and block sizes of a 
** database may only be modified before lsm_open() is called. And that
** after lsm_open() is called lsm_config() may be used to read the 
** actual page and block size of the db.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>do_test_api2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>testCaseBegin</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="string">"api2.lsm"</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>db1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>db2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>testDeleteLsmdb</name><argument_list>(<argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db1</name> <operator>=</operator> <call><name>newLsmConnection</name><argument_list>(<argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPagesize</name><argument_list>(<argument><expr><name>db1</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db2</name> <operator>=</operator> <call><name>newLsmConnection</name><argument_list>(<argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPagesize</name><argument_list>(<argument><expr><name>db2</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>db1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testDeleteLsmdb</name><argument_list>(<argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db1</name> <operator>=</operator> <call><name>newLsmConnection</name><argument_list>(<argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPagesize</name><argument_list>(<argument><expr><name>db1</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db2</name> <operator>=</operator> <call><name>newLsmConnection</name><argument_list>(<argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPagesize</name><argument_list>(<argument><expr><name>db2</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>db1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testDeleteLsmdb</name><argument_list>(<argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db1</name> <operator>=</operator> <call><name>newLsmConnection</name><argument_list>(<argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPagesize</name><argument_list>(<argument><expr><name>db1</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db2</name> <operator>=</operator> <call><name>newLsmConnection</name><argument_list>(<argument><expr><literal type="string">"testdb.lsm"</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">64</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testPagesize</name><argument_list>(<argument><expr><name>db2</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>db1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsm_close</name><argument_list>(<argument><expr><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>(<argument><expr><operator>*</operator><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_api</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>,           <comment type="block">/* Run test cases that match this pattern */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>do_test_api1</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>do_test_api2</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
