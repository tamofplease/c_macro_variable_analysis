<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest1.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_SEQUENTIAL</name></cpp:macro> <cpp:value>TEST_DATASOURCE_SEQUENCE</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DATA_RANDOM</name></cpp:macro>     <cpp:value>TEST_DATASOURCE_RANDOM</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>Datatest1</name></name></type> <name>Datatest1</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>Datatest2</name></name></type> <name>Datatest2</name>;</typedef>

<comment type="block">/*
** An instance of the following structure contains parameters used to
** customize the test function in this file. Test procedure:
**
**   1. Create a data-source based on the "datasource definition" vars.
**
**   2. Insert nRow key value pairs into the database.
**
**   3. Delete all keys from the database. Deletes are done in the same 
**      order as the inserts.
**
** During steps 2 and 3 above, after each Datatest1.nVerify inserts or
** deletes, the following:
**
**   a. Run Datasource.nTest key lookups and check the results are as expected.
**
**   b. If Datasource.bTestScan is true, run a handful (8) of range
**      queries (scanning forwards and backwards). Check that the results
**      are as expected.
**
**   c. Close and reopen the database. Then run (a) and (b) again.
*/</comment>
<struct>struct <name>Datatest1</name> <block>{
  <comment type="block">/* Datasource definition */</comment>
  <decl_stmt><decl><type><name>DatasourceDefn</name></type> <name>defn</name></decl>;</decl_stmt>

  <comment type="block">/* Test procedure parameters */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRow</name></decl>;</decl_stmt>                       <comment type="block">/* Number of rows to insert then delete */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nVerify</name></decl>;</decl_stmt>                    <comment type="block">/* How often to verify the db contents */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nTest</name></decl>;</decl_stmt>                      <comment type="block">/* Number of keys to test (0==all) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bTestScan</name></decl>;</decl_stmt>                  <comment type="block">/* True to do scan tests */</comment>
}</block>;</struct>

<comment type="block">/*
** An instance of the following data structure is used to describe the
** second type of test case in this file. The chief difference between 
** these tests and those described by Datatest1 is that these tests also
** experiment with range-delete operations. Tests proceed as follows:
**
**     1. Open the datasource described by Datatest2.defn. 
**
**     2. Open a connection on an empty database.
**
**     3. Do this Datatest2.nIter times:
**
**        a) Insert Datatest2.nWrite key-value pairs from the datasource.
**
**        b) Select two pseudo-random keys and use them as the start
**           and end points of a range-delete operation.
**
**        c) Verify that the contents of the database are as expected (see
**           below for details).
**
**        d) Close and then reopen the database handle.
**
**        e) Verify that the contents of the database are still as expected.
**
** The inserts and range deletes are run twice - once on the database being
** tested and once using a control system (sqlite3, kc etc. - something that 
** works). In order to verify that the contents of the db being tested are
** correct, the test runs a bunch of scans and lookups on both the test and
** control databases. If the results are the same, the test passes.
*/</comment>
<struct>struct <name>Datatest2</name> <block>{
  <decl_stmt><decl><type><name>DatasourceDefn</name></type> <name>defn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRange</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name></decl>;</decl_stmt>                     <comment type="block">/* Number of writes per iteration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nIter</name></decl>;</decl_stmt>                      <comment type="block">/* Total number of iterations to run */</comment>
}</block>;</struct>

<comment type="block">/*
** Generate a unique name for the test case pTest with database system
** zSystem.
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bRecover</name></decl></parameter>, <parameter><decl><type><name>Datatest1</name> <modifier>*</modifier></type><name>pTest</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zData</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>zData</name> <operator>=</operator> <call><name>testDatasourceName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTest</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"data.%s.%s.rec=%d.%d.%d"</literal></expr></argument>, 
      <argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><name>bRecover</name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>nVerify</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>testControlDb</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDb</name></decl></parameter>)</parameter_list><block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_KYOTOCABINET</name></cpp:ifdef>
  <return>return <expr><call><name>tdb_open</name><argument_list>(<argument><expr><literal type="string">"kyotocabinet"</literal></expr></argument>, <argument><expr><literal type="string">"tmp.db"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ppDb</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><call><name>tdb_open</name><argument_list>(<argument><expr><literal type="string">"sqlite3"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ppDb</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testDatasourceFetch</name><parameter_list>(
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iKey</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>           <comment type="block">/* Database key to query for */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>;</decl_stmt>           <comment type="block">/* Expected result of query */</comment>

  <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testFetch</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is called to test that the contents of database pDb
** are as expected. In this case, expected is defined as containing
** key-value pairs iFirst through iLast, inclusive, from data source 
** pData. In other words, a loop like the following could be used to
** construct a database with identical contents from scratch.
**
**   for(i=iFirst; i&lt;=iLast; i++){
**     testDatasourceEntry(pData, i, &amp;pKey, &amp;nKey, &amp;pVal, &amp;nVal);
**     // insert (pKey, nKey) -&gt; (pVal, nVal) into database
**   }
**
** The key domain consists of keys 0 to (nRow-1), inclusive, from
** data source pData. For both scan and lookup tests, keys are selected
** pseudo-randomly from within this set.
**
** This function runs nLookupTest lookup tests and nScanTest scan tests.
**
** A lookup test consists of selecting a key from the domain and querying
** pDb for it. The test fails if the presence of the key and, if present,
** the associated value do not match the expectations defined above.
**
** A scan test involves selecting a key from the domain and running
** the following queries:
**
**   1. Scan all keys equal to or greater than the key, in ascending order.
**   2. Scan all keys equal to or smaller than the key, in descending order.
**
** Additionally, if nLookupTest is greater than zero, the following are
** run once:
**
**   1. Scan all keys in the db, in ascending order.
**   2. Scan all keys in the db, in descending order.
**
** As you would assume, the test fails if the returned values do not match
** expectations.
*/</comment>
<function><type><name>void</name></type> <name>testDbContents</name><parameter_list>(
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database handle being tested */</comment>
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,              <comment type="block">/* pDb contains data from here */</comment>
  <parameter><decl><type><name>int</name></type> <name>nRow</name></decl></parameter>,                       <comment type="block">/* Size of key domain */</comment>
  <parameter><decl><type><name>int</name></type> <name>iFirst</name></decl></parameter>,                     <comment type="block">/* Index of first key from pData in pDb */</comment>
  <parameter><decl><type><name>int</name></type> <name>iLast</name></decl></parameter>,                      <comment type="block">/* Index of last key from pData in pDb */</comment>
  <parameter><decl><type><name>int</name></type> <name>nLookupTest</name></decl></parameter>,                <comment type="block">/* Number of lookup tests to run */</comment>
  <parameter><decl><type><name>int</name></type> <name>nScanTest</name></decl></parameter>,                  <comment type="block">/* Number of scan tests to run */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><operator>*</operator><name>pRc</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nScanTest</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* Open a control db (i.e. one that we assume works) */</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testControlDb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>iFirst</name></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name><operator>&lt;=</operator><name>iLast</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>         <comment type="block">/* Database key to insert */</comment>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>;</decl_stmt>         <comment type="block">/* Database value to insert */</comment>
      <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tdb_write</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iKey1</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iKey2</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey1</name></decl>;</decl_stmt>       <comment type="block">/* Start key */</comment>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey2</name></decl>;</decl_stmt>       <comment type="block">/* Final key */</comment>

      <expr_stmt><expr><name>iKey1</name> <operator>=</operator> <call><name>testPrngValue</name><argument_list>(<argument><expr><operator>(</operator><name>iFirst</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>iLast</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>%</operator> <name>nRow</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>iKey2</name> <operator>=</operator> <call><name>testPrngValue</name><argument_list>(<argument><expr><operator>(</operator><name>iLast</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>iFirst</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>%</operator> <name>nRow</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pKey1</name> <operator>=</operator> <call><name>testMalloc</name><argument_list>(<argument><expr><name>nKey1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>pDb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="block">/* Test some lookups. */</comment>
  <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name><operator>&lt;</operator><name>nLookupTest</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iKey</name></decl>;</decl_stmt>                     <comment type="block">/* Datasource key to test */</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>         <comment type="block">/* Database key to query for */</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>;</decl_stmt>         <comment type="block">/* Expected result of query */</comment>

    <if_stmt><if>if<condition>( <expr><name>nLookupTest</name><operator>&gt;=</operator><name>nRow</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>iKey</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>iKey</name> <operator>=</operator> <call><name>testPrngValue</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <operator>(</operator><name>iFirst</name><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>iLast</name><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>%</operator> <name>nRow</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iFirst</name><operator>&gt;</operator><name>iKey</name> <operator>||</operator> <name>iKey</name><operator>&gt;</operator><name>iLast</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>pVal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nVal</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>testFetch</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function should be called during long running test cases to output
** the progress dots (...) to stdout.
*/</comment>
<function><type><name>void</name></type> <name>testCaseProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nDot</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piDot</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iDot</name> <init>= <expr><operator>*</operator><name>piDot</name></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>iDot</name> <operator>&lt;</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>nDot</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>n</name><operator>*</operator><literal type="number">2</literal><operator>)</operator> <operator>)</operator></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iDot</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><operator>*</operator><name>piDot</name> <operator>=</operator> <name>iDot</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>testCaseNDot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><literal type="number">20</literal></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void printScanCb(
    void *pCtx, void *pKey, int nKey, void *pVal, int nVal
){
  printf("%s\n", (char *)pKey);
  fflush(stdout);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>testReopenRecover</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDb</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zLib</name> <init>= <expr><call><name>tdb_library_name</name><argument_list>(<argument><expr><operator>*</operator><name>ppDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDflt</name> <init>= <expr><call><name>tdb_default_db</name><argument_list>(<argument><expr><name>zLib</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>testCopyLsmdb</name><argument_list>(<argument><expr><name>zDflt</name></expr></argument>, <argument><expr><literal type="string">"bak.db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><name>ppDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testCopyLsmdb</name><argument_list>(<argument><expr><literal type="string">"bak.db"</literal></expr></argument>, <argument><expr><name>zDflt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <call><name>tdb_open</name><argument_list>(<argument><expr><name>zLib</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ppDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>doDataTest1</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system to test */</comment>
  <parameter><decl><type><name>int</name></type> <name>bRecover</name></decl></parameter>,
  <parameter><decl><type><name>Datatest1</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Structure containing test parameters */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iToggle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Start the test case, open a database and allocate the datasource. */</comment>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>testOpen</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>iDot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name></expr> )</condition><block>{<block_content>

    <comment type="block">/* Insert some data */</comment>
    <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nVerify</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nVerify</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>iToggle</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>testBegin</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="block">/* Check that the db content is correct. */</comment>
    <expr_stmt><expr><call><name>testDbContents</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bTestScan</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>iToggle</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>testCommit</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iToggle</name> <operator>=</operator> <operator>(</operator><name>iToggle</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>bRecover</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testReopenRecover</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>testReopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Check that the db content is still correct. */</comment>
    <expr_stmt><expr><call><name>testDbContents</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bTestScan</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the progress dots... */</comment>
    <expr_stmt><expr><call><name>testCaseProgress</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><call><name>testCaseNDot</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>iDot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name></expr> )</condition><block>{<block_content>

    <comment type="block">/* Delete some entries */</comment>
    <expr_stmt><expr><call><name>testDeleteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nVerify</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>nVerify</name></name></expr>;</expr_stmt>

    <comment type="block">/* Check that the db content is correct. */</comment>
    <expr_stmt><expr><call><name>testDbContents</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bTestScan</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Close and reopen the database. */</comment>
    <if_stmt><if>if<condition>( <expr><name>bRecover</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testReopenRecover</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>testReopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/* Check that the db content is still correct. */</comment>
    <expr_stmt><expr><call><name>testDbContents</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nTest</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bTestScan</name></name></expr></argument>,<argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the progress dots... */</comment>
    <expr_stmt><expr><call><name>testCaseProgress</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><call><name>testCaseNDot</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="block">/* Free the datasource, close the database and finish the test case. */</comment>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>test_data_1</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system name */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>,           <comment type="block">/* Run test cases that match this pattern */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datatest1</name></type> <name><name>aTest</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">500</literal></expr>,<expr><literal type="number">600</literal></expr>,   <expr><literal type="number">1000</literal></expr>,<expr><literal type="number">2000</literal></expr>}</block></expr>,     <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">100</literal></expr>,  <expr><literal type="number">10</literal></expr>,  <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">20</literal></expr>,<expr><literal type="number">25</literal></expr>,     <expr><literal type="number">100</literal></expr>,<expr><literal type="number">200</literal></expr>}</block></expr>,       <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">250</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,      <expr><literal type="number">100</literal></expr>,<expr><literal type="number">200</literal></expr>}</block></expr>,       <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">250</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,      <expr><literal type="number">10</literal></expr>,<expr><literal type="number">20</literal></expr>}</block></expr>,         <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">250</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">8</literal></expr>,<expr><literal type="number">10</literal></expr>,      <expr><literal type="number">1000</literal></expr>,<expr><literal type="number">2000</literal></expr>}</block></expr>,     <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">250</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">8</literal></expr>,<expr><literal type="number">100</literal></expr>,     <expr><literal type="number">10000</literal></expr>,<expr><literal type="number">20000</literal></expr>}</block></expr>,    <expr><literal type="number">100</literal></expr>,   <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">80</literal></expr>,<expr><literal type="number">100</literal></expr>,    <expr><literal type="number">10</literal></expr>,<expr><literal type="number">20</literal></expr>}</block></expr>,         <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">250</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">5000</literal></expr>,<expr><literal type="number">6000</literal></expr>, <expr><literal type="number">10</literal></expr>,<expr><literal type="number">20</literal></expr>}</block></expr>,          <expr><literal type="number">100</literal></expr>,   <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_SEQUENTIAL</name></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>,      <expr><literal type="number">10</literal></expr>,<expr><literal type="number">20</literal></expr>}</block></expr>,         <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">250</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_SEQUENTIAL</name></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>,      <expr><literal type="number">100</literal></expr>,<expr><literal type="number">200</literal></expr>}</block></expr>,       <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">250</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_SEQUENTIAL</name></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">10</literal></expr>,      <expr><literal type="number">1000</literal></expr>,<expr><literal type="number">2000</literal></expr>}</block></expr>,     <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">250</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_SEQUENTIAL</name></expr>, <expr><literal type="number">5</literal></expr>,<expr><literal type="number">100</literal></expr>,     <expr><literal type="number">10000</literal></expr>,<expr><literal type="number">20000</literal></expr>}</block></expr>,    <expr><literal type="number">100</literal></expr>,   <expr><literal type="number">25</literal></expr>,  <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,     <expr><literal type="number">100</literal></expr>,<expr><literal type="number">100</literal></expr>}</block></expr>,     <expr><literal type="number">100000</literal></expr>, <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">100</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_SEQUENTIAL</name></expr>, <expr><literal type="number">10</literal></expr>,<expr><literal type="number">10</literal></expr>,     <expr><literal type="number">100</literal></expr>,<expr><literal type="number">100</literal></expr>}</block></expr>,     <expr><literal type="number">100000</literal></expr>, <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">100</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bRecover</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>bRecover</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>bRecover</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>bRecover</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>bRecover</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><literal type="string">"lsm"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>pRc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><call><name>getName</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name>bRecover</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>testCaseBegin</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>doDataTest1</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name>bRecover</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testCompareDb</name><parameter_list>(
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iSeed</name></decl></parameter>,
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pControl</name></decl></parameter>,
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nCall</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>nCall</name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iKey1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iKey2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey1</name></decl>;</decl_stmt>       <comment type="block">/* Start key */</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey2</name></decl>;</decl_stmt>       <comment type="block">/* Final key */</comment>

    <expr_stmt><expr><name>iKey1</name> <operator>=</operator> <call><name>testPrngValue</name><argument_list>(<argument><expr><name>iSeed</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>nData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>iKey2</name> <operator>=</operator> <call><name>testPrngValue</name><argument_list>(<argument><expr><name>iSeed</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>%</operator> <name>nData</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pKey1</name> <operator>=</operator> <call><name>testMalloc</name><argument_list>(<argument><expr><name>nKey1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,         <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testScanCompare</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nData</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testFetchCompare</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doDataTest2</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system to test */</comment>
  <parameter><decl><type><name>int</name></type> <name>bRecover</name></decl></parameter>,
  <parameter><decl><type><name>Datatest2</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Structure containing test parameters */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pControl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Start the test case, open a database and allocate the datasource. */</comment>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>testOpen</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testControlDb</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>tdb_lsm</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name> <init>= <expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lsm_config</name><argument_list>(<argument><expr><call><name>tdb_lsm</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LSM_CONFIG_AUTOFLUSH</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nIter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nRange</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nIter</name></name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>nWrite</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRange</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nWrite</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>iKey</name> <init>= <expr><operator>(</operator><name>i</name><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>nWrite</name></name> <operator>+</operator> <name>ii</name><operator>)</operator> <operator>%</operator> <name><name>p</name><operator>-&gt;</operator><name>nRange</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>testWriteDatasource</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testWriteDatasource</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1000000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pKey1</name> <operator>=</operator> <call><name>testMallocCopy</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">2000000</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testDeleteRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testDeleteRange</name><argument_list>(<argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>testCompareDb</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nRange</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bRecover</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testReopenRecover</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>testReopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>testCompareDb</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nRange</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>pControl</name></expr></argument>, <argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Update the progress dots... */</comment>
    <expr_stmt><expr><call><name>testCaseProgress</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nIter</name></name></expr></argument>, <argument><expr><call><name>testCaseNDot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getName2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bRecover</name></decl></parameter>, <parameter><decl><type><name>Datatest2</name> <modifier>*</modifier></type><name>pTest</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zData</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>zData</name> <operator>=</operator> <call><name>testDatasourceName</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTest</name><operator>-&gt;</operator><name>defn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"data2.%s.%s.rec=%d.%d.%d.%d"</literal></expr></argument>, 
      <argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name>zData</name></expr></argument>, <argument><expr><name>bRecover</name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>nRange</name></name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>nWrite</name></name></expr></argument>, <argument><expr><name><name>pTest</name><operator>-&gt;</operator><name>nIter</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_data_2</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system name */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>,           <comment type="block">/* Run test cases that match this pattern */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datatest2</name></type> <name><name>aTest</name><index>[]</index></name> <init>= <expr><block>{
      <comment type="block">/* defn,                                 nRange, nWrite, nIter */</comment>
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">20</literal></expr>,<expr><literal type="number">25</literal></expr>,     <expr><literal type="number">100</literal></expr>,<expr><literal type="number">200</literal></expr>}</block></expr>,   <expr><literal type="number">10000</literal></expr>,  <expr><literal type="number">10</literal></expr>,     <expr><literal type="number">50</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">20</literal></expr>,<expr><literal type="number">25</literal></expr>,     <expr><literal type="number">100</literal></expr>,<expr><literal type="number">200</literal></expr>}</block></expr>,   <expr><literal type="number">10000</literal></expr>,  <expr><literal type="number">200</literal></expr>,    <expr><literal type="number">50</literal></expr>   }</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">20</literal></expr>,<expr><literal type="number">25</literal></expr>,     <expr><literal type="number">100</literal></expr>,<expr><literal type="number">200</literal></expr>}</block></expr>,   <expr><literal type="number">100</literal></expr>,    <expr><literal type="number">10</literal></expr>,     <expr><literal type="number">1000</literal></expr> }</block></expr>,
    <expr><block>{ <expr><block>{<expr><name>DATA_RANDOM</name></expr>,     <expr><literal type="number">20</literal></expr>,<expr><literal type="number">25</literal></expr>,     <expr><literal type="number">100</literal></expr>,<expr><literal type="number">200</literal></expr>}</block></expr>,   <expr><literal type="number">100</literal></expr>,    <expr><literal type="number">200</literal></expr>,    <expr><literal type="number">50</literal></expr>   }</block></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bRecover</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>bRecover</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>bRecover</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>bRecover</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>bRecover</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><literal type="string">"lsm"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>pRc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><call><name>getName2</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name>bRecover</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><call><name>testCaseBegin</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>doDataTest2</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name>bRecover</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************
** Test case data3.*
*/</comment>

<typedef>typedef <type><name><name>struct</name> <name>Datatest3</name></name></type> <name>Datatest3</name>;</typedef>
<struct>struct <name>Datatest3</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nRange</name></decl>;</decl_stmt>                     <comment type="block">/* Keys are between 1 and this value, incl. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nIter</name></decl>;</decl_stmt>                      <comment type="block">/* Number of iterations */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name></decl>;</decl_stmt>                     <comment type="block">/* Number of writes per iteration */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nDelete</name></decl>;</decl_stmt>                    <comment type="block">/* Number of deletes per iteration */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>nValMin</name></decl>;</decl_stmt>                    <comment type="block">/* Minimum value size for writes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nValMax</name></decl>;</decl_stmt>                    <comment type="block">/* Maximum value size for writes */</comment>
}</block>;</struct>

<function><type><name>void</name></type> <name>testPutU32</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>u32</name></type> <name>iVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>iVal</name> <operator>&gt;&gt;</operator>  <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dt3PutKey</name><parameter_list>(<parameter><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iKey</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iKey</name><operator>&lt;</operator><literal type="number">100000</literal> <operator>&amp;&amp;</operator> <name>iKey</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>aBuf</name></expr></argument>, <argument><expr><literal type="string">"%.5d"</literal></expr></argument>, <argument><expr><name>iKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doDataTest3</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system to test */</comment>
  <parameter><decl><type><name>Datatest3</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,                   <comment type="block">/* Structure containing test parameters */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iDot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><operator>*</operator><name>pRc</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>abPresent</name></decl>;</decl_stmt>                  <comment type="block">/* Array of boolean */</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aVal</name></decl>;</decl_stmt>                     <comment type="block">/* Buffer to hold values */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>iSeq</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>                  <comment type="block">/* prng counter */</comment>

  <expr_stmt><expr><name>abPresent</name> <operator>=</operator> <operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><call><name>testMalloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRange</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>aVal</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>testMalloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nValMax</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>testOpen</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nIter</name></name> <operator>&amp;&amp;</operator> <name>rc</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>testCaseProgress</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nIter</name></name></expr></argument>, <argument><expr><call><name>testCaseNDot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Perform nWrite inserts */</comment>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nWrite</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>u8</name></type> <name><name>aKey</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u32</name></type> <name>iKey</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>iKey</name> <operator>=</operator> <operator>(</operator><call><name>testPrngValue</name><argument_list>(<argument><expr><name>iSeq</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>p</name><operator>-&gt;</operator><name>nRange</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nVal</name> <operator>=</operator> <operator>(</operator><call><name>testPrngValue</name><argument_list>(<argument><expr><name>iSeq</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>nValMax</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nValMin</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>nValMin</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testPrngString</name><argument_list>(<argument><expr><call><name>testPrngValue</name><argument_list>(<argument><expr><name>iSeq</name><operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>aVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dt3PutKey</name><argument_list>(<argument><expr><name>aKey</name></expr></argument>, <argument><expr><name>iKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>testWrite</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>aKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aKey</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>aVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>abPresent</name><index>[<expr><name>iKey</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* Perform nDelete deletes */</comment>
    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nDelete</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>u8</name></type> <name><name>aKey1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name></type> <name><name>aKey2</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u32</name></type> <name>iKey</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>iKey</name> <operator>=</operator> <operator>(</operator><call><name>testPrngValue</name><argument_list>(<argument><expr><name>iSeq</name><operator>++</operator></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>p</name><operator>-&gt;</operator><name>nRange</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dt3PutKey</name><argument_list>(<argument><expr><name>aKey1</name></expr></argument>, <argument><expr><name>iKey</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>dt3PutKey</name><argument_list>(<argument><expr><name>aKey2</name></expr></argument>, <argument><expr><name>iKey</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>testDeleteRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>aKey1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aKey1</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>aKey2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aKey2</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>abPresent</name><index>[<expr><name>iKey</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>testReopen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ii</name><operator>&lt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nRange</name></name></expr>;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nDbVal</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pDbVal</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name></type> <name><name>aKey</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>dbrc</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>dt3PutKey</name><argument_list>(<argument><expr><name>aKey</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dbrc</name> <operator>=</operator> <call><name>tdb_fetch</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>aKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aKey</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDbVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nDbVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dbrc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if<condition>( <expr><name><name>abPresent</name><index>[<expr><name>ii</name></expr>]</index></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>nDbVal</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>testCompareInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>nDbVal</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>getName3</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>, <parameter><decl><type><name>Datatest3</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"data3.%s.%d.%d.%d.%d.(%d..%d)"</literal></expr></argument>,
      <argument><expr><name>zSystem</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRange</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nIter</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nWrite</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nDelete</name></name></expr></argument>, 
      <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nValMin</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nValMax</name></name></expr></argument>
  )</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_data_3</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSystem</name></decl></parameter>,            <comment type="block">/* Database system name */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>,           <comment type="block">/* Run test cases that match this pattern */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Error code */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datatest3</name></type> <name><name>aTest</name><index>[]</index></name> <init>= <expr><block>{
    <comment type="block">/* nRange, nIter, nWrite, nDelete, nValMin, nValMax */</comment>
    <expr><block>{  <expr><literal type="number">100</literal></expr>,    <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">5</literal></expr>,      <expr><literal type="number">5</literal></expr>,       <expr><literal type="number">50</literal></expr>,      <expr><literal type="number">100</literal></expr> }</block></expr>,
    <expr><block>{  <expr><literal type="number">100</literal></expr>,    <expr><literal type="number">1000</literal></expr>,  <expr><literal type="number">2</literal></expr>,      <expr><literal type="number">2</literal></expr>,        <expr><literal type="number">5</literal></expr>,       <expr><literal type="number">10</literal></expr> }</block></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>pRc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zName</name> <init>= <expr><call><name>getName3</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>testCaseBegin</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>doDataTest3</name><argument_list>(<argument><expr><name>zSystem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
