<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest_tdb4.c">
<comment type="block">/*
** This file contains the TestDb bt wrapper.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest_tdb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>BtDb</name></name></type> <name>BtDb</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>BtFile</name></name></type> <name>BtFile</name>;</typedef>

<comment type="block">/* Background checkpointer interface (see implementations below). */</comment>
<typedef>typedef <type><name><name>struct</name> <name>bt_ckpter</name></name></type> <name>bt_ckpter</name>;</typedef>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>bgc_attach</name><parameter_list>(<parameter><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>bgc_detach</name><parameter_list>(<parameter><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
** Each database or log file opened by a database handle is wrapped by
** an object of the following type.
*/</comment>
<struct>struct <name>BtFile</name> <block>{
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>                      <comment type="block">/* Database handle that opened this file */</comment>
  <decl_stmt><decl><type><name>bt_env</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>                   <comment type="block">/* Underlying VFS */</comment>
  <decl_stmt><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl>;</decl_stmt>                 <comment type="block">/* File handle belonging to underlying VFS */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSectorSize</name></decl>;</decl_stmt>                <comment type="block">/* Size of sectors in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nSector</name></decl>;</decl_stmt>                    <comment type="block">/* Allocated size of nSector array */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>apSector</name></decl>;</decl_stmt>                  <comment type="block">/* Original sector data */</comment>
}</block>;</struct>

<comment type="block">/*
** nCrashSync:
**   If this value is non-zero, then a "crash-test" is running. If
**   nCrashSync==1, then the crash is simulated during the very next 
**   call to the xSync() VFS method (on either the db or log file).
**   If nCrashSync==2, the following call to xSync(), and so on.
**
** bCrash:
**   After a crash is simulated, this variable is set. Any subsequent
**   attempts to write to a file or modify the file system in any way 
**   fail once this is set. All the caller can do is close the connection.
**
** bFastInsert:
**   If this variable is set to true, then a BT_CONTROL_FAST_INSERT_OP
**   control is issued before each callto BtReplace() or BtCsrOpen().
*/</comment>
<struct>struct <name>BtDb</name> <block>{
  <decl_stmt><decl><type><name>TestDb</name></type> <name>base</name></decl>;</decl_stmt>                    <comment type="block">/* Base class */</comment>
  <decl_stmt><decl><type><name>bt_db</name> <modifier>*</modifier></type><name>pBt</name></decl>;</decl_stmt>                     <comment type="block">/* bt database handle */</comment>
  <decl_stmt><decl><type><name>sqlite4_env</name> <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>              <comment type="block">/* SQLite environment (for malloc/free) */</comment>
  <decl_stmt><decl><type><name>bt_env</name> <modifier>*</modifier></type><name>pVfs</name></decl>;</decl_stmt>                   <comment type="block">/* Underlying VFS */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bFastInsert</name></decl>;</decl_stmt>                <comment type="block">/* True to use fast-insert */</comment>

  <comment type="block">/* Space for bt_fetch() results */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuffer</name></decl>;</decl_stmt>                    <comment type="block">/* Space to store results */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuffer</name></decl>;</decl_stmt>                    <comment type="block">/* Allocated size of aBuffer[] in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRef</name></decl>;</decl_stmt>

  <comment type="block">/* Background checkpointer used by mt connections */</comment>
  <decl_stmt><decl><type><name>bt_ckpter</name> <modifier>*</modifier></type><name>pCkpter</name></decl>;</decl_stmt>

  <comment type="block">/* Stuff used for crash test simulation */</comment>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name><name>apFile</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>              <comment type="block">/* Database and log files used by pBt */</comment>
  <decl_stmt><decl><type><name>bt_env</name></type> <name>env</name></decl>;</decl_stmt>                     <comment type="block">/* Private VFS for this object */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCrashSync</name></decl>;</decl_stmt>                 <comment type="block">/* Number of syncs until crash (see above) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bCrash</name></decl>;</decl_stmt>                     <comment type="block">/* True once a crash has been simulated */</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsFullpath</name><parameter_list>(
  <parameter><decl><type><name>sqlite4_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, 
  <parameter><decl><type><name>bt_env</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pVfsCtx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>pBt</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xFullpath</name></name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>pzOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsOpen</name><parameter_list>(
  <parameter><decl><type><name>sqlite4_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, 
  <parameter><decl><type><name>bt_env</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>bt_file</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFile</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pVfsCtx</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><call><name>testMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BtFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>BT_OPEN_DATABASE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>flags</name> <operator>&amp;</operator> <name>BT_OPEN_LOG</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>BT_OPEN_SHARED</name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt> 
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pVfs</name></name> <operator>=</operator> <name><name>pBt</name><operator>-&gt;</operator><name>pVfs</name></name></expr>;</expr_stmt> 

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>pBt</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xOpen</name></name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>nRef</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppFile</name> <operator>=</operator> <operator>(</operator><name>bt_file</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsSize</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite4_int64</name> <modifier>*</modifier></type><name>piRes</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>piRes</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsRead</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite4_int64</name></type> <name>iOff</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btFlushSectors</name><parameter_list>(<parameter><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite4_int64</name></type> <name>iSz</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aTmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><name><name>p</name><operator>-&gt;</operator><name>nSector</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>apSector</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>

      <comment type="block">/* The system is simulating a crash. There are three choices for
      ** this sector:
      **
      **   1) Leave it as it is (simulating a successful write),
      **   2) Restore the original data (simulating a lost write),
      **   3) Populate the disk sector with garbage data.
      */</comment>
      <decl_stmt><decl><type><name>sqlite4_int64</name></type> <name>iSOff</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name><operator>*</operator><name>i</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name></expr></argument>, <argument><expr><name>iSz</name> <operator>-</operator> <name>iSOff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if<condition>( <expr><name>nWrite</name></expr> )</condition><block>{<block_content>
        <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aWrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>iOpt</name> <init>= <expr><operator>(</operator><call><name>testPrngValue</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if<condition>( <expr><name>iOpt</name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>aWrite</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>apSector</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>iOpt</name><operator>==</operator><literal type="number">3</literal></expr> )</condition><block>{<block_content>
          <if_stmt><if>if<condition>( <expr><name>aTmp</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>aTmp</name> <operator>=</operator> <call><name>testMalloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name>aWrite</name> <operator>=</operator> <name>aTmp</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>testPrngArray</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><literal type="number">13</literal></expr></argument>, <argument><expr><operator>(</operator><name>u32</name><operator>*</operator><operator>)</operator><name>aWrite</name></expr></argument>, <argument><expr><name>nWrite</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name>u32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
fprintf(stderr, "handle sector %d of %s with %s\n", i, 
    iFile==0 ? "db" : "log",
    iOpt==1 ? "rollback" : iOpt==2 ? "write" : "omit"
);
fflush(stderr);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <if_stmt><if>if<condition>( <expr><name>aWrite</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>iSOff</name></expr></argument>, <argument><expr><name>aWrite</name></expr></argument>, <argument><expr><name>nWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apSector</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apSector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>aTmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btSaveSectors</name><parameter_list>(<parameter><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>sqlite4_int64</name></type> <name>iOff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite4_int64</name></type> <name>iSz</name></decl>;</decl_stmt>              <comment type="block">/* Size of file on disk */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iFirst</name></decl>;</decl_stmt>                     <comment type="block">/* First sector affected */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iSector</name></decl>;</decl_stmt>                    <comment type="block">/* Current sector */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iLast</name></decl>;</decl_stmt>                      <comment type="block">/* Last sector affected */</comment>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xSectorSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name><operator>&lt;</operator><literal type="number">512</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>iLast</name> <operator>=</operator> <operator>(</operator><name>iOff</name><operator>+</operator><name>nBuf</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>iFirst</name> <operator>=</operator> <name>iOff</name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iSz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>iSector</name><operator>=</operator><name>iFirst</name></expr>;</init> <condition><expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name> <operator>&amp;&amp;</operator> <name>iSector</name><operator>&lt;=</operator><name>iLast</name></expr>;</condition> <incr><expr><name>iSector</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nRead</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite4_int64</name></type> <name>iSOff</name> <init>= <expr><name>iSector</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aBuf</name> <init>= <expr><call><name>testMalloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nRead</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>nSectorSize</name></name></expr></argument>, <argument><expr><operator>(</operator><name>iSz</name> <operator>-</operator> <name>iSOff</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nRead</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xRead</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>iSOff</name></expr></argument>, <argument><expr><name>aBuf</name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name> <operator>&amp;&amp;</operator> <name>iSector</name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nSector</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>nSector</name></name> <operator>+</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier><modifier>*</modifier></type><name>apNew</name> <init>= <expr><operator>(</operator><name>u8</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>testMalloc</name><argument_list>(<argument><expr><name>nNew</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>u8</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>apNew</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>apSector</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nSector</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>u8</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apSector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apSector</name></name> <operator>=</operator> <name>apNew</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nSector</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apSector</name><index>[<expr><name>iSector</name></expr>]</index></name> <operator>=</operator> <name>aBuf</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsWrite</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite4_int64</name></type> <name>iOff</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nBuf</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>nCrashSync</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>btSaveSectors</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xWrite</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsTruncate</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>sqlite4_int64</name></type> <name>iOff</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xTruncate</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>iOff</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsSync</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE4_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>pBt</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pBt</name><operator>-&gt;</operator><name>nCrashSync</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>nCrashSync</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name> <operator>=</operator> <operator>(</operator><name><name>pBt</name><operator>-&gt;</operator><name>nCrashSync</name></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>btFlushSectors</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>btFlushSectors</name><argument_list>(<argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE4_IOERR</name></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>btFlushSectors</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xSync</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsSectorSize</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xSectorSize</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>btDeref</name><parameter_list>(<parameter><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRef</name></name><operator>--</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nRef</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>nRef</name></name><operator>&lt;=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsClose</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pBt</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>btFlushSectors</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><name><name>pBt</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>p</name><operator>==</operator><name><name>pBt</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBt</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>apSector</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xClose</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  btDeref(p-&gt;pBt);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsUnlink</name><parameter_list>(<parameter><decl><type><name>sqlite4_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>bt_env</name> <modifier>*</modifier></type><name>pVfs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name><name>pVfs</name><operator>-&gt;</operator><name>pVfsCtx</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>pBt</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xUnlink</name></name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name><name>pBt</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsLock</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>iLock</name></expr></argument>, <argument><expr><name>eType</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsTestLock</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xTestLock</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>iLock</name></expr></argument>, <argument><expr><name>nLock</name></expr></argument>, <argument><expr><name>eType</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsShmMap</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iChunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xShmMap</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>iChunk</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><name>ppOut</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>btVfsShmBarrier</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xShmBarrier</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btVfsShmUnmap</name><parameter_list>(<parameter><decl><type><name>bt_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDelete</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtFile</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtFile</name><operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pBt</name><operator>-&gt;</operator><name>bCrash</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_IOERR</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name><name>p</name><operator>-&gt;</operator><name>pVfs</name><operator>-&gt;</operator><name>xShmUnmap</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pFile</name></name></expr></argument>, <argument><expr><name>bDelete</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bt_close</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name>pTestDb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite4BtClose</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>pBt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>apFile</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>pBt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>bgc_detach</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>btMinTransaction</name><parameter_list>(<parameter><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iMin</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piLevel</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>iLevel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE4_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>iLevel</name> <operator>=</operator> <call><name>sqlite4BtTransactionLevel</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iLevel</name><operator>&lt;</operator><name>iMin</name></expr> )</condition><block>{<block_content> 
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtBegin</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>iMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><operator>*</operator><name>piLevel</name> <operator>=</operator> <name>iLevel</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>piLevel</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>btRestoreTransaction</name><parameter_list>(<parameter><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rcin</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>rcin</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>iLevel</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCommit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>sqlite4BtRollback</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iLevel</name><operator>==</operator><call><name>sqlite4BtTransactionLevel</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bt_write</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pK</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nK</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pV</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nV</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name>pTestDb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLevel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>btMinTransaction</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bFastInsert</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>BT_CONTROL_FAST_INSERT_OP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtReplace</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>pK</name></expr></argument>, <argument><expr><name>nK</name></expr></argument>, <argument><expr><name>pV</name></expr></argument>, <argument><expr><name>nV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>btRestoreTransaction</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bt_delete</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pK</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nK</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>bt_write</name><argument_list>(<argument><expr><name>pTestDb</name></expr></argument>, <argument><expr><name>pK</name></expr></argument>, <argument><expr><name>nK</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bt_delete_range</name><parameter_list>(
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey1</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey2</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name>pTestDb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bt_cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE4_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLevel</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>btMinTransaction</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bFastInsert</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>BT_CONTROL_FAST_INSERT_OP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrOpen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pK</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nCmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrSeek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>, <argument><expr><name>BT_SEEK_GE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_INEXACT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE4_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrKey</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>nCmp</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>nKey1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>pK</name></expr></argument>, <argument><expr><name>nCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>res</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>res</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nKey1</name><operator>&lt;=</operator><name>n</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>res</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nKey1</name><operator>==</operator><name>n</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrNext</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrKey</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>nCmp</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>nKey2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>pK</name></expr></argument>, <argument><expr><name>nCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>res</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>res</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nKey2</name><operator>&lt;=</operator><name>n</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtDelete</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_NOTFOUND</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE4_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite4BtCsrClose</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>btRestoreTransaction</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bt_fetch</name><parameter_list>(
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pK</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nK</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnVal</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name>pTestDb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bt_cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLevel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE4_OK</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>iLevel</name> <operator>=</operator> <call><name>sqlite4BtTransactionLevel</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iLevel</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content> 
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtBegin</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bFastInsert</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>BT_CONTROL_FAST_INSERT_OP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrOpen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrSeek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pK</name></expr></argument>, <argument><expr><name>nK</name></expr></argument>, <argument><expr><name>BT_SEEK_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pV</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nV</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrData</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>nV</name><operator>&gt;</operator><name><name>p</name><operator>-&gt;</operator><name>nBuffer</name></name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aBuffer</name></name> <operator>=</operator> <operator>(</operator><name>u8</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>nV</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nBuffer</name></name> <operator>=</operator> <name>nV</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aBuffer</name></name></expr></argument>, <argument><expr><name>pV</name></expr></argument>, <argument><expr><name>nV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>pnVal</name> <operator>=</operator> <name>nV</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ppVal</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>aBuffer</name></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

    </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_INEXACT</name> <operator>||</operator> <name>rc</name><operator>==</operator><name>SQLITE4_NOTFOUND</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ppVal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pnVal</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE4_OK</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite4BtCsrClose</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>iLevel</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite4BtCommit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bt_scan</name><parameter_list>(
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>bReverse</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pFirst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nFirst</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pLast</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLast</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xCallback</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name>pTestDb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bt_cursor</name> <modifier>*</modifier></type><name>pCsr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iLevel</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>btMinTransaction</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>bFastInsert</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>BT_CONTROL_FAST_INSERT_OP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrOpen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>bReverse</name></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name>pLast</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrSeek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>nLast</name></expr></argument>, <argument><expr><name>BT_SEEK_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrLast</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrSeek</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><name>pFirst</name></expr></argument>, <argument><expr><name>nFirst</name></expr></argument>, <argument><expr><name>BT_SEEK_GE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_INEXACT</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE4_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pV</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nV</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrKey</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrData</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pV</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>bReverse</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>pFirst</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>nCmp</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>nK</name></expr></argument>, <argument><expr><name>nFirst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>pFirst</name></expr></argument>, <argument><expr><name>pK</name></expr></argument>, <argument><expr><name>nCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>res</name><operator>&gt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>res</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nK</name><operator>&lt;</operator><name>nFirst</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>pLast</name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>nCmp</name> <init>= <expr><call><name>MIN</name><argument_list>(<argument><expr><name>nK</name></expr></argument>, <argument><expr><name>nLast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>pK</name></expr></argument>, <argument><expr><name>nCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>res</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>res</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nK</name><operator>&gt;</operator><name>nLast</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>xCallback</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pK</name></expr></argument>, <argument><expr><name>nK</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pV</name></expr></argument>, <argument><expr><name>nV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>bReverse</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrPrev</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtCsrNext</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_NOTFOUND</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITE4_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlite4BtCsrClose</name><argument_list>(<argument><expr><name>pCsr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>btRestoreTransaction</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bt_begin</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLvl</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name>pTestDb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite4BtBegin</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>iLvl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bt_commit</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLvl</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name>pTestDb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite4BtCommit</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>iLvl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bt_rollback</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLvl</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name>pTestDb</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite4BtRollback</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>iLvl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>testParseOption</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzIn</name></decl></parameter>,              <comment type="block">/* IN/OUT: pointer to next option */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzOpt</name></decl></parameter>,             <comment type="block">/* OUT: nul-terminated option name */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pzArg</name></decl></parameter>,             <comment type="block">/* OUT: nul-terminated option argument */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pSpace</name></decl></parameter>                    <comment type="block">/* Temporary space for output params */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pzIn</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pStart</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pOut</name> <init>= <expr><name>pSpace</name></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><operator>*</operator><name>p</name><operator>==</operator><literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><name>pStart</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>!=</operator><literal type="char">'='</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>pStart</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pzOpt</name> <operator>=</operator> <name>pOut</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pOut</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>pStart</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>!=</operator><literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>pStart</name><operator>)</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pOut</name></expr></argument>, <argument><expr><name>pStart</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pzArg</name> <operator>=</operator> <name>pOut</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pOut</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pOut</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pzIn</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>testParseInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>piVal</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>z</name></expr></init></decl>;</decl_stmt>

  <while>while<condition>( <expr><operator>*</operator><name>p</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name><operator>==</operator><literal type="char">'K'</literal> <operator>||</operator> <operator>*</operator><name>p</name><operator>==</operator><literal type="char">'k'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><operator>*</operator><name>p</name><operator>==</operator><literal type="char">'M'</literal> <operator>||</operator> <operator>*</operator><name>p</name><operator>==</operator><literal type="char">'m'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>SQLITE4_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>piVal</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE4_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>testBtConfigure</name><parameter_list>(<parameter><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCfg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pbMt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE4_OK</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>zCfg</name></expr> )</condition><block>{<block_content>
    <struct>struct <name>CfgParam</name> <block>{
      <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zParam</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>eParam</name></decl>;</decl_stmt>
    }</block> <decl><name><name>aParam</name><index>[]</index></name> <init>= <expr><block>{
      <expr><block>{ <expr><literal type="string">"safety"</literal></expr>,         <expr><name>BT_CONTROL_SAFETY</name></expr> }</block></expr>,
      <expr><block>{ <expr><literal type="string">"autockpt"</literal></expr>,       <expr><name>BT_CONTROL_AUTOCKPT</name></expr> }</block></expr>,
      <expr><block>{ <expr><literal type="string">"multiproc"</literal></expr>,      <expr><name>BT_CONTROL_MULTIPROC</name></expr> }</block></expr>,
      <expr><block>{ <expr><literal type="string">"blksz"</literal></expr>,          <expr><name>BT_CONTROL_BLKSZ</name></expr> }</block></expr>,
      <expr><block>{ <expr><literal type="string">"pagesz"</literal></expr>,         <expr><name>BT_CONTROL_PAGESZ</name></expr> }</block></expr>,
      <expr><block>{ <expr><literal type="string">"mt"</literal></expr>,             <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>,
      <expr><block>{ <expr><literal type="string">"fastinsert"</literal></expr>,     <expr><operator>-</operator><literal type="number">2</literal></expr> }</block></expr>,
      <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>
    }</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z</name> <init>= <expr><name>zCfg</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aSpace</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zOpt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>aSpace</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>testMalloc</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>testParseOption</name><argument_list>(<argument><expr><operator>&amp;</operator><name>z</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zOpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zArg</name></expr></argument>, <argument><expr><name>aSpace</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iVal</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testArgSelect</name><argument_list>(<argument><expr><name>aParam</name></expr></argument>, <argument><expr><literal type="string">"param"</literal></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testParseInt</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

      <switch>switch<condition>( <expr><name><name>aParam</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eParam</name></expr> )</condition><block>{<block_content>
        <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><operator>*</operator><name>pbMt</name> <operator>=</operator> <name>iVal</name></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>
          <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>bFastInsert</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name><name>aParam</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eParam</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>iVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>aSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>test_bt_open</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSpec</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bClear</name></decl></parameter>, 
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDb</name></decl></parameter>
)</parameter_list><block>{<block_content>

  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>DatabaseMethods</name></type> <name>SqlMethods</name> <init>= <expr><block>{
    <expr><name>bt_close</name></expr>,
    <expr><name>bt_write</name></expr>,
    <expr><name>bt_delete</name></expr>,
    <expr><name>bt_delete_range</name></expr>,
    <expr><name>bt_fetch</name></expr>,
    <expr><name>bt_scan</name></expr>,
    <expr><name>bt_begin</name></expr>,
    <expr><name>bt_commit</name></expr>,
    <expr><name>bt_rollback</name></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bt_db</name> <modifier>*</modifier></type><name>pBt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite4_env</name> <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>sqlite4_env_default</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>bClear</name> <operator>&amp;&amp;</operator> <name>zFilename</name> <operator>&amp;&amp;</operator> <name><name>zFilename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zLog</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s-wal"</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtNew</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>mt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>                   <comment type="block">/* True for multi-threaded connection */</comment>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><call><name>testMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BtDb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>base</name><operator>.</operator><name>pMethods</name></name> <operator>=</operator> <operator>&amp;</operator><name>SqlMethods</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pBt</name></name> <operator>=</operator> <name>pBt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>pVfsCtx</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xFullpath</name></name> <operator>=</operator> <name>btVfsFullpath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xOpen</name></name> <operator>=</operator> <name>btVfsOpen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xSize</name></name> <operator>=</operator> <name>btVfsSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xRead</name></name> <operator>=</operator> <name>btVfsRead</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xWrite</name></name> <operator>=</operator> <name>btVfsWrite</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xTruncate</name></name> <operator>=</operator> <name>btVfsTruncate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xSync</name></name> <operator>=</operator> <name>btVfsSync</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xSectorSize</name></name> <operator>=</operator> <name>btVfsSectorSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xClose</name></name> <operator>=</operator> <name>btVfsClose</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xUnlink</name></name> <operator>=</operator> <name>btVfsUnlink</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xLock</name></name> <operator>=</operator> <name>btVfsLock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xTestLock</name></name> <operator>=</operator> <name>btVfsTestLock</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xShmMap</name></name> <operator>=</operator> <name>btVfsShmMap</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xShmBarrier</name></name> <operator>=</operator> <name>btVfsShmBarrier</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>env</name><operator>.</operator><name>xShmUnmap</name></name> <operator>=</operator> <name>btVfsShmUnmap</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>BT_CONTROL_GETVFS</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>pVfs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>BT_CONTROL_SETVFS</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>env</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testBtConfigure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSpec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtOpen</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name> <operator>&amp;&amp;</operator> <name>mt</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nAuto</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>bgc_attach</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>BT_CONTROL_AUTOCKPT</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nAuto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name> <operator>&amp;&amp;</operator> <name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>bt_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppDb</name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>base</name></name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_fbt_open</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSpec</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bClear</name></decl></parameter>, 
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDb</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>test_bt_open</name><argument_list>(<argument><expr><literal type="string">"fast=1"</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>, <argument><expr><name>bClear</name></expr></argument>, <argument><expr><name>ppDb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>test_fbts_open</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSpec</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFilename</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bClear</name></decl></parameter>, 
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDb</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>test_bt_open</name><argument_list>(<argument><expr><literal type="string">"fast=1 blksz=32K pagesz=512"</literal></expr></argument>, <argument><expr><name>zFilename</name></expr></argument>, <argument><expr><name>bClear</name></expr></argument>, <argument><expr><name>ppDb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>tdb_bt_prepare_sync_crash</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pTestDb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iSync</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>BtDb</name><operator>*</operator><operator>)</operator><name>pTestDb</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTestDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><operator>==</operator><name>bt_close</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bCrash</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nCrashSync</name></name> <operator>=</operator> <name>iSync</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bt_db</name> <modifier>*</modifier></type><name>tdb_bt</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pDb</name><operator>-&gt;</operator><name>pMethods</name><operator>-&gt;</operator><name>xClose</name></name><operator>==</operator><name>bt_close</name></expr> )</condition><block>{<block_content>
    <return>return <expr><operator>(</operator><operator>(</operator><name>BtDb</name> <operator>*</operator><operator>)</operator><name>pDb</name><operator>)</operator><operator>-&gt;</operator><name>pBt</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/*************************************************************************
** Beginning of code for background checkpointer.
*/</comment>

<struct>struct <name>bt_ckpter</name> <block>{
  <decl_stmt><decl><type><name>sqlite4_buffer</name></type> <name>file</name></decl>;</decl_stmt>            <comment type="block">/* File name */</comment>
  <decl_stmt><decl><type><name>sqlite4_buffer</name></type> <name>spec</name></decl>;</decl_stmt>            <comment type="block">/* Options */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nLogsize</name></decl>;</decl_stmt>                   <comment type="block">/* Minimum log size to checkpoint */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRef</name></decl>;</decl_stmt>                       <comment type="block">/* Number of clients */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>bDoWork</name></decl>;</decl_stmt>                    <comment type="block">/* Set by client threads */</comment>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>ckpter_thread</name></decl>;</decl_stmt>        <comment type="block">/* Checkpointer thread */</comment>
  <decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>ckpter_cond</name></decl>;</decl_stmt>     <comment type="block">/* Condition var the ckpter waits on */</comment>
  <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>ckpter_mutex</name></decl>;</decl_stmt>   <comment type="block">/* Mutex used with ckpter_cond */</comment>

  <decl_stmt><decl><type><name>bt_ckpter</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>               <comment type="block">/* Next object in list at gBgc.pCkpter */</comment>
}</block>;</struct>

<struct><specifier>static</specifier> struct <name>GlobalBackgroundCheckpointer</name> <block>{
  <decl_stmt><decl><type><name>bt_ckpter</name> <modifier>*</modifier></type><name>pCkpter</name></decl>;</decl_stmt>             <comment type="block">/* Linked list of checkpointers */</comment>
}</block> <decl><name>gBgc</name></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>bgc_main</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pDb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bt_ckpter</name> <modifier>*</modifier></type><name>pCkpter</name> <init>= <expr><operator>(</operator><name>bt_ckpter</name><operator>*</operator><operator>)</operator><name>pArg</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>test_bt_open</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>TestDb</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>testBtConfigure</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>spec</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while<condition>( <expr><name><name>pCkpter</name><operator>-&gt;</operator><name>nRef</name></name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>bt_db</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nLog</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>sqlite4BtBegin</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite4BtCommit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>BT_CONTROL_LOGSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>nLog</name><operator>&gt;=</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>nLogsize</name></name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bt_checkpoint</name></type> <name>ckpt</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ckpt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bt_checkpoint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ckpt</name><operator>.</operator><name>nFrameBuffer</name></name> <operator>=</operator> <name>nLog</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>BT_CONTROL_CHECKPOINT</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ckpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>BT_CONTROL_LOGSIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>nLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* The thread will wake up when it is signaled either because another
    ** thread has created some work for this one or because the connection
    ** is being closed.  */</comment>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCkpter</name><operator>-&gt;</operator><name>bDoWork</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pCkpter</name><operator>-&gt;</operator><name>bDoWork</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if<condition>( <expr><name>pDb</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bt_close</name><argument_list>(<argument><expr><operator>(</operator><name>TestDb</name><operator>*</operator><operator>)</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bgc_logsize_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLogsize</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>bt_ckpter</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>bt_ckpter</name><operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>nLogsize</name><operator>&gt;=</operator><name><name>p</name><operator>-&gt;</operator><name>nLogsize</name></name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ckpter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bDoWork</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ckpter_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ckpter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bgc_attach</name><parameter_list>(<parameter><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSpec</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bt_info</name></type> <name>info</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bt_ckpter</name> <modifier>*</modifier></type><name>pCkpter</name></decl>;</decl_stmt>

  <comment type="block">/* Figure out the full path to the database opened by handle pDb. */</comment>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>eType</name></name> <operator>=</operator> <name>BT_INFO_FILENAME</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>info</name><operator>.</operator><name>pgno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite4_buffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>BT_CONTROL_INFO</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE4_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite4_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlite4_mutex_alloc</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>SQLITE4_MUTEX_STATIC_KV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Search for an existing bt_ckpter object. */</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>output</name><operator>.</operator><name>n</name></name></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>pCkpter</name><operator>=</operator><name><name>gBgc</name><operator>.</operator><name>pCkpter</name></name></expr>;</init> <condition><expr><name>pCkpter</name></expr>;</condition> <incr><expr><name>pCkpter</name><operator>=</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name>n</name><operator>==</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>n</name></name> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>output</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>pCkpter</name><operator>-&gt;</operator><name>file</name><operator>.</operator><name>p</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="block">/* Failed to find a suitable checkpointer. Create a new one. */</comment>
  <if_stmt><if>if<condition>( <expr><name>pCkpter</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>bt_logsizecb</name></type> <name>cb</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>pCkpter</name> <operator>=</operator> <call><name>testMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bt_ckpter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqlite4_buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>output</name><operator>.</operator><name>p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCkpter</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>gBgc</name><operator>.</operator><name>pCkpter</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCkpter</name><operator>-&gt;</operator><name>nLogsize</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gBgc</name><operator>.</operator><name>pCkpter</name></name> <operator>=</operator> <name>pCkpter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCkpter</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite4_buffer_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>spec</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite4_buffer_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>spec</name></name></expr></argument>, <argument><expr><name>zSpec</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>zSpec</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><name>SQLITE4_OK</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Kick off the checkpointer thread. */</comment>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_cond</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_mutex</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_thread</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bgc_main</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pCkpter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="block">/* todo: Fix this */</comment>

    <comment type="block">/* Set up the logsize callback for the client thread */</comment>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>pCtx</name></name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>pCkpter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cb</name><operator>.</operator><name>xLogsize</name></name> <operator>=</operator> <name>bgc_logsize_cb</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite4BtControl</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pBt</name></name></expr></argument>, <argument><expr><name>BT_CONTROL_LOGSIZECB</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name><name>pCkpter</name><operator>-&gt;</operator><name>nRef</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="block">/* Assuming a checkpointer was encountered or effected, attach the 
  ** connection to it.  */</comment>
  <if_stmt><if>if<condition>( <expr><name>pCkpter</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCkpter</name></name> <operator>=</operator> <name>pCkpter</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sqlite4_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlite4_mutex_alloc</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>SQLITE4_MUTEX_STATIC_KV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite4_buffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>.</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bgc_detach</name><parameter_list>(<parameter><decl><type><name>BtDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITE4_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bt_ckpter</name> <modifier>*</modifier></type><name>pCkpter</name> <init>= <expr><name><name>pDb</name><operator>-&gt;</operator><name>pCkpter</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>pCkpter</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bShutdown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>            <comment type="block">/* True if this is the last reference */</comment>

    <expr_stmt><expr><call><name>sqlite4_mutex_enter</name><argument_list>(<argument><expr><call><name>sqlite4_mutex_alloc</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>,<argument><expr><name>SQLITE4_MUTEX_STATIC_KV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCkpter</name><operator>-&gt;</operator><name>nRef</name></name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pCkpter</name><operator>-&gt;</operator><name>nRef</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>bt_ckpter</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

      <expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name><name>pCkpter</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
      <for>for<control>(<init><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><name><name>gBgc</name><operator>.</operator><name>pCkpter</name></name></expr>;</init> <condition><expr><operator>*</operator><name>pp</name><operator>!=</operator><name>pCkpter</name></expr>;</condition> <incr><expr><name>pp</name><operator>=</operator><operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator><operator>-&gt;</operator><name>pNext</name></name><operator>)</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      <expr_stmt><expr><name>bShutdown</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite4_mutex_leave</name><argument_list>(<argument><expr><call><name>sqlite4_mutex_alloc</name><argument_list>(<argument><expr><name><name>pDb</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>,<argument><expr><name>SQLITE4_MUTEX_STATIC_KV</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name>bShutdown</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pDummy</name></decl>;</decl_stmt>

      <comment type="block">/* Signal the checkpointer thread. */</comment>
      <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCkpter</name><operator>-&gt;</operator><name>bDoWork</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Join the checkpointer thread. */</comment>
      <expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_thread</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>ckpter_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>sqlite4_buffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite4_buffer_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCkpter</name><operator>-&gt;</operator><name>spec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>pCkpter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pDb</name><operator>-&gt;</operator><name>pCkpter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** End of background checkpointer.
*************************************************************************/</comment>
</unit>
