<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest_win32.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TICKS_PER_SECOND</name></cpp:macro>      <cpp:value>(10000000)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TICKS_PER_MICROSECOND</name></cpp:macro> <cpp:value>(10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TICKS_UNIX_EPOCH</name></cpp:macro>      <cpp:value>(116444736000000000LL)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>win32GetTimeOfDay</name><parameter_list>(
  <parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tp</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tzp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>FILETIME</name></type> <name>fileTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ULONGLONG</name></type> <name>ticks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ULONGLONG</name></type> <name>unixTicks</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>unused_parameter</name><argument_list>(<argument><expr><name>tzp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fileTime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FILETIME</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GetSystemTimeAsFileTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fileTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ticks</name> <operator>=</operator> <operator>(</operator><name>ULONGLONG</name><operator>)</operator><name><name>fileTime</name><operator>.</operator><name>dwHighDateTime</name></name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>ticks</name> <operator>|=</operator> <operator>(</operator><name>ULONGLONG</name><operator>)</operator><name><name>fileTime</name><operator>.</operator><name>dwLowDateTime</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>unixTicks</name> <operator>=</operator> <name>ticks</name> <operator>-</operator> <name>TICKS_UNIX_EPOCH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>unixTicks</name> <operator>/</operator> <name>TICKS_PER_SECOND</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>unixTicks</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>ULONGLONG</name><operator>)</operator><name><name>tp</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <name>TICKS_PER_SECOND</name><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>long</name><operator>)</operator><operator>(</operator><name>unixTicks</name> <operator>/</operator> <name>TICKS_PER_MICROSECOND</name><operator>)</operator></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
