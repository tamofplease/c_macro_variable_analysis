<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest_mem.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ArraySize</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(sizeof(x) / sizeof((x)[0])))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;(y) ? (x) : (y))</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type>  <name>u32</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>u8</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>i64</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>u64</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GLIBC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>LSM_DEBUG_MEM</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>backtrace</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>backtrace_symbols_fd</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier><specifier>const</specifier><modifier>*</modifier></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>TM_BACKTRACE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>backtrace</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>backtrace_symbols_fd</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<typedef>typedef <type><name><name>struct</name> <name>TmBlockHdr</name></name></type> <name>TmBlockHdr</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>TmAgg</name></name></type> <name>TmAgg</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>TmGlobal</name></name></type> <name>TmGlobal</name>;</typedef>

<struct>struct <name>TmGlobal</name> <block>{
  <comment type="block">/* Linked list of all currently outstanding allocations. And a table of
  ** all allocations, past and present, indexed by backtrace() info.  */</comment>
  <decl_stmt><decl><type><name>TmBlockHdr</name> <modifier>*</modifier></type><name>pFirst</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TM_BACKTRACE</name></cpp:ifdef>
  <decl_stmt><decl><type><name>TmAgg</name> <modifier>*</modifier></type><name><name>aHash</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Underlying malloc/realloc/free functions */</comment>
  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xMalloc</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>          <comment type="block">/* underlying malloc(3) function */</comment>
  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xRealloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* underlying realloc(3) function */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>          <comment type="block">/* underlying free(3) function */</comment>

  <comment type="block">/* Mutex to protect pFirst and aHash */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xEnterMutex</name>)<parameter_list>(<parameter><decl><type><name>TmGlobal</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* Call this to enter the mutex */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xLeaveMutex</name>)<parameter_list>(<parameter><decl><type><name>TmGlobal</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl> <comment type="block">/* Call this to leave mutex */</comment>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xDelMutex</name>)<parameter_list>(<parameter><decl><type><name>TmGlobal</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>   <comment type="block">/* Call this to delete mutex */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>                   <comment type="block">/* Mutex handle */</comment>

  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xSaveMalloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>xSaveRealloc</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xSaveFree</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block">/* OOM injection scheduling. If nCountdown is greater than zero when a 
  ** malloc attempt is made, it is decremented. If this means nCountdown 
  ** transitions from 1 to 0, then the allocation fails. If bPersist is true 
  ** when this happens, nCountdown is then incremented back to 1 (so that the 
  ** next attempt fails too).  
  */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nCountdown</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bPersist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bEnable</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xHook</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pHookCtx</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>TmBlockHdr</name> <block>{
  <decl_stmt><decl><type><name>TmBlockHdr</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TmBlockHdr</name> <modifier>*</modifier></type><name>pPrev</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TM_BACKTRACE</name></cpp:ifdef>
  <decl_stmt><decl><type><name>TmAgg</name> <modifier>*</modifier></type><name>pAgg</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>u32</name></type> <name>iForeGuard</name></decl>;</decl_stmt>
}</block>;</struct>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TM_BACKTRACE</name></cpp:ifdef>
<struct>struct <name>TmAgg</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name></decl>;</decl_stmt>                     <comment type="block">/* Number of allocations at this path */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>                      <comment type="block">/* Total number of bytes allocated */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nOutAlloc</name></decl>;</decl_stmt>                  <comment type="block">/* Number of outstanding allocations */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nOutByte</name></decl>;</decl_stmt>                   <comment type="block">/* Number of outstanding bytes */</comment>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>aFrame</name><index>[<expr><name>TM_BACKTRACE</name></expr>]</index></name></decl>;</decl_stmt>     <comment type="block">/* backtrace() output */</comment>
  <decl_stmt><decl><type><name>TmAgg</name> <modifier>*</modifier></type><name>pNext</name></decl>;</decl_stmt>                   <comment type="block">/* Next object in hash-table collision */</comment>
}</block>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREGUARD</name></cpp:macro> <cpp:value>0x80F5E153</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REARGUARD</name></cpp:macro> <cpp:value>0xE4676B53</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>u32</name></type> <name>rearguard</name> <init>= <expr><name>REARGUARD</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND8</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)+7)&amp;~7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_HDR_SIZE</name></cpp:macro> <cpp:value>(ROUND8( sizeof(TmBlockHdr) ))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmtest_oom_error</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>nErr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>nErr</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmEnterMutex</name><parameter_list>(<parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>pTm</name><operator>-&gt;</operator><name>xEnterMutex</name></name><argument_list>(<argument><expr><name>pTm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tmLeaveMutex</name><parameter_list>(<parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name><name>pTm</name><operator>-&gt;</operator><name>xLeaveMutex</name></name><argument_list>(<argument><expr><name>pTm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tmMalloc</name><parameter_list>(<parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TmBlockHdr</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>               <comment type="block">/* New allocation header block */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pUser</name></decl>;</decl_stmt>                      <comment type="block">/* Return value */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nReq</name></decl>;</decl_stmt>                       <comment type="block">/* Total number of bytes requested */</comment>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rearguard</name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nReq</name> <operator>=</operator> <name>BLOCK_HDR_SIZE</name> <operator>+</operator> <name>nByte</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <operator>(</operator><name>TmBlockHdr</name> <operator>*</operator><operator>)</operator><call><name><name>pTm</name><operator>-&gt;</operator><name>xMalloc</name></name><argument_list>(<argument><expr><name>nReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TmBlockHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tmEnterMutex</name><argument_list>(<argument><expr><name>pTm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>nCountdown</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>bPersist</name></name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name><name>pTm</name><operator>-&gt;</operator><name>bPersist</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pTm</name><operator>-&gt;</operator><name>bEnable</name></name> <operator>&amp;&amp;</operator> <name><name>pTm</name><operator>-&gt;</operator><name>nCountdown</name></name><operator>==</operator><literal type="number">1</literal></expr> )</condition><block>{<block_content>
    <comment type="block">/* Simulate an OOM error. */</comment>
    <expr_stmt><expr><call><name>lsmtest_oom_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pTm</name><operator>-&gt;</operator><name>xFree</name></name><argument_list>(<argument><expr><name>pNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>nCountdown</name></name> <operator>=</operator> <name><name>pTm</name><operator>-&gt;</operator><name>bPersist</name></name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pTm</name><operator>-&gt;</operator><name>xHook</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name><name>pTm</name><operator>-&gt;</operator><name>xHook</name></name><argument_list>(<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>pHookCtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pUser</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pTm</name><operator>-&gt;</operator><name>bEnable</name></name> <operator>&amp;&amp;</operator> <name><name>pTm</name><operator>-&gt;</operator><name>nCountdown</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>nCountdown</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>iForeGuard</name></name> <operator>=</operator> <name>FOREGUARD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>nByte</name></name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pTm</name><operator>-&gt;</operator><name>pFirst</name></name></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pTm</name><operator>-&gt;</operator><name>pFirst</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>pFirst</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>pFirst</name></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>pUser</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>pNew</name><operator>)</operator><index>[<expr><name>BLOCK_HDR_SIZE</name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pUser</name></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pUser</name><index>[<expr><name>nByte</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rearguard</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TM_BACKTRACE</name></cpp:ifdef>
    <block>{<block_content>
      <decl_stmt><decl><type><name>TmAgg</name> <modifier>*</modifier></type><name>pAgg</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u32</name></type> <name>iHash</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>aFrame</name><index>[<expr><name>TM_BACKTRACE</name></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>backtrace</name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>, <argument><expr><name>TM_BACKTRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aFrame</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>iHash</name> <operator>+=</operator> <operator>(</operator><name>u64</name><operator>)</operator><operator>(</operator><name><name>aFrame</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>iHash</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>iHash</name> <operator>=</operator> <name>iHash</name> <operator>%</operator> <call><name>ArraySize</name><argument_list>(<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>aHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for<control>(<init><expr><name>pAgg</name><operator>=</operator><name><name>pTm</name><operator>-&gt;</operator><name>aHash</name><index>[<expr><name>iHash</name></expr>]</index></name></expr>;</init> <condition><expr><name>pAgg</name></expr>;</condition> <incr><expr><name>pAgg</name><operator>=</operator><name><name>pAgg</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>aFrame</name></name></expr></argument>, <argument><expr><name>aFrame</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pAgg</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>pAgg</name> <operator>=</operator> <operator>(</operator><name>TmAgg</name> <operator>*</operator><operator>)</operator><call><name><name>pTm</name><operator>-&gt;</operator><name>xMalloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TmAgg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pAgg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TmAgg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>aFrame</name></name></expr></argument>, <argument><expr><name>aFrame</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>aFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pAgg</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pTm</name><operator>-&gt;</operator><name>aHash</name><index>[<expr><name>iHash</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>aHash</name><index>[<expr><name>iHash</name></expr>]</index></name> <operator>=</operator> <name>pAgg</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>pAgg</name><operator>-&gt;</operator><name>nAlloc</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAgg</name><operator>-&gt;</operator><name>nByte</name></name> <operator>+=</operator> <name>nByte</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAgg</name><operator>-&gt;</operator><name>nOutAlloc</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pAgg</name><operator>-&gt;</operator><name>nOutByte</name></name> <operator>+=</operator> <name>nByte</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNew</name><operator>-&gt;</operator><name>pAgg</name></name> <operator>=</operator> <name>pAgg</name></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tmLeaveMutex</name><argument_list>(<argument><expr><name>pTm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pUser</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmFree</name><parameter_list>(<parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>TmBlockHdr</name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tmEnterMutex</name><argument_list>(<argument><expr><name>pTm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pHdr</name> <operator>=</operator> <operator>(</operator><name>TmBlockHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>pUser</name> <operator>-</operator> <name>BLOCK_HDR_SIZE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>iForeGuard</name></name><operator>==</operator><name>FOREGUARD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><literal type="number">0</literal><operator>==</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pUser</name><index>[<expr><name><name>pHdr</name><operator>-&gt;</operator><name>nByte</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rearguard</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name><operator>-&gt;</operator><name>pNext</name></name><operator>==</operator><name>pHdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pHdr</name><operator>==</operator><name><name>pTm</name><operator>-&gt;</operator><name>pFirst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>pFirst</name></name> <operator>=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>pPrev</name></name><operator>==</operator><name>pHdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name><operator>-&gt;</operator><name>pPrev</name></name> <operator>=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>pPrev</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TM_BACKTRACE</name></cpp:ifdef>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pAgg</name><operator>-&gt;</operator><name>nOutAlloc</name></name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>pAgg</name><operator>-&gt;</operator><name>nOutByte</name></name> <operator>-=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>nByte</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>tmLeaveMutex</name><argument_list>(<argument><expr><name>pTm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pUser</name></expr></argument>, <argument><expr><literal type="number">0x58</literal></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pHdr</name></expr></argument>, <argument><expr><literal type="number">0x57</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TmBlockHdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pTm</name><operator>-&gt;</operator><name>xFree</name></name><argument_list>(<argument><expr><name>pHdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tmRealloc</name><parameter_list>(<parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nByte</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pNew</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pNew</name> <operator>=</operator> <call><name>tmMalloc</name><argument_list>(<argument><expr><name>pTm</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pNew</name> <operator>&amp;&amp;</operator> <name>p</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>TmBlockHdr</name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pUser</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>pHdr</name> <operator>=</operator> <operator>(</operator><name>TmBlockHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>pUser</name> <operator>-</operator> <name>BLOCK_HDR_SIZE</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pNew</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>MIN</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmFree</name><argument_list>(<argument><expr><name>pTm</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pNew</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmMallocOom</name><parameter_list>(
  <parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nCountdown</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bPersist</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xHook</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHookCtx</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nCountdown</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>bPersist</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bPersist</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>nCountdown</name></name> <operator>=</operator> <name>nCountdown</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>bPersist</name></name> <operator>=</operator> <name>bPersist</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>xHook</name></name> <operator>=</operator> <name>xHook</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>pHookCtx</name></name> <operator>=</operator> <name>pHookCtx</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>bEnable</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmMallocOomEnable</name><parameter_list>(
  <parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bEnable</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name><name>pTm</name><operator>-&gt;</operator><name>bEnable</name></name> <operator>=</operator> <name>bEnable</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmMallocCheck</name><parameter_list>(
  <parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnLeakAlloc</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnLeakByte</name></decl></parameter>,
  <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TmBlockHdr</name> <modifier>*</modifier></type><name>pHdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nLeak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name>pTm</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for<control>(<init><expr><name>pHdr</name><operator>=</operator><name><name>pTm</name><operator>-&gt;</operator><name>pFirst</name></name></expr>;</init> <condition><expr><name>pHdr</name></expr>;</condition> <incr><expr><name>pHdr</name><operator>=</operator><name><name>pHdr</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name>nLeak</name><operator>++</operator></expr>;</expr_stmt> 
    <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>nByte</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>pnLeakAlloc</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pnLeakAlloc</name> <operator>=</operator> <name>nLeak</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>pnLeakByte</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>pnLeakByte</name> <operator>=</operator> <name>nByte</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TM_BACKTRACE</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>pFile</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"LEAKS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>aHash</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>TmAgg</name> <modifier>*</modifier></type><name>pAgg</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>pAgg</name><operator>=</operator><name><name>pTm</name><operator>-&gt;</operator><name>aHash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>pAgg</name></expr>;</condition> <incr><expr><name>pAgg</name><operator>=</operator><name><name>pAgg</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name><name>pAgg</name><operator>-&gt;</operator><name>nOutAlloc</name></name></expr> )</condition><block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d %d "</literal></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>nOutByte</name></name></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>nOutAlloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>TM_BACKTRACE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%p "</literal></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>aFrame</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"\nALLOCATIONS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name><name>pTm</name><operator>-&gt;</operator><name>aHash</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>TmAgg</name> <modifier>*</modifier></type><name>pAgg</name></decl>;</decl_stmt>
      <for>for<control>(<init><expr><name>pAgg</name><operator>=</operator><name><name>pTm</name><operator>-&gt;</operator><name>aHash</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>pAgg</name></expr>;</condition> <incr><expr><name>pAgg</name><operator>=</operator><name><name>pAgg</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d %d "</literal></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>nByte</name></name></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>nAlloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>TM_BACKTRACE</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%p "</literal></expr></argument>, <argument><expr><name><name>pAgg</name><operator>-&gt;</operator><name>aFrame</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>pFile</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>LsmMutex</name></name></type> <name>LsmMutex</name>;</typedef>
<struct>struct <name>LsmMutex</name> <block>{
  <decl_stmt><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmLsmMutexEnter</name><parameter_list>(<parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>LsmMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>LsmMutex</name> <operator>*</operator><operator>)</operator><name><name>pTm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pEnv</name><operator>-&gt;</operator><name>xMutexEnter</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tmLsmMutexLeave</name><parameter_list>(<parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>LsmMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>LsmMutex</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pTm</name><operator>-&gt;</operator><name>pMutex</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>pEnv</name><operator>-&gt;</operator><name>xMutexLeave</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tmLsmMutexDel</name><parameter_list>(<parameter><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>LsmMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>LsmMutex</name> <operator>*</operator><operator>)</operator><name><name>pTm</name><operator>-&gt;</operator><name>pMutex</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>pTm</name><operator>-&gt;</operator><name>xFree</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tmLsmMalloc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tmLsmFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list><block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tmLsmRealloc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content> <return>return <expr><call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tmLsmEnvMalloc</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <return>return <expr><call><name>tmMalloc</name><argument_list>(<argument><expr><operator>(</operator><name>TmGlobal</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pMemCtx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return> 
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tmLsmEnvFree</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <expr_stmt><expr><call><name>tmFree</name><argument_list>(<argument><expr><operator>(</operator><name>TmGlobal</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pMemCtx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tmLsmEnvRealloc</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<block_content> 
  <return>return <expr><call><name>tmRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>TmGlobal</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pMemCtx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testMallocInstall</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pGlobal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LsmMutex</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pEnv</name><operator>-&gt;</operator><name>pMemCtx</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate and populate a TmGlobal structure. */</comment>
  <expr_stmt><expr><name>pGlobal</name> <operator>=</operator> <operator>(</operator><name>TmGlobal</name> <operator>*</operator><operator>)</operator><call><name>tmLsmMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TmGlobal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pGlobal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TmGlobal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>xMalloc</name></name> <operator>=</operator> <name>tmLsmMalloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>xRealloc</name></name> <operator>=</operator> <name>tmLsmRealloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>xFree</name></name> <operator>=</operator> <name>tmLsmFree</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pMutex</name> <operator>=</operator> <operator>(</operator><name>LsmMutex</name> <operator>*</operator><operator>)</operator><call><name><name>pGlobal</name><operator>-&gt;</operator><name>xMalloc</name></name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LsmMutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMutex</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>pEnv</name><operator>-&gt;</operator><name>xMutexStatic</name></name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>LSM_MUTEX_HEAP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>pMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>xEnterMutex</name></name> <operator>=</operator> <name>tmLsmMutexEnter</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>xLeaveMutex</name></name> <operator>=</operator> <name>tmLsmMutexLeave</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>xDelMutex</name></name> <operator>=</operator> <name>tmLsmMutexDel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>pMutex</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>xSaveMalloc</name></name> <operator>=</operator> <name><name>pEnv</name><operator>-&gt;</operator><name>xMalloc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>xSaveRealloc</name></name> <operator>=</operator> <name><name>pEnv</name><operator>-&gt;</operator><name>xRealloc</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pGlobal</name><operator>-&gt;</operator><name>xSaveFree</name></name> <operator>=</operator> <name><name>pEnv</name><operator>-&gt;</operator><name>xFree</name></name></expr>;</expr_stmt>

  <comment type="block">/* Set up pEnv to the use the new TmGlobal */</comment>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>pMemCtx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pGlobal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>xMalloc</name></name> <operator>=</operator> <name>tmLsmEnvMalloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>xRealloc</name></name> <operator>=</operator> <name>tmLsmEnvRealloc</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>xFree</name></name> <operator>=</operator> <name>tmLsmEnvFree</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testMallocUninstall</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>TmGlobal</name> <operator>*</operator><operator>)</operator><name><name>pEnv</name><operator>-&gt;</operator><name>pMemCtx</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>pMemCtx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>xMalloc</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>xSaveMalloc</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>xRealloc</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>xSaveRealloc</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>xFree</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>xSaveFree</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>xDelMutex</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tmLsmFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testMallocCheck</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnLeakAlloc</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnLeakByte</name></decl></parameter>,
  <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pEnv</name><operator>-&gt;</operator><name>pMemCtx</name></name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pnLeakAlloc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnLeakByte</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>tmMallocCheck</name><argument_list>(<argument><expr><operator>(</operator><name>TmGlobal</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pEnv</name><operator>-&gt;</operator><name>pMemCtx</name></name><operator>)</operator></expr></argument>, <argument><expr><name>pnLeakAlloc</name></expr></argument>, <argument><expr><name>pnLeakByte</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testMallocOom</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nCountdown</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>bPersist</name></decl></parameter>,
  <parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>xHook</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pHookCtx</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name> <init>= <expr><operator>(</operator><name>TmGlobal</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pEnv</name><operator>-&gt;</operator><name>pMemCtx</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmMallocOom</name><argument_list>(<argument><expr><name>pTm</name></expr></argument>, <argument><expr><name>nCountdown</name></expr></argument>, <argument><expr><name>bPersist</name></expr></argument>, <argument><expr><name>xHook</name></expr></argument>, <argument><expr><name>pHookCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testMallocOomEnable</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bEnable</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TmGlobal</name> <modifier>*</modifier></type><name>pTm</name> <init>= <expr><operator>(</operator><name>TmGlobal</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pEnv</name><operator>-&gt;</operator><name>pMemCtx</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmMallocOomEnable</name><argument_list>(<argument><expr><name>pTm</name></expr></argument>, <argument><expr><name>bEnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
