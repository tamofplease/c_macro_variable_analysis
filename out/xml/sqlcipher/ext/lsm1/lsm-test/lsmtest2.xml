<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest2.c">
<comment type="block">/*
** This file contains tests related to recovery following application 
** and system crashes (power failures) while writing to the database.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>

<comment type="block">/*
** Structure used by testCksumDatabase() to accumulate checksum values in.
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Cksum</name></name></type> <name>Cksum</name>;</typedef>
<struct>struct <name>Cksum</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cksum1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cksum2</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/*
** tdb_scan() callback used by testCksumDatabase()
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scanCksumDb</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Cksum</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Cksum</name> <operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name><operator>++</operator></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nKey</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cksum1</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>pKey</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cksum2</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>cksum1</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nVal</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cksum1</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>pVal</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>cksum2</name></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>cksum1</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
** tdb_scan() callback used by testCountDatabase()
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>scanCountDb</name><parameter_list>(
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nKey</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nVal</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Cksum</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>Cksum</name> <operator>*</operator><operator>)</operator><name>pCtx</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nRow</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>unused_parameter</name><argument_list>(<argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unused_parameter</name><argument_list>(<argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unused_parameter</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>unused_parameter</name><argument_list>(<argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** Iterate through the entire contents of database pDb. Write a checksum
** string based on the db contents into buffer zOut before returning. A
** checksum string is at most 29 (TEST_CKSUM_BYTES) bytes in size:
**
**    * 32-bit integer (10 bytes)
**    * 1 space        (1 byte)
**    * 32-bit hex     (8 bytes)
**    * 1 space        (1 byte)
**    * 32-bit hex     (8 bytes)
**    * nul-terminator (1 byte)
**
** The number of entries in the database is returned.
*/</comment>
<function><type><name>int</name></type> <name>testCksumDatabase</name><parameter_list>(
  <parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>,                    <comment type="block">/* Database handle */</comment>
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>                      <comment type="block">/* Buffer to write checksum to */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Cksum</name></type> <name>cksum</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Cksum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdb_scan</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>scanCksumDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><literal type="string">"%d %x %x"</literal></expr></argument>, 
      <argument><expr><name><name>cksum</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name><name>cksum</name><operator>.</operator><name>cksum1</name></name></expr></argument>, <argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name><name>cksum</name><operator>.</operator><name>cksum2</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>TEST_CKSUM_BYTES</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>cksum</name><operator>.</operator><name>nRow</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>testCountDatabase</name><parameter_list>(<parameter><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Cksum</name></type> <name>cksum</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Cksum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdb_scan</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>cksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>scanCountDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>cksum</name><operator>.</operator><name>nRow</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** This function is a no-op if *pRc is not 0 when it is called.
**
** Otherwise, the two nul-terminated strings z1 and z1 are compared. If
** they are the same, the function returns without doing anything. Otherwise,
** an error message is printed, *pRc is set to 1 and the test_failed()
** function called.
*/</comment>
<function><type><name>void</name></type> <name>testCompareStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>z2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>z1</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"testCompareStr: \"%s\" != \"%s\"\n"</literal></expr></argument>, <argument><expr><name>z1</name></expr></argument>, <argument><expr><name>z2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>test_failed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is a no-op if *pRc is not 0 when it is called.
**
** Otherwise, the two integers i1 and i2 are compared. If they are equal,
** the function returns without doing anything. Otherwise, an error message 
** is printed, *pRc is set to 1 and the test_failed() function called.
*/</comment>
<function><type><name>void</name></type> <name>testCompareInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i2</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i1</name><operator>!=</operator><name>i2</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"testCompareInt: %d != %d\n"</literal></expr></argument>, <argument><expr><name>i1</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_failed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testCaseStart</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vprintf</name><argument_list>(<argument><expr><name>zFmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is a no-op if *pRc is non-zero when it is called. Zero
** is returned in this case.
**
** Otherwise, the zFmt (a printf style format string) and following arguments 
** are used to create a test case name. If zPattern is NULL or a glob pattern
** that matches the test case name, 1 is returned and the test case started.
** Otherwise, zero is returned and the test case does not start.
*/</comment>
<function><type><name>int</name></type> <name>testCaseBegin</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zTest</name> <operator>=</operator> <call><name>testMallocVPrintf</name><argument_list>(<argument><expr><name>zFmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>zPattern</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <call><name>testGlobMatch</name><argument_list>(<argument><expr><name>zPattern</name></expr></argument>, <argument><expr><name>zTest</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%-50s ..."</literal></expr></argument>, <argument><expr><name>zTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testCaseFinish</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Ok\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FAILED\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testCaseSkip</name><parameter_list>()</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Skipped\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testSetupSavedLsmdb</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zCfg</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nRow</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>tdb_lsm_open</name><argument_list>(<argument><expr><name>zCfg</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>testSaveDb</name><argument_list>(<argument><expr><name>zFile</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This function is a no-op if *pRc is non-zero when it is called.
**
** Open the LSM database identified by zFile and compute its checksum
** (a string, as returned by testCksumDatabase()). If the checksum is
** identical to zExpect1 or, if it is not NULL, zExpect2, the test passes.
** Otherwise, print an error message and set *pRc to 1.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>testCompareCksumLsmdb</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,              <comment type="block">/* Path to LSM database */</comment>
  <parameter><decl><type><name>int</name></type> <name>bCompress</name></decl></parameter>,                  <comment type="block">/* True if db is compressed */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zExpect1</name></decl></parameter>,           <comment type="block">/* Expected checksum 1 */</comment>
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zExpect2</name></decl></parameter>,           <comment type="block">/* Expected checksum 2 (or NULL) */</comment>
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>                        <comment type="block">/* IN/OUT: Test case error code */</comment>
)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zCksum</name><index>[<expr><name>TEST_CKSUM_BYTES</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <call><name>tdb_lsm_open</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>bCompress</name></expr>?</condition><then><expr><literal type="string">"compression=1 mmap=0"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testCksumDatabase</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>zCksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>r1</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zCksum</name></expr></argument>, <argument><expr><name>zExpect1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>zExpect2</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>r2</name> <operator>=</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>zCksum</name></expr></argument>, <argument><expr><name>zExpect2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name>r1</name> <operator>&amp;&amp;</operator> <name>r2</name></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>zExpect2</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"testCompareCksumLsmdb: \"%s\" != (\"%s\" OR \"%s\")"</literal></expr></argument>,
              <argument><expr><name>zCksum</name></expr></argument>, <argument><expr><name>zExpect1</name></expr></argument>, <argument><expr><name>zExpect2</name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><call><name>testPrintError</name><argument_list>(<argument><expr><literal type="string">"testCompareCksumLsmdb: \"%s\" != \"%s\""</literal></expr></argument>,
              <argument><expr><name>zCksum</name></expr></argument>, <argument><expr><name>zExpect1</name></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>pRc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>test_failed</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> <comment type="block">/* not used */</comment>
static void testCompareCksumBtdb(
  const char *zFile,              <comment type="block">/* Path to LSM database */</comment>
  const char *zExpect1,           <comment type="block">/* Expected checksum 1 */</comment>
  const char *zExpect2,           <comment type="block">/* Expected checksum 2 (or NULL) */</comment>
  int *pRc                        <comment type="block">/* IN/OUT: Test case error code */</comment>
){
  if( *pRc==0 ){
    char zCksum[TEST_CKSUM_BYTES];
    TestDb *pDb;

    *pRc = tdb_open("bt", zFile, 0, &amp;pDb);
    testCksumDatabase(pDb, zCksum);
    testClose(&amp;pDb);

    if( *pRc==0 ){
      int r1 = 0;
      int r2 = -1;

      r1 = strcmp(zCksum, zExpect1);
      if( zExpect2 ) r2 = strcmp(zCksum, zExpect2);
      if( r1 &amp;&amp; r2 ){
        if( zExpect2 ){
          testPrintError("testCompareCksumLsmdb: \"%s\" != (\"%s\" OR \"%s\")",
              zCksum, zExpect1, zExpect2
          );
        }else{
          testPrintError("testCompareCksumLsmdb: \"%s\" != \"%s\"",
              zCksum, zExpect1
          );
        }
        *pRc = 1;
        test_failed();
      }
    }
  }
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* not used */</comment>

<comment type="block">/* Above this point are reusable test routines. Not clear that they
** should really be in this file.
*************************************************************************/</comment>

<comment type="block">/*
** This test verifies that if a system crash occurs while doing merge work
** on the db, no data is lost.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>crash_test1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bCompress</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DBNAME</name> <init>= <expr><literal type="string">"testdb.lsm"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DatasourceDefn</name></type> <name>defn</name> <init>= <expr><block>{<expr><name>TEST_DATASOURCE_RANDOM</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">200</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nRow</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Database size */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nIter</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>          <comment type="block">/* Number of test iterations */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nWork</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Maximum lsm_work() calls per iteration */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nPage</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>           <comment type="block">/* Pages per lsm_work call */</comment>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CksumDb</name> <modifier>*</modifier></type><name>pCksumDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zCfg</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azConfig</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"page_size=1024 block_size=65536 autoflush=16384 safety=2 mmap=0"</literal></expr>, 
    <expr><literal type="string">"page_size=1024 block_size=65536 autoflush=16384 safety=2 "</literal>
    <literal type="string">" compression=1 mmap=0"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>bCompress</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>bCompress</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Allocate datasource. And calculate the expected checksums. */</comment>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>defn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCksumDb</name> <operator>=</operator> <call><name>testCksumArrayNew</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nRow</name></expr></argument>, <argument><expr><name>nRow</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Setup and save the initial database. */</comment>

  <expr_stmt><expr><name>zCfg</name> <operator>=</operator> <call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s automerge=7"</literal></expr></argument>, <argument><expr><name><name>azConfig</name><index>[<expr><name>bCompress</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testSetupSavedLsmdb</name><argument_list>(<argument><expr><name>zCfg</name></expr></argument>, <argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>zCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nIter</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iWork</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>testrc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>testCaseProgress</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>nIter</name></expr></argument>, <argument><expr><call><name>testCaseNDot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Restore and open the database. */</comment>
    <expr_stmt><expr><call><name>testRestoreDb</name><argument_list>(<argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>testrc</name> <operator>=</operator> <call><name>tdb_lsm_open</name><argument_list>(<argument><expr><name><name>azConfig</name><index>[<expr><name>bCompress</name></expr>]</index></name></expr></argument>, <argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>testrc</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Call lsm_work() on the db */</comment>
    <expr_stmt><expr><call><name>tdb_lsm_prepare_sync_crash</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name><operator>%</operator><operator>(</operator><name>nWork</name><operator>*</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iWork</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>testrc</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iWork</name><operator>&lt;</operator><name>nWork</name></expr>;</condition> <incr><expr><name>iWork</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>lsm_db</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>tdb_lsm</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>testrc</name> <operator>=</operator> <call><name>lsm_work</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* assert( testrc!=0 || nWrite&gt;0 ); */</comment>
      <if_stmt><if>if<condition>( <expr><name>testrc</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>testrc</name> <operator>=</operator> <call><name>lsm_checkpoint</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check that the database content is still correct */</comment>
    <expr_stmt><expr><call><name>testCompareCksumLsmdb</name><argument_list>(<argument><expr><name>DBNAME</name></expr></argument>, 
        <argument><expr><name>bCompress</name></expr></argument>, <argument><expr><call><name>testCksumArrayGet</name><argument_list>(<argument><expr><name>pCksumDb</name></expr></argument>, <argument><expr><name>nRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>testCksumArrayFree</name><argument_list>(<argument><expr><name>pCksumDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** This test verifies that if a system crash occurs while committing a
** transaction to the log file, no earlier transactions are lost or damaged.
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>crash_test2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bCompress</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DBNAME</name> <init>= <expr><literal type="string">"testdb.lsm"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DatasourceDefn</name></type> <name>defn</name> <init>= <expr><block>{<expr><name>TEST_DATASOURCE_RANDOM</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nIter</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nInsert</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CksumDb</name> <modifier>*</modifier></type><name>pCksumDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <comment type="block">/* Allocate datasource. And calculate the expected checksums. */</comment>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>defn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCksumDb</name> <operator>=</operator> <call><name>testCksumArrayNew</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal><operator>+</operator><name>nInsert</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Setup and save the initial database. */</comment>
  <expr_stmt><expr><call><name>testSetupSavedLsmdb</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nIter</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iIns</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>testrc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>testCaseProgress</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>nIter</name></expr></argument>, <argument><expr><call><name>testCaseNDot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Restore and open the database. */</comment>
    <expr_stmt><expr><call><name>testRestoreDb</name><argument_list>(<argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>testrc</name> <operator>=</operator> <call><name>tdb_lsm_open</name><argument_list>(<argument><expr><literal type="string">"safety=2"</literal></expr></argument>, <argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>testrc</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Insert nInsert records into the database. Crash midway through. */</comment>
    <expr_stmt><expr><call><name>tdb_lsm_prepare_sync_crash</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name><operator>%</operator><operator>(</operator><name>nInsert</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iIns</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iIns</name><operator>&lt;</operator><name>nInsert</name></expr>;</condition> <incr><expr><name>iIns</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pKey</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pVal</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>nVal</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>testDatasourceEntry</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">100</literal><operator>+</operator><name>iIns</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>testrc</name> <operator>=</operator> <call><name>tdb_write</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>, <argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>testrc</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Check that no data was lost when the system crashed. */</comment>
    <expr_stmt><expr><call><name>testCompareCksumLsmdb</name><argument_list>(<argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><name>bCompress</name></expr></argument>,
      <argument><expr><call><name>testCksumArrayGet</name><argument_list>(<argument><expr><name>pCksumDb</name></expr></argument>, <argument><expr><literal type="number">100</literal> <operator>+</operator> <name>iIns</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><call><name>testCksumArrayGet</name><argument_list>(<argument><expr><name>pCksumDb</name></expr></argument>, <argument><expr><literal type="number">100</literal> <operator>+</operator> <name>iIns</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><name>pRc</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCksumArrayFree</name><argument_list>(<argument><expr><name>pCksumDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
** This test verifies that if a system crash occurs when checkpointing
** the database, data is not lost (assuming that any writes not synced
** to the db have been synced into the log file).
*/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>crash_test3</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bCompress</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>DBNAME</name> <init>= <expr><literal type="string">"testdb.lsm"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nIter</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>DatasourceDefn</name></type> <name>defn</name> <init>= <expr><block>{<expr><name>TEST_DATASOURCE_RANDOM</name></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1000</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CksumDb</name> <modifier>*</modifier></type><name>pCksumDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TestDb</name> <modifier>*</modifier></type><name>pDb</name></decl>;</decl_stmt>

  <comment type="block">/* Allocate datasource. And calculate the expected checksums. */</comment>
  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>testDatasourceNew</name><argument_list>(<argument><expr><operator>&amp;</operator><name>defn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pCksumDb</name> <operator>=</operator> <call><name>testCksumArrayNew</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">110</literal></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Setup and save the initial database. */</comment>
  <expr_stmt><expr><call><name>testSetupSavedLsmdb</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nIter</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pRc</name><operator>==</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iOpen</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>testCaseProgress</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>nIter</name></expr></argument>, <argument><expr><call><name>testCaseNDot</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>iDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>testRestoreDb</name><argument_list>(<argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>iOpen</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>iOpen</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition> <incr><expr><name>iOpen</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <comment type="block">/* Open the database. Insert 10 more records. */</comment>
      <expr_stmt><expr><name>pDb</name> <operator>=</operator> <call><name>testOpen</name><argument_list>(<argument><expr><literal type="string">"lsm"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testWriteDatasourceRange</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><literal type="number">100</literal><operator>+</operator><name>iOpen</name><operator>*</operator><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Schedule a crash simulation then close the db. */</comment>
      <expr_stmt><expr><call><name>tdb_lsm_prepare_sync_crash</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i</name><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>pDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Open the database and check that the crash did not cause any
      ** data loss.  */</comment>
      <expr_stmt><expr><call><name>testCompareCksumLsmdb</name><argument_list>(<argument><expr><name>DBNAME</name></expr></argument>, <argument><expr><name>bCompress</name></expr></argument>,
        <argument><expr><call><name>testCksumArrayGet</name><argument_list>(<argument><expr><name>pCksumDb</name></expr></argument>, <argument><expr><literal type="number">110</literal> <operator>+</operator> <name>iOpen</name><operator>*</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
        <argument><expr><name>pRc</name></expr></argument>
      )</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>testDatasourceFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>testCksumArrayFree</name><argument_list>(<argument><expr><name>pCksumDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>do_crash_test</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPattern</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pRc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>Test</name> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zTest</name></decl>;</decl_stmt>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>x</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>int</name></type> <name>bCompress</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aTest</name> <index>[]</index></name> <init>= <expr><block>{
    <expr><block>{ <expr><literal type="string">"crash.lsm.1"</literal></expr>,     <expr><name>crash_test1</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_ZLIB</name></cpp:ifdef>
    <expr><block>{ <expr><literal type="string">"crash.lsm_zip.1"</literal></expr>, <expr><name>crash_test1</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{ <expr><literal type="string">"crash.lsm.2"</literal></expr>,     <expr><name>crash_test2</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
    <expr><block>{ <expr><literal type="string">"crash.lsm.3"</literal></expr>,     <expr><name>crash_test3</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>pRc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;</operator><call><name>ArraySize</name><argument_list>(<argument><expr><name>aTest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>Test</name></name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>aTest</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><call><name>testCaseBegin</name><argument_list>(<argument><expr><name>pRc</name></expr></argument>, <argument><expr><name>zPattern</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>zTest</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name><name>p</name><operator>-&gt;</operator><name>x</name></name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>bCompress</name></name></expr></argument>, <argument><expr><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>testCaseFinish</name><argument_list>(<argument><expr><operator>*</operator><name>pRc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>
</unit>
