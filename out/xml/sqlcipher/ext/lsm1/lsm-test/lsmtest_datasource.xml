<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm-test/lsmtest_datasource.c">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmtest.h"</cpp:file></cpp:include>

<struct>struct <name>Datasource</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>nMinKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMaxKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMinVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMaxVal</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>aVal</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>testDatasourceEntry</name><parameter_list>(
  <parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iData</name></decl></parameter>, 
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnKey</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppVal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnVal</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>ppKey</name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>==</operator><operator>(</operator><name>pnKey</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>(</operator><name>ppVal</name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>==</operator><operator>(</operator><name>pnVal</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><name>ppKey</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <switch>switch<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
      <case>case <expr><name>TEST_DATASOURCE_RANDOM</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>nRange</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>nMaxKey</name></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>nMinKey</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nKey</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <call><name>testPrngValue</name><argument_list>(<argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name>iData</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>nRange</name> <operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>nMinKey</name></name></expr>;</expr_stmt> 
        <expr_stmt><expr><call><name>testPrngString</name><argument_list>(<argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name>iData</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aKey</name></name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block>
      <case>case <expr><name>TEST_DATASOURCE_SEQUENCE</name></expr>:</case>
        <expr_stmt><expr><name>nKey</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>aKey</name></name></expr></argument>, <argument><expr><literal type="string">"%012d"</literal></expr></argument>, <argument><expr><name>iData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
    <expr_stmt><expr><operator>*</operator><name>ppKey</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aKey</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnKey</name> <operator>=</operator> <name>nKey</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>ppVal</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>u32</name></type> <name>nVal</name> <init>= <expr><call><name>testPrngValue</name><argument_list>(<argument><expr><operator>(</operator><name>u32</name><operator>)</operator><name>iData</name></expr></argument>)</argument_list></call><operator>%</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nMaxVal</name></name><operator>-</operator><name><name>p</name><operator>-&gt;</operator><name>nMinVal</name></name><operator>)</operator><operator>+</operator><name><name>p</name><operator>-&gt;</operator><name>nMinVal</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>testPrngString</name><argument_list>(<argument><expr><operator>(</operator><name>u32</name><operator>)</operator><operator>~</operator><name>iData</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>aVal</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>nVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppVal</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>aVal</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnVal</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>nVal</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>testDatasourceFree</name><parameter_list>(<parameter><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>testFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
** Return a pointer to a nul-terminated string that corresponds to the
** contents of the datasource-definition passed as the first argument.
** The caller should eventually free the returned pointer using testFree().
*/</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>testDatasourceName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DatasourceDefn</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zRet</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>zRet</name> <operator>=</operator> <call><name>testMallocPrintf</name><argument_list>(<argument><expr><literal type="string">"%s.(%d-%d).(%d-%d)"</literal></expr></argument>,
      <argument><expr><operator>(</operator><ternary><condition><expr><name><name>p</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>TEST_DATASOURCE_SEQUENCE</name></expr> ?</condition><then> <expr><literal type="string">"seq"</literal></expr> </then><else>: <expr><literal type="string">"rnd"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
      <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nMinKey</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nMaxKey</name></name></expr></argument>,
      <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nMinVal</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>nMaxVal</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>zRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datasource</name> <modifier>*</modifier></type><name>testDatasourceNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DatasourceDefn</name> <modifier>*</modifier></type><name>pDefn</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Datasource</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMinKey</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>int</name></type> <name>nMaxKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMinVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMaxVal</name></decl>;</decl_stmt> 

  <if_stmt><if>if<condition>( <expr><name><name>pDefn</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>TEST_DATASOURCE_SEQUENCE</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>nMinKey</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>nMaxKey</name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>nMinKey</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDefn</name><operator>-&gt;</operator><name>nMinKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>nMaxKey</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>nMinKey</name></expr></argument>, <argument><expr><name><name>pDefn</name><operator>-&gt;</operator><name>nMaxKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>nMinVal</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pDefn</name><operator>-&gt;</operator><name>nMinVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nMaxVal</name> <operator>=</operator> <call><name>MAX</name><argument_list>(<argument><expr><name>nMinVal</name></expr></argument>, <argument><expr><name><name>pDefn</name><operator>-&gt;</operator><name>nMaxVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>Datasource</name> <operator>*</operator><operator>)</operator><call><name>testMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datasource</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nMaxKey</name> <operator>+</operator> <name>nMaxVal</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>eType</name></name> <operator>=</operator> <name><name>pDefn</name><operator>-&gt;</operator><name>eType</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nMinKey</name></name> <operator>=</operator> <name>nMinKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nMinVal</name></name> <operator>=</operator> <name>nMinVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nMaxKey</name></name> <operator>=</operator> <name>nMaxKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nMaxVal</name></name> <operator>=</operator> <name>nMaxVal</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aKey</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>aVal</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>aKey</name><index>[<expr><name>nMaxKey</name></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>
</unit>
