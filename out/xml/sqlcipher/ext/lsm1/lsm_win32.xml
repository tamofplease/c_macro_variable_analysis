<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/lsm1/lsm_win32.c"><comment type="block">/*
** 2011-12-03
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** Win32-specific run-time environment implementation for LSM.
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN32</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lsmInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** An open file is an instance of the following object
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>Win32File</name></name></type> <name>Win32File</name>;</typedef>
<struct>struct <name>Win32File</name> <block>{
  <decl_stmt><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>                  <comment type="block">/* The run-time environment */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl>;</decl_stmt>              <comment type="block">/* Full path to file */</comment>

  <decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name></decl>;</decl_stmt>                   <comment type="block">/* Open file handle */</comment>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>hShmFile</name></decl>;</decl_stmt>                <comment type="block">/* File handle for *-shm file */</comment>

  <decl_stmt><decl><type><name>SYSTEM_INFO</name></type> <name>sysInfo</name></decl>;</decl_stmt>            <comment type="block">/* Operating system information */</comment>
  <decl_stmt><decl><type><name>HANDLE</name></type> <name>hMap</name></decl>;</decl_stmt>                    <comment type="block">/* File handle for mapping */</comment>
  <decl_stmt><decl><type><name>LPVOID</name></type> <name>pMap</name></decl>;</decl_stmt>                    <comment type="block">/* Pointer to mapping of file fd */</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>nMap</name></decl>;</decl_stmt>                    <comment type="block">/* Size of mapping at pMap in bytes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nShm</name></decl>;</decl_stmt>                       <comment type="block">/* Number of entries in ahShm[]/apShm[] */</comment>
  <decl_stmt><decl><type><name>LPHANDLE</name></type> <name>ahShm</name></decl>;</decl_stmt>                 <comment type="block">/* Array of handles for shared mappings */</comment>
  <decl_stmt><decl><type><name>LPVOID</name> <modifier>*</modifier></type><name>apShm</name></decl>;</decl_stmt>                  <comment type="block">/* Array of 32K shared memory segments */</comment>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>win32ShmFile</name><parameter_list>(<parameter><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>zShm</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>lsmMallocZero</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>nName</name><operator>+</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zShm</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zShm</name></expr></argument>, <argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>zName</name></name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>zShm</name><index>[<expr><name>nName</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-shm"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zShm</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win32Sleep</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>us</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><operator>(</operator><name>us</name> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** The number of times that an I/O operation will be retried following a
** locking error - probably caused by antivirus software.  Also the initial
** delay before the first retry.  The delay increases linearly with each
** retry.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LSM_WIN32_IOERR_RETRY</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>LSM_WIN32_IOERR_RETRY</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LSM_WIN32_IOERR_RETRY_DELAY</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>LSM_WIN32_IOERR_RETRY_DELAY</name></cpp:macro> <cpp:value>25000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>win32IoerrRetry</name> <init>= <expr><name>LSM_WIN32_IOERR_RETRY</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>win32IoerrRetryDelay</name> <init>= <expr><name>LSM_WIN32_IOERR_RETRY_DELAY</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** The "win32IoerrCanRetry1" macro is used to determine if a particular
** I/O error code obtained via GetLastError() is eligible to be retried.
** It must accept the error code DWORD as its only argument and should
** return non-zero if the error code is transient in nature and the
** operation responsible for generating the original error might succeed
** upon being retried.  The argument to this macro should be a variable.
**
** Additionally, a macro named "win32IoerrCanRetry2" may be defined.  If
** it is defined, it will be consulted only when the macro
** "win32IoerrCanRetry1" returns zero.  The "win32IoerrCanRetry2" macro
** is completely optional and may be used to include additional error
** codes in the set that should result in the failing I/O operation being
** retried by the caller.  If defined, the "win32IoerrCanRetry2" macro
** must exhibit external semantics identical to those of the
** "win32IoerrCanRetry1" macro.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>win32IoerrCanRetry1</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>win32IoerrCanRetry1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)==ERROR_ACCESS_DENIED)        || \
                                ((a)==ERROR_SHARING_VIOLATION)    || \
                                ((a)==ERROR_LOCK_VIOLATION)       || \
                                ((a)==ERROR_DEV_NOT_EXIST)        || \
                                ((a)==ERROR_NETNAME_DELETED)      || \
                                ((a)==ERROR_SEM_TIMEOUT)          || \
                                ((a)==ERROR_NETWORK_UNREACHABLE))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** If an I/O error occurs, invoke this routine to see if it should be
** retried.  Return TRUE to retry.  Return FALSE to give up with an
** error.
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>win32RetryIoerr</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnRetry</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>lastErrno</name></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><operator>*</operator><name>pnRetry</name><operator>&gt;=</operator><name>win32IoerrRetry</name></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>lastErrno</name> <operator>=</operator> <call><name>GetLastError</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><call><name>win32IoerrCanRetry1</name><argument_list>(<argument><expr><name>lastErrno</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>win32Sleep</name><argument_list>(<argument><expr><name>win32IoerrRetryDelay</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><operator>*</operator><name>pnRetry</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><operator>*</operator><name>pnRetry</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>win32IoerrCanRetry2</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if type="elseif">else if<condition>( <expr><call><name>win32IoerrCanRetry2</name><argument_list>(<argument><expr><name>lastErrno</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>win32Sleep</name><argument_list>(<argument><expr><name>win32IoerrRetryDelay</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><operator>*</operator><name>pnRetry</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><operator>*</operator><name>pnRetry</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Convert a UTF-8 string to Microsoft Unicode.
**
** Space to hold the returned string is obtained from lsmMalloc().
*/</comment>
<function><type><specifier>static</specifier> <name>LPWSTR</name></type> <name>win32Utf8ToUnicode</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zText</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nChar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LPWSTR</name></type> <name>zWideText</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nChar</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zText</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nChar</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zWideText</name> <operator>=</operator> <call><name>lsmMallocZero</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>nChar</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WCHAR</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zWideText</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nChar</name> <operator>=</operator> <call><name>MultiByteToWideChar</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zText</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zWideText</name></expr></argument>, <argument><expr><name>nChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nChar</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zWideText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zWideText</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zWideText</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
** Convert a Microsoft Unicode string to UTF-8.
**
** Space to hold the returned string is obtained from lsmMalloc().
*/</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>win32UnicodeToUtf8</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>LPCWSTR</name></type> <name>zWideText</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zText</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zWideText</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zText</name> <operator>=</operator> <call><name>lsmMallocZero</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zText</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>zWideText</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>zText</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nByte</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zText</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>zText</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>win32IsNotFound</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>win32IsNotFound</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)==ERROR_FILE_NOT_FOUND)  || \
                            ((a)==ERROR_PATH_NOT_FOUND))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win32Open</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>LPHANDLE</name></type> <name>phFile</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LPWSTR</name></type> <name>zConverted</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>zConverted</name> <operator>=</operator> <call><name>win32Utf8ToUnicode</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zConverted</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_NOMEM_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>bReadonly</name> <init>= <expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>LSM_OPEN_READONLY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dwDesiredAccess</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dwShareMode</name> <init>= <expr><name>FILE_SHARE_READ</name> <operator>|</operator> <name>FILE_SHARE_WRITE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dwCreationDisposition</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dwFlagsAndAttributes</name> <init>= <expr><name>FILE_ATTRIBUTE_NORMAL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nRetry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>bReadonly</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>dwDesiredAccess</name> <operator>=</operator> <name>GENERIC_READ</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>dwCreationDisposition</name> <operator>=</operator> <name>OPEN_EXISTING</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><name>dwDesiredAccess</name> <operator>=</operator> <name>GENERIC_READ</name> <operator>|</operator> <name>GENERIC_WRITE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>dwCreationDisposition</name> <operator>=</operator> <name>OPEN_ALWAYS</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <while>while<condition>( <expr><operator>(</operator><name>hFile</name> <operator>=</operator> <call><name>CreateFileW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>zConverted</name></expr></argument>,
                                <argument><expr><name>dwDesiredAccess</name></expr></argument>,
                                <argument><expr><name>dwShareMode</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                <argument><expr><name>dwCreationDisposition</name></expr></argument>,
                                <argument><expr><name>dwFlagsAndAttributes</name></expr></argument>,
                                <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><name>INVALID_HANDLE_VALUE</name> <operator>&amp;&amp;</operator>
                                <call><name>win32RetryIoerr</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRetry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <comment type="block">/* Noop */</comment>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>hFile</name><operator>!=</operator><name>INVALID_HANDLE_VALUE</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>phFile</name> <operator>=</operator> <name>hFile</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_OK</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>win32IsNotFound</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsmErrorBkpt</name><argument_list>(<argument><expr><name>LSM_IOERR_NOENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsOpen</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFile</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pWin32File</name> <operator>=</operator> <call><name>lsmMallocZero</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Win32File</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>pWin32File</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_NOMEM_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>hFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>win32Open</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWin32File</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SYSTEM_INFO</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>GetSystemInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWin32File</name><operator>-&gt;</operator><name>sysInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>zName</name></name> <operator>=</operator> <name>zFile</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name> <operator>=</operator> <name>hFile</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>pWin32File</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pWin32File</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppFile</name> <operator>=</operator> <operator>(</operator><name>lsm_file</name> <operator>*</operator><operator>)</operator><name>pWin32File</name></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsWrite</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <comment type="block">/* File to write to */</comment>
  <parameter><decl><type><name>lsm_i64</name></type> <name>iOff</name></decl></parameter>,    <comment type="block">/* Offset to write to */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,     <comment type="block">/* Write data from this buffer */</comment>
  <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>        <comment type="block">/* Bytes of data to write */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>overlapped</name></decl>;</decl_stmt>  <comment type="block">/* The offset for WriteFile. */</comment>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>aRem</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Data yet to be written */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRem</name> <init>= <expr><name>nData</name></expr></init></decl>;</decl_stmt>       <comment type="block">/* Number of bytes yet to be written */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRetry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>         <comment type="block">/* Number of retrys */</comment>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OVERLAPPED</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>overlapped</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>(</operator><name>iOff</name> <operator>&amp;</operator> <literal type="number">0XFFFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>overlapped</name><operator>.</operator><name>OffsetHigh</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>(</operator><operator>(</operator><name>iOff</name><operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>nRem</name><operator>&gt;</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>nWrite</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* Bytes written using WriteFile */</comment>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>WriteFile</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>, <argument><expr><name>aRem</name></expr></argument>, <argument><expr><name>nRem</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nWrite</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>win32RetryIoerr</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRetry</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nWrite</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>nWrite</name><operator>&lt;=</operator><operator>(</operator><name>DWORD</name><operator>)</operator><name>nRem</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>nWrite</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>nWrite</name><operator>&gt;</operator><operator>(</operator><name>DWORD</name><operator>)</operator><name>nRem</name></expr> )</condition><block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>iOff</name> <operator>+=</operator> <name>nWrite</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>overlapped</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>(</operator><name>iOff</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>overlapped</name><operator>.</operator><name>OffsetHigh</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>(</operator><operator>(</operator><name>iOff</name><operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>aRem</name> <operator>+=</operator> <name>nWrite</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nRem</name> <operator>-=</operator> <name>nWrite</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>nRem</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win32Truncate</name><parameter_list>(
  <parameter><decl><type><name>HANDLE</name></type> <name>hFile</name></decl></parameter>,
  <parameter><decl><type><name>lsm_i64</name></type> <name>nSize</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>offset</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>offset</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <name>nSize</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SetFilePointerEx</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FILE_BEGIN</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SetEndOfFile</name><argument_list>(<argument><expr><name>hFile</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsTruncate</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <comment type="block">/* File to write to */</comment>
  <parameter><decl><type><name>lsm_i64</name></type> <name>nSize</name></decl></parameter>    <comment type="block">/* Size to truncate file to */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>win32Truncate</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>, <argument><expr><name>nSize</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsRead</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <comment type="block">/* File to read from */</comment>
  <parameter><decl><type><name>lsm_i64</name></type> <name>iOff</name></decl></parameter>,    <comment type="block">/* Offset to read from */</comment>
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>,     <comment type="block">/* Read data into this buffer */</comment>
  <parameter><decl><type><name>int</name></type> <name>nData</name></decl></parameter>        <comment type="block">/* Bytes of data to read */</comment>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>overlapped</name></decl>;</decl_stmt> <comment type="block">/* The offset for ReadFile */</comment>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>nRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>       <comment type="block">/* Bytes read using ReadFile */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRetry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="block">/* Number of retrys */</comment>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OVERLAPPED</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>overlapped</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>(</operator><name>iOff</name> <operator>&amp;</operator> <literal type="number">0XFFFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>overlapped</name><operator>.</operator><name>OffsetHigh</name></name> <operator>=</operator> <operator>(</operator><name>LONG</name><operator>)</operator><operator>(</operator><operator>(</operator><name>iOff</name><operator>&gt;&gt;</operator><literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0X7FFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
  <while>while<condition>( <expr><operator>!</operator><call><name>ReadFile</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRead</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>overlapped</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
         <call><name>GetLastError</name><argument_list>()</argument_list></call><operator>!=</operator><name>ERROR_HANDLE_EOF</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><call><name>win32RetryIoerr</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRetry</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
  </block_content>}</block></while>
  <if_stmt><if>if<condition>( <expr><name>nRead</name><operator>&lt;</operator><operator>(</operator><name>DWORD</name><operator>)</operator><name>nData</name></expr> )</condition><block>{<block_content>
    <comment type="block">/* Unread parts of the buffer must be zero-filled */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pData</name><operator>)</operator><index>[<expr><name>nRead</name></expr>]</index></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nData</name> <operator>-</operator> <name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsSync</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>LSM_OK</name></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LSM_NO_SYNC</name></cpp:ifndef>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pMap</name></name><operator>!=</operator><name>NULL</name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>FlushViewOfFile</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>==</operator><name>LSM_OK</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FlushFileBuffers</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>unused_parameter</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsSectorSize</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><literal type="number">512</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>win32Unmap</name><parameter_list>(<parameter><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pMap</name></name><operator>!=</operator><name>NULL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pMap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>nMap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hMap</name></name><operator>!=</operator><name>NULL</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hMap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsRemap</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>lsm_i64</name></type> <name>iMin</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>,
  <parameter><decl><type><name>lsm_i64</name> <modifier>*</modifier></type><name>pnOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* If the file is between 0 and 2MB in size, extend it in chunks of 256K.
  ** Thereafter, in chunks of 1MB at a time.  */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>aIncrSz</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">256</literal><operator>*</operator><literal type="number">1024</literal></expr>, <expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nIncrSz</name> <init>= <expr><name><name>aIncrSz</name><index>[<expr><name>iMin</name><operator>&gt;</operator><operator>(</operator><literal type="number">2</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnOut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>win32Unmap</name><argument_list>(<argument><expr><name>pWin32File</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iMin</name><operator>&gt;=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>fileSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dwSizeHigh</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>dwSizeLow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>hMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LPVOID</name></type> <name>pMap</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fileSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LARGE_INTEGER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetFileSizeEx</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSize</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name><operator>&lt;</operator><name>iMin</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>iMin</name> <operator>+</operator> <name>nIncrSz</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>nIncrSz</name><operator>)</operator> <operator>*</operator> <name>nIncrSz</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>lsmWin32OsTruncate</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>dwSizeLow</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>dwSizeHigh</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name> <operator>&amp;</operator> <literal type="number">0x7FFFFFFFFFFFFFFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>hMap</name> <operator>=</operator> <call><name>CreateFileMappingW</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>,
                              <argument><expr><name>dwSizeHigh</name></expr></argument>, <argument><expr><name>dwSizeLow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>hMap</name><operator>==</operator><name>NULL</name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hMap</name></name> <operator>=</operator> <name>hMap</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name><operator>&lt;=</operator><literal type="number">0xFFFFFFFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pMap</name> <operator>=</operator> <call><name>MapViewOfFile</name><argument_list>(<argument><expr><name>hMap</name></expr></argument>, <argument><expr><name>FILE_MAP_WRITE</name> <operator>|</operator> <name>FILE_MAP_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                         <argument><expr><operator>(</operator><name>SIZE_T</name><operator>)</operator><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pMap</name><operator>==</operator><name>NULL</name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pMap</name></name> <operator>=</operator> <name>pMap</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>nMap</name></name> <operator>=</operator> <operator>(</operator><name>SIZE_T</name><operator>)</operator><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppOut</name> <operator>=</operator> <name><name>pWin32File</name><operator>-&gt;</operator><name>pMap</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnOut</name> <operator>=</operator> <name><name>pWin32File</name><operator>-&gt;</operator><name>nMap</name></name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BOOL</name></type> <name>win32IsDriveLetterAndColon</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zPathname</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <return>return <expr><operator>(</operator> <call><name>isalpha</name><argument_list>(<argument><expr><name><name>zPathname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>zPathname</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">':'</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsFullpath</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zName</name></decl></parameter>,
  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>zOut</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnOut</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>nByte</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>zConverted</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LPWSTR</name></type> <name>zTempWide</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zTempUtf8</name></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>zName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <call><name>win32IsDriveLetterAndColon</name><argument_list>(<argument><expr><name>zName</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>zName</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>zConverted</name> <operator>=</operator> <call><name>win32Utf8ToUnicode</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zConverted</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>GetFullPathNameW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>zConverted</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>zTempWide</name> <operator>=</operator> <call><name>lsmMallocZero</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>nByte</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>zTempWide</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zTempWide</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nByte</name> <operator>=</operator> <call><name>GetFullPathNameW</name><argument_list>(<argument><expr><operator>(</operator><name>LPCWSTR</name><operator>)</operator><name>zConverted</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zTempWide</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nByte</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zTempWide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zTempUtf8</name> <operator>=</operator> <call><name>win32UnicodeToUtf8</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zTempWide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zTempWide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zTempUtf8</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nOut</name> <init>= <expr><operator>*</operator><name>pnOut</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zTempUtf8</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>nLen</name><operator>&lt;=</operator><name>nOut</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>zOut</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>zTempUtf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zTempUtf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pnOut</name> <operator>=</operator> <name>nLen</name></expr>;</expr_stmt>
    <return>return <expr><name>LSM_OK</name></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
    <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsFileid</name><parameter_list>(
  <parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>,
  <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pnBuf</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nReq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name> <modifier>*</modifier></type><name>pBuf2</name> <init>= <expr><operator>(</operator><name>u8</name> <operator>*</operator><operator>)</operator><name>pBuf</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>BY_HANDLE_FILE_INFORMATION</name></type> <name>fileInfo</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nBuf</name> <operator>=</operator> <operator>*</operator><name>pnBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nReq</name> <operator>=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>fileInfo</name><operator>.</operator><name>dwVolumeSerialNumber</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
          <sizeof>sizeof<argument_list>(<argument><expr><name><name>fileInfo</name><operator>.</operator><name>nFileIndexHigh</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
          <sizeof>sizeof<argument_list>(<argument><expr><name><name>fileInfo</name><operator>.</operator><name>nFileIndexLow</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pnBuf</name> <operator>=</operator> <name>nReq</name></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>nReq</name><operator>&gt;</operator><name>nBuf</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_OK</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fileInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BY_HANDLE_FILE_INFORMATION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetFileInformationByHandle</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileInfo</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
    <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>nReq</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fileInfo</name><operator>.</operator><name>dwVolumeSerialNumber</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fileInfo</name><operator>.</operator><name>dwVolumeSerialNumber</name></name></expr></argument>, <argument><expr><name>nReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pBuf2</name> <operator>+=</operator> <name>nReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nReq</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fileInfo</name><operator>.</operator><name>nFileIndexHigh</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fileInfo</name><operator>.</operator><name>nFileIndexHigh</name></name></expr></argument>, <argument><expr><name>nReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pBuf2</name> <operator>+=</operator> <name>nReq</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nReq</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>fileInfo</name><operator>.</operator><name>nFileIndexLow</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>fileInfo</name><operator>.</operator><name>nFileIndexLow</name></name></expr></argument>, <argument><expr><name>nReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win32Delete</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LPWSTR</name></type> <name>zConverted</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>zConverted</name> <operator>=</operator> <call><name>win32Utf8ToUnicode</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>zConverted</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_NOMEM_BKPT</name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>nRetry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>attr</name></decl>;</decl_stmt>

    <do>do <block>{<block_content>
      <expr_stmt><expr><name>attr</name> <operator>=</operator> <call><name>GetFileAttributesW</name><argument_list>(<argument><expr><name>zConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>( <expr><name>attr</name><operator>==</operator><name>INVALID_FILE_ATTRIBUTES</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>( <expr><name>attr</name><operator>&amp;</operator><name>FILE_ATTRIBUTE_DIRECTORY</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt> <comment type="block">/* Files only. */</comment>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>( <expr><call><name>DeleteFileW</name><argument_list>(<argument><expr><name>zConverted</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_OK</name></expr>;</expr_stmt> <comment type="block">/* Deleted OK. */</comment>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>win32RetryIoerr</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nRetry</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt> <comment type="block">/* No more retries. */</comment>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>;</do>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zConverted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsUnlink</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><call><name>win32Delete</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>win32IsLockBusy</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>win32IsLockBusy</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a)==ERROR_LOCK_VIOLATION) || \
                            ((a)==ERROR_IO_PENDING))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>win32LockFile</name><parameter_list>(
  <parameter><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iLock</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>nLock</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>OVERLAPPED</name></type> <name>ovlp</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>LSM_LOCK_UNLOCK</name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>LSM_LOCK_SHARED</name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>LSM_LOCK_EXCL</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eType</name><operator>&gt;=</operator><name>LSM_LOCK_UNLOCK</name> <operator>&amp;&amp;</operator> <name>eType</name><operator>&lt;=</operator><name>LSM_LOCK_EXCL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nLock</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iLock</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>iLock</name><operator>&lt;=</operator><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ovlp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OVERLAPPED</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ovlp</name><operator>.</operator><name>Offset</name></name> <operator>=</operator> <operator>(</operator><literal type="number">4096</literal><operator>-</operator><name>iLock</name><operator>-</operator><name>nLock</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>eType</name><operator>&gt;</operator><name>LSM_LOCK_UNLOCK</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>DWORD</name></type> <name>flags</name> <init>= <expr><name>LOCKFILE_FAIL_IMMEDIATELY</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>( <expr><name>eType</name><operator>&gt;=</operator><name>LSM_LOCK_EXCL</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LOCKFILE_EXCLUSIVE_LOCK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>LockFileEx</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ovlp</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><call><name>win32IsLockBusy</name><argument_list>(<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <return>return <expr><name>LSM_BUSY</name></expr>;</return>
      </block_content>}</block></if><else>else<block>{<block_content>
        <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>UnlockFileEx</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ovlp</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsLock</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>win32LockFile</name><argument_list>(<argument><expr><name>pWin32File</name></expr></argument>, <argument><expr><name>iLock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>eType</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsTestLock</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iLock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nLock</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eType</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>win32LockFile</name><argument_list>(<argument><expr><name>pWin32File</name></expr></argument>, <argument><expr><name>iLock</name></expr></argument>, <argument><expr><name>nLock</name></expr></argument>, <argument><expr><name>eType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>LSM_OK</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>win32LockFile</name><argument_list>(<argument><expr><name>pWin32File</name></expr></argument>, <argument><expr><name>iLock</name></expr></argument>, <argument><expr><name>nLock</name></expr></argument>, <argument><expr><name>LSM_LOCK_UNLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsShmMap</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iChunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppShm</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOffset</name> <init>= <expr><name>iChunk</name> <operator>*</operator> <name>sz</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOffsetShift</name> <init>= <expr><name>iOffset</name> <operator>%</operator> <name><name>pWin32File</name><operator>-&gt;</operator><name>sysInfo</name><operator>.</operator><name>dwAllocationGranularity</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> <init>= <expr><name>iChunk</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lsm_i64</name></type> <name>nReq</name> <init>= <expr><name>nNew</name> <operator>*</operator> <name>sz</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppShm</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>sz</name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>sz</name><operator>==</operator><name>LSM_SHM_CHUNK_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>iChunk</name><operator>&gt;=</operator><name><name>pWin32File</name><operator>-&gt;</operator><name>nShm</name></name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>LPHANDLE</name></type> <name>ahNew</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LPVOID</name> <modifier>*</modifier></type><name>apNew</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LARGE_INTEGER</name></type> <name>fileSize</name></decl>;</decl_stmt>

    <comment type="block">/* If the shared-memory file has not been opened, open it now. */</comment>
    <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hShmFile</name></name><operator>==</operator><name>NULL</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm</name> <init>= <expr><call><name>win32ShmFile</name><argument_list>(<argument><expr><name>pWin32File</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><operator>!</operator><name>zShm</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>win32Open</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>zShm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWin32File</name><operator>-&gt;</operator><name>hShmFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>zShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* If the shared-memory file is not large enough to contain the
    ** requested chunk, cause it to grow.  */</comment>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fileSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LARGE_INTEGER</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>GetFileSizeEx</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hShmFile</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileSize</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name><operator>&gt;=</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name><name>fileSize</name><operator>.</operator><name>QuadPart</name></name><operator>&lt;</operator><name>nReq</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>win32Truncate</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hShmFile</name></name></expr></argument>, <argument><expr><name>nReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>LSM_OK</name></expr> )</condition><block>{<block_content>
        <return>return <expr><name>rc</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ahNew</name> <operator>=</operator> <operator>(</operator><name>LPHANDLE</name><operator>)</operator><call><name>lsmMallocZero</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>ahNew</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>apNew</name> <operator>=</operator> <operator>(</operator><name>LPVOID</name> <operator>*</operator><operator>)</operator><call><name>lsmMallocZero</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LPVOID</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>nNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><operator>!</operator><name>apNew</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>ahNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ahNew</name></expr></argument>, <argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pWin32File</name><operator>-&gt;</operator><name>nShm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>apNew</name></expr></argument>, <argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LPVOID</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pWin32File</name><operator>-&gt;</operator><name>nShm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name></name> <operator>=</operator> <name>ahNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name></name> <operator>=</operator> <name>apNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>nShm</name></name> <operator>=</operator> <name>nNew</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name><index>[<expr><name>iChunk</name></expr>]</index></name><operator>==</operator><name>NULL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>HANDLE</name></type> <name>hMap</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nReq</name><operator>&lt;=</operator><literal type="number">0xFFFFFFFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hMap</name> <operator>=</operator> <call><name>CreateFileMappingW</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hShmFile</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                              <argument><expr><operator>(</operator><name>DWORD</name><operator>)</operator><name>nReq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>hMap</name><operator>==</operator><name>NULL</name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name><index>[<expr><name>iChunk</name></expr>]</index></name> <operator>=</operator> <name>hMap</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iChunk</name></expr>]</index></name><operator>==</operator><name>NULL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>LPVOID</name></type> <name>pMap</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>pMap</name> <operator>=</operator> <call><name>MapViewOfFile</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name><index>[<expr><name>iChunk</name></expr>]</index></name></expr></argument>,
                         <argument><expr><name>FILE_MAP_WRITE</name> <operator>|</operator> <name>FILE_MAP_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                         <argument><expr><name>iOffset</name> <operator>-</operator> <name>iOffsetShift</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <name>iOffsetShift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>pMap</name><operator>==</operator><name>NULL</name></expr> )</condition><block>{<block_content>
      <return>return <expr><name>LSM_IOERR_BKPT</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iChunk</name></expr>]</index></name> <operator>=</operator> <name>pMap</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><name>iOffsetShift</name><operator>!=</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iChunk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppShm</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><name>iOffsetShift</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppShm</name> <operator>=</operator> <name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>iChunk</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmWin32OsShmBarrier</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>MemoryBarrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsShmUnmap</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bDelete</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hShmFile</name></name><operator>!=</operator><name>NULL</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pWin32File</name><operator>-&gt;</operator><name>nShm</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>NULL</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>NULL</name></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hShmFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hShmFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>bDelete</name></expr> )</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zShm</name> <init>= <expr><call><name>win32ShmFile</name><argument_list>(<argument><expr><name>pWin32File</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name>zShm</name></expr> )</condition><block>{<block_content> <expr_stmt><expr><call><name>win32Delete</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>zShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>zShm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MX_CLOSE_ATTEMPT</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsClose</name><parameter_list>(<parameter><decl><type><name>lsm_file</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRetry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Win32File</name> <modifier>*</modifier></type><name>pWin32File</name> <init>= <expr><operator>(</operator><name>Win32File</name> <operator>*</operator><operator>)</operator><name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>lsmWin32OsShmUnmap</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>win32Unmap</name><argument_list>(<argument><expr><name>pWin32File</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <do>do<block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name><operator>==</operator><name>NULL</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>hFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_OK</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if<condition>( <expr><operator>++</operator><name>nRetry</name><operator>&gt;=</operator><name>MX_CLOSE_ATTEMPT</name></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>LSM_IOERR_BKPT</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>while<condition>( <expr><literal type="number">1</literal></expr> )</condition>;</do>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>ahShm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>apShm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pWin32File</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>pWin32File</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsSleep</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>us</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>unused_parameter</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>win32Sleep</name><argument_list>(<argument><expr><name>us</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************************************
** Memory allocation routines.
*/</comment>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>lsmWin32OsMalloc</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>HeapValidate</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>HeapAlloc</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>SIZE_T</name><operator>)</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmWin32OsFree</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>HeapValidate</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>HeapFree</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>lsmWin32OsRealloc</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>HeapValidate</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><literal type="number">1</literal><operator>&gt;</operator><name>N</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>lsmWin32OsFree</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if><if type="elseif">else if<condition>( <expr><name>NULL</name><operator>==</operator><name>p</name></expr> )</condition><block>{<block_content>
    <return>return <expr><call><name>lsmWin32OsMalloc</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if><else>else<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> <comment type="block">/* arguable: don't shrink */</comment>
    SIZE_T sz = HeapSize(GetProcessHeap(), 0, m);
    if( sz&gt;=(SIZE_T)N ){
      return p;
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><call><name>HeapReAlloc</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>lsmWin32OsMSize</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>HeapValidate</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>HeapSize</name><argument_list>(<argument><expr><call><name>GetProcessHeap</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_MUTEX_WIN32</name></cpp:ifdef>
<comment type="block" format="doxygen">/*************************************************************************
** Mutex methods for Win32 based systems.  If LSM_MUTEX_WIN32 is
** missing then a no-op implementation of mutexes found below will be
** used instead.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>Win32Mutex</name></name></type> <name>Win32Mutex</name>;</typedef>
<struct>struct <name>Win32Mutex</name> <block>{
  <decl_stmt><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>mutex</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name>DWORD</name></type> <name>owner</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32_MUTEX_INITIALIZER</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>WIN32_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>{ 0 }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>LSM_WIN32_STATIC_MUTEX</name></cpp:macro> <cpp:value>{ 0, WIN32_MUTEX_INITIALIZER, 0 }</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>LSM_WIN32_STATIC_MUTEX</name></cpp:macro> <cpp:value>{ 0, WIN32_MUTEX_INITIALIZER }</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexStatic</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iMutex</name></decl></parameter>,
  <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStatic</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>LONG</name></type> <name>initialized</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>Win32Mutex</name></type> <name><name>sMutex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><name>LSM_WIN32_STATIC_MUTEX</name></expr>,
    <expr><name>LSM_WIN32_STATIC_MUTEX</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iMutex</name><operator>==</operator><name>LSM_MUTEX_GLOBAL</name> <operator>||</operator> <name>iMutex</name><operator>==</operator><name>LSM_MUTEX_HEAP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>LSM_MUTEX_GLOBAL</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>LSM_MUTEX_HEAP</name><operator>==</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>( <expr><call><name>InterlockedCompareExchange</name><argument_list>(<argument><expr><operator>&amp;</operator><name>initialized</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>array_size</name><argument_list>(<argument><expr><name>sMutex</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sMutex</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppStatic</name> <operator>=</operator> <operator>(</operator><name>lsm_mutex</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>sMutex</name><index>[<expr><name>iMutex</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexNew</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32Mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl>;</decl_stmt>           <comment type="block">/* Pointer to new mutex */</comment>

  <expr_stmt><expr><name>pMutex</name> <operator>=</operator> <operator>(</operator><name>Win32Mutex</name> <operator>*</operator><operator>)</operator><call><name>lsmMallocZero</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Win32Mutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><operator>!</operator><name>pMutex</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>LSM_NOMEM_BKPT</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pMutex</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppNew</name> <operator>=</operator> <operator>(</operator><name>lsm_mutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmWin32OsMutexDel</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32Mutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>Win32Mutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>DeleteCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>pMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmWin32OsMutexEnter</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32Mutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>Win32Mutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name><operator>!=</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name><operator>==</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexTry</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>BOOL</name></type> <name>bRet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Win32Mutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>Win32Mutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>bRet</name> <operator>=</operator> <call><name>TryEnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
  <if_stmt><if>if<condition>( <expr><name>bRet</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name><operator>!=</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name><operator>==</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><operator>!</operator><name>bRet</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmWin32OsMutexLeave</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32Mutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>Win32Mutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name><operator>==</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name><operator>!=</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMutex</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexHeld</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32Mutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>Win32Mutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>pMutex</name></expr> ?</condition><then> <expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name><operator>==</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexNotHeld</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>Win32Mutex</name> <modifier>*</modifier></type><name>pMutex</name> <init>= <expr><operator>(</operator><name>Win32Mutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>pMutex</name></expr> ?</condition><then> <expr><name><name>pMutex</name><operator>-&gt;</operator><name>owner</name></name><operator>!=</operator><call><name>GetCurrentThreadId</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*
** End of Win32 mutex implementation.
*************************************************************************/</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<comment type="block" format="doxygen">/*************************************************************************
** Noop mutex implementation
*/</comment>
<typedef>typedef <type><name><name>struct</name> <name>NoopMutex</name></name></type> <name>NoopMutex</name>;</typedef>
<struct>struct <name>NoopMutex</name> <block>{
  <decl_stmt><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl>;</decl_stmt>                  <comment type="block">/* Environment handle (for xFree()) */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bHeld</name></decl>;</decl_stmt>                      <comment type="block">/* True if mutex is held */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>bStatic</name></decl>;</decl_stmt>                    <comment type="block">/* True for a static mutex */</comment>
}</block>;</struct>
<decl_stmt><decl><type><specifier>static</specifier> <name>NoopMutex</name></type> <name><name>aStaticNoopMutex</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexStatic</name><parameter_list>(
  <parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>,
  <parameter><decl><type><name>int</name></type> <name>iMutex</name></decl></parameter>,
  <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStatic</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iMutex</name><operator>&gt;=</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>iMutex</name><operator>&lt;=</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>array_size</name><argument_list>(<argument><expr><name>aStaticNoopMutex</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppStatic</name> <operator>=</operator> <operator>(</operator><name>lsm_mutex</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>aStaticNoopMutex</name><index>[<expr><name>iMutex</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>LSM_OK</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexNew</name><parameter_list>(<parameter><decl><type><name>lsm_env</name> <modifier>*</modifier></type><name>pEnv</name></decl></parameter>, <parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppNew</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><call><name>lsmMallocZero</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>NoopMutex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppNew</name> <operator>=</operator> <operator>(</operator><name>lsm_mutex</name> <operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>LSM_OK</name></expr> </then><else>: <expr><name>LSM_NOMEM_BKPT</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmWin32OsMutexDel</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list>  <block>{<block_content>
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bStatic</name></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lsmFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pEnv</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmWin32OsMutexEnter</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexTry</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name><operator>==</operator><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>lsmWin32OsMutexLeave</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name><operator>==</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexHeld</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int</name></type> <name>lsmWin32OsMutexNotHeld</name><parameter_list>(<parameter><decl><type><name>lsm_mutex</name> <modifier>*</modifier></type><name>pMutex</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>NoopMutex</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>NoopMutex</name> <operator>*</operator><operator>)</operator><name>pMutex</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>bHeld</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block" format="doxygen">/***************************************************************************/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* else LSM_MUTEX_NONE */</comment>

<comment type="block">/* Without LSM_DEBUG, the MutexHeld tests are never called */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LSM_DEBUG</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>lsmWin32OsMutexHeld</name></cpp:macro>    <cpp:value>0</cpp:value></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <cpp:macro><name>lsmWin32OsMutexNotHeld</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>lsm_env</name> <modifier>*</modifier></type><name>lsm_default_env</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>lsm_env</name></type> <name>win32_env</name> <init>= <expr><block>{
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>lsm_env</name></expr></argument>)</argument_list></sizeof></expr>,         <comment type="block">/* nByte */</comment>
    <expr><literal type="number">1</literal></expr>,                       <comment type="block">/* iVersion */</comment>
    <comment type="block" format="doxygen">/***** file i/o ******************/</comment>
    <expr><literal type="number">0</literal></expr>,                       <comment type="block">/* pVfsCtx */</comment>
    <expr><name>lsmWin32OsFullpath</name></expr>,      <comment type="block">/* xFullpath */</comment>
    <expr><name>lsmWin32OsOpen</name></expr>,          <comment type="block">/* xOpen */</comment>
    <expr><name>lsmWin32OsRead</name></expr>,          <comment type="block">/* xRead */</comment>
    <expr><name>lsmWin32OsWrite</name></expr>,         <comment type="block">/* xWrite */</comment>
    <expr><name>lsmWin32OsTruncate</name></expr>,      <comment type="block">/* xTruncate */</comment>
    <expr><name>lsmWin32OsSync</name></expr>,          <comment type="block">/* xSync */</comment>
    <expr><name>lsmWin32OsSectorSize</name></expr>,    <comment type="block">/* xSectorSize */</comment>
    <expr><name>lsmWin32OsRemap</name></expr>,         <comment type="block">/* xRemap */</comment>
    <expr><name>lsmWin32OsFileid</name></expr>,        <comment type="block">/* xFileid */</comment>
    <expr><name>lsmWin32OsClose</name></expr>,         <comment type="block">/* xClose */</comment>
    <expr><name>lsmWin32OsUnlink</name></expr>,        <comment type="block">/* xUnlink */</comment>
    <expr><name>lsmWin32OsLock</name></expr>,          <comment type="block">/* xLock */</comment>
    <expr><name>lsmWin32OsTestLock</name></expr>,      <comment type="block">/* xTestLock */</comment>
    <expr><name>lsmWin32OsShmMap</name></expr>,        <comment type="block">/* xShmMap */</comment>
    <expr><name>lsmWin32OsShmBarrier</name></expr>,    <comment type="block">/* xShmBarrier */</comment>
    <expr><name>lsmWin32OsShmUnmap</name></expr>,      <comment type="block">/* xShmUnmap */</comment>
    <comment type="block" format="doxygen">/***** memory allocation *********/</comment>
    <expr><literal type="number">0</literal></expr>,                       <comment type="block">/* pMemCtx */</comment>
    <expr><name>lsmWin32OsMalloc</name></expr>,        <comment type="block">/* xMalloc */</comment>
    <expr><name>lsmWin32OsRealloc</name></expr>,       <comment type="block">/* xRealloc */</comment>
    <expr><name>lsmWin32OsFree</name></expr>,          <comment type="block">/* xFree */</comment>
    <expr><name>lsmWin32OsMSize</name></expr>,         <comment type="block">/* xSize */</comment>
    <comment type="block" format="doxygen">/***** mutexes *********************/</comment>
    <expr><literal type="number">0</literal></expr>,                       <comment type="block">/* pMutexCtx */</comment>
    <expr><name>lsmWin32OsMutexStatic</name></expr>,   <comment type="block">/* xMutexStatic */</comment>
    <expr><name>lsmWin32OsMutexNew</name></expr>,      <comment type="block">/* xMutexNew */</comment>
    <expr><name>lsmWin32OsMutexDel</name></expr>,      <comment type="block">/* xMutexDel */</comment>
    <expr><name>lsmWin32OsMutexEnter</name></expr>,    <comment type="block">/* xMutexEnter */</comment>
    <expr><name>lsmWin32OsMutexTry</name></expr>,      <comment type="block">/* xMutexTry */</comment>
    <expr><name>lsmWin32OsMutexLeave</name></expr>,    <comment type="block">/* xMutexLeave */</comment>
    <expr><name>lsmWin32OsMutexHeld</name></expr>,     <comment type="block">/* xMutexHeld */</comment>
    <expr><name>lsmWin32OsMutexNotHeld</name></expr>,  <comment type="block">/* xMutexNotHeld */</comment>
    <comment type="block" format="doxygen">/***** other *********************/</comment>
    <expr><name>lsmWin32OsSleep</name></expr>,         <comment type="block">/* xSleep */</comment>
  }</block></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>&amp;</operator><name>win32_env</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
