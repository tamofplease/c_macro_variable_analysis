<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/sqlcipher/ext/session/session_speed_test.c"><comment type="block">/*
** 2017 January 31
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the source code for a standalone program used to
** test the performance of the sessions module. Compile and run:
**
**   ./session_speed_test -help
**
** for details.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/*************************************************************************
** Start of generic command line parser.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDLINE_BARE</name></cpp:macro>       <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDLINE_INTEGER</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDLINE_STRING</name></cpp:macro>     <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDLINE_BOOLEAN</name></cpp:macro>    <cpp:value>3</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>CmdLineOption</name></name></type> <name>CmdLineOption</name>;</typedef>
<struct>struct <name>CmdLineOption</name> <block>{
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zText</name></decl>;</decl_stmt>              <comment type="block">/* Name of command line option */</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zHelp</name></decl>;</decl_stmt>              <comment type="block">/* Help text for option */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name></decl>;</decl_stmt>                      <comment type="block">/* One of the CMDLINE_* values */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iOff</name></decl>;</decl_stmt>                       <comment type="block">/* Offset of output variable */</comment>
}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDLINE_INT32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{x, y, CMDLINE_INTEGER, z}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDLINE_BOOL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>{x, y, CMDLINE_BOOLEAN, z}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDLINE_TEXT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>{x, y, CMDLINE_STRING, z}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMDLINE_NONE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>,<parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>{x, y, CMDLINE_BARE, z}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>option_requires_argument_error</name><parameter_list>(<parameter><decl><type><name>CmdLineOption</name> <modifier>*</modifier></type><name>pOpt</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Option requires a%s argument: %s\n"</literal></expr></argument>, 
      <argument><expr><ternary><condition><expr><name><name>pOpt</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>CMDLINE_INTEGER</name></expr> ?</condition><then> <expr><literal type="string">"n integer"</literal></expr> </then><else>:
      <expr><ternary><condition><expr><name><name>pOpt</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>CMDLINE_STRING</name></expr> ?</condition><then> <expr><literal type="string">" string"</literal></expr> </then><else>: <expr><literal type="string">" boolean"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
      <argument><expr><name><name>pOpt</name><operator>-&gt;</operator><name>zText</name></name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ambiguous_option_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Option is ambiguous: %s\n"</literal></expr></argument>, <argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unknown_option_error</name><parameter_list>(
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>, 
  <parameter><decl><type><name>CmdLineOption</name> <modifier>*</modifier></type><name>aOpt</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zHelp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Unknown option: %s\n"</literal></expr></argument>, <argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nOptions are:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  % -30sEcho command line options\n"</literal></expr></argument>, <argument><expr><literal type="string">"-cmdline:verbose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>aOpt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zText</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>eType</name> <init>= <expr><name><name>aOpt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eType</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zOpt</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name><name>aOpt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zText</name></expr></argument>,
        <argument><expr><ternary><condition><expr><name>eType</name><operator>==</operator><name>CMDLINE_BARE</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>:
        <expr><ternary><condition><expr><name>eType</name><operator>==</operator><name>CMDLINE_INTEGER</name></expr> ?</condition><then> <expr><literal type="string">"N"</literal></expr> </then><else>:
        <expr><ternary><condition><expr><name>eType</name><operator>==</operator><name>CMDLINE_BOOLEAN</name></expr> ?</condition><then> <expr><literal type="string">"BOOLEAN"</literal></expr> </then><else>: <expr><literal type="string">"TEXT"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument>
    )</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"  % -30s%s\n"</literal></expr></argument>, <argument><expr><name>zOpt</name></expr></argument>, <argument><expr><name><name>aOpt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>zHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if<condition>( <expr><name>zHelp</name></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><name>zHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_integer_option</name><parameter_list>(<parameter><decl><type><name>CmdLineOption</name> <modifier>*</modifier></type><name>pOpt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iRet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bSign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'-'</literal></expr> )</condition><block>{<block_content>
    <expr_stmt><expr><name>bSign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <while>while<condition>( <expr><name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block>{<block_content>
    <if_stmt><if>if<condition>( <expr><name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><literal type="char">'0'</literal> <operator>||</operator> <name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="char">'9'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>option_requires_argument_error</name><argument_list>(<argument><expr><name>pOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>iRet</name> <operator>=</operator> <name>iRet</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>zArg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><operator>(</operator><name>iRet</name><operator>*</operator><name>bSign</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_boolean_option</name><parameter_list>(<parameter><decl><type><name>CmdLineOption</name> <modifier>*</modifier></type><name>pOpt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name></decl></parameter>)</parameter_list><block>{<block_content>
  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_stricmp</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>option_requires_argument_error</name><argument_list>(<argument><expr><name>pOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_command_line</name><parameter_list>(
  <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, 
  <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>iStart</name></decl></parameter>,
  <parameter><decl><type><name>CmdLineOption</name> <modifier>*</modifier></type><name>aOpt</name></decl></parameter>,
  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pStruct</name></decl></parameter>,
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zHelp</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pOut</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>pStruct</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bVerbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iArg</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>iArg</name><operator>=</operator><name>iStart</name></expr>;</init> <condition><expr><name>iArg</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><name>iArg</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zArg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>iArg</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nArg</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nMatch</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iOpt</name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>iOpt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>aOpt</name><index>[<expr><name>iOpt</name></expr>]</index></name><operator>.</operator><name>zText</name></expr>;</condition> <incr><expr><name>iOpt</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>CmdLineOption</name> <modifier>*</modifier></type><name>pOpt</name> <init>= <expr><operator>&amp;</operator><name><name>aOpt</name><index>[<expr><name>iOpt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><literal type="number">0</literal><operator>==</operator><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><name><name>pOpt</name><operator>-&gt;</operator><name>zText</name></name></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
        <if_stmt><if>if<condition>( <expr><name>nMatch</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><call><name>ambiguous_option_error</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>nMatch</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name><name>pOpt</name><operator>-&gt;</operator><name>eType</name></name><operator>==</operator><name>CMDLINE_BARE</name></expr> )</condition><block>{<block_content>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pOut</name><index>[<expr><name><name>pOpt</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
          <expr_stmt><expr><name>iArg</name><operator>++</operator></expr>;</expr_stmt>
          <if_stmt><if>if<condition>( <expr><name>iArg</name><operator>==</operator><name>argc</name></expr> )</condition><block>{<block_content>
            <expr_stmt><expr><call><name>option_requires_argument_error</name><argument_list>(<argument><expr><name>pOpt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <switch>switch<condition>( <expr><name><name>pOpt</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
            <case>case <expr><name>CMDLINE_INTEGER</name></expr>:</case>
              <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pOut</name><index>[<expr><name><name>pOpt</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name><operator>)</operator> <operator>=</operator> <call><name>get_integer_option</name><argument_list>(<argument><expr><name>pOpt</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>iArg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>CMDLINE_STRING</name></expr>:</case>
              <expr_stmt><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pOut</name><index>[<expr><name><name>pOpt</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name><operator>)</operator> <operator>=</operator> <name><name>argv</name><index>[<expr><name>iArg</name></expr>]</index></name></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>CMDLINE_BOOLEAN</name></expr>:</case>
              <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pOut</name><index>[<expr><name><name>pOpt</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name><operator>)</operator> <operator>=</operator> <call><name>get_boolean_option</name><argument_list>(<argument><expr><name>pOpt</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>iArg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
          </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if<condition>( <expr><name>nMatch</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal><operator>==</operator><call><name>sqlite3_strnicmp</name><argument_list>(<argument><expr><literal type="string">"-cmdline:verbose"</literal></expr></argument>, <argument><expr><name>zArg</name></expr></argument>, <argument><expr><name>nArg</name></expr></argument>)</argument_list></call></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><name>bVerbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nMatch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if<condition>( <expr><name>nMatch</name><operator>==</operator><literal type="number">0</literal></expr> )</condition><block>{<block_content>
      <expr_stmt><expr><call><name>unknown_option_error</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>, <argument><expr><name>aOpt</name></expr></argument>, <argument><expr><name>zHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if<condition>( <expr><name>bVerbose</name></expr> )</condition><block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>iOpt</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Options are: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>iOpt</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>aOpt</name><index>[<expr><name>iOpt</name></expr>]</index></name><operator>.</operator><name>zText</name></expr>;</condition> <incr><expr><name>iOpt</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <decl_stmt><decl><type><name>CmdLineOption</name> <modifier>*</modifier></type><name>pOpt</name> <init>= <expr><operator>&amp;</operator><name><name>aOpt</name><index>[<expr><name>iOpt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if<condition>( <expr><name><name>pOpt</name><operator>-&gt;</operator><name>eType</name></name><operator>!=</operator><name>CMDLINE_BARE</name> <operator>||</operator> <operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pOut</name><index>[<expr><name><name>pOpt</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><name><name>pOpt</name><operator>-&gt;</operator><name>zText</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <switch>switch<condition>( <expr><name><name>pOpt</name><operator>-&gt;</operator><name>eType</name></name></expr> )</condition><block>{<block_content>
        <case>case <expr><name>CMDLINE_INTEGER</name></expr>:</case>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pOut</name><index>[<expr><name><name>pOpt</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>CMDLINE_BOOLEAN</name></expr>:</case>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pOut</name><index>[<expr><name><name>pOpt</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>CMDLINE_STRING</name></expr>:</case>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pOut</name><index>[<expr><name><name>pOpt</name><operator>-&gt;</operator><name>iOff</name></name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<comment type="block">/* 
** End of generic command line parser.
*************************************************************************/</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>abort_due_to_error</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rc</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error: %d\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>execsql</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort_due_to_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>xConflict</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCtx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eConflict</name></decl></parameter>, <parameter><decl><type><name>sqlite3_changeset_iter</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<block_content>
  <return>return <expr><name>SQLITE_CHANGESET_ABORT</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>run_test</name><parameter_list>(
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, 
  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db2</name></decl></parameter>, 
  <parameter><decl><type><name>int</name></type> <name>nRow</name></decl></parameter>, 
  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zSql</name></decl></parameter>
)</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>sqlite3_session</name> <modifier>*</modifier></type><name>pSession</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>pStmt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nChangeset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pChangeset</name></decl>;</decl_stmt>

  <comment type="block">/* Attach a session object to database db */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3session_create</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort_due_to_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Configure the session to capture changes on all tables */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3session_attach</name><argument_list>(<argument><expr><name>pSession</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort_due_to_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Prepare the SQL statement */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort_due_to_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Open a transaction */</comment>
  <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"BEGIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Execute the SQL statement nRow times */</comment>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nRow</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <expr_stmt><expr><call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort_due_to_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Extract a changeset from the sessions object */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3session_changeset</name><argument_list>(<argument><expr><name>pSession</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nChangeset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pChangeset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort_due_to_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Apply the changeset to the second db */</comment>
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3changeset_apply</name><argument_list>(<argument><expr><name>db2</name></expr></argument>, <argument><expr><name>nChangeset</name></expr></argument>, <argument><expr><name>pChangeset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>xConflict</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort_due_to_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Cleanup */</comment>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pChangeset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3session_delete</name><argument_list>(<argument><expr><name>pSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list><block>{<block_content>
  <struct>struct <name>Options</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nRow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bWithoutRowid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bInteger</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bAll</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>zDb</name></decl>;</decl_stmt>
  }</block>;</struct>
  <decl_stmt><decl><type><name><name>struct</name> <name>Options</name></name></type> <name>o</name> <init>= <expr><block>{ <expr><literal type="number">2500</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"session_speed_test.db"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>CmdLineOption</name></type> <name><name>aOpt</name><index>[]</index></name> <init>= <expr><block>{
    <expr><call><name>CMDLINE_INT32</name><argument_list>( <argument><expr><literal type="string">"-rows"</literal></expr></argument>, <argument><expr><literal type="string">"number of rows in test"</literal></expr></argument>,
      <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>Options</name></expr></argument>, <argument><expr><name>nRow</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>CMDLINE_BOOL</name><argument_list>(<argument><expr><literal type="string">"-without-rowid"</literal></expr></argument>, <argument><expr><literal type="string">"use WITHOUT ROWID tables"</literal></expr></argument>, 
      <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>Options</name></expr></argument>, <argument><expr><name>bWithoutRowid</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>CMDLINE_BOOL</name><argument_list>(<argument><expr><literal type="string">"-integer"</literal></expr></argument>, <argument><expr><literal type="string">"use integer data (instead of text/blobs)"</literal></expr></argument>,
      <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>Options</name></expr></argument>, <argument><expr><name>bInteger</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>CMDLINE_NONE</name><argument_list>(<argument><expr><literal type="string">"-all"</literal></expr></argument>, <argument><expr><literal type="string">"Run all 4 combos of -without-rowid and -integer"</literal></expr></argument>,
      <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>Options</name></expr></argument>, <argument><expr><name>bAll</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>,
    <expr><call><name>CMDLINE_TEXT</name><argument_list>(<argument><expr><literal type="string">"-database"</literal></expr></argument>, <argument><expr><literal type="string">"prefix for database files to use"</literal></expr></argument>,
      <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr>struct <name>Options</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>,
    <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azCreate</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"CREATE TABLE t1(a PRIMARY KEY, b, c, d)"</literal></expr>,
    <expr><literal type="string">"CREATE TABLE t1(a PRIMARY KEY, b, c, d) WITHOUT ROWID"</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azInsert</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"INSERT INTO t1 VALUES("</literal>
    <literal type="string">"printf('%.8d',?), randomblob(50), randomblob(50), randomblob(50))"</literal></expr>,
    <expr><literal type="string">"INSERT INTO t1 VALUES(?, random(), random(), random())"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azUpdate</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"UPDATE t1 SET d = randomblob(50) WHERE a = printf('%.8d',?)"</literal></expr>,
    <expr><literal type="string">"UPDATE t1 SET d = random() WHERE a = ?"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>azDelete</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"DELETE FROM t1 WHERE a = printf('%.8d',?)"</literal></expr>,
    <expr><literal type="string">"DELETE FROM t1 WHERE a = ?"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>zDb2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bWithoutRowid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bInteger</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>parse_command_line</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>aOpt</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>o</name></expr></argument>,
    <argument><expr><literal type="string">"This program creates two new, empty, databases each containing a single\n"</literal>
    <literal type="string">"table. It then does the following:\n\n"</literal>
    <literal type="string">"  1. Inserts -rows rows into the first database\n"</literal>
    <literal type="string">"  2. Updates each row in the first db\n"</literal>
    <literal type="string">"  3. Delete each row from the first db\n\n"</literal>
    <literal type="string">"The modifications made by each step are captured in a changeset and\n"</literal>
    <literal type="string">"applied to the second database.\n"</literal></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zDb2</name> <operator>=</operator> <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><literal type="string">"%s2"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>zDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for<control>(<init><expr><name>bWithoutRowid</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>bWithoutRowid</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>bWithoutRowid</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
    <for>for<control>(<init><expr><name>bInteger</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>bInteger</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>bInteger</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
      <if_stmt><if>if<condition>( <expr><name><name>o</name><operator>.</operator><name>bAll</name></name> <operator>||</operator> <operator>(</operator><name><name>o</name><operator>.</operator><name>bWithoutRowid</name></name><operator>==</operator><name>bWithoutRowid</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>.</operator><name>bInteger</name></name><operator>==</operator><name>bInteger</name><operator>)</operator></expr> )</condition><block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Testing %s data with %s table\n"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name>bInteger</name></expr> ?</condition><then> <expr><literal type="string">"integer"</literal></expr> </then><else>: <expr><literal type="string">"blob/text"</literal></expr></else></ternary></expr></argument>,
            <argument><expr><ternary><condition><expr><name>bWithoutRowid</name></expr> ?</condition><then> <expr><literal type="string">"WITHOUT ROWID"</literal></expr> </then><else>: <expr><literal type="string">"rowid"</literal></expr></else></ternary></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Open new database handles on two empty databases */</comment>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>zDb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>zDb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort_due_to_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>zDb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name>zDb2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if<condition>( <expr><name>rc</name><operator>!=</operator><name>SQLITE_OK</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>abort_due_to_error</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block">/* Create the schema in both databases. */</comment>
        <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>azCreate</name><index>[<expr><name><name>o</name><operator>.</operator><name>bWithoutRowid</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>execsql</name><argument_list>(<argument><expr><name>db2</name></expr></argument>, <argument><expr><name><name>azCreate</name><index>[<expr><name><name>o</name><operator>.</operator><name>bWithoutRowid</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Run the three tests */</comment>
        <expr_stmt><expr><call><name>run_test</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db2</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><name><name>azInsert</name><index>[<expr><name><name>o</name><operator>.</operator><name>bInteger</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>run_test</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db2</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><name><name>azUpdate</name><index>[<expr><name><name>o</name><operator>.</operator><name>bInteger</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>run_test</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db2</name></expr></argument>, <argument><expr><name><name>o</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><name><name>azDelete</name><index>[<expr><name><name>o</name><operator>.</operator><name>bInteger</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Close the db handles */</comment>
        <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>


  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
