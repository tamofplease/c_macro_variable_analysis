<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/fe_utils/conditional.c"><comment type="block">/*-------------------------------------------------------------------------
 * A stack of automaton states to handle nested conditionals.
 *
 * Copyright (c) 2000-2018, PostgreSQL Global Development Group
 *
 * src/fe_utils/conditional.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fe_utils/conditional.h"</cpp:file></cpp:include>

<comment type="block">/*
 * create stack
 */</comment>
<function><type><name>ConditionalStack</name></type>
<name>conditional_stack_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ConditionalStack</name></type> <name>cstack</name> <init>= <expr><call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConditionalStackData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><name>cstack</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * destroy stack
 */</comment>
<function><type><name>void</name></type>
<name>conditional_stack_destroy</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><call><name>conditional_stack_pop</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></while>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Create a new conditional branch.
 */</comment>
<function><type><name>void</name></type>
<name>conditional_stack_push</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>, <parameter><decl><type><name>ifState</name></type> <name>new_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IfStackElem</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>IfStackElem</name> <operator>*</operator><operator>)</operator> <call><name>pg_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IfStackElem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>if_state</name></name> <operator>=</operator> <name>new_state</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>query_len</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>paren_depth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Destroy the topmost conditional branch.
 * Returns false if there was no branch to end.
 */</comment>
<function><type><name>bool</name></type>
<name>conditional_stack_pop</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IfStackElem</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>cstack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns current stack depth, for debugging purposes.
 */</comment>
<function><type><name>int</name></type>
<name>conditional_stack_depth</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>cstack</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>IfStackElem</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>depth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>depth</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<return>return <expr><name>depth</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fetch the current state of the top of the stack.
 */</comment>
<function><type><name>ifState</name></type>
<name>conditional_stack_peek</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>conditional_stack_empty</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>IFSTATE_NONE</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>if_state</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Change the state of the topmost branch.
 * Returns false if there was no branch state to set.
 */</comment>
<function><type><name>bool</name></type>
<name>conditional_stack_poke</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>, <parameter><decl><type><name>ifState</name></type> <name>new_state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>conditional_stack_empty</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>if_state</name></name> <operator>=</operator> <name>new_state</name></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * True if there are no active \if-blocks.
 */</comment>
<function><type><name>bool</name></type>
<name>conditional_stack_empty</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * True if we should execute commands normally; that is, the current
 * conditional branch is active, or there is no open \if block.
 */</comment>
<function><type><name>bool</name></type>
<name>conditional_active</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ifState</name></type>		<name>s</name> <init>= <expr><call><name>conditional_stack_peek</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>s</name> <operator>==</operator> <name>IFSTATE_NONE</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>IFSTATE_TRUE</name> <operator>||</operator> <name>s</name> <operator>==</operator> <name>IFSTATE_ELSE_TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Save current query buffer length in topmost stack entry.
 */</comment>
<function><type><name>void</name></type>
<name>conditional_stack_set_query_len</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>conditional_stack_empty</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>query_len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fetch last-recorded query buffer length from topmost stack entry.
 * Will return -1 if no stack or it was never saved.
 */</comment>
<function><type><name>int</name></type>
<name>conditional_stack_get_query_len</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>conditional_stack_empty</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>query_len</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Save current parenthesis nesting depth in topmost stack entry.
 */</comment>
<function><type><name>void</name></type>
<name>conditional_stack_set_paren_depth</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>depth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>conditional_stack_empty</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>paren_depth</name></name> <operator>=</operator> <name>depth</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Fetch last-recorded parenthesis nesting depth from topmost stack entry.
 * Will return -1 if no stack or it was never saved.
 */</comment>
<function><type><name>int</name></type>
<name>conditional_stack_get_paren_depth</name><parameter_list>(<parameter><decl><type><name>ConditionalStack</name></type> <name>cstack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>conditional_stack_empty</name><argument_list>(<argument><expr><name>cstack</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name><name>cstack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>paren_depth</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
