<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/px/px_timeout.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * px_timeout.c
 *	  Functions to cancel a PX query and release its acquired locks
 *	  if the lockmode conflicts with another lock request, after the
 *	  timeout specified by GUC variable.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  src/backend/px/px_timeout.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>

<comment type="block">/*
 * The flag representing a PX wait lock timeout is triggered.
 * It is set by the px_wait_lock_timeout_handler(), and reset
 * after the wait lock situation is processed by px_cancel_wait_lock().
 */</comment>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>px_wait_lock_alert</name></decl>;</decl_stmt>

<comment type="block">/*
 * PX wait lock timer ID returned by RegisterTimeout().
 */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>px_wait_lock_timer_id</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lock_is_granted</name><parameter_list>(<parameter><decl><type><name>LockInstanceData</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>lock_equal</name><parameter_list>(<parameter><decl><type><name>LockInstanceData</name> <modifier>*</modifier></type><name>lock1</name></decl></parameter>, <parameter><decl><type><name>LockInstanceData</name> <modifier>*</modifier></type><name>lock2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>px_cancel_wait_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>px_wait_lock_timeout_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* Is the lock granted to the requesting process? */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>lock_is_granted</name><parameter_list>(<parameter><decl><type><name>LockInstanceData</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>lock</name><operator>-&gt;</operator><name>holdMask</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>lock_equal</name><parameter_list>(<parameter><decl><type><name>LockInstanceData</name> <modifier>*</modifier></type><name>lock1</name></decl></parameter>, <parameter><decl><type><name>LockInstanceData</name> <modifier>*</modifier></type><name>lock2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name> <modifier>*</modifier></type><name>tag1</name> <init>= <expr><operator>&amp;</operator><name><name>lock1</name><operator>-&gt;</operator><name>locktag</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LOCKTAG</name> <modifier>*</modifier></type><name>tag2</name> <init>= <expr><operator>&amp;</operator><name><name>lock2</name><operator>-&gt;</operator><name>locktag</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tag1</name></expr></argument>, <argument><expr><name>tag2</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LOCKTAG</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Timeout occurs. If current process is requesting for a conflict
 * lock mode with a process which is executing PX, send signal SIGUSR1
 * to cancel the PX process.
 */</comment>
<function><type><name>void</name></type>
<name>px_cancel_wait_lock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LockData</name><modifier>*</modifier></type> <name>lockData</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>waiter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>holder</name></decl>;</decl_stmt>
	
	<comment type="block">/* Get lock manager's internal status */</comment>
	<expr_stmt><expr><name>lockData</name> <operator>=</operator> <call><name>GetLockStatusData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>waiter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>waiter</name> <operator>&lt;</operator> <name><name>lockData</name><operator>-&gt;</operator><name>nelements</name></name></expr>;</condition> <incr><expr><name>waiter</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LockInstanceData</name> <modifier>*</modifier></type><name>waiter_lock</name> <init>= <expr><operator>&amp;</operator><name><name>lockData</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>waiter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * The waiter should be the current process, and the lock
		 * should not be granted yet.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>waiter_lock</name><operator>-&gt;</operator><name>pid</name></name> <operator>!=</operator> <name><name>MyProc</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>lock_is_granted</name><argument_list>(<argument><expr><name>waiter_lock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		
		<for>for <control>(<init><expr><name>holder</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>holder</name> <operator>&lt;</operator> <name><name>lockData</name><operator>-&gt;</operator><name>nelements</name></name></expr>;</condition> <incr><expr><name>holder</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>LockInstanceData</name> <modifier>*</modifier></type><name>holder_lock</name> <init>= <expr><operator>&amp;</operator><name><name>lockData</name><operator>-&gt;</operator><name>locks</name><index>[<expr><name>holder</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>PGPROC</name> <modifier>*</modifier></type><name>holder_proc</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * Filtering condition:
			 *   1. waiter and holder should not be the same lock instance
			 *   2. holder lock should already been granted
			 *   3. waiter and holder should not be in the same process
			 *   4. waiter and holder should be waiting for the same lock tag
			 *   5. waiter's lock mode should be conflict with holder's
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>holder</name> <operator>==</operator> <name>waiter</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock_is_granted</name><argument_list>(<argument><expr><name>holder_lock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>holder_lock</name><operator>-&gt;</operator><name>pid</name></name> <operator>==</operator> <name><name>waiter_lock</name><operator>-&gt;</operator><name>pid</name></name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lock_equal</name><argument_list>(<argument><expr><name>holder_lock</name></expr></argument>, <argument><expr><name>waiter_lock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_check_wait_lockmode_conflict_holdmask</name><argument_list>(<argument><expr><name><name>waiter_lock</name><operator>-&gt;</operator><name>locktag</name></name></expr></argument>,
															 <argument><expr><name><name>waiter_lock</name><operator>-&gt;</operator><name>waitLockMode</name></name></expr></argument>,
															 <argument><expr><name><name>holder_lock</name><operator>-&gt;</operator><name>holdMask</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>
			
			<comment type="block">/* Get the PGPROC of holder process in shared memory */</comment> 
			<expr_stmt><expr><name>holder_proc</name> <operator>=</operator> <call><name>BackendPidGetProcWithLock</name><argument_list>(<argument><expr><name><name>holder_lock</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>holder_proc</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>pg_atomic_unlocked_test_flag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>holder_proc</name><operator>-&gt;</operator><name>polar_px_is_executing</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"PX process %d hold the conflict lock for too long, send signal SIGUSR1 to cancel it"</literal></expr></argument>,
					 <argument><expr><name><name>holder_lock</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>SendProcSignal</name><argument_list>(<argument><expr><name><name>holder_proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>,
									  <argument><expr><name>PROCSIG_RECOVERY_CONFLICT_LOCK</name></expr></argument>,
									  <argument><expr><name><name>holder_proc</name><operator>-&gt;</operator><name>backendId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Called after timeout triggered by timer. Set the flag to true,
 * and set the proc latch of current process to wake up current
 * process in ProcSleep().
 */</comment>
<function><type><name>void</name></type>
<name>px_wait_lock_timeout_handler</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>px_wait_lock_alert</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
