<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/px/px_llize.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * px_llize.c
 *	  Parallelize a PostgreSQL sequential plan tree.
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present Pivotal Software, Inc.
 * Portions Copyright (c) 2021, Alibaba Group Holding Limited
 *
 *
 * IDENTIFICATION
 *	    src/backend/px/px_llize.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/plannodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/print.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/pathnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_llize.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_mutate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_plan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_vars.h"</cpp:file></cpp:include>


<comment type="block">/*
 * A PlanProfile holds state for pxparallelize() and its prescan stage.
 *
 * PlanProfileSubPlanInfo holds extra information about every subplan in
 * the plan tree. There is one PlanProfileSubPlanInfo for each entry in
 * glob-&gt;subplans.
 */</comment>
<typedef>typedef <type><struct>struct <name>PlanProfileSubPlanInfo</name>
<block>{
	<comment type="block">/*
	 * plan_id is used to identify this subplan in the overall plan tree. Same
	 * as SubPlan-&gt;plan_id.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>plan_id</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type>		<name>seen</name></decl>;</decl_stmt>			<comment type="block">/* have we seen a SubPlan reference to this
								 * yet? */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>initPlanParallel</name></decl>;</decl_stmt>	<comment type="block">/* T = this is an Init Plan that needs to
									 * be dispatched, i.e. it contains Motions */</comment>

	<comment type="block">/* Fields copied from SubPlan */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_initplan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_multirow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>hasParParam</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SubLinkType</name></type> <name>subLinkType</name></decl>;</decl_stmt>

	<comment type="block">/* The context where we saw the SubPlan reference(s) for this. */</comment>
	<decl_stmt><decl><type><name>Flow</name>	   <modifier>*</modifier></type><name>parentFlow</name></decl>;</decl_stmt>
}</block></struct></type> <name>PlanProfileSubPlanInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PlanProfile</name>
<block>{
	<decl_stmt><decl><type><name>plan_tree_base_prefix</name></type> <name>base</name></decl>;</decl_stmt> <comment type="block">/* Required prefix for
								 * plan_tree_walker/mutator */</comment>

	<decl_stmt><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl>;</decl_stmt>			<comment type="block">/* pxparallelize argument, root of top plan. */</comment>

	<comment type="block">/* main plan is parallelled */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>dispatchParallel</name></decl>;</decl_stmt>

	<comment type="block">/* Any of the init plans is parallelled */</comment>
	<decl_stmt><decl><type><name>bool</name></type>		<name>anyInitPlanParallel</name></decl>;</decl_stmt>

	<comment type="block">/* array is indexed by plan_id (plan_id is 1-based, so 0 is unused) */</comment>
	<decl_stmt><decl><type><name>PlanProfileSubPlanInfo</name> <modifier>*</modifier></type><name>subplan_info</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Working queue in prescan stage. Contains plan_ids of subplans that have
	 * been seen in SubPlan expressions, but haven't been parallelized yet.
	 */</comment>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>unvisited_subplans</name></decl>;</decl_stmt>

	<comment type="block">/* working state for prescan_walker() */</comment>
	<decl_stmt><decl><type><name>Flow</name>	   <modifier>*</modifier></type><name>currentPlanFlow</name></decl>;</decl_stmt>	<comment type="block">/* what is the flow of the current plan
									 * node */</comment>
}</block></struct></type> <name>PlanProfile</name>;</typedef>

<comment type="block">/*
 * Is the node a "subclass" of Plan?
 */</comment>
<function><type><name>bool</name></type>
<name>is_plan_node</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>T_Plan_Start</name> <operator>&amp;&amp;</operator> <call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>T_Plan_End</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITY_MOTION</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SANITY_DEADLOCK</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define></unit>
