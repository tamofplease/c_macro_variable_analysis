<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/px/px_util.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * px_util.c
 *	  Internal utility support functions for Greenplum Database/PostgreSQL.
 *
 * Portions Copyright (c) 2005-2011, Greenplum inc
 * Portions Copyright (c) 2012-Present Pivotal Software, Inc.
 * Portions Copyright (c) 2021, Alibaba Group Holding Limited
 *
 *
 * IDENTIFICATION
 *	    src/backend/px/px_util.c
 *
 * NOTES
 *
 *	- According to src/backend/executor/execHeapScan.c
 *		"tuples returned by heap_getnext() are pointers onto disk
 *		pages and were not created with palloc() and so should not
 *		be pfree()'d"
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>			<comment type="block">/* for MAXHOSTNAMELEN */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/ip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_motion.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_vars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_gang.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CACHED_1_GANGS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCR_COUNT</name><parameter_list>(<parameter><type><name>pxinfo</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(pxinfo)-&gt;arg++; \
	(pxinfo)-&gt;px_nodes-&gt;arg++;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECR_COUNT</name><parameter_list>(<parameter><type><name>pxinfo</name></type></parameter>, <parameter><type><name>arg</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(pxinfo)-&gt;arg--; \
	(pxinfo)-&gt;px_nodes-&gt;arg--; \
	Assert((pxinfo)-&gt;arg &gt;= 0); \
	Assert((pxinfo)-&gt;px_nodes-&gt;arg &gt;= 0); \

char *polar_cluster_map = NULL;</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>polar_px_nodes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type>		<name>px_worker_context</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PxNodes</name>			   <modifier>*</modifier></type><name>px_nodes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PxNodeConfigEntry</name>   <modifier>*</modifier></type><name>px_node_configs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>PxNodeConfigEntry</name>   <modifier>*</modifier></type><name>px_node_all_configs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>px_node_all_configs_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>px_node_configs_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>PxNodes</name> <modifier>*</modifier></type><name>getPxNodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* POLAR px */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type>		<name>nextPXIdentifer</name><parameter_list>(<parameter><decl><type><name>PxNodes</name> <modifier>*</modifier></type><name>px_nodes</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isRW</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="block">/* POLAR end */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type>		<name>GeneratePxNodeAllConfigs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>		<name>GeneratePxNodeConfigs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>SegIpEntry</name>
<block>{
	<decl_stmt><decl><type><name>char</name></type>		<name><name>key</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>hostinfo</name><index>[<expr><name>NI_MAXHOST</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>SegIpEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HostSegsEntry</name>
<block>{
	<decl_stmt><decl><type><name>char</name></type>		<name><name>hostip</name><index>[<expr><name>INET6_ADDRSTRLEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>segmentCount</name></decl>;</decl_stmt>
}</block></struct></type> <name>HostSegsEntry</name>;</typedef>

<comment type="block">/* NB: all extern function should switch to this context */</comment>
<function><type><name>MemoryContext</name></type>
<name>SwitchToPXWorkerContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>px_worker_context</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>px_worker_context</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><literal type="string">"PX components Context"</literal></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
													 <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>px_worker_context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* NB: should only be called from GeneratePxNodeConfigs */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GeneratePxNodeAllConfigs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>confstring</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>nodelist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lnode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier></type><name>configs</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier></type><name>config</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>qc_config</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>array_size</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_cluster_map</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>polar_cluster_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"px cluster map is empty, name|ip|port, ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return ;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block" format="doxygen">/**
	 * do not need to check list syntax, polar_verify_polar_cluster_map_syntax already do it
	 */</comment>
	<expr_stmt><expr><name>confstring</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>polar_cluster_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SplitIdentifierString</name><argument_list>(<argument><expr><name>confstring</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>array_size</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>configs</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PxNodeConfigEntry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>array_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach_with_count</name><argument_list>(<argument>lnode</argument>, <argument>nodelist</argument>, <argument>idx</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>itemlist</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cport</name></decl>;</decl_stmt>

		<comment type="block" format="doxygen">/**
		 * do not need to check list syntax, polar_verify_polar_cluster_map_syntax already do it
		 */</comment>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nodestring</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SplitIdentifierString</name><argument_list>(<argument><expr><name>nodestring</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name>itemlist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name>itemlist</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>port</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name>itemlist</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cport</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strtol</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>config</name> <operator>=</operator> <operator>&amp;</operator><name><name>configs</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>node_idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>dop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>cport</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"px cluster map add one server %s|%c|%s|%d|%d"</literal></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
				   <argument><expr><name><name>config</name><operator>-&gt;</operator><name>role</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostip</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>dop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block" format="doxygen">/**
	 * init qc config at last
	 */</comment>
	<expr_stmt><expr><name>qc_config</name> <operator>=</operator> <operator>&amp;</operator><name><name>configs</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"c"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>node_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>dop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>PostPortNumber</name></expr>;</expr_stmt>

	<comment type="block" format="doxygen">/**
	 * must set hostip for QC to empty string
	 * adjustMasterRouting set remote_host
	*/</comment>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>confstring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>px_node_all_configs</name> <operator>=</operator> <name>configs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>px_node_all_configs_size</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* NB: should only be called from getPxNodes */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GeneratePxNodeConfigs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>confstring</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>nodelist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lnode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>array_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier></type><name>configs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>qc_config</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_node_configs</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>GeneratePxNodeAllConfigs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>polar_px_nodes</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>polar_px_nodes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>px_node_configs</name> <operator>=</operator> <name>px_node_all_configs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>px_node_configs_size</name> <operator>=</operator> <name>px_node_all_configs_size</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>confstring</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>polar_px_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>SplitIdentifierString</name><argument_list>(<argument><expr><name>confstring</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>array_size</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>nodelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* if not set, means use all nodes */</comment>
	<if_stmt><if>if <condition>(<expr><name>array_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>px_node_configs</name> <operator>=</operator> <name>px_node_all_configs</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>px_node_configs_size</name> <operator>=</operator> <name>px_node_all_configs_size</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>configs</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PxNodeConfigEntry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>array_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach_with_count</name><argument_list>(<argument>lnode</argument>, <argument>nodelist</argument>, <argument>idx</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>nodename</name><init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>px_node_all_configs_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>px_node_all_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><operator>&amp;</operator><name><name>configs</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <literal type="char">'x'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>node_idx</name></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>dop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>px_node_all_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>px_node_all_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hostip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>config</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>px_node_all_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>px_node_all_configs_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"GeneratePxNodeConfig: invalid node in polar_px_nodes: %s"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>idx</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>configs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>hostip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>configs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>configs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block" format="doxygen">/**
	 * init qc config at last
	 */</comment>
	<expr_stmt><expr><name>qc_config</name> <operator>=</operator> <operator>&amp;</operator><name><name>configs</name><index>[<expr><name>idx</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <literal type="string">"master"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>role</name></name> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>node_idx</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>dop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>PostPortNumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>qc_config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>=</operator> <literal type="string">"127.0.0.1"</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>px_node_configs</name> <operator>=</operator> <name>configs</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>px_node_configs_size</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>GeneratePxWorkerNames</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>names</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>getPxNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>px_node_all_configs_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>px_node_all_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>px_node_all_configs_size</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name><name>names</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>PxNodes</name> <modifier>*</modifier></type>
<name>getPxNodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PxNodes</name>	   <modifier>*</modifier></type><name>px_nodes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PxNodeInfo</name> <modifier>*</modifier></type><name>pRow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>SwitchToPXWorkerContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* POLAR px */</comment>
	<expr_stmt><expr><call><name>GeneratePxNodeConfigs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_node_all_configs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"polar_cluster_map is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_node_configs</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"polar_px_nodes is not correct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>px_nodes</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PxNodes</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>numActivePXs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>numIdlePXs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>pxCounter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>rwCounter</name></name> <operator>=</operator> <name>RW_COUNTER_START</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>freeCounterList</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>pxInfo</name></name> <operator>=</operator>
		<operator>(</operator><name>PxNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PxNodeInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>px_node_configs_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>totalPxNodes</name></name> <operator>=</operator> <name>px_node_configs_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>qcInfo</name></name> <operator>=</operator>
		<operator>(</operator><name>PxNodeInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PxNodeInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>totalQcNodes</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>px_node_configs_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><operator>&amp;</operator><name><name>px_node_configs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostip</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>px_node_configs_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>pRow</name> <operator>=</operator> <name><name>px_nodes</name><operator>-&gt;</operator><name>qcInfo</name></name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>pRow</name> <operator>=</operator> <operator>&amp;</operator><name><name>px_nodes</name><operator>-&gt;</operator><name>pxInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>cm_node_idx</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>cm_node_size</name></name> <operator>=</operator> <name>px_node_configs_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>px_nodes</name></name> <operator>=</operator> <name>px_nodes</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>freelist</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>numIdlePXs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pRow</name><operator>-&gt;</operator><name>numActivePXs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>px_nodes</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pxnode_destroyPxNodes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>px_nodes</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>px_nodes</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>qcInfo</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>pxInfo</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>pxInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>qcInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>px_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>px_nodes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_node_configs</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>px_node_configs</name> <operator>!=</operator> <name>px_node_all_configs</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
			<for>for <control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>px_node_configs_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>px_node_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hostip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>px_node_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>px_node_configs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>px_node_configs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>px_node_configs_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_node_all_configs</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>px_node_all_configs_size</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>px_node_all_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hostip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>px_node_all_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>px_node_all_configs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>px_node_all_configs</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>px_node_all_configs_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * pxnode_getPxNodes
 *
 * Storage for the SegmentInstances block and all subsidiary
 * structures are allocated from the caller's context.
 */</comment>
<function><type><name>PxNodes</name> <modifier>*</modifier></type>
<name>pxnode_getPxNodes</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>px_nodes</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>px_nodes</name> <operator>=</operator> <call><name>getPxNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>px_nodes</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Allocated a segdb
 *
 * If thers is idle segdb in the freelist, return it, otherwise, initialize
 * a new segdb.
 *
 * idle segdbs has an established connection with segment, but new segdb is
 * not setup yet, callers need to establish the connection by themselves.
 */</comment>
<function><type><name>PxWorkerDescriptor</name> <modifier>*</modifier></type>
<name>pxnode_allocateIdlePX</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>logicalWorkerIdx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>logicalTotalWorkers</name></decl></parameter>, <parameter><decl><type><name>SegmentType</name></type> <name>segmentType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PxWorkerDescriptor</name> <modifier>*</modifier></type><name>pxWorkerDesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PxNodeInfo</name> <modifier>*</modifier></type><name>pxinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>curItem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>nextItem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>prevItem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>getPxWorkerCount</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>logicalWorkerIdx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>pxinfo</name> <operator>=</operator> <call><name>pxnode_getPxNodeInfo</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>logicalTotalWorkers</name> <operator>=</operator> <call><name>getPxWorkerCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pxinfo</name> <operator>=</operator> <call><name>pxnode_getPxNodeInfo</name><argument_list>(<argument><expr><name>logicalWorkerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>pxinfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find px component info for %d"</literal></expr></argument>, <argument><expr><name>logicalWorkerIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>SwitchToPXWorkerContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Always try to pop from the head.  Make sure to push them back to head
	 * in pxnode_recycleIdlePX().
	 */</comment>
	<expr_stmt><expr><name>curItem</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name><name>pxinfo</name><operator>-&gt;</operator><name>freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>curItem</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PxWorkerDescriptor</name> <modifier>*</modifier></type><name>tmp</name> <init>=
		<expr><operator>(</operator><name>PxWorkerDescriptor</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>curItem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>nextItem</name> <operator>=</operator> <call><name>lnext</name><argument_list>(<argument><expr><name>curItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>segmentType</name> <operator>==</operator> <name>SEGMENTTYPE_EXPLICT_WRITER</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>tmp</name><operator>-&gt;</operator><name>isWriter</name></name><operator>)</operator> <operator>||</operator>
			<operator>(</operator><name>segmentType</name> <operator>==</operator> <name>SEGMENTTYPE_EXPLICT_READER</name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>isWriter</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>prevItem</name> <operator>=</operator> <name>curItem</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>curItem</name> <operator>=</operator> <name>nextItem</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>pxinfo</name><operator>-&gt;</operator><name>freelist</name></name> <operator>=</operator> <call><name>list_delete_cell</name><argument_list>(<argument><expr><name><name>pxinfo</name><operator>-&gt;</operator><name>freelist</name></name></expr></argument>, <argument><expr><name>curItem</name></expr></argument>, <argument><expr><name>prevItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* update numIdlePXs */</comment>
		<expr_stmt><expr><call><name>DECR_COUNT</name><argument_list>(<argument><expr><name>pxinfo</name></expr></argument>, <argument><expr><name>numIdlePXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>pxWorkerDesc</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>logicalWorkerInfo</name><operator>.</operator><name>total_count</name></name> <operator>=</operator> <name>logicalTotalWorkers</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>logicalWorkerInfo</name><operator>.</operator><name>idx</name></name> <operator>=</operator> <name>logicalWorkerIdx</name></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></while>

	<comment type="block">/* POLAR px */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pxWorkerDesc</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>RW_SEGMENT</name> <operator>==</operator> <name>logicalWorkerIdx</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* RW */</comment>
			<expr_stmt><expr><name>pxWorkerDesc</name> <operator>=</operator> <call><name>pxconn_createWorkerDescriptor</name><argument_list>(<argument><expr><name>pxinfo</name></expr></argument>,
									<argument><expr><call><name>nextPXIdentifer</name><argument_list>(<argument><expr><name><name>pxinfo</name><operator>-&gt;</operator><name>px_nodes</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>MASTER_CONTENT_ID</name></expr></argument>,
									<argument><expr><name>logicalTotalWorkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>pxWorkerDesc</name> <operator>=</operator> <call><name>pxconn_createWorkerDescriptor</name><argument_list>(<argument><expr><name>pxinfo</name></expr></argument>,
									<argument><expr><call><name>nextPXIdentifer</name><argument_list>(<argument><expr><name><name>pxinfo</name><operator>-&gt;</operator><name>px_nodes</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
									<argument><expr><name>logicalWorkerIdx</name></expr></argument>,
									<argument><expr><name>logicalTotalWorkers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* POLAR end */</comment>

	<expr_stmt><expr><call><name>pxconn_setPXIdentifier</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>INCR_COUNT</name><argument_list>(<argument><expr><name>pxinfo</name></expr></argument>, <argument><expr><name>numActivePXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>pxWorkerDesc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>cleanupPX</name><parameter_list>(<parameter><decl><type><name>PxWorkerDescriptor</name> <modifier>*</modifier></type><name>pxWorkerDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>pxWorkerDesc</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * if the process is in the middle of blowing up... then we don't do
	 * anything here.  making libpq and other calls can definitely result in
	 * things getting HUNG.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>proc_exit_inprogress</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>pxconn_isBadConnection</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Note, we cancel all "still running" queries */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pxconn_discardResults</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"cleaning up seg%d while it is still busy"</literal></expr></argument>, <argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>logicalWorkerInfo</name><operator>.</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* PX is no longer associated with a slice. */</comment>
	<expr_stmt><expr><call><name>pxconn_setPXIdentifier</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>, <comment type="block">/* slice index */</comment> <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pxnode_recycleIdlePX</name><parameter_list>(<parameter><decl><type><name>PxWorkerDescriptor</name> <modifier>*</modifier></type><name>pxWorkerDesc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>forceDestroy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PxNodeInfo</name> <modifier>*</modifier></type><name>pxinfo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>px_nodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>px_worker_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pxinfo</name> <operator>=</operator> <name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>pxNodeInfo</name></name></expr>;</expr_stmt>

	<comment type="block">/* update num of active PXs */</comment>
	<expr_stmt><expr><call><name>DECR_COUNT</name><argument_list>(<argument><expr><name>pxinfo</name></expr></argument>, <argument><expr><name>numActivePXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldContext</name> <operator>=</operator> <call><name>SwitchToPXWorkerContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>forceDestroy</name> <operator>||</operator> <operator>!</operator><call><name>cleanupPX</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>destroy_segdb</name>;</goto></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>pxinfo</name><operator>-&gt;</operator><name>freelist</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>px_cached_px_workers</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>destroy_segdb</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>pxinfo</name><operator>-&gt;</operator><name>freelist</name></name> <operator>=</operator> <call><name>lcons</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>, <argument><expr><name><name>pxinfo</name><operator>-&gt;</operator><name>freelist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INCR_COUNT</name><argument_list>(<argument><expr><name>pxinfo</name></expr></argument>, <argument><expr><name>numIdlePXs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>

<label><name>destroy_segdb</name>:</label>

	<expr_stmt><expr><call><name>pxconn_termWorkerDescriptor</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>nextPXIdentifer</name><parameter_list>(<parameter><decl><type><name>PxNodes</name> <modifier>*</modifier></type><name>px_nodes</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isRW</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isRW</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name><name>px_nodes</name><operator>-&gt;</operator><name>rwCounter</name></name><operator>++</operator></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>px_nodes</name><operator>-&gt;</operator><name>freeCounterList</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>px_nodes</name><operator>-&gt;</operator><name>pxCounter</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>pxCounter</name></name> <operator>=</operator> <operator>(</operator><name><name>px_nodes</name><operator>-&gt;</operator><name>pxCounter</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>RW_COUNTER_START</name></expr>;</expr_stmt>
			<return>return <expr><name>result</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>linitial_int</name><argument_list>(<argument><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>freeCounterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>freeCounterList</name></name> <operator>=</operator> <call><name>list_delete_first</name><argument_list>(<argument><expr><name><name>px_nodes</name><operator>-&gt;</operator><name>freeCounterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>result</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Find PxNodeInfo in the array by segment index.
 */</comment>
<function><type><name>PxNodeInfo</name> <modifier>*</modifier></type>
<name>pxnode_getPxNodeInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>contentId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PxNodeInfo</name> <modifier>*</modifier></type><name>pxInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PxNodes</name>	   <modifier>*</modifier></type><name>px_nodes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>px_nodes</name> <operator>=</operator> <call><name>pxnode_getPxNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>contentId</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>px_nodes</name><operator>-&gt;</operator><name>qcInfo</name></name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 *	POLAR px for PX DML
	 *	Because the IP and Port of the RW and QC nodes are exactly the same
	 *  , qcInfo can be used directly.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>RW_SEGMENT</name> <operator>==</operator> <name>contentId</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>px_nodes</name><operator>-&gt;</operator><name>qcInfo</name></name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>contentId</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATA_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected content id %d"</literal></expr></argument>, <argument><expr><name>contentId</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>contentId</name> <operator>%=</operator> <name><name>px_nodes</name><operator>-&gt;</operator><name>totalPxNodes</name></name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>px_nodes</name><operator>-&gt;</operator><name>totalPxNodes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>pxInfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>px_nodes</name><operator>-&gt;</operator><name>pxInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pxInfo</name><operator>-&gt;</operator><name>config</name><operator>-&gt;</operator><name>node_idx</name></name> <operator>==</operator> <name>contentId</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>pxInfo</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * performs all necessary setup required for Greenplum Database mode.
 *
 * This includes pxlink_setup() and initializing the Motion Layer.
 */</comment>
<function><type><name>void</name></type>
<name>px_setup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Initializing px components..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize the Motion Layer IPC subsystem. */</comment>
	<expr_stmt><expr><call><name>InitMotionLayerIPC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * performs all necessary cleanup required when leaving Greenplum
 * Database mode.  This is also called when the process exits.
 *
 * NOTE: the arguments to this function are here only so that we can
 *		 register it with on_proc_exit().  These parameters should not
 *		 be used since there are some callers to this that pass them
 *		 as NULL.
 *
 */</comment>
<decl_stmt><decl><type><name>void</name></type>
<name>px_cleanup</name><argument_list>(<argument><expr><name>int</name> <name>code</name> <call><name>pg_attribute_unused</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>Datum</name> <name>arg</name> <call><name>pg_attribute_unused</name><argument_list>()</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"Cleaning up Greenplum components..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_role</name> <operator>==</operator> <name>PX_ROLE_QC</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>px_total_plans</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"session dispatched %d plans %d slices (%f), largest plan %d"</literal></expr></argument>,
				 <argument><expr><name>px_total_plans</name></expr></argument>, <argument><expr><name>px_total_slices</name></expr></argument>,
				 <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>px_total_slices</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>px_total_plans</name><operator>)</operator></expr></argument>,
				 <argument><expr><name>px_max_slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>px_role</name> <operator>==</operator> <name>PX_ROLE_PX</name> <operator>&amp;&amp;</operator> <name>px_max_workers_number</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_atomic_sub_fetch_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ProcGlobal</name><operator>-&gt;</operator><name>pxWorkerCounter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* shutdown our listener socket */</comment>
	<expr_stmt><expr><call><name>CleanUpMotionLayerIPC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="block">/*
 * Given total number of primary segment databases and a number of
 * segments to "skip" - this routine creates a boolean map (array) the
 * size of total number of segments and randomly selects several
 * entries (total number of total_to_skip) to be marked as
 * "skipped". This is used for external tables with the 'gpfdist'
 * protocol where we want to get a number of *random* segdbs to
 * connect to a gpfdist client.
 *
 * Caller of this function should pfree skip_map when done with it.
 */</comment>
<function><type><name>bool</name> <modifier>*</modifier></type>
<name>makeRandomSegMap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>total_primaries</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total_to_skip</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>randint</name></decl>;</decl_stmt>		<comment type="block">/* some random int representing a seg    */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>skipped</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* num segs already marked to be skipped */</comment>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>skip_map</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>skip_map</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>total_primaries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>skip_map</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>total_primaries</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>total_to_skip</name> <operator>!=</operator> <name>skipped</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * create a random int between 0 and (total_primaries - 1).
		 */</comment>
		<expr_stmt><expr><name>randint</name> <operator>=</operator> <call><name>pxhashrandomseg</name><argument_list>(<argument><expr><name>total_primaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * mark this random index 'true' in the skip map (marked to be
		 * skipped) unless it was already marked.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>skip_map</name><index>[<expr><name>randint</name></expr>]</index></name> <operator>==</operator> <name>false</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>skip_map</name><index>[<expr><name>randint</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>skipped</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>skip_map</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>getPxWorkerCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>	<name>numsegments</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>px_role</name> <operator>==</operator> <name>PX_ROLE_QC</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>px_dop_per_node</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>numsegments</name> <operator>=</operator> <call><name>pxnode_getPxNodes</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>totalPxNodes</name> 
					  <operator>*</operator> <call><name>polar_get_stmt_px_dop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>px_role</name> <operator>==</operator> <name>PX_ROLE_PX</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>numsegments</name> <operator>=</operator> <name>px_logical_total_workers</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>px_role</name> <operator>==</operator> <name>PX_ROLE_UTILITY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>numsegments</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>numsegments</name></expr>;</return>
</block_content>}</block></function>
</unit>
