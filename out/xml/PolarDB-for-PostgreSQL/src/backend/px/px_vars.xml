<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/px/px_vars.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * px_vars.c
 *	  Provides storage areas and processing routines for Greenplum Database variables
 *	  managed by GUC.
 *
 * Portions Copyright (c) 2003-2010, Greenplum inc
 * Portions Copyright (c) 2012-Present Pivotal Software, Inc.
 * Portions Copyright (c) 2021, Alibaba Group Holding Limited
 *
 *
 * IDENTIFICATION
 *	    src/backend/px/px_vars.c
 *
 *
 * NOTES
 *	  See src/backend/utils/misc/guc.c for variable external specification.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_vars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_func.h"</cpp:file></cpp:include>

<comment type="block">/*
 * ----------------
 *		GUC/global variables
 *
 *	Initial values are set by guc.c function "InitializeGUCOptions" called
 *	*very* early during postmaster, postgres, or bootstrap initialization.
 * ----------------
 */</comment>

<decl_stmt><decl><type><name>PxRoleValue</name></type> <name>px_role</name> <init>= <expr><name>PX_ROLE_QC</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* Role paid by this Greenplum Database
									 	 * backend */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_is_writer</name></decl>;</decl_stmt>		<comment type="block">/* is this qExec a "writer" process. */</comment>

<decl_stmt><decl><type><name>int</name></type>			<name>px_session_id</name></decl>;</decl_stmt>		<comment type="block">/* global unique id for session. */</comment>

<decl_stmt><decl><type><name><name>struct</name> <name>TraceId</name></name></type>		<name>sql_trace_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>px_qc_hostname</name></decl>;</decl_stmt>			<comment type="block">/* QC hostname */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_qc_port</name></decl>;</decl_stmt>	<comment type="block">/* Master Segment Postmaster port. */</comment>

<decl_stmt><decl><type><name>int</name></type>			<name>px_command_count</name></decl>;</decl_stmt>	<comment type="block">/* num of commands from client */</comment>

<decl_stmt><decl><type><name>bool</name></type>		<name>debug_print_slice_table</name></decl>;</decl_stmt>	<comment type="block">/* Shall we log the slice table? */</comment>

<decl_stmt><decl><type><name>int</name></type>			<name>px_cached_px_workers</name></decl>;</decl_stmt> <comment type="block">/* How many gangs to keep around from
										 * stmt to stmt. */</comment>

<decl_stmt><decl><type><name>int</name></type>			<name>px_worker_connect_timeout</name> <init>= <expr><literal type="number">180</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* Maximum time (in seconds)
												 * allowed for a new worker
												 * process to start or a
												 * mirror to respond. */</comment>

<comment type="block">/*
 * When we have certain types of failures during gang creation which indicate
 * that a segment is in recovery mode we may be able to retry.
 */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_gang_creation_retry_count</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* disable by default */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_gang_creation_retry_timer</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* 2000ms */</comment>

<comment type="block">/*
 * TCP port the Interconnect listens on for incoming connections from other
 * backends.  Assigned by initMotionLayerIPC() at process startup.  This port
 * is used for the duration of this process and should never change.
 */</comment>
<decl_stmt><decl><type><name>uint32</name></type>		<name>px_listener_port</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_max_packet_size</name></decl>;</decl_stmt> <comment type="block">/* max Interconnect packet size */</comment>

<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_queue_depth</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* max number of messages
												 * waiting in rx-queue before
												 * we drop. */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_snd_queue_depth</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_timer_period</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_timer_checking_period</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_default_rtt</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_min_rto</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_fc_method</name> <init>= <expr><name>INTERCONNECT_FC_METHOD_LOSS</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_transmit_timeout</name> <init>= <expr><literal type="number">3600</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_min_retries_before_timeout</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_debug_retry_interval</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>interconnect_setup_timeout</name> <init>= <expr><literal type="number">7200</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_type</name> <init>= <expr><name>INTERCONNECT_TYPE_UDPIFC</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_use_global_function</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* listener backlog is calculated at listener-creation time */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_tcp_listener_backlog</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>px_interconnect_aggressive_retry</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* fast-track app-level
														 * retry */</comment>

<decl_stmt><decl><type><name>bool</name></type>		<name>px_interconnect_full_crc</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* sanity check UDP data. */</comment>

<decl_stmt><decl><type><name>bool</name></type>		<name>px_interconnect_log_stats</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* emit stats at log-level */</comment>

<decl_stmt><decl><type><name>bool</name></type>		<name>px_interconnect_cache_future_packets</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_udp_bufsize_k</name></decl>;</decl_stmt>	<comment type="block">/* UPD recv buf size, in KB */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
<comment type="block">/*
 * UDP-IC Test hooks (for fault injection).
 *
 * Dropseg: specifies which segment to apply the drop_percent to.
 */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_udpic_dropseg</name> <init>= <expr><name>UNDEF_SEGMENT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_udpic_dropxmit_percent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_udpic_dropacks_percent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_udpic_fault_inject_percent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_udpic_fault_inject_bitmap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * Each slice table has a unique ID (certain commands like "vacuum analyze"
 * run many many slice-tables for each px_command_id).
 */</comment>
<decl_stmt><decl><type><name>uint32</name></type>		<name>px_interconnect_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* --------------------------------------------------------------------------------------------------
 * Greenplum Optimizer GUCs
 */</comment>

<decl_stmt><decl><type><name>double</name></type>		<name>px_motion_cost_per_row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type>		<name>px_selectivity_damping_factor</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Analyzing aid */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_motion_slice_noop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_mk_sort_check</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Max size of dispatched plans; 0 if no limit */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_max_plan_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>px_workfile_caching_loglevel</name> <init>= <expr><name>DEBUG1</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Enable single-mirror pair dispatch. */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_direct_dispatch</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Force core dump on memory context error */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>coredump_on_memerror</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* ----------------
 * Non-GUC globals
 */</comment>

<decl_stmt><decl><type><name>int</name></type>			<name>currentSliceId</name> <init>= <expr><name>UNSET_SLICE_ID</name></expr></init></decl>;</decl_stmt>	<comment type="block">/* used by elog to show the
												 * current slice the process
												 * is executing. */</comment>

<comment type="block">/* ----------------
 * This variable is initialized by the postmaster from command line arguments
 *
 * Any code needing the "numsegments"
 * can simply #include pxvars.h, and use PxIdentity.numsegments
 */</comment>
<decl_stmt><decl><type><name>PxId</name></type>		<name>PxIdentity</name> <init>= <expr><block>{<expr><name>UNINITIALIZED_PX_IDENTITY_VALUE</name></expr>, <expr><name>UNINITIALIZED_PX_IDENTITY_VALUE</name></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Keep track of a few dispatch-related  statistics:
 */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_total_slices</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_total_plans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_serialize_version</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>px_workerid_funcname</name> <init>= <expr><literal type="string">"polar_px_workerid"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Oid</name></type>			<name>px_workerid_funcid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Implements the makePXWorkerIndexFilterExpr() function to return the worker index
 * of the current worker.
 */</comment>
<function><type><name>int32</name></type>
<name>get_px_workerid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>PxIdentity</name><operator>.</operator><name>workerid</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint32</name></type>
<name>get_px_workerid_funcid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>update_px_workerid_funcid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>px_workerid_funcid</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>update_px_workerid_funcid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>		<modifier>*</modifier></type><name>funcname</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name><name>fargtypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* dummy */</comment>

	<expr_stmt><expr><name>funcname</name> <operator>=</operator> <call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"public"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name>px_workerid_funcname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>px_workerid_funcid</name> <operator>=</operator> <call><name>LookupFuncName</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>fargtypes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_workerid_funcid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"polar_px: load polar_px_workerid() failed, try \"CREATE EXTENSION polar_px;\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_is_stmt_enable_px</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return	<expr><name>polar_enable_px</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>polar_get_stmt_px_dop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name>px_use_global_function</name></expr> 
			?</condition><then> <expr><literal type="number">1</literal></expr>
			</then><else>: <expr><name>px_dop_per_node</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* --------------------------------------------------------------------------------------------------
 * Logging
 */</comment>


<comment type="block">/*
 * px_log_gangs (string)
 *
 * Should creation, reallocation and cleanup of gangs of PX processes be logged?
 * "OFF"	 -&gt; only errors are logged
 * "TERSE"	 -&gt; terse logging of routine events, e.g. creation of new qExecs
 * "VERBOSE" -&gt; gang allocation per command is logged
 * "DEBUG"	 -&gt; additional events are logged at severity level DEBUG1 to DEBUG5
 *
 * The messages that are enabled by the TERSE and VERBOSE settings are
 * written with a severity level of LOG.
 */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_log_gang</name></decl>;</decl_stmt>

<comment type="block">/*
 * px_interconnect_log  (string)
 *
 * Should connections between internal processes be logged?  (qDisp/qExec/etc)
 * "OFF"	 -&gt; connection errors are logged
 * "TERSE"	 -&gt; terse logging of routine events, e.g. successful connections
 * "VERBOSE" -&gt; most interconnect setup events are logged
 * "DEBUG"	 -&gt; additional events are logged at severity level DEBUG1 to DEBUG5.
 *
 * The messages that are enabled by the TERSE and VERBOSE settings are
 * written with a severity level of LOG.
 */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_interconnect_log</name></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>px_is_executing</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_is_planning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_adaptive_paging</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_adaptive_scan_setup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_prefetch_inner_executing</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>cached_px_enable_replay_wait</name></decl>;</decl_stmt>
<comment type="block">/* Parallel DML */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>local_px_insert_dop_num</name></decl>;</decl_stmt>
</unit>
