<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/px/px_hash.c"><comment type="block">/*--------------------------------------------------------------------------
 *
 * px_hash.c
 *	  Provides hashing routines to support consistant data distribution/location
 *    within Greenplum Database.
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present Pivotal Software, Inc.
 * Portions Copyright (c) 2021, Alibaba Group Holding Limited
 *
 *
 * IDENTIFICATION
 *	    src/backend/px/px_hash.c
 *
 *--------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/indexing.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/catcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>

<comment type="block">/* Fast mod using a bit mask, assuming that y is a power of 2 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTMOD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>((x) &amp; ((y)-1))</cpp:value></cpp:define>

<comment type="block">/* local function declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>ispowof2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numsegs</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type> <name>jump_consistent_hash</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>num_segments</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*================================================================
 *
 * HASH API FUNCTIONS
 *
 *================================================================
 */</comment>

<comment type="block">/*
 * Create a PxHash for this session.
 *
 * PxHash maintains the following information about the hash.
 * In here we set the variables that should not change in the scope of the newly created
 * PxHash, these are:
 *
 * 1 - number of segments in Greenplum Database.
 * 2 - reduction method.
 * 3 - distribution key column hash functions.
 *
 * The hash value itself will be initialized for every tuple in pxhashinit()
 */</comment>
<function><type><name>PxHash</name> <modifier>*</modifier></type>
<name>makePxHash</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numsegs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>natts</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>hashfuncs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PxHash</name>    <modifier>*</modifier></type><name>h</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_legacy_hash</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>numsegs</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* verify number of segments is legal. */</comment>

	<if_stmt><if>if <condition>(<expr><name>numsegs</name> <operator>==</operator> <call><name>PX_POLICY_INVALID_NUMSEGMENTS</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><literal type="string">"what's the proper value of numsegments?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Allocate a new PxHash, with space for the datatype OIDs. */</comment>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PxHash</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * set this hash session characteristics.
	 */</comment>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>numsegs</name></name> <operator>=</operator> <name>numsegs</name></expr>;</expr_stmt>

	<comment type="block">/* Load hash function info */</comment>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hashfuncs</name></name> <operator>=</operator> <operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>funcid</name> <init>= <expr><name><name>hashfuncs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* TODO */</comment>
		<comment type="block">/* if (isLegacyPxHashFunction(funcid)) */</comment>
		<comment type="block">/* is_legacy_hash = true; */</comment>

		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>hashfuncs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <name>natts</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"enable_legacy_hash"</literal></expr></argument>)</argument_list></call> <operator>==</operator>  <name>FaultInjectorTypeEnable</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>is_legacy_hash</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_legacy_hash</name></name> <operator>=</operator> <name>is_legacy_hash</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * set the reduction algorithm: If num_segs is power of 2 use bit mask,
	 * else use lazy mod (h mod n)
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>is_legacy_hash</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>reducealg</name></name> <operator>=</operator> <ternary><condition><expr><call><name>ispowof2</name><argument_list>(<argument><expr><name>numsegs</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>REDUCE_BITMASK</name></expr> </then><else>: <expr><name>REDUCE_LAZYMOD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>reducealg</name></name> <operator>=</operator> <name>REDUCE_JUMP_HASH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"PXHASH hashing into %d segment databases"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>numsegs</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>h</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Initialize PxHash for hashing the next tuple values.
 */</comment>
<function><type><name>void</name></type>
<name>pxhashinit</name><parameter_list>(<parameter><decl><type><name>PxHash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>is_legacy_hash</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* reset the hash value to the initial offset basis */</comment>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>FNV1_32_INIT</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Add an attribute to the PxHash calculation.
 *
 * Note: this must be called for each attribute, in order. If you try to hash
 * the attributes in a different order, you get a different hash value.
 */</comment>
<function><type><name>void</name></type>
<name>pxhash</name><parameter_list>(<parameter><decl><type><name>PxHash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attno</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>datum</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isnull</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>hashkey</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>hash</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>is_legacy_hash</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* rotate hashkey left 1 bit at each step */</comment>
		<expr_stmt><expr><name>hashkey</name> <operator>=</operator> <operator>(</operator><name>hashkey</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>hashkey</name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>FunctionCallInfoData</name></type> <name>fcinfo</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32</name></type>		<name>hkey</name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>hashfuncs</name><index>[<expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
									 <argument><expr><name>InvalidOid</name></expr></argument>,
									 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>fcinfo</name><operator>.</operator><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>datum</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fcinfo</name><operator>.</operator><name>argnull</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>hkey</name> <operator>=</operator> <call><name>DatumGetUInt32</name><argument_list>(<argument><expr><call><name>FunctionCallInvoke</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fcinfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
			<if_stmt><if>if <condition>(<expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"px_hash_fcinfo_null"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>fcinfo</name><operator>.</operator><name>isnull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<comment type="block">/*
			 * Check for null result, since caller is clearly not expecting
			 * one
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>fcinfo</name><operator>.</operator><name>isnull</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"function %u returned NULL"</literal></expr></argument>, <argument><expr><name><name>fcinfo</name><operator>.</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>hashkey</name> <operator>^=</operator> <name>hkey</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <name>hashkey</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Reduce the hash to a segment number.
 */</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>pxhashreduce</name><parameter_list>(<parameter><decl><type><name>PxHash</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>		<comment type="block">/* TODO: what is a good initialization value?
								 * could we guarantee at this point that there
								 * will not be a negative segid in Greenplum
								 * Database and therefore initialize to this
								 * value for error checking? */</comment>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>reducealg</name></name> <operator>==</operator> <name>REDUCE_BITMASK</name> <operator>||</operator>
		   <name><name>h</name><operator>-&gt;</operator><name>reducealg</name></name> <operator>==</operator> <name>REDUCE_LAZYMOD</name> <operator>||</operator>
		   <name><name>h</name><operator>-&gt;</operator><name>reducealg</name></name> <operator>==</operator> <name>REDUCE_JUMP_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>natts</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"px_hash_reduce_bitmask"</literal></expr></argument>)</argument_list></call> <operator>==</operator>  <name>FaultInjectorTypeEnable</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>reducealg</name></name> <operator>=</operator> <name>REDUCE_BITMASK</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"px_hash_reduce_lazymod"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>reducealg</name></name> <operator>=</operator> <name>REDUCE_LAZYMOD</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>reducealg</name></name> <operator>=</operator> <name>REDUCE_JUMP_HASH</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/*
	 * Reduce our 32-bit hash value to a segment number
	 */</comment>
	<switch>switch <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>reducealg</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>REDUCE_BITMASK</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>FASTMOD</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>numsegs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* fast mod (bitmask) */</comment>
			<break>break;</break>

		<case>case <expr><name>REDUCE_LAZYMOD</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>hash</name></name><operator>)</operator> <operator>%</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>numsegs</name></name><operator>)</operator></expr>;</expr_stmt>	<comment type="block">/* simple mod */</comment>
			<break>break;</break>

		<case>case <expr><name>REDUCE_JUMP_HASH</name></expr>:</case>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>jump_consistent_hash</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>numsegs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return a hash segment number according to the citd.
 */</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>pxhashsegForUpdate</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ctidHash</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>numsegs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>ctidHash</name> <operator>%</operator> <name>numsegs</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return a random segment number, for randomly distributed policy.
 */</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>pxhashrandomseg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numsegs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Note: Using modulo like this has a bias towards low values. But that's
	 * acceptable for our use case.
	 *
	 * For example, if MAX_RANDOM_VALUE was 5, and you did "random() % 4",
	 * value 0 would occur twice as often as others, because you would get 0
	 * when random() returns 0 or 4, while other values would only be returned
	 * with one return value of random(). But in reality, MAX_RANDOM_VALUE is
	 * 2^31, and the effect is not significant when the upper bound is much
	 * smaller than MAX_RANDOM_VALUE. This function is intended for choosing a
	 * segment in random, and the number of segments is much smaller than
	 * 2^31, so we're good.
	 */</comment>
	<return>return <expr><call><name>random</name><argument_list>()</argument_list></call> <operator>%</operator> <name>numsegs</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the default operator family to use for distributing the given type.
 *
 * This is used when redistributing data, e.g. for GROUP BY, or DISTINCT.
 */</comment>
<function><type><name>Oid</name></type>
<name>px_default_distribution_opfamily_for_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>tcache</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tcache</name> <operator>=</operator> <call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>typeoid</name></expr></argument>,
							   <argument><expr><name>TYPECACHE_HASH_OPFAMILY</name> <operator>|</operator>
							   <name>TYPECACHE_HASH_PROC</name> <operator>|</operator>
							   <name>TYPECACHE_EQ_OPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tcache</name><operator>-&gt;</operator><name>hash_opf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>InvalidOid</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tcache</name><operator>-&gt;</operator><name>hash_proc</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>InvalidOid</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tcache</name><operator>-&gt;</operator><name>eq_opr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>InvalidOid</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name><name>tcache</name><operator>-&gt;</operator><name>hash_opf</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Return the default operator class to use for distributing the given type.
 *
 * Like px_default_distribution_opfamily_for_type(), but returns the
 * operator class, instead of the family. This is used e.g when choosing
 * distribution keys during CREATE TABLE.
 */</comment>
<function><type><name>Oid</name></type>
<name>px_default_distribution_opclass_for_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>opfamily</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>opfamily</name> <operator>=</operator> <call><name>px_default_distribution_opfamily_for_type</name><argument_list>(<argument><expr><name>typeoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opfamily</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>InvalidOid</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><call><name>GetDefaultOpClass</name><argument_list>(<argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>HASH_AM_OID</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Look up the hash function, for given datatype, in given op family.
 */</comment>
<function><type><name>Oid</name></type>
<name>px_hashproc_in_opfamily</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opfamily</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>hashfunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatCList</name>   <modifier>*</modifier></type><name>catlist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* First try a simple lookup. */</comment>
	<expr_stmt><expr><name>hashfunc</name> <operator>=</operator> <call><name>get_opfamily_proc</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>, <argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>HASHPROC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hashfunc</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>hashfunc</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Not found. Check for the case that there is a function for another
	 * datatype that's nevertheless binary coercible. (At least 'varchar' ops
	 * rely on this, to leverage the text operator.
	 */</comment>
	<expr_stmt><expr><name>catlist</name> <operator>=</operator> <call><name>SearchSysCacheList1</name><argument_list>(<argument><expr><name>AMPROCNUM</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>catlist</name><operator>-&gt;</operator><name>n_members</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name> <init>= <expr><operator>&amp;</operator><name><name>catlist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_amproc</name></type> <name>amproc_form</name> <init>= <expr><operator>(</operator><name>Form_pg_amproc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>amproc_form</name><operator>-&gt;</operator><name>amprocnum</name></name> <operator>!=</operator> <name>HASHPROC</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>amproc_form</name><operator>-&gt;</operator><name>amproclefttype</name></name> <operator>!=</operator> <name><name>amproc_form</name><operator>-&gt;</operator><name>amprocrighttype</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>IsBinaryCoercible</name><argument_list>(<argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name><name>amproc_form</name><operator>-&gt;</operator><name>amproclefttype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* found it! */</comment>
			<expr_stmt><expr><name>hashfunc</name> <operator>=</operator> <name><name>amproc_form</name><operator>-&gt;</operator><name>amproc</name></name></expr>;</expr_stmt>

			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ReleaseSysCacheList</name><argument_list>(<argument><expr><name>catlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hashfunc</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"could not find hash function for type %u in operator family %u"</literal></expr></argument>,
			 <argument><expr><name>typeoid</name></expr></argument>, <argument><expr><name>opfamily</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>hashfunc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*================================================================
 *
 * GENERAL PURPOSE UTILS
 *
 *================================================================
 */</comment>

<comment type="block">/*
 * returns 1 is the input int is a power of 2 and 0 otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ispowof2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>numsegs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>!</operator><operator>(</operator><name>numsegs</name> <operator>&amp;</operator> <operator>(</operator><name>numsegs</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The following jump consistent hash algorithm is
 * just the one from the original paper:
 * https://arxiv.org/abs/1406.2294
 */</comment>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int32</name></type>
<name>jump_consistent_hash</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>num_segments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int64</name></type>		<name>b</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>num_segments</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>key</name> <operator>=</operator> <name>key</name> <operator>*</operator> <literal type="number">2862933555777941757ULL</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
	<return>return <expr><name>b</name></expr>;</return>
</block_content>}</block></function>
</unit>
