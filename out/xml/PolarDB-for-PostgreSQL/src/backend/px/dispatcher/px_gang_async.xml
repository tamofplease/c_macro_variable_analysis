<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/px/dispatcher/px_gang_async.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * px_gang_async.c
 *	  Functions for asynchronous implementation of creating gang.
 *
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present Pivotal Software, Inc.
 * Portions Copyright (c) 2021, Alibaba Group Holding Limited
 *
 *
 * IDENTIFICATION
 *	    src/backend/px/dispatcher/px_gang_async.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_POLL_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_POLL_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/poll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>		<comment type="block">/* For proc_exit_inprogress  */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_conn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_gang.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_gang_async.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_vars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_snapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>getPollTimeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>startTS</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Creates a new gang by logging on a session to each segDB involved.
 *
 * call this function in GangContext memory context.
 * elog ERROR or return a non-NULL gang.
 */</comment>
<function><type><name>Gang</name> <modifier>*</modifier></type>
<name>pxgang_createGang_async</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>segments</name></decl></parameter>, <parameter><decl><type><name>SegmentType</name></type> <name>segmentType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PostgresPollingStatusType</name> <modifier>*</modifier></type><name>pollingStatus</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PxWorkerDescriptor</name> <modifier>*</modifier></type><name>pxWorkerDesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>startTS</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Gang</name>	   <modifier>*</modifier></type><name>newGangDefinition</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>create_gang_retry_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>in_recovery_mode_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>successful_connections</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>poll_timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>retry</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>totalPxNodes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>pollfd</name></name> <modifier>*</modifier></type><name>fds</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * true means connection status is confirmed, either established or in
	 * recovery mode
	 */</comment>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>connStatusDone</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"createGang size = %d, segment type = %d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>segmentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentGangCreating</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If we're in a retry, we may need to reset our initial state, a bit */</comment>
	<expr_stmt><expr><name>newGangDefinition</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<comment type="block">/* allocate and initialize a gang structure */</comment>
	<expr_stmt><expr><name>newGangDefinition</name> <operator>=</operator> <call><name>buildGangDefinition</name><argument_list>(<argument><expr><name>segments</name></expr></argument>, <argument><expr><name>segmentType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>CurrentGangCreating</name> <operator>=</operator> <name>newGangDefinition</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>totalPxNodes</name> <operator>=</operator> <call><name>getPxWorkerCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>totalPxNodes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>create_gang_retry</name>:</label>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>newGangDefinition</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>newGangDefinition</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>successful_connections</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>in_recovery_mode_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * allocate memory within perGangContext and will be freed automatically
	 * when gang is destroyed
	 */</comment>
	<expr_stmt><expr><name>pollingStatus</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PostgresPollingStatusType</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>connStatusDone</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>pxid_buf_len</name> <init>= <expr><literal type="number">100</literal> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>polar_cluster_map</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pxid</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><name>pxid_buf_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>options</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * Create the connection requests.	If we find a segment without a
			 * valid segdb we error out.  Also, if this segdb is invalid, we
			 * must fail the connection.
			 */</comment>
			<expr_stmt><expr><name>pxWorkerDesc</name> <operator>=</operator> <name><name>newGangDefinition</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<comment type="block">/* if it's a cached PX, skip */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>conn</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>pxconn_isBadConnection</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>successful_connections</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Build the connection string.  Writer-ness needs to be processed
			 * early enough now some locks are taken before command line
			 * options are recognized.
			 */</comment>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>build_pxid_param</name><argument_list>(<argument><expr><name>pxid</name></expr></argument>, <argument><expr><name>pxid_buf_len</name></expr></argument>,
								   <argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>,
								   <argument><expr><name>totalPxNodes</name> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PX_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to construct connectionstring"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>options</name> <operator>=</operator> <call><name>makeOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* start connection in asynchronous way */</comment>
			<expr_stmt><expr><call><name>pxconn_doConnectStart</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>, <argument><expr><name>pxid</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>pxconn_isBadConnection</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PX_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s (%s)"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

			<comment type="block">/*
			 * If connection status is not CONNECTION_BAD after
			 * PQconnectStart(), we must act as if the PQconnectPoll() had
			 * returned PGRES_POLLING_WRITING
			 */</comment>
			<expr_stmt><expr><name><name>pollingStatus</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>PGRES_POLLING_WRITING</name></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pxid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Ok, we've now launched all the connection attempts. Start the
		 * timeout clock (= get the start timestamp), and poll until they're
		 * all completed or we reach timeout.
		 */</comment>
		<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startTS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>fds</name> <operator>=</operator> <operator>(</operator>struct <name>pollfd</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pollfd</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>nready</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>nfds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>poll_timeout</name> <operator>=</operator> <call><name>getPollTimeout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name>pxWorkerDesc</name> <operator>=</operator> <name><name>newGangDefinition</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

				<comment type="block">/*
				 * Skip established connections and in-recovery-mode
				 * connections
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<if_stmt><if>if<condition>(<expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>serialized_snap</name></name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>pxsn_set_oldest_snapshot</name><argument_list>(<argument><expr><call><name>RestoreSnapshot</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>serialized_snap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<continue>continue;</continue>
				</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"pgres_polling_failed"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr>)</condition><block type="pseudo"><block_content>
					<goto>goto <name>FAULT_INJECTOR_POLLING_FAILED</name>;</goto></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

				<switch>switch <condition>(<expr><name><name>pollingStatus</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
				<block>{<block_content>
					<case>case <expr><name>PGRES_POLLING_OK</name></expr>:</case>
						<expr_stmt><expr><call><name>pxconn_doConnectComplete</name><argument_list>(<argument><expr><name>pxWorkerDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if <condition>(<expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>motionListener</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PX_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
											<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
											<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Internal error: No motion listener port (%s)"</literal></expr></argument>, <argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><name>successful_connections</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

						<if_stmt><if>if<condition>(<expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>serialized_snap</name></name></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><call><name>pxsn_set_oldest_snapshot</name><argument_list>(<argument><expr><call><name>RestoreSnapshot</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>serialized_snap</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

						<continue>continue;</continue>

					<case>case <expr><name>PGRES_POLLING_READING</name></expr>:</case>
						<expr_stmt><expr><name><name>fds</name><index>[<expr><name>nfds</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>fds</name><index>[<expr><name>nfds</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLIN</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>nfds</name><operator>++</operator></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>PGRES_POLLING_WRITING</name></expr>:</case>
						<expr_stmt><expr><name><name>fds</name><index>[<expr><name>nfds</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>PQsocket</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>fds</name><index>[<expr><name>nfds</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>=</operator> <name>POLLOUT</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>nfds</name><operator>++</operator></expr>;</expr_stmt>
						<break>break;</break>

					<case>case <expr><name>PGRES_POLLING_FAILED</name></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
<label><name>FAULT_INJECTOR_POLLING_FAILED</name>:</label>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
						<if_stmt><if>if <condition>(<expr><call><name>segment_failure_due_to_recovery</name><argument_list>(<argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
						<block>{<block_content>
							<expr_stmt><expr><name>in_recovery_mode_count</name><operator>++</operator></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
							<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"segment is in recovery mode (%s)"</literal></expr></argument>, <argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></if>
						<else>else
						<block>{<block_content>
							<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PX_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
											<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
											<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s (%s)"</literal></expr></argument>, <argument><expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						</block_content>}</block></else></if_stmt>
						<break>break;</break>

					<default>default:</default>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PX_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
										<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
										<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"unknow pollstatus (%s)"</literal></expr></argument>, <argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<break>break;</break>
				</block_content>}</block></switch>

				<if_stmt><if>if <condition>(<expr><name>poll_timeout</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PX_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
									<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
									<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"timeout expired\n (%s)"</literal></expr></argument>, <argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>whoami</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></for>

			<if_stmt><if>if <condition>(<expr><name>nfds</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Wait until something happens */</comment>
			<expr_stmt><expr><name>nready</name> <operator>=</operator> <call><name>poll</name><argument_list>(<argument><expr><name>fds</name></expr></argument>, <argument><expr><name>nfds</name></expr></argument>, <argument><expr><name>poll_timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>nready</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>sock_errno</name> <init>= <expr><name>SOCK_ERRNO</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><name>sock_errno</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PX_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"poll() failed: errno = %d"</literal></expr></argument>, <argument><expr><name>sock_errno</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>nready</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>int</name></type>			<name>currentFdNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<expr_stmt><expr><name>pxWorkerDesc</name> <operator>=</operator> <name><name>newGangDefinition</name><operator>-&gt;</operator><name>db_descriptors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>connStatusDone</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
						<continue>continue;</continue></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PQsocket</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>PQsocket</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>fds</name><index>[<expr><name>currentFdNumber</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><name><name>fds</name><index>[<expr><name>currentFdNumber</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <name><name>fds</name><index>[<expr><name>currentFdNumber</name></expr>]</index></name><operator>.</operator><name>events</name> <operator>||</operator>
						<name><name>fds</name><index>[<expr><name>currentFdNumber</name></expr>]</index></name><operator>.</operator><name>revents</name> <operator>&amp;</operator> <operator>(</operator><name>POLLERR</name> <operator>|</operator> <name>POLLHUP</name> <operator>|</operator> <name>POLLNVAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>pollingStatus</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PQconnectPoll</name><argument_list>(<argument><expr><name><name>pxWorkerDesc</name><operator>-&gt;</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><name>currentFdNumber</name><operator>++</operator></expr>;</expr_stmt>

				</block_content>}</block></for>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"createGang: %d processes requested; %d successful connections %d in recovery"</literal></expr></argument>,
							  <argument><expr><name>size</name></expr></argument>, <argument><expr><name>successful_connections</name></expr></argument>, <argument><expr><name>in_recovery_mode_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* some segments are in recovery mode */</comment>
		<if_stmt><if>if <condition>(<expr><name>successful_connections</name> <operator>!=</operator> <name>size</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>successful_connections</name> <operator>+</operator> <name>in_recovery_mode_count</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>px_gang_creation_retry_count</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>
				<name>create_gang_retry_counter</name><operator>++</operator> <operator>&gt;=</operator> <name>px_gang_creation_retry_count</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PX_INTERCONNECTION_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to acquire resources on one or more segments"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Segments are in recovery mode."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>ELOG_DISPATCHER_DEBUG</name><argument_list>(<argument><expr><literal type="string">"createGang: gang creation failed, but retryable."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>retry</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RE_THROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retry</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><name>px_gang_creation_retry_timer</name> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<goto>goto <name>create_gang_retry</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>CurrentGangCreating</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<return>return <expr><name>newGangDefinition</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>getPollTimeout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>startTS</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>now</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64</name></type>		<name>diff_us</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_worker_connect_timeout</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>diff_us</name> <operator>=</operator> <operator>(</operator><name><name>now</name><operator>.</operator><name>tv_sec</name></name> <operator>-</operator> <name><name>startTS</name><operator>-&gt;</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>diff_us</name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>now</name><operator>.</operator><name>tv_usec</name></name> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>startTS</name><operator>-&gt;</operator><name>tv_usec</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>diff_us</name> <operator>&gt;=</operator> <operator>(</operator><name>int64</name><operator>)</operator> <name>px_worker_connect_timeout</name> <operator>*</operator> <literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>px_worker_connect_timeout</name> <operator>*</operator> <literal type="number">1000</literal> <operator>-</operator> <name>diff_us</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<comment type="block">/* wait forever */</comment>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>timeout</name></expr>;</return>
</block_content>}</block></function>
</unit>
