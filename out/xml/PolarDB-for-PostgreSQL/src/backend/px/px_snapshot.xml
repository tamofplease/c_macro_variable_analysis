<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/px/px_snapshot.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * px_snapshot.c
 *	  Global snapshot methods.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  src/backend/px/px_snapshot.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_crc32c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_snapshot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_vars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/faultinjector.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>px_snapshot_t</name> <block>{
	<decl_stmt><decl><type><name>pg_crc32c</name></type>	<name>snapshot_crc</name></decl>;</decl_stmt>		<comment type="block">/* crc of snapshot_size + snapshot_data */</comment>
	<decl_stmt><decl><type><name>int32</name></type>		<name>snapshot_size</name></decl>;</decl_stmt>		<comment type="block">/* total size of px_snapshot_t */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>snapshot_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* varlen data part, so we can't put crc in the end */</comment>
}</block></struct></type> <name>px_snapshot_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PX_SNAPSHOT_ADDITIONAL_SIZE</name></cpp:macro> <cpp:value>(sizeof(int32) + sizeof(pg_crc32c))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>px_snapshot_t</name> <modifier>*</modifier></type><name>px_sdsnapshot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Snapshot</name></type> <name>px_snapshot</name> <init>= <expr><name>InvalidSnapshot</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>pg_crc32c</name></type> <name>pxsn_calc_sdsnapshot_crc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>pxsn_snapshot_precedes</name><parameter_list>(<parameter><decl><type><name>Snapshot</name></type> <name>snapshot1</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>snapshot2</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>pg_crc32c</name></type>
<name>pxsn_calc_sdsnapshot_crc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>pg_crc32c</name></type> <name>snapshot_crc</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>snapshot_crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* we calculate crc from the snapshot_size section */</comment>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>snapshot_crc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>px_sdsnapshot</name><operator>-&gt;</operator><name>snapshot_size</name></name></expr></argument>, <argument><expr><name><name>px_sdsnapshot</name><operator>-&gt;</operator><name>snapshot_size</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pg_crc32c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FIN_CRC32C</name><argument_list>(<argument><expr><name>snapshot_crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>snapshot_crc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Compare two giving snapshot:
 * is snapshot1 logically older than snapshot2?
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>pxsn_snapshot_precedes</name><parameter_list>(<parameter><decl><type><name>Snapshot</name></type> <name>snapshot1</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>snapshot2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
	<decl_stmt><decl><type><name>Snapshot</name></type> <name>snapshot_inject</name> <init>= <expr><operator>(</operator><name>Snapshot</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Snapshot</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"pxsh_snapshot_equal"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>snapshot1</name> <operator>=</operator> <name>snapshot2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>snapshot_inject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* compare xmin and xmax first */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdPrecedes</name><argument_list>(<argument><expr><name><name>snapshot1</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name><name>snapshot2</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>)</argument_list></call>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
		<operator>||</operator> <call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"pxsh_snapshot1_xmin_smaller"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"xmin is smaller, snapshot1 is older"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdFollows</name><argument_list>(<argument><expr><name><name>snapshot1</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name><name>snapshot2</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>)</argument_list></call>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
		<operator>||</operator> <call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"pxsh_snapshot1_xmin_bigger"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"xmin is bigger, snapshot1 is newer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdPrecedes</name><argument_list>(<argument><expr><name><name>snapshot1</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>, <argument><expr><name><name>snapshot2</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>)</argument_list></call>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
		<operator>||</operator> <call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"pxsh_snapshot1_xmax_smaller"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"xmax is smaller, snapshot1 is older"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TransactionIdFollows</name><argument_list>(<argument><expr><name><name>snapshot1</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>, <argument><expr><name><name>snapshot2</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>)</argument_list></call>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>FAULT_INJECTOR</name></cpp:ifdef>
		<operator>||</operator> <call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"pxsh_snapshot1_xmax_bigger"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"xmax is bigger, snapshot1 is newer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* xmin and xmax are equal, now compare sub xid, larger means newer */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>snapshot1</name><operator>-&gt;</operator><name>subxcnt</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>snapshot2</name><operator>-&gt;</operator><name>subxcnt</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TransactionIdPrecedes</name><argument_list>(<argument><expr><name><name>snapshot1</name><operator>-&gt;</operator><name>subxip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>snapshot2</name><operator>-&gt;</operator><name>subxip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"subxip is smaller, snapshot1 is older"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>TransactionIdFollows</name><argument_list>(<argument><expr><name><name>snapshot1</name><operator>-&gt;</operator><name>subxip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>snapshot2</name><operator>-&gt;</operator><name>subxip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"subxip is bigger, snapshot1 is newer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* now xid are all euqal, more xid means newer */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>snapshot1</name><operator>-&gt;</operator><name>subxcnt</name></name> <operator>&gt;</operator> <name><name>snapshot2</name><operator>-&gt;</operator><name>subxcnt</name></name> <operator>||</operator>
		<call><name>FAULT_COND</name><argument_list>(<argument><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"pxsh_snapshot1_subxcnt_more"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"subxcnt is more, snapshot1 is older"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>snapshot1</name><operator>-&gt;</operator><name>subxcnt</name></name> <operator>==</operator> <name><name>snapshot2</name><operator>-&gt;</operator><name>subxcnt</name></name> <operator>||</operator>
			  <call><name>FAULT_COND</name><argument_list>(<argument><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"pxsh_snapshot1_subxcnt_same"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"subxcnt is same, snapshot1 is same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>snapshot1</name><operator>-&gt;</operator><name>subxcnt</name></name> <operator>&lt;</operator> <name><name>snapshot2</name><operator>-&gt;</operator><name>subxcnt</name></name> <operator>||</operator>
			  <call><name>FAULT_COND</name><argument_list>(<argument><expr><call><name>SIMPLE_FAULT_INJECTOR</name><argument_list>(<argument><expr><literal type="string">"pxsh_snapshot1_subxcnt_less"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>FaultInjectorTypeEnable</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"subxcnt is less, snapshot1 is newer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>				<comment type="block">/* shouldn't reach here */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pxsn_log_snapshot</name><parameter_list>(<parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>==</operator> <name>InvalidSnapshot</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"%s: px_snapshot:%d InvalidSnapshot"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>PxIdentity</name><operator>.</operator><name>dbid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"%s: px_snapshot: xmin:%d, xmax:%d, lsn:%lX, xcnt: %d, subxcnt: %d"</literal></expr></argument>,
		 <argument><expr><name>func</name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmin</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xmax</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>lsn</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xcnt</name></name></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>subxcnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>xcnt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StringInfo</name></type>	<name>buf</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"xip: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>xcnt</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>xip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>snapshot</name><operator>-&gt;</operator><name>subxcnt</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StringInfo</name></type>	<name>buf</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"subxip: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>snapshot</name><operator>-&gt;</operator><name>subxcnt</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name><name>snapshot</name><operator>-&gt;</operator><name>subxip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pxsn_set_snapshot</name><parameter_list>(<parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>px_snapshot</name> <operator>!=</operator> <name>InvalidSnapshot</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>px_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>!=</operator> <name>InvalidSnapshot</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pxsn_log_snapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>px_snapshot</name> <operator>=</operator> <name>snapshot</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pxsn_set_oldest_snapshot</name><parameter_list>(<parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>!=</operator> <name>InvalidSnapshot</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pxsn_log_snapshot</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>snapshot</name> <operator>==</operator> <name>InvalidSnapshot</name> <operator>||</operator> <name>px_snapshot</name> <operator>==</operator> <name>InvalidSnapshot</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>px_snapshot</name> <operator>=</operator> <name>snapshot</name></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>pxsn_snapshot_precedes</name><argument_list>(<argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>px_snapshot</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>px_snapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>px_snapshot</name> <operator>=</operator> <name>snapshot</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pxsn_get_serialized_snapshot</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pxsn_log_snapshot</name><argument_list>(<argument><expr><name>px_snapshot</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>px_snapshot</name> <operator>!=</operator> <name>InvalidSnapshot</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type> <name>snapshot_size</name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>px_sdsnapshot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>px_sdsnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>snapshot_size</name> <operator>=</operator> <call><name>EstimateSnapshotSpace</name><argument_list>(<argument><expr><name>px_snapshot</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>PX_SNAPSHOT_ADDITIONAL_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>px_sdsnapshot</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><name>snapshot_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SerializeSnapshot</name><argument_list>(<argument><expr><name>px_snapshot</name></expr></argument>, <argument><expr><name><name>px_sdsnapshot</name><operator>-&gt;</operator><name>snapshot_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>px_sdsnapshot</name><operator>-&gt;</operator><name>snapshot_size</name></name> <operator>=</operator> <name>snapshot_size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>px_sdsnapshot</name><operator>-&gt;</operator><name>snapshot_crc</name></name> <operator>=</operator> <call><name>pxsn_calc_sdsnapshot_crc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>px_sdsnapshot</name></expr>;</return>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>pxsn_get_serialized_snapshot_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pxsn_log_snapshot</name><argument_list>(<argument><expr><name>px_snapshot</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>px_snapshot</name> <operator>!=</operator> <name>InvalidSnapshot</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>EstimateSnapshotSpace</name><argument_list>(<argument><expr><name>px_snapshot</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>PX_SNAPSHOT_ADDITIONAL_SIZE</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pxsn_get_serialized_snapshot_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>px_sdsnapshot</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name><name>px_sdsnapshot</name><operator>-&gt;</operator><name>snapshot_data</name></name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pxsn_set_serialized_snapshot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sdsnapshot</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>sdsnapshot</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>px_sdsnapshot</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>px_sdsnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>px_sdsnapshot</name> <operator>=</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>px_sdsnapshot</name></expr></argument>, <argument><expr><name>sdsnapshot</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* validate this snapshot */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>px_sdsnapshot</name><operator>-&gt;</operator><name>snapshot_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>px_sdsnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"px_snapshot: wrong snapshot size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>EQ_CRC32C</name><argument_list>(<argument><expr><call><name>pxsn_calc_sdsnapshot_crc</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>px_sdsnapshot</name><operator>-&gt;</operator><name>snapshot_crc</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>px_sdsnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"px_snapshot: wrong snapshot crc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
