<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/list/polar_successor_list.c"><comment type="block">/*----------------------------------------------------------------------------------------
 *
 * polar_successor_list.c
 *  This list is used to manage free resources.
 *  The resources are allocated as array items,
 *  get the free item from polar_successor_list_pop
 *  and call polar_successor_list_push when the item is released.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * src/backend/utils/list/polar_successor_list.c
 * ---------------------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_successor_list.h"</cpp:file></cpp:include>

<function><type><name>polar_successor_list</name> <modifier>*</modifier></type>
<name>polar_successor_list_init</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>total_items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_successor_list</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><operator>(</operator><name>polar_successor_list</name> <operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>total_items</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>total_items</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>POLAR_SUCCESSOR_LIST_NIL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free_head</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>polar_successor_list_pop</name><parameter_list>(<parameter><decl><type><name>polar_successor_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>free_item</name> <init>= <expr><name><name>list</name><operator>-&gt;</operator><name>free_head</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>free_item</name> <operator>!=</operator> <name>POLAR_SUCCESSOR_LIST_NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free_head</name></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>free_item</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>free_item</name></expr>]</index></name> <operator>=</operator> <name>POLAR_SUCCESSOR_LIST_NIL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>free_item</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_successor_list_push</name><parameter_list>(<parameter><decl><type><name>polar_successor_list</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>free_item</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>list</name><operator>-&gt;</operator><name>free_head</name></name> <operator>!=</operator> <name>POLAR_SUCCESSOR_LIST_NIL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>free_item</name></expr>]</index></name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>free_head</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>free_item</name></expr>]</index></name> <operator>=</operator> <name>POLAR_SUCCESSOR_LIST_NIL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>list</name><operator>-&gt;</operator><name>free_head</name></name> <operator>=</operator> <name>free_item</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
