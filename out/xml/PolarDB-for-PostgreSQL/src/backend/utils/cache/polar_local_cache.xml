<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/cache/polar_local_cache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_local_cache.c
 *      Manage local file cache, which is the file cache of shared storage.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * IDENTIFICATION
 *      src/backend/utils/cache/polar_local_cache.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_backtrace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_local_cache.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_CACHE_IO_IN_PROGRESS</name><parameter_list>(<parameter><type><name>seg</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>((seg)-&gt;status &amp; (POLAR_CACHE_SEG_READ_MASK | POLAR_CACHE_SEG_WRITE_IN_PROGRESS))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_CACHE_IS_OCCUPIED_SEGMENT</name><parameter_list>(<parameter><type><name>seg</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>((seg)-&gt;status &amp; POLAR_CACHE_SEG_OCCUPIED)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_CACHE_IS_CLEAN_SEGMENT</name><parameter_list>(<parameter><type><name>seg</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(!((seg)-&gt;status &amp; POLAR_CACHE_SEG_DIRTY))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_CACHE_WRITE_IN_PROGRESS</name><parameter_list>(<parameter><type><name>seg</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>((seg)-&gt;status &amp; POLAR_CACHE_SEG_WRITE_IN_PROGRESS)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_CACHE_SHARED_READING</name><parameter_list>(<parameter><type><name>seg</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>((!((seg)-&gt;status &amp; POLAR_CACHE_SEG_READABLE)) &amp;&amp; \
												 (((seg)-&gt;status &amp; POLAR_CACHE_SEG_READ_MASK) &gt; 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_CACHE_REACH_READ_LIMIT</name><parameter_list>(<parameter><type><name>seg</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(((seg)-&gt;status &amp; POLAR_CACHE_SEG_READ_MASK) == POLAR_CACHE_SEG_READ_MASK)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_LOG_IO_ERROR</name><parameter_list>(<parameter><type><name>__segno</name></type></parameter>, <parameter><type><name>__file_type</name></type></parameter>, <parameter><type><name>__offset</name></type></parameter>, <parameter><type><name>__size</name></type></parameter>, <parameter><type><name>__io_return</name></type></parameter>, <parameter><type><name>__errcause</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		if (io_error) \
		{ \
			io_error-&gt;segno = (__segno); \
			io_error-&gt;file_type = (__file_type); \
			io_error-&gt;offset = (__offset); \
			io_error-&gt;size = (__size); \
			io_error-&gt;io_return = (__io_return); \
			io_error-&gt;save_errno = errno; \
			io_error-&gt;errcause = (__errcause); \
		} \
	} while (0)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <name>polar_copy_direction</name>
<block>{
	<decl><name>LOCAL_TO_SHARED</name></decl>,
	<decl><name>SHARED_TO_LOCAL</name></decl>
}</block></enum></type> <name>polar_copy_direction</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_local_cache_flush</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_io_segment</name> <modifier>*</modifier></type><name>io_seg</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_default_convert_seg2str</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%04lX"</literal></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_record_local_flushed_seg</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>write_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_LOCAL_CACHE_META_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_CACHE_LOCAL_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open_transient_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_APPEND</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>POLAR_LOCAL_CACHE_META</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_OFFSET</name></expr></argument>,
						   <argument><expr><name>POLAR_UNKNOWN_CACHE_SIZE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLAR_CACHE_OPEN_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_CACHE_LOCAL_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>write_size</name> <operator>=</operator> <call><name>polar_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>segno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>segno</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>write_size</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>segno</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>POLAR_LOCAL_CACHE_META</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_OFFSET</name></expr></argument>,
						   <argument><expr><name>POLAR_UNKNOWN_CACHE_SIZE</name></expr></argument>, <argument><expr><name>write_size</name></expr></argument>, <argument><expr><name>POLAR_CACHE_WRITE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>write_size</name> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>segno</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Size</name></type>
<name>polar_local_cache_size</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>max_segments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>sz</name> <init>= <expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_local_cache_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LWLockPadded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* ctl_lock */</comment>
	<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>max_segments</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_io_segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* io_seg_items[] */</comment>
	<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>POLAR_SUCCESSOR_LIST_SIZE</name><argument_list>(<argument><expr><name>max_segments</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* free_items_list */</comment>

	<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>polar_local_cache_shmem_size</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>max_segments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>sz</name> <init>= <expr><call><name>polar_local_cache_size</name><argument_list>(<argument><expr><name>max_segments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>+=</operator> <call><name>hash_estimate_size</name><argument_list>(<argument><expr><name>max_segments</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_io_seg_entry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_segment_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seg1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>seg2</name></decl></parameter>,  <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator> <name>seg1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name> <modifier>*</modifier></type><name>right</name> <init>= <expr><operator>(</operator><name>uint64</name> <operator>*</operator><operator>)</operator> <name>seg2</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><ternary><condition><expr><operator>*</operator><name>left</name> <operator>==</operator> <operator>*</operator><name>right</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_local_cache_attach_hashmap</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>info</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_io_seg_entry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>match</name></name> <operator>=</operator> <name>polar_segment_compare</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_io_seg</name></name> <operator>=</operator> <call><name>ShmemInitHash</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_name</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>max_segments</name></name></expr></argument>,
									   <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>max_segments</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name> <operator>|</operator> <name>HASH_COMPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_local_cache_hash_init</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_CACHE_HASH_SUFFIX</name></cpp:macro> <cpp:value>" local cache hash"</cpp:value></cpp:define>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_name</name></name></expr></argument>, <argument><expr><name>POLAR_LOCAL_CACHE_HASH_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>LOCAL_CACHE_HASH_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_name</name><index>[<expr><name>POLAR_LOCAL_CACHE_HASH_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_local_cache_attach_hashmap</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_validate_data_dir</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dir</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>dir</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;</operator> <name>MAXPGPATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dir</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dir</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>dir</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"required directory \"%s\" does not exist"</literal></expr></argument>,
								<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>polar_make_pg_directory</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create missing directory \"%s\": %m"</literal></expr></argument>,
								<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>polar_local_cache</name></type>
<name>polar_create_local_cache</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cache_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir_name</name></decl></parameter>,
						 <parameter><decl><type><name>uint32</name></type> <name>max_segments</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>segment_size</name></decl></parameter>,
						 <parameter><decl><type><name>int</name></type> <name>tranche_id</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>io_permission</name></decl></parameter>, <parameter><decl><type><name>polar_segment_file_path</name></type> <name>seg_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_CACHE_SUFFIX</name></cpp:macro> <cpp:value>"_local_cache"</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cache_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>LOCAL_CACHE_SUFFIX</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>cache_name</name></expr></argument>, <argument><expr><name>LOCAL_CACHE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>polar_local_cache</name><operator>)</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>polar_local_cache_size</name><argument_list>(<argument><expr><name>max_segments</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>cache</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Size</name></type> <name>offset</name> <init>= <expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_local_cache_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_local_cache_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>trache_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>trache_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>ctl_lock</name></name> <operator>=</operator> <operator>(</operator><name>LWLockPadded</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LWLockPadded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name></name> <operator>=</operator> <operator>(</operator><name>polar_io_segment</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max_segments</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_io_segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>max_segments</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_io_segment</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>free_items_list</name></name> <operator>=</operator> <call><name>polar_successor_list_init</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>ptr</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr></argument>, <argument><expr><name>max_segments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>offset</name> <operator>+=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><call><name>POLAR_SUCCESSOR_LIST_SIZE</name><argument_list>(<argument><expr><name>max_segments</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>offset</name> <operator>==</operator> <call><name>polar_local_cache_size</name><argument_list>(<argument><expr><name>max_segments</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>seg_path</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>seg_path</name></name> <operator>=</operator> <name>polar_default_convert_seg2str</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>seg_path</name></name> <operator>=</operator> <name>seg_path</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>max_segments</name></name> <operator>=</operator> <name>max_segments</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>segment_size</name></name> <operator>=</operator> <name>segment_size</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>=</operator> <name>io_permission</name> <operator>&amp;</operator> <name>POLAR_CACHE_IO_PERMISSION_MASK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>tranche_id</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>trache_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tranche_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>polar_local_cache_hash_init</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>cache_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>polar_cache_file_open</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_cache_file_type</name></type> <name>file_type</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>,
					  <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>file_flags</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>off_t</name></type> <name>seek_ret</name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>file_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>POLAR_LOCAL_CACHE_FILE</name></expr>:</case>
			<expr_stmt><expr><call><name>POLAR_LOCAL_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>POLAR_SHARED_STORAGE_FILE</name></expr>:</case>
			<expr_stmt><expr><call><name>POLAR_SHARED_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>POLAR_LOG_BACKTRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Incorrect filetype=%d for %s"</literal></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><name>event</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>file_type</name> <operator>==</operator> <name>POLAR_LOCAL_CACHE_FILE</name><operator>)</operator></expr> ?</condition><then> <expr><name>WAIT_EVENT_CACHE_LOCAL_OPEN</name></expr> </then><else>: <expr><name>WAIT_EVENT_CACHE_SHARED_OPEN</name></expr></else></ternary></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open_transient_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>file_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_OFFSET</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_SIZE</name></expr></argument>,
						   <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLAR_CACHE_OPEN_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>event</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>file_type</name> <operator>==</operator> <name>POLAR_LOCAL_CACHE_FILE</name><operator>)</operator></expr> ?</condition><then> <expr><name>WAIT_EVENT_CACHE_LOCAL_LSEEK</name></expr> </then><else>: <expr><name>WAIT_EVENT_CACHE_SHARED_LSEEK</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_CACHE_LOCAL_LSEEK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>seek_ret</name> <operator>=</operator> <call><name>polar_lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>seek_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_SIZE</name></expr></argument>,
						   <argument><expr><name>seek_ret</name></expr></argument>, <argument><expr><name>POLAR_CACHE_SEEK_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>fd</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>polar_cache_file_read</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_cache_file_type</name></type> <name>file_type</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>,
					  <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>read_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>event</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_cache_io_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_cache_file_open</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>event</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>file_type</name> <operator>==</operator> <name>POLAR_LOCAL_CACHE_FILE</name><operator>)</operator></expr> ?</condition><then> <expr><name>WAIT_EVENT_CACHE_LOCAL_READ</name></expr> </then><else>: <expr><name>WAIT_EVENT_CACHE_SHARED_READ</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>read_size</name> <operator>=</operator> <call><name>polar_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>read_size</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>read_size</name></expr></argument>, <argument><expr><name>POLAR_CACHE_READ_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>read_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>polar_cache_file_write</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_cache_file_type</name></type> <name>file_type</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>,
					   <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>write_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>event</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_cache_io_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_cache_file_open</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>event</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>file_type</name> <operator>==</operator> <name>POLAR_LOCAL_CACHE_FILE</name><operator>)</operator></expr> ?</condition><then> <expr><name>WAIT_EVENT_CACHE_LOCAL_WRITE</name></expr> </then><else>: <expr><name>WAIT_EVENT_CACHE_SHARED_WRITE</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>write_size</name> <operator>=</operator> <call><name>polar_write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>write_size</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>write_size</name></expr></argument>, <argument><expr><name>POLAR_CACHE_WRITE_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>file_type</name> <operator>==</operator> <name>POLAR_SHARED_STORAGE_FILE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<comment type="block">/* sync file data when is shared storage file */</comment>
		<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_CACHE_SHARED_SYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>polar_fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_OFFSET</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_SIZE</name></expr></argument>,
							   <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>POLAR_CACHE_SYNC_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>write_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>
<name>polar_cache_copy</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_copy_direction</name></type> <name>direct</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>,
				 <parameter><decl><type><name>size_t</name></type> <name>from_offset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>seg_buf</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>write_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>read_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_file_type</name></type> <name>from</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>direct</name> <operator>==</operator> <name>LOCAL_TO_SHARED</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>from</name> <operator>=</operator> <name>POLAR_LOCAL_CACHE_FILE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>to</name> <operator>=</operator> <name>POLAR_SHARED_STORAGE_FILE</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>from</name> <operator>=</operator> <name>POLAR_SHARED_STORAGE_FILE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>to</name> <operator>=</operator> <name>POLAR_LOCAL_CACHE_FILE</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>read_size</name> <operator>=</operator> <call><name>polar_cache_file_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>from</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>from_offset</name></expr></argument>, <argument><expr><name>seg_buf</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>segment_size</name></name> <operator>-</operator> <name>from_offset</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>read_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>read_size</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>write_size</name> <operator>=</operator> <call><name>polar_cache_file_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>to</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>from_offset</name></expr></argument>, <argument><expr><name>seg_buf</name></expr></argument>, <argument><expr><name>read_size</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>write_size</name> <operator>!=</operator> <name>read_size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Copy size for local cache %s is mismatch, direct=%d, segno=%ld, offset=%ld, write_size=%ld, read_size=%ld"</literal></expr></argument>,
			 <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>, <argument><expr><name>direct</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>from_offset</name></expr></argument>, <argument><expr><name>write_size</name></expr></argument>, <argument><expr><name>read_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Remove local file cache if we failed to copy data from shared storage to local file.
		 * Otherwise we will get inconsistent data
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>direct</name> <operator>==</operator> <name>SHARED_TO_LOCAL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>POLAR_LOCAL_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>read_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_cache_copy_local_not_exists</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>seg_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>copy_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_LOCAL_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_stat</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISREG</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s exists, but is not regular file,st_mode=%d"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>seg_buf</name> <operator>=</operator> <call><name>polar_palloc_in_crit</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>segment_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>copy_size</name> <operator>=</operator> <call><name>polar_cache_copy</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>SHARED_TO_LOCAL</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seg_buf</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seg_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>copy_size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>POLAR_SEGMENT_IO_SUCCESS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <call><name>POLAR_SEGMENT_NOT_EXISTS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_cache_read</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>,
				 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,  <parameter><decl><type><name>uint32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>seg_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>local_read_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type>     <name>shared_read_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>local_read_size</name> <operator>=</operator> <call><name>polar_cache_file_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>POLAR_LOCAL_CACHE_FILE</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>local_read_size</name> <operator>==</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>POLAR_SEGMENT_IO_SUCCESS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_READ</name><operator>)</operator>
				<operator>||</operator> <operator>(</operator><name>local_read_size</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>==</operator> <name><name>cache</name><operator>-&gt;</operator><name>segment_size</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Set ERANGE error when read to the end of file */</comment>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>POLAR_LOCAL_CACHE_FILE</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
							   <argument><expr><name>local_read_size</name></expr></argument>, <argument><expr><name>POLAR_CACHE_READ_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_SEGMENT_IO_SUCCESS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>POLAR_SEGMENT_NOT_EXISTS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_READ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_cache_io_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>seg_buf</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>segment_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>shared_read_size</name> <operator>=</operator> <call><name>polar_cache_copy</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>SHARED_TO_LOCAL</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seg_buf</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>shared_read_size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name>POLAR_SEGMENT_IO_SUCCESS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seg_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>shared_read_size</name> <operator>&lt;</operator> <name>offset</name> <operator>+</operator> <name>size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>POLAR_SHARED_STORAGE_FILE</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>,
						   <argument><expr><name>shared_read_size</name></expr></argument>, <argument><expr><name>POLAR_CACHE_READ_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seg_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>seg_buf</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seg_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_shared_file_flush</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_io_segment</name> <modifier>*</modifier></type><name>seg</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>copy_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>segment_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>copy_size</name> <operator>=</operator> <call><name>polar_cache_copy</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>LOCAL_TO_SHARED</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>min_write_offset</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>copy_size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>POLAR_SEGMENT_IO_SUCCESS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Evict io segment in the following order
 * 1. Evict io segment which is clean
 * 2. Evict io segment which is in io progrss
 * 3. Flush dirty segment
 * We should acquire cache lock before call this function
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_evict_io_segment</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>flushed</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><call><name>POLAR_SUCCESSOR_LIST_EMPTY</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>free_items_list</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>flushed</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>io_in_progress</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>evicted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>polar_io_segment</name> <modifier>*</modifier></type><name>io_seg</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_segments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>io_seg</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<comment type="block">/* Evict segment which complete io read and it's clean */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>POLAR_CACHE_IO_IN_PROGRESS</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>io_in_progress</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><call><name>POLAR_CACHE_IS_OCCUPIED_SEGMENT</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>POLAR_CACHE_IS_CLEAN_SEGMENT</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_io_seg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>io_seg</name><operator>-&gt;</operator><name>segno</name></name><operator>)</operator></expr></argument>,
								<argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"polar local cache hash table for %s is corrupted"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>polar_successor_list_push</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>free_items_list</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>evicted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>evicted</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>io_in_progress</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Reach here means all segments are dirty and no io in progress, so we choose the first segment to write */</comment>
		<expr_stmt><expr><name>io_seg</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>flushed</name> <operator>=</operator> <call><name>polar_local_cache_flush</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>io_seg</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><operator>!</operator><call><name>POLAR_SUCCESSOR_LIST_EMPTY</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>free_items_list</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_io_seg_entry</name> <modifier>*</modifier></type>
<name>polar_create_new_seg_entry</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_io_seg_entry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>POLAR_SUCCESSOR_LIST_EMPTY</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>free_items_list</name></name></expr></argument>)</argument_list></call>
			<operator>&amp;&amp;</operator> <operator>!</operator><call><name>polar_evict_io_segment</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_io_seg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>segno</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>polar_successor_list_pop</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>free_items_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>POLAR_SUCCESSOR_LIST_NIL</name> <operator>||</operator> <name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"%s local cache free list is corrupted"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>segno</name> <operator>=</operator> <name>segno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <name>POLAR_CACHE_SEG_OCCUPIED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>min_write_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_local_cache_read</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>,
					   <parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_io_seg_entry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_io_segment</name> <modifier>*</modifier></type><name>io_seg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_LOCAL_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_cache_io_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_io_seg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>segno</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>polar_create_new_seg_entry</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Failed to find entry for %ld in %s local cache"</literal></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>io_seg</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>io_seg</name><operator>-&gt;</operator><name>segno</name></name> <operator>==</operator> <name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * 1. Wait when write in progress.
		 * 2. We need one process to read segment from pfs to local fs, so wait when read in progress and local segment is not readable.
		 * 3. Wait if  the reference number of read in progress reach the max limit. It should never happen
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>POLAR_CACHE_WRITE_IN_PROGRESS</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>POLAR_CACHE_SHARED_READING</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call>
				<operator>||</operator> <call><name>POLAR_CACHE_REACH_READ_LIMIT</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>HOLD_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Increase read refenece */</comment>
		<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></for>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>polar_cache_read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>io_seg</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* Decrease read reference */</comment>
	<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>POLAR_CACHE_SEG_READABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RESUME_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_local_cache_write</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>,
						<parameter><decl><type><name>uint32</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_io_seg_entry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>write_size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_io_segment</name> <modifier>*</modifier></type><name>io_seg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_cache_file_type</name></type> <name>file_type</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_cache_io_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_LOCAL_FILE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>file_type</name> <operator>=</operator> <name>POLAR_LOCAL_CACHE_FILE</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>file_type</name> <operator>=</operator> <name>POLAR_SHARED_STORAGE_FILE</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Write is not allowed for local cache %s, permission=%x"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_io_seg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>segno</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>polar_create_new_seg_entry</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Failed to get entry for segno=%ld in local cache %s"</literal></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>io_seg</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>io_seg</name><operator>-&gt;</operator><name>segno</name></name> <operator>==</operator> <name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>POLAR_CACHE_IO_IN_PROGRESS</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Protect io_seg-&gt;status in this process */</comment>
		<expr_stmt><expr><call><name>HOLD_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <operator>(</operator><name>POLAR_CACHE_SEG_WRITE_IN_PROGRESS</name> <operator>|</operator> <name>POLAR_CACHE_SEG_DIRTY</name><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/* Set mininum offset to write */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_SEG_SET_MIN_OFFSET</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>POLAR_CACHE_SEG_SET_MIN_OFFSET</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>min_write_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>min_write_offset</name></name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name><name>io_seg</name><operator>-&gt;</operator><name>min_write_offset</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If write to local file then we must chek if it already exists,
	 * otherwise try to copy segment from shared to local
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>file_type</name> <operator>==</operator> <name>POLAR_LOCAL_CACHE_FILE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>polar_cache_copy_local_not_exists</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>write_size</name> <operator>=</operator> <call><name>polar_cache_file_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name><name>io_seg</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>write_size</name> <operator>=</operator> <call><name>polar_cache_file_write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name><name>io_seg</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>POLAR_CACHE_SEG_WRITE_IN_PROGRESS</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>write_size</name> <operator>==</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>file_type</name> <operator>==</operator> <name>POLAR_SHARED_STORAGE_FILE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>POLAR_CACHE_SEG_DIRTY</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RESUME_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>write_size</name> <operator>!=</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s size mismatch, write_size=%ld and size=%d"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>write_size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>write_size</name> <operator>==</operator> <name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Fulsh one segment file and we should acquire the cache lock before call this function
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_local_cache_flush</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_io_segment</name> <modifier>*</modifier></type><name>io_seg</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <operator>(</operator><name>POLAR_CACHE_LOCAL_FILE_WRITE</name> <operator>|</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>flushed</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_CACHE_IS_OCCUPIED_SEGMENT</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>POLAR_CACHE_IS_CLEAN_SEGMENT</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>POLAR_CACHE_WRITE_IN_PROGRESS</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Hold interrupts to make sure io_seg-&gt;status is changed in this process */</comment>
		<expr_stmt><expr><call><name>HOLD_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>POLAR_CACHE_SEG_WRITE_IN_PROGRESS</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>flushed</name> <operator>=</operator> <call><name>polar_record_local_flushed_seg</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>io_seg</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_LOCAL_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>flushed</name> <operator>=</operator> <call><name>polar_shared_file_flush</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>io_seg</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>flushed</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>POLAR_CACHE_SEG_DIRTY</name> <operator>|</operator> <name>POLAR_CACHE_SEG_WRITE_IN_PROGRESS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>POLAR_CACHE_SEG_WRITE_IN_PROGRESS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>RESUME_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>flushed</name></expr>;</return>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>polar_local_cache_update_flushed_times</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>dst_remove_flushed_times</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We update local_flushed_times when do checkpoint, and we
	 * keep last 3 times flushed  lists.
	 * These flushed lists are used when do online promote.
	 * We copy files from local cache to shared storage base on these flush lists.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>dst_remove_flushed_times</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><name>dst_remove_flushed_times</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_local_cache_flush_all</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>dst_remove_flushed_times</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>flushed_seg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flushed_all</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>need_flush</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_cache_io_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <operator>(</operator><name>POLAR_CACHE_LOCAL_FILE_READ</name> <operator>|</operator> <name>POLAR_CACHE_LOCAL_FILE_WRITE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>need_flush</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_segments</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_segments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>need_flush</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>flushed_all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>max_segments</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>polar_io_segment</name> <modifier>*</modifier></type><name>io_seg</name></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>need_flush</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>io_seg</name> <operator>=</operator> <operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_CACHE_IS_OCCUPIED_SEGMENT</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call>
					<operator>||</operator> <call><name>POLAR_CACHE_IS_CLEAN_SEGMENT</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>need_flush</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>POLAR_CACHE_WRITE_IN_PROGRESS</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Wait for previous io opertion to end. We will check this segment in next loop */</comment>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>flushed_all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_local_cache_flush</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>io_seg</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>polar_local_cache_report_error</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>flushed_all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>flushed_seg</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>need_flush</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>flushed_all</name> <operator>&amp;&amp;</operator> <name>flushed_seg</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>dst_remove_flushed_times</name> <operator>=</operator> <call><name>polar_local_cache_update_flushed_times</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><operator>!</operator><name>flushed_all</name> <operator>&amp;&amp;</operator> <name><name>io_error</name><operator>-&gt;</operator><name>save_errno</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>flushed_all</name> <operator>&amp;&amp;</operator> <name>dst_remove_flushed_times</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

		<comment type="block">/* We only keep the segments flushed list of the last flushed time */</comment>
		<expr_stmt><expr><call><name>POLAR_LOCAL_CACHE_META_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>dst_remove_flushed_times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>need_flush</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>flushed_all</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_cache_file_unlink</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_cache_file_type</name></type> <name>file_type</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>file_type</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>POLAR_LOCAL_CACHE_FILE</name></expr>:</case>
			<expr_stmt><expr><call><name>POLAR_LOCAL_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>POLAR_SHARED_STORAGE_FILE</name></expr>:</case>
			<expr_stmt><expr><call><name>POLAR_SHARED_FILE_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>POLAR_LOG_BACKTRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Incorrect filetype=%d for %s"</literal></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><call><name>polar_unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><name>segno</name></expr></argument>, <argument><expr><name>file_type</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_OFFSET</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_SIZE</name></expr></argument>,
						   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>POLAR_CACHE_UNLINK_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_local_cache_remove</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_io_seg_entry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <operator>(</operator><name>POLAR_CACHE_LOCAL_FILE_WRITE</name> <operator>|</operator> <name>POLAR_CACHE_LOCAL_FILE_READ</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_cache_io_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_io_seg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>segno</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>entry</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>polar_io_segment</name> <modifier>*</modifier></type><name>io_seg</name> <init>= <expr><operator>&amp;</operator><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* wait when io in progress */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>POLAR_CACHE_IO_IN_PROGRESS</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Protect io_seg data which in shared memory */</comment>
			<expr_stmt><expr><call><name>HOLD_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* flush to shared storage when segment is dirty */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>POLAR_CACHE_IS_CLEAN_SEGMENT</name><argument_list>(<argument><expr><name>io_seg</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
					<operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>bool</name></type> <name>flushed</name></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>|=</operator> <name>POLAR_CACHE_SEG_WRITE_IN_PROGRESS</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name>flushed</name> <operator>=</operator> <call><name>polar_shared_file_flush</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>io_seg</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>flushed</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>POLAR_CACHE_SEG_WRITE_IN_PROGRESS</name> <operator>|</operator> <name>POLAR_CACHE_SEG_DIRTY</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<expr_stmt><expr><name><name>io_seg</name><operator>-&gt;</operator><name>status</name></name> <operator>&amp;=</operator> <operator>~</operator><name>POLAR_CACHE_SEG_WRITE_IN_PROGRESS</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>RESUME_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<return>return <expr><name>false</name></expr>;</return>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>io_seg_items</name><index>[<expr><name><name>entry</name><operator>-&gt;</operator><name>index</name></name></expr>]</index></name><operator>.</operator><name>status</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_successor_list_push</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>free_items_list</name></name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>hash_search</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>hash_io_seg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>segno</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"The local cache hash table for %s is corrupted"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>RESUME_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name><operator>)</operator>
			<operator>&amp;&amp;</operator> <operator>!</operator><call><name>polar_cache_file_unlink</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>POLAR_SHARED_STORAGE_FILE</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_LOCAL_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>polar_cache_file_unlink</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>POLAR_LOCAL_CACHE_FILE</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_local_cache_report_error</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>file_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_LOG_BACKTRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>io_error</name><operator>-&gt;</operator><name>file_type</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>POLAR_LOCAL_CACHE_FILE</name></expr>:</case>
			<expr_stmt><expr><call><name>POLAR_LOCAL_FILE_PATH</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>POLAR_LOCAL_CACHE_META</name></expr>:</case>
			<expr_stmt><expr><call><name>POLAR_LOCAL_CACHE_META_PATH</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>POLAR_SHARED_STORAGE_FILE</name></expr>:</case>
			<expr_stmt><expr><call><name>POLAR_SHARED_FILE_PATH</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>segno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>POLAR_LOG_BACKTRACE</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><ternary><condition><expr><name>log_level</name> <operator>&lt;</operator> <name>FATAL</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>log_level</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"Incorret local cache filetype=%d"</literal></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>file_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to do io for local cache, file_type=%d, io_permission=%X"</literal></expr></argument>,
		 <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>file_type</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>io_error</name><operator>-&gt;</operator><name>errcause</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>POLAR_CACHE_OPEN_FAILED</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Failed to open file %s, errno=%d"</literal></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>save_errno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>POLAR_CACHE_SEEK_FAILED</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Failed to seek file %s from offset=%ld and size=%ld, errno=%d, io_return=%ld"</literal></expr></argument>,
				 <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>save_errno</name></name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>io_return</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>POLAR_CACHE_READ_FAILED</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Failed to read file %s from offset=%ld and size=%ld, errno=%d, io_return=%ld"</literal></expr></argument>,
				 <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>save_errno</name></name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>io_return</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>POLAR_CACHE_WRITE_FAILED</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Failed to write file %s from offset=%ld and size=%ld, errno=%d, io_return=%ld"</literal></expr></argument>,
				 <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>save_errno</name></name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>io_return</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>POLAR_CACHE_SYNC_FAILED</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Failed to sync file %s, errno=%d"</literal></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>save_errno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>POLAR_CACHE_UNLINK_FAILED</name></expr>:</case>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>log_level</name></expr></argument>, <argument><expr><literal type="string">"Failed to unlink file %s, errno=%d"</literal></expr></argument>, <argument><expr><name>file_path</name></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>save_errno</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Unknown local cache error cause %d"</literal></expr></argument>, <argument><expr><name><name>io_error</name><operator>-&gt;</operator><name>errcause</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Copy local flushed files to shared storage
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_copy_local_flushed</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>flushed_times</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>segno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>seg_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>succeed</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_LOCAL_CACHE_META_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>flushed_times</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>polar_open_transient_file</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_IO_ERROR</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>POLAR_LOCAL_CACHE_META</name></expr></argument>, <argument><expr><name>POLAR_UNKNOWN_CACHE_OFFSET</name></expr></argument>,
						   <argument><expr><name>POLAR_UNKNOWN_CACHE_SIZE</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>POLAR_CACHE_OPEN_FAILED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><call><name>POLAR_SEGMENT_NOT_EXISTS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>seg_buf</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>segment_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>polar_read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>segno</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>polar_cache_copy</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>LOCAL_TO_SHARED</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>seg_buf</name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>
				<operator>||</operator> <operator>!</operator><call><name>POLAR_SEGMENT_IO_SUCCESS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * The segment recored in the flushed list could be unlinked.
			 * So we ignore this segment if it's not exists
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>POLAR_SEGMENT_NOT_EXISTS</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>file_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>POLAR_LOCAL_FILE_PATH</name><argument_list>(<argument><expr><name>file_path</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s is not exists, which may be unlinked"</literal></expr></argument>, <argument><expr><name>file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>succeed</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_enable_debug</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"copy %s %ld from local to shared"</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>seg_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CloseTransientFile</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>succeed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_local_cache_set_io_permission</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>io_permission</name></decl></parameter>, <parameter><decl><type><name>polar_cache_io_error</name> <modifier>*</modifier></type><name>io_error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>old_permission</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>succeed</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>io_error</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_cache_io_error</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>old_permission</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>=</operator> <name>io_permission</name> <operator>&amp;</operator> <name>POLAR_CACHE_IO_PERMISSION_MASK</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>old_permission</name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cache</name><operator>-&gt;</operator><name>io_permission</name></name> <operator>&amp;</operator> <name>POLAR_CACHE_SHARED_FILE_WRITE</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Copy flushed segments by the last 2 checkpoint
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>succeed</name> <operator>&amp;&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>succeed</name> <operator>=</operator> <call><name>polar_copy_local_flushed</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>succeed</name> <operator>&amp;&amp;</operator> <name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>succeed</name> <operator>=</operator> <call><name>polar_copy_local_flushed</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Copy flushed segments which have been evicted recently */</comment>
		<if_stmt><if>if <condition>(<expr><name>succeed</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>succeed</name> <operator>=</operator> <call><name>polar_copy_local_flushed</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>local_flushed_times</name></name></expr></argument>, <argument><expr><name>io_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_LOCAL_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>succeed</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_local_cache_move_trash</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>moved</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_validate_data_dir</name><argument_list>(<argument><expr><name>POLAR_CACHE_TRASH_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Move dir with number as suffix to the trash dir.
	 * Update the suffix number if previous moved dir was not deleted.
	 * We only try 5 times, otherwise it means the instance is crashed during the restarting.
	 * If we move the same dir to the trash dir more than 3 times, we will force to empty the tash
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>new_path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>new_path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s_%04X"</literal></expr></argument>, <argument><expr><name>POLAR_CACHE_TRASH_DIR</name></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>new_path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"rename %s to local cache trash %s, errno=%d"</literal></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>new_path</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>moved</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOTEMPTY</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to move %s to local trash dir %s, errno=%d"</literal></expr></argument>,
				 <argument><expr><name>dir_name</name></expr></argument>, <argument><expr><name>POLAR_CACHE_TRASH_DIR</name></expr></argument>, <argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* Force to clean trash dir if move same dir to the trash dir too much times */</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Force to clean trash dir because move the same dir %s to the trash dir too much times"</literal></expr></argument>, <argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rmtree</name><argument_list>(<argument><expr><name>POLAR_CACHE_TRASH_DIR</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Create new dir after move it to trash */</comment>
	<if_stmt><if>if <condition>(<expr><name>moved</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_validate_data_dir</name><argument_list>(<argument><expr><name>dir_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>moved</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_local_cache_empty_trash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>rmtree</name><argument_list>(<argument><expr><name>POLAR_CACHE_TRASH_DIR</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_local_cache_scan</name><parameter_list>(<parameter><decl><type><name>polar_local_cache</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_local_cache_scan_callback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>segno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DIR</name>     <modifier>*</modifier></type><name>cldir</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>clde</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cldir</name> <operator>=</operator> <call><name>polar_allocate_dir</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>clde</name> <operator>=</operator> <call><name>ReadDir</name><argument_list>(<argument><expr><name>cldir</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>callback</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>clde</name><operator>-&gt;</operator><name>d_name</name></name></expr></argument>, <argument><expr><name>segno</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>FreeDir</name><argument_list>(<argument><expr><name>cldir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
