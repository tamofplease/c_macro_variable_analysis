<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/adt/tsginidx.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tsginidx.c
 *	 GIN support functions for tsvector_ops
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/tsginidx.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/gin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/stratnum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>


<function><type><name>Datum</name></type>
<name>gin_cmp_tslexeme</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>tsCompareString</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gin_cmp_prefix</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>a</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
	<decl_stmt><decl><type><name>StrategyNumber</name></type> <name>strategy</name> <init>= <expr><call><name>PG_GETARG_UINT16</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name></type>		<name>extra_data</name> <init>= <expr><call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type>			<name>cmp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>tsCompareString</name><argument_list>(<argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><call><name>VARDATA_ANY</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSIZE_ANY_EXHDR</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>,
						  <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>cmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>				<comment type="block">/* prevent continue scan */</comment>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gin_extract_tsvector</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSVector</name></type>	<name>vector</name> <init>= <expr><call><name>PG_GETARG_TSVECTOR</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>nentries</name> <init>= <expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <name><name>vector</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>vector</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WordEntry</name>  <modifier>*</modifier></type><name>we</name> <init>= <expr><call><name>ARRPTR</name><argument_list>(<argument><expr><name>vector</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>vector</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vector</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>

			<expr_stmt><expr><name>txt</name> <operator>=</operator> <call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>STRPTR</name><argument_list>(<argument><expr><name>vector</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>we</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>, <argument><expr><name><name>we</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>we</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>vector</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gin_extract_tsquery</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>nentries</name> <init>= <expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* StrategyNumber strategy = PG_GETARG_UINT16(2); */</comment>
	<decl_stmt><decl><type><name>bool</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>ptr_partialmatch</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Pointer</name>   <modifier>*</modifier><modifier>*</modifier></type><name>extra_data</name> <init>= <expr><operator>(</operator><name>Pointer</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* bool   **nullFlags = (bool **) PG_GETARG_POINTER(5); */</comment>
	<decl_stmt><decl><type><name>int32</name>	   <modifier>*</modifier></type><name>searchMode</name> <init>= <expr><operator>(</operator><name>int32</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>entries</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int32</name></type>		<name>i</name></decl>,
					<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>partialmatch</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>map_item_operand</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * If the query doesn't have any required positive matches (for
		 * instance, it's something like '! foo'), we have to do a full index
		 * scan.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>tsquery_requires_match</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>searchMode</name> <operator>=</operator> <name>GIN_SEARCH_MODE_DEFAULT</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>searchMode</name> <operator>=</operator> <name>GIN_SEARCH_MODE_ALL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<comment type="block">/* count number of VAL items */</comment>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>QI_VAL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><operator>*</operator><name>nentries</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>entries</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>partialmatch</name> <operator>=</operator> <operator>*</operator><name>ptr_partialmatch</name> <operator>=</operator> <operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Make map to convert item's number to corresponding operand's (the
		 * same, entry's) number. Entry's number is used in check array in
		 * consistent method. We use the same map for each entry.
		 */</comment>
		<expr_stmt><expr><operator>*</operator><name>extra_data</name> <operator>=</operator> <operator>(</operator><name>Pointer</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pointer</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>map_item_operand</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Now rescan the VAL items and fill in the arrays */</comment>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>query</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>QI_VAL</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><operator>&amp;</operator><name><name>item</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>qoperand</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>text</name>	   <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>

				<expr_stmt><expr><name>txt</name> <operator>=</operator> <call><name>cstring_to_text_with_len</name><argument_list>(<argument><expr><call><name>GETOPERAND</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>val</name><operator>-&gt;</operator><name>distance</name></name></expr></argument>,
											   <argument><expr><name><name>val</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>entries</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>partialmatch</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>val</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>(</operator><operator>*</operator><name>extra_data</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>Pointer</name><operator>)</operator> <name>map_item_operand</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>map_item_operand</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_FREE_IF_COPY</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>first_item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GinTernaryValue</name> <modifier>*</modifier></type><name>check</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>map_item_operand</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>need_recheck</name></decl>;</decl_stmt>
}</block></struct></type> <name>GinChkVal</name>;</typedef>

<function><type><specifier>static</specifier> <name>GinTernaryValue</name></type>
<name>checkcondition_gin_internal</name><parameter_list>(<parameter><decl><type><name>GinChkVal</name> <modifier>*</modifier></type><name>gcv</name></decl></parameter>, <parameter><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ExecPhraseData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>j</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * if any val requiring a weight is used or caller needs position
	 * information then set recheck flag
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>-&gt;</operator><name>weight</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>gcv</name><operator>-&gt;</operator><name>need_recheck</name></name><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* convert item's number to corresponding entry's (operand's) number */</comment>
	<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>gcv</name><operator>-&gt;</operator><name>map_item_operand</name><index>[<expr><operator>(</operator><operator>(</operator><name>QueryItem</name> <operator>*</operator><operator>)</operator> <name>val</name><operator>)</operator> <operator>-</operator> <name><name>gcv</name><operator>-&gt;</operator><name>first_item</name></name></expr>]</index></name></expr>;</expr_stmt>

	<comment type="block">/* return presence of current entry in indexed value */</comment>
	<return>return <expr><name><name>gcv</name><operator>-&gt;</operator><name>check</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Wrapper of check condition function for TS_execute.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkcondition_gin</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>checkval</name></decl></parameter>, <parameter><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>ExecPhraseData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>checkcondition_gin_internal</name><argument_list>(<argument><expr><operator>(</operator><name>GinChkVal</name> <operator>*</operator><operator>)</operator> <name>checkval</name></expr></argument>,
									   <argument><expr><name>val</name></expr></argument>,
									   <argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>GIN_FALSE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Evaluate tsquery boolean expression using ternary logic.
 *
 * Note: the reason we can't use TS_execute() for this is that its API
 * for the checkcondition callback doesn't allow a MAYBE result to be
 * returned, but we might have MAYBEs in the gcv-&gt;check array.
 * Perhaps we should change that API.
 */</comment>
<function><type><specifier>static</specifier> <name>GinTernaryValue</name></type>
<name>TS_execute_ternary</name><parameter_list>(<parameter><decl><type><name>GinChkVal</name> <modifier>*</modifier></type><name>gcv</name></decl></parameter>, <parameter><decl><type><name>QueryItem</name> <modifier>*</modifier></type><name>curitem</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>in_phrase</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GinTernaryValue</name></type> <name>val1</name></decl>,
				<decl><type ref="prev"/><name>val2</name></decl>,
				<decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_VAL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return
			<expr><call><name>checkcondition_gin_internal</name><argument_list>(<argument><expr><name>gcv</name></expr></argument>,
										<argument><expr><operator>(</operator><name>QueryOperand</name> <operator>*</operator><operator>)</operator> <name>curitem</name></expr></argument>,
										<argument><expr><name>NULL</name></expr></argument> <comment type="block">/* don't have position info */</comment> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>curitem</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OP_NOT</name></expr>:</case>

			<comment type="block">/*
			 * Below a phrase search, force NOT's result to MAYBE.  We cannot
			 * invert a TRUE result from the subexpression to FALSE, since
			 * TRUE only says that the subexpression matches somewhere, not
			 * that it matches everywhere, so there might be positions where
			 * the NOT will match.  We could invert FALSE to TRUE, but there's
			 * little point in distinguishing TRUE from MAYBE, since a recheck
			 * will have been forced already.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>in_phrase</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>GIN_MAYBE</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>TS_execute_ternary</name><argument_list>(<argument><expr><name>gcv</name></expr></argument>, <argument><expr><name>curitem</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>in_phrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>GIN_MAYBE</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>result</name></expr>;</return></block_content></block></if></if_stmt>
			<return>return <expr><operator>!</operator><name>result</name></expr>;</return>

		<case>case <expr><name>OP_PHRASE</name></expr>:</case>

			<comment type="block">/*
			 * GIN doesn't contain any information about positions, so treat
			 * OP_PHRASE as OP_AND with recheck requirement, and always
			 * reporting MAYBE not TRUE.
			 */</comment>
			<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>gcv</name><operator>-&gt;</operator><name>need_recheck</name></name><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<comment type="block">/* Pass down in_phrase == true in case there's a NOT below */</comment>
			<expr_stmt><expr><name>in_phrase</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

			<comment type="block">/* FALL THRU */</comment>

		<case>case <expr><name>OP_AND</name></expr>:</case>
			<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>TS_execute_ternary</name><argument_list>(<argument><expr><name>gcv</name></expr></argument>, <argument><expr><name>curitem</name> <operator>+</operator> <name><name>curitem</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>left</name></name></expr></argument>,
									  <argument><expr><name>in_phrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>val1</name> <operator>==</operator> <name>GIN_FALSE</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>GIN_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>val2</name> <operator>=</operator> <call><name>TS_execute_ternary</name><argument_list>(<argument><expr><name>gcv</name></expr></argument>, <argument><expr><name>curitem</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>in_phrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>val2</name> <operator>==</operator> <name>GIN_FALSE</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>GIN_FALSE</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>val1</name> <operator>==</operator> <name>GIN_TRUE</name> <operator>&amp;&amp;</operator> <name>val2</name> <operator>==</operator> <name>GIN_TRUE</name> <operator>&amp;&amp;</operator>
				<name><name>curitem</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name> <operator>!=</operator> <name>OP_PHRASE</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>GIN_TRUE</name></expr>;</return></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><name>GIN_MAYBE</name></expr>;</return></block_content></block></else></if_stmt>

		<case>case <expr><name>OP_OR</name></expr>:</case>
			<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>TS_execute_ternary</name><argument_list>(<argument><expr><name>gcv</name></expr></argument>, <argument><expr><name>curitem</name> <operator>+</operator> <name><name>curitem</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>left</name></name></expr></argument>,
									  <argument><expr><name>in_phrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>val1</name> <operator>==</operator> <name>GIN_TRUE</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>GIN_TRUE</name></expr>;</return></block_content></block></if></if_stmt>
			<expr_stmt><expr><name>val2</name> <operator>=</operator> <call><name>TS_execute_ternary</name><argument_list>(<argument><expr><name>gcv</name></expr></argument>, <argument><expr><name>curitem</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>in_phrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>val2</name> <operator>==</operator> <name>GIN_TRUE</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>GIN_TRUE</name></expr>;</return></block_content></block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>val1</name> <operator>==</operator> <name>GIN_FALSE</name> <operator>&amp;&amp;</operator> <name>val2</name> <operator>==</operator> <name>GIN_FALSE</name></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>GIN_FALSE</name></expr>;</return></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<return>return <expr><name>GIN_MAYBE</name></expr>;</return></block_content></block></else></if_stmt>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized operator: %d"</literal></expr></argument>, <argument><expr><name><name>curitem</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* not reachable, but keep compiler quiet */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gin_tsquery_consistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>check</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* StrategyNumber strategy = PG_GETARG_UINT16(1); */</comment>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* int32	nkeys = PG_GETARG_INT32(3); */</comment>
	<decl_stmt><decl><type><name>Pointer</name>    <modifier>*</modifier></type><name>extra_data</name> <init>= <expr><operator>(</operator><name>Pointer</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>recheck</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Initially assume query doesn't require recheck */</comment>
	<expr_stmt><expr><operator>*</operator><name>recheck</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GinChkVal</name></type>	<name>gcv</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * check-parameter array has one entry for each value (operand) in the
		 * query.
		 */</comment>
		<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>first_item</name></name> <operator>=</operator> <call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>GinTernaryValue</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>,
						 <argument><expr><literal type="string">"sizes of GinTernaryValue and bool are not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>check</name></name> <operator>=</operator> <operator>(</operator><name>GinTernaryValue</name> <operator>*</operator><operator>)</operator> <name>check</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>map_item_operand</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>extra_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>need_recheck</name></name> <operator>=</operator> <name>recheck</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>TS_execute</name><argument_list>(<argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name>gcv</name></expr></argument>,
						 <argument><expr><name>TS_EXEC_CALC_NOT</name> <operator>|</operator> <name>TS_EXEC_PHRASE_NO_POS</name></expr></argument>,
						 <argument><expr><name>checkcondition_gin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>gin_tsquery_triconsistent</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GinTernaryValue</name> <modifier>*</modifier></type><name>check</name> <init>= <expr><operator>(</operator><name>GinTernaryValue</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* StrategyNumber strategy = PG_GETARG_UINT16(1); */</comment>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>query</name> <init>= <expr><call><name>PG_GETARG_TSQUERY</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* int32	nkeys = PG_GETARG_INT32(3); */</comment>
	<decl_stmt><decl><type><name>Pointer</name>    <modifier>*</modifier></type><name>extra_data</name> <init>= <expr><operator>(</operator><name>Pointer</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>GinTernaryValue</name></type> <name>res</name> <init>= <expr><name>GIN_FALSE</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>recheck</name></decl>;</decl_stmt>

	<comment type="block">/* Initially assume query doesn't require recheck */</comment>
	<expr_stmt><expr><name>recheck</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>query</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>GinChkVal</name></type>	<name>gcv</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * check-parameter array has one entry for each value (operand) in the
		 * query.
		 */</comment>
		<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>first_item</name></name> <operator>=</operator> <call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>check</name></name> <operator>=</operator> <name>check</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>map_item_operand</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>extra_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gcv</name><operator>.</operator><name>need_recheck</name></name> <operator>=</operator> <operator>&amp;</operator><name>recheck</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>TS_execute_ternary</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gcv</name></expr></argument>, <argument><expr><call><name>GETQUERY</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>GIN_TRUE</name> <operator>&amp;&amp;</operator> <name>recheck</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>GIN_MAYBE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_GIN_TERNARY_VALUE</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Formerly, gin_extract_tsvector had only two arguments.  Now it has three,
 * but we still need a pg_proc entry with two args to support reloading
 * pre-9.1 contrib/tsearch2 opclass declarations.  This compatibility
 * function should go away eventually.  (Note: you might say "hey, but the
 * code above is only *using* two args, so let's just declare it that way".
 * If you try that you'll find the opr_sanity regression test complains.)
 */</comment>
<function><type><name>Datum</name></type>
<name>gin_extract_tsvector_2args</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* should not happen */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gin_extract_tsvector requires three arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><call><name>gin_extract_tsvector</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Likewise, we need a stub version of gin_extract_tsquery declared with
 * only five arguments.
 */</comment>
<function><type><name>Datum</name></type>
<name>gin_extract_tsquery_5args</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* should not happen */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gin_extract_tsquery requires seven arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><call><name>gin_extract_tsquery</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Likewise, we need a stub version of gin_tsquery_consistent declared with
 * only six arguments.
 */</comment>
<function><type><name>Datum</name></type>
<name>gin_tsquery_consistent_6args</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PG_NARGS</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>			<comment type="block">/* should not happen */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"gin_tsquery_consistent requires eight arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><call><name>gin_tsquery_consistent</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Likewise, a stub version of gin_extract_tsquery declared with argument
 * types that are no longer considered appropriate.
 */</comment>
<function><type><name>Datum</name></type>
<name>gin_extract_tsquery_oldsig</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>gin_extract_tsquery</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Likewise, a stub version of gin_tsquery_consistent declared with argument
 * types that are no longer considered appropriate.
 */</comment>
<function><type><name>Datum</name></type>
<name>gin_tsquery_consistent_oldsig</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>gin_tsquery_consistent</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
