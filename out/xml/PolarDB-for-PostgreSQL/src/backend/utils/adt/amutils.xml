<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/adt/amutils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * amutils.c
 *	  SQL-level APIs related to index access methods.
 *
 * Copyright (c) 2016-2018, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/amutils.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/amapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>


<comment type="block">/* Convert string property name to enum, for efficiency */</comment>
<struct>struct <name>am_propname</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexAMProperty</name></type> <name>prop</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>am_propname</name></name></type> <name><name>am_propnames</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><literal type="string">"asc"</literal></expr>, <expr><name>AMPROP_ASC</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"desc"</literal></expr>, <expr><name>AMPROP_DESC</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"nulls_first"</literal></expr>, <expr><name>AMPROP_NULLS_FIRST</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"nulls_last"</literal></expr>, <expr><name>AMPROP_NULLS_LAST</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"orderable"</literal></expr>, <expr><name>AMPROP_ORDERABLE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"distance_orderable"</literal></expr>, <expr><name>AMPROP_DISTANCE_ORDERABLE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"returnable"</literal></expr>, <expr><name>AMPROP_RETURNABLE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"search_array"</literal></expr>, <expr><name>AMPROP_SEARCH_ARRAY</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"search_nulls"</literal></expr>, <expr><name>AMPROP_SEARCH_NULLS</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"clusterable"</literal></expr>, <expr><name>AMPROP_CLUSTERABLE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"index_scan"</literal></expr>, <expr><name>AMPROP_INDEX_SCAN</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"bitmap_scan"</literal></expr>, <expr><name>AMPROP_BITMAP_SCAN</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"backward_scan"</literal></expr>, <expr><name>AMPROP_BACKWARD_SCAN</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"can_order"</literal></expr>, <expr><name>AMPROP_CAN_ORDER</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"can_unique"</literal></expr>, <expr><name>AMPROP_CAN_UNIQUE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"can_multi_col"</literal></expr>, <expr><name>AMPROP_CAN_MULTI_COL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"can_exclude"</literal></expr>, <expr><name>AMPROP_CAN_EXCLUDE</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><literal type="string">"can_include"</literal></expr>, <expr><name>AMPROP_CAN_INCLUDE</name></expr>
	}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>IndexAMProperty</name></type>
<name>lookup_prop_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>am_propnames</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>pg_strcasecmp</name><argument_list>(<argument><expr><name><name>am_propnames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>am_propnames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>prop</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* We do not throw an error, so that AMs can define their own properties */</comment>
	<return>return <expr><name>AMPROP_UNKNOWN</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Common code for properties that are just bit tests of indoptions.
 *
 * tuple: the pg_index heaptuple
 * attno: identify the index column to test the indoptions of.
 * guard: if false, a boolean false result is forced (saves code in caller).
 * iopt_mask: mask for interesting indoption bit.
 * iopt_expect: value for a "true" result (should be 0 or iopt_mask).
 *
 * Returns false to indicate a NULL result (for "unknown/inapplicable"),
 * otherwise sets *res to the boolean value to return.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>test_indoption</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attno</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>guard</name></decl></parameter>,
			   <parameter><decl><type><name>int16</name></type> <name>iopt_mask</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>iopt_expect</name></decl></parameter>,
			   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>datum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int2vector</name> <modifier>*</modifier></type><name>indoption</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>indoption_val</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>guard</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>SysCacheGetAttr</name><argument_list>(<argument><expr><name>INDEXRELID</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
							<argument><expr><name>Anum_pg_index_indoption</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>indoption</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int2vector</name> <operator>*</operator><operator>)</operator> <call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>indoption_val</name> <operator>=</operator> <name><name>indoption</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>attno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>res</name> <operator>=</operator> <operator>(</operator><name>indoption_val</name> <operator>&amp;</operator> <name>iopt_mask</name><operator>)</operator> <operator>==</operator> <name>iopt_expect</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Test property of an index AM, index, or index column.
 *
 * This is common code for different SQL-level funcs, so the amoid and
 * index_oid parameters are mutually exclusive; we look up the amoid from the
 * index_oid if needed, or if no index oid is given, we're looking at AM-wide
 * properties.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>indexam_property</name><parameter_list>(<parameter><decl><type><name>FunctionCallInfo</name></type> <name>fcinfo</name></decl></parameter>,
				 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>propname</name></decl></parameter>,
				 <parameter><decl><type><name>Oid</name></type> <name>amoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>index_oid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>attno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>res</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexAMProperty</name></type> <name>prop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>IndexAmRoutine</name> <modifier>*</modifier></type><name>routine</name></decl>;</decl_stmt>

	<comment type="block">/* Try to convert property name to enum (no error if not known) */</comment>
	<expr_stmt><expr><name>prop</name> <operator>=</operator> <call><name>lookup_prop_name</name><argument_list>(<argument><expr><name>propname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If we have an index OID, look up the AM, and get # of columns too */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>index_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_class</name></type> <name>rd_rel</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>amoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>RELOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>index_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>rd_rel</name> <operator>=</operator> <operator>(</operator><name>Form_pg_class</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_INDEX</name> <operator>&amp;&amp;</operator>
			<name><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>!=</operator> <name>RELKIND_PARTITIONED_INDEX</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>amoid</name> <operator>=</operator> <name><name>rd_rel</name><operator>-&gt;</operator><name>relam</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>natts</name> <operator>=</operator> <name><name>rd_rel</name><operator>-&gt;</operator><name>relnatts</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * At this point, either index_oid == InvalidOid or it's a valid index
	 * OID. Also, after this test and the one below, either attno == 0 for
	 * index-wide or AM-wide tests, or it's a valid column number in a valid
	 * index.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>attno</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>attno</name></expr></argument> &gt;</argument_list></name> <name>natts</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Get AM information.  If we don't have a valid AM OID, return NULL.
	 */</comment>
	<expr_stmt><expr><name>routine</name> <operator>=</operator> <call><name>GetIndexAmRoutineByAmId</name><argument_list>(<argument><expr><name>amoid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>routine</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * If there's an AM property routine, give it a chance to override the
	 * generic logic.  Proceed if it returns false.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>routine</name><operator>-&gt;</operator><name>amproperty</name></name> <operator>&amp;&amp;</operator>
		<call><name><name>routine</name><operator>-&gt;</operator><name>amproperty</name></name><argument_list>(<argument><expr><name>index_oid</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name>prop</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>attno</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_index</name></type> <name>rd_index</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>iskey</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Handle column-level properties. Many of these need the pg_index row
		 * (which we also need to use to check for nonkey atts) so we fetch
		 * that first.
		 */</comment>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>INDEXRELID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>index_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>rd_index</name> <operator>=</operator> <operator>(</operator><name>Form_pg_index</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>index_oid</name> <operator>==</operator> <name><name>rd_index</name><operator>-&gt;</operator><name>indexrelid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>attno</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>attno</name> <operator>&lt;=</operator> <name><name>rd_index</name><operator>-&gt;</operator><name>indnatts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * If amcaninclude, we might be looking at an attno for a nonkey
		 * column, for which we (generically) assume that most properties are
		 * null.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>routine</name><operator>-&gt;</operator><name>amcaninclude</name></name>
			<operator>&amp;&amp;</operator> <name>attno</name> <operator>&gt;</operator> <name><name>rd_index</name><operator>-&gt;</operator><name>indnkeyatts</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>iskey</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<switch>switch <condition>(<expr><name>prop</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>AMPROP_ASC</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>iskey</name> <operator>&amp;&amp;</operator>
					<call><name>test_indoption</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amcanorder</name></name></expr></argument>,
								   <argument><expr><name>INDOPTION_DESC</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>AMPROP_DESC</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>iskey</name> <operator>&amp;&amp;</operator>
					<call><name>test_indoption</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amcanorder</name></name></expr></argument>,
								   <argument><expr><name>INDOPTION_DESC</name></expr></argument>, <argument><expr><name>INDOPTION_DESC</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>AMPROP_NULLS_FIRST</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>iskey</name> <operator>&amp;&amp;</operator>
					<call><name>test_indoption</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amcanorder</name></name></expr></argument>,
								   <argument><expr><name>INDOPTION_NULLS_FIRST</name></expr></argument>, <argument><expr><name>INDOPTION_NULLS_FIRST</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>AMPROP_NULLS_LAST</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>iskey</name> <operator>&amp;&amp;</operator>
					<call><name>test_indoption</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>, <argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amcanorder</name></name></expr></argument>,
								   <argument><expr><name>INDOPTION_NULLS_FIRST</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>AMPROP_ORDERABLE</name></expr>:</case>

				<comment type="block">/*
				 * generic assumption is that nonkey columns are not orderable
				 */</comment>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <ternary><condition><expr><name>iskey</name></expr> ?</condition><then> <expr><name><name>routine</name><operator>-&gt;</operator><name>amcanorder</name></name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
				<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>

			<case>case <expr><name>AMPROP_DISTANCE_ORDERABLE</name></expr>:</case>

				<comment type="block">/*
				 * The conditions for whether a column is distance-orderable
				 * are really up to the AM (at time of writing, only GiST
				 * supports it at all). The planner has its own idea based on
				 * whether it finds an operator with amoppurpose 'o', but
				 * getting there from just the index column type seems like a
				 * lot of work. So instead we expect the AM to handle this in
				 * its amproperty routine. The generic result is to return
				 * false if the AM says it never supports this, or if this is
				 * a nonkey column, and null otherwise (meaning we don't
				 * know).
				 */</comment>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>iskey</name> <operator>||</operator> <operator>!</operator><name><name>routine</name><operator>-&gt;</operator><name>amcanorderbyop</name></name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>AMPROP_RETURNABLE</name></expr>:</case>

				<comment type="block">/* note that we ignore iskey for this property */</comment>

				<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name><name>routine</name><operator>-&gt;</operator><name>amcanreturn</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * If possible, the AM should handle this test in its
					 * amproperty function without opening the rel. But this
					 * is the generic fallback if it does not.
					 */</comment>
					<decl_stmt><decl><type><name>Relation</name></type>	<name>indexrel</name> <init>= <expr><call><name>index_open</name><argument_list>(<argument><expr><name>index_oid</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>index_can_return</name><argument_list>(<argument><expr><name>indexrel</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>index_close</name><argument_list>(<argument><expr><name>indexrel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>AMPROP_SEARCH_ARRAY</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>iskey</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>routine</name><operator>-&gt;</operator><name>amsearcharray</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<case>case <expr><name>AMPROP_SEARCH_NULLS</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>iskey</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>routine</name><operator>-&gt;</operator><name>amsearchnulls</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>

			<default>default:</default>
				<break>break;</break>
		</block_content>}</block></switch>

		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>index_oid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Handle index-level properties.  Currently, these only depend on the
		 * AM, but that might not be true forever, so we make users name an
		 * index not just an AM.
		 */</comment>
		<switch>switch <condition>(<expr><name>prop</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>AMPROP_CLUSTERABLE</name></expr>:</case>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amclusterable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<case>case <expr><name>AMPROP_INDEX_SCAN</name></expr>:</case>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>routine</name><operator>-&gt;</operator><name>amgettuple</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<case>case <expr><name>AMPROP_BITMAP_SCAN</name></expr>:</case>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>routine</name><operator>-&gt;</operator><name>amgetbitmap</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<case>case <expr><name>AMPROP_BACKWARD_SCAN</name></expr>:</case>
				<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amcanbackward</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<default>default:</default>
				<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Handle AM-level properties (those that control what you can say in
	 * CREATE INDEX).
	 */</comment>
	<switch>switch <condition>(<expr><name>prop</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>AMPROP_CAN_ORDER</name></expr>:</case>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amcanorder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>AMPROP_CAN_UNIQUE</name></expr>:</case>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amcanunique</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>AMPROP_CAN_MULTI_COL</name></expr>:</case>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amcanmulticol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>AMPROP_CAN_EXCLUDE</name></expr>:</case>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>routine</name><operator>-&gt;</operator><name>amgettuple</name></name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<case>case <expr><name>AMPROP_CAN_INCLUDE</name></expr>:</case>
			<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name><name>routine</name><operator>-&gt;</operator><name>amcaninclude</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<default>default:</default>
			<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Test property of an AM specified by AM OID
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_indexam_has_property</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>amoid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>propname</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>indexam_property</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>amoid</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Test property of an index specified by index OID
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_index_has_property</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>relid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>propname</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>indexam_property</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Test property of an index column specified by index OID and column number
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_index_column_has_property</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>relid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>attno</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>propname</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Reject attno 0 immediately, so that attno &gt; 0 identifies this case */</comment>
	<if_stmt><if>if <condition>(<expr><name>attno</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>indexam_property</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>propname</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><name>attno</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
