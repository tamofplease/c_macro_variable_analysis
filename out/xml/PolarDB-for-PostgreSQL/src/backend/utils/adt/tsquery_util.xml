<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/adt/tsquery_util.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tsquery_util.c
 *	  Utilities for tsquery datatype
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/tsquery_util.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsearch/ts_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Build QTNode tree for a tsquery given in QueryItem array format.
 */</comment>
<function><type><name>QTNode</name> <modifier>*</modifier></type>
<name>QT2QTN</name><parameter_list>(<parameter><decl><type><name>QueryItem</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>operand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QTNode</name>	   <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator><name>QTNode</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>valnode</name></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_OPR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <operator>(</operator><name>QTNode</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>QT2QTN</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sign</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name> <operator>==</operator> <name>OP_NOT</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nchild</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>nchild</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>QT2QTN</name><argument_list>(<argument><expr><name>in</name> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name>operand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>sign</name></name> <operator>|=</operator> <name><name>node</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>sign</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>operand</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>word</name></name> <operator>=</operator> <name>operand</name> <operator>+</operator> <name><name>in</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>distance</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>in</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>valcrc</name></name><operator>)</operator> <operator>%</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Free a QTNode tree.
 *
 * Referenced "word" and "valnode" items are freed if marked as transient
 * by flags.
 */</comment>
<function><type><name>void</name></type>
<name>QTNFree</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_VAL</name> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>word</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>QTN_WORDFREE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_OPR</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>QTNFree</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>child</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>QTN_NEEDFREE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Sort comparator for QTNodes.
 *
 * The sort order is somewhat arbitrary.
 */</comment>
<function><type><name>int</name></type>
<name>QTNodeCompare</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>an</name></decl></parameter>, <parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>bn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>an</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name><name>bn</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>an</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;</operator> <name><name>bn</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>an</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_OPR</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QueryOperator</name> <modifier>*</modifier></type><name>ao</name> <init>= <expr><operator>&amp;</operator><name><name>an</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperator</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QueryOperator</name> <modifier>*</modifier></type><name>bo</name> <init>= <expr><operator>&amp;</operator><name><name>bn</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperator</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>oper</name></name> <operator>!=</operator> <name><name>bo</name><operator>-&gt;</operator><name>oper</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ao</name><operator>-&gt;</operator><name>oper</name></name> <operator>&gt;</operator> <name><name>bo</name><operator>-&gt;</operator><name>oper</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>an</name><operator>-&gt;</operator><name>nchild</name></name> <operator>!=</operator> <name><name>bn</name><operator>-&gt;</operator><name>nchild</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>an</name><operator>-&gt;</operator><name>nchild</name></name> <operator>&gt;</operator> <name><name>bn</name><operator>-&gt;</operator><name>nchild</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
						<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>an</name><operator>-&gt;</operator><name>nchild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name> <operator>=</operator> <call><name>QTNodeCompare</name><argument_list>(<argument><expr><name><name>an</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>bn</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>res</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>
		</block_content>}</block>

		<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>oper</name></name> <operator>==</operator> <name>OP_PHRASE</name> <operator>&amp;&amp;</operator> <name><name>ao</name><operator>-&gt;</operator><name>distance</name></name> <operator>!=</operator> <name><name>bo</name><operator>-&gt;</operator><name>distance</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ao</name><operator>-&gt;</operator><name>distance</name></name> <operator>&gt;</operator> <name><name>bo</name><operator>-&gt;</operator><name>distance</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>an</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_VAL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>ao</name> <init>= <expr><operator>&amp;</operator><name><name>an</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperand</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QueryOperand</name> <modifier>*</modifier></type><name>bo</name> <init>= <expr><operator>&amp;</operator><name><name>bn</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperand</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>ao</name><operator>-&gt;</operator><name>valcrc</name></name> <operator>!=</operator> <name><name>bo</name><operator>-&gt;</operator><name>valcrc</name></name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ao</name><operator>-&gt;</operator><name>valcrc</name></name> <operator>&gt;</operator> <name><name>bo</name><operator>-&gt;</operator><name>valcrc</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><call><name>tsCompareString</name><argument_list>(<argument><expr><name><name>an</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>ao</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>bn</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>bo</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized QueryItem type: %d"</literal></expr></argument>, <argument><expr><name><name>an</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>				<comment type="block">/* keep compiler quiet */</comment>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * qsort comparator for QTNode pointers.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>cmpQTN</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>QTNodeCompare</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>QTNode</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>a</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>QTNode</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Canonicalize a QTNode tree by sorting the children of AND/OR nodes
 * into an arbitrary but well-defined order.
 */</comment>
<function><type><name>void</name></type>
<name>QTNSort</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>QI_OPR</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>QTNSort</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name> <operator>!=</operator> <name>OP_PHRASE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name><name>in</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>cmpQTN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Are two QTNode trees equal according to QTNodeCompare?
 */</comment>
<function><type><name>bool</name></type>
<name>QTNEq</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>		<name>sign</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>sign</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>sign</name> <operator>==</operator> <name><name>a</name><operator>-&gt;</operator><name>sign</name></name> <operator>&amp;&amp;</operator> <name>sign</name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>sign</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><operator>(</operator><call><name>QTNodeCompare</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Remove unnecessary intermediate nodes. For example:
 *
 *	OR			OR
 * a  OR	-&gt; a b c
 *	 b	c
 */</comment>
<function><type><name>void</name></type>
<name>QTNTernary</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>QI_OPR</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>QTNTernary</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* Only AND and OR are associative, so don't flatten other node types */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name> <operator>!=</operator> <name>OP_AND</name> <operator>&amp;&amp;</operator>
		<name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name> <operator>!=</operator> <name>OP_OR</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QTNode</name>	   <modifier>*</modifier></type><name>cc</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_OPR</name> <operator>&amp;&amp;</operator>
			<name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name> <operator>==</operator> <name><name>cc</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type>			<name>oldnchild</name> <init>= <expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name> <operator>+=</operator> <name><name>cc</name><operator>-&gt;</operator><name>nchild</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <operator>(</operator><name>QTNode</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name>oldnchild</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <name><name>cc</name><operator>-&gt;</operator><name>nchild</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name></name> <operator>+</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
						<argument><expr><operator>(</operator><name>oldnchild</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>child</name></name></expr></argument>, <argument><expr><name><name>cc</name><operator>-&gt;</operator><name>nchild</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>cc</name><operator>-&gt;</operator><name>nchild</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>cc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>QTN_NEEDFREE</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>cc</name><operator>-&gt;</operator><name>valnode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Convert a tree to binary tree by inserting intermediate nodes.
 * (Opposite of QTNTernary)
 */</comment>
<function><type><name>void</name></type>
<name>QTNBinary</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>QI_OPR</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>QTNBinary</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<while>while <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QTNode</name>	   <modifier>*</modifier></type><name>nn</name> <init>= <expr><operator>(</operator><name>QTNode</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>nn</name><operator>-&gt;</operator><name>valnode</name></name> <operator>=</operator> <operator>(</operator><name>QueryItem</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nn</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <operator>(</operator><name>QTNode</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>nn</name><operator>-&gt;</operator><name>nchild</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nn</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>QTN_NEEDFREE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>nn</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nn</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nn</name><operator>-&gt;</operator><name>sign</name></name> <operator>=</operator> <name><name>nn</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>sign</name> <operator>|</operator> <name><name>nn</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>sign</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>nn</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nn</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>oper</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>nn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * Count the total length of operand strings in tree (including '\0'-
 * terminators) and the total number of nodes.
 * Caller must initialize *sumlen and *nnode to zeroes.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cntsize</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sumlen</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>nnode</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_OPR</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>cntsize</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sumlen</name></expr></argument>, <argument><expr><name>nnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>sumlen</name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>curitem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>operand</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>curoperand</name></decl>;</decl_stmt>
}</block></struct></type> <name>QTN2QTState</name>;</typedef>

<comment type="block">/*
 * Recursively convert a QTNode tree into flat tsquery format.
 * Caller must have allocated arrays of the correct size.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fillQT</name><parameter_list>(<parameter><decl><type><name>QTN2QTState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_VAL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>curitem</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryOperand</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>curoperand</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>curitem</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>distance</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>curoperand</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>operand</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>curoperand</name><index>[<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>curoperand</name></name> <operator>+=</operator> <name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>curitem</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>QueryItem</name>  <modifier>*</modifier></type><name>curitem</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>curitem</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_OPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>curitem</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryOperator</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>curitem</name></name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>fillQT</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>nchild</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>curitem</name><operator>-&gt;</operator><name>qoperator</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>curitem</name></name> <operator>-</operator> <name>curitem</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fillQT</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Build flat tsquery from a QTNode tree.
 */</comment>
<function><type><name>TSQuery</name></type>
<name>QTN2QT</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TSQuery</name></type>		<name>out</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>sumlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,
				<decl><type ref="prev"/><name>nnode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QTN2QTState</name></type> <name>state</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>cntsize</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sumlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>TSQUERY_TOO_BIG</name><argument_list>(<argument><expr><name>nnode</name></expr></argument>, <argument><expr><name>sumlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"tsquery is too large"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>COMPUTESIZE</name><argument_list>(<argument><expr><name>nnode</name></expr></argument>, <argument><expr><name>sumlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>TSQuery</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_VARSIZE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>nnode</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>curitem</name></name> <operator>=</operator> <call><name>GETQUERY</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>state</name><operator>.</operator><name>operand</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>curoperand</name></name> <operator>=</operator> <call><name>GETOPERAND</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fillQT</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Copy a QTNode tree.
 *
 * Modifiable copies of the words and valnodes are made, too.
 */</comment>
<function><type><name>QTNode</name> <modifier>*</modifier></type>
<name>QTNCopy</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QTNode</name>	   <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>QTNode</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>out</name> <operator>=</operator> <operator>*</operator><name>in</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>valnode</name></name> <operator>=</operator> <operator>(</operator><name>QueryItem</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>valnode</name></name><operator>)</operator> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>in</name><operator>-&gt;</operator><name>valnode</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>QTN_NEEDFREE</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>QI_VAL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>word</name></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>word</name><index>[<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>qoperand</name><operator>.</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>QTN_WORDFREE</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>child</name></name> <operator>=</operator> <operator>(</operator><name>QTNode</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QTNode</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>QTNCopy</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Clear the specified flag bit(s) in all nodes of a QTNode tree.
 */</comment>
<function><type><name>void</name></type>
<name>QTNClearFlags</name><parameter_list>(<parameter><decl><type><name>QTNode</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since this function recurses, it could be driven to stack overflow. */</comment>
	<expr_stmt><expr><call><name>check_stack_depth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>in</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>flags</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>valnode</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>QI_VAL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>in</name><operator>-&gt;</operator><name>nchild</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>QTNClearFlags</name><argument_list>(<argument><expr><name><name>in</name><operator>-&gt;</operator><name>child</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
