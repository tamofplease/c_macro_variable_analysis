<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/adt/rangetypes_typanalyze.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * ragetypes_typanalyze.c
 *	  Functions for gathering statistics from range columns
 *
 * For a range type column, histograms of lower and upper bounds, and
 * the fraction of NULL and empty ranges are collected.
 *
 * Both histograms have the same length, and they are combined into a
 * single array of ranges. This has the same shape as the histogram that
 * std_typanalyze would collect, but the values are different. Each range
 * in the array is a valid range, even though the lower and upper bounds
 * come from different tuples. In theory, the standard scalar selectivity
 * functions could be used with the combined histogram.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/rangetypes_typanalyze.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_operator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/vacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rangetypes.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>float8_qsort_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>range_bound_qsort_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>compute_range_stats</name><parameter_list>(<parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>,
					<parameter><decl><type><name>AnalyzeAttrFetchFunc</name></type> <name>fetchfunc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>samplerows</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>totalrows</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * range_typanalyze -- typanalyze function for range columns
 */</comment>
<function><type><name>Datum</name></type>
<name>range_typanalyze</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VacAttrStats</name> <modifier>*</modifier></type><name>stats</name> <init>= <expr><operator>(</operator><name>VacAttrStats</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typcache</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>attr</name> <init>= <expr><name><name>stats</name><operator>-&gt;</operator><name>attr</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Get information about range type; note column might be a domain */</comment>
	<expr_stmt><expr><name>typcache</name> <operator>=</operator> <call><name>range_get_typcache</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><call><name>getBaseType</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>attrtypid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>-&gt;</operator><name>attstattarget</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>attr</name><operator>-&gt;</operator><name>attstattarget</name></name> <operator>=</operator> <name>default_statistics_target</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>compute_stats</name></name> <operator>=</operator> <name>compute_range_stats</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>extra_data</name></name> <operator>=</operator> <name>typcache</name></expr>;</expr_stmt>
	<comment type="block">/* same as in std_typanalyze */</comment>
	<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>minrows</name></name> <operator>=</operator> <literal type="number">300</literal> <operator>*</operator> <name><name>attr</name><operator>-&gt;</operator><name>attstattarget</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Comparison function for sorting float8s, used for range lengths.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>float8_qsort_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>float8</name> <modifier>*</modifier></type><name>f1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float8</name> <operator>*</operator><operator>)</operator> <name>a1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>float8</name> <modifier>*</modifier></type><name>f2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>float8</name> <operator>*</operator><operator>)</operator> <name>a2</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>f1</name> <operator>&lt;</operator> <operator>*</operator><name>f2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>*</operator><name>f1</name> <operator>==</operator> <operator>*</operator><name>f2</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Comparison function for sorting RangeBounds.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>range_bound_qsort_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a2</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RangeBound</name> <modifier>*</modifier></type><name>b1</name> <init>= <expr><operator>(</operator><name>RangeBound</name> <operator>*</operator><operator>)</operator> <name>a1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeBound</name> <modifier>*</modifier></type><name>b2</name> <init>= <expr><operator>(</operator><name>RangeBound</name> <operator>*</operator><operator>)</operator> <name>a2</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typcache</name> <init>= <expr><operator>(</operator><name>TypeCacheEntry</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>range_cmp_bounds</name><argument_list>(<argument><expr><name>typcache</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * compute_range_stats() -- compute statistics for a range column
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>compute_range_stats</name><parameter_list>(<parameter><decl><type><name>VacAttrStats</name> <modifier>*</modifier></type><name>stats</name></decl></parameter>, <parameter><decl><type><name>AnalyzeAttrFetchFunc</name></type> <name>fetchfunc</name></decl></parameter>,
					<parameter><decl><type><name>int</name></type> <name>samplerows</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>totalrows</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typcache</name> <init>= <expr><operator>(</operator><name>TypeCacheEntry</name> <operator>*</operator><operator>)</operator> <name><name>stats</name><operator>-&gt;</operator><name>extra_data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>has_subdiff</name> <init>= <expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>typcache</name><operator>-&gt;</operator><name>rng_subdiff_finfo</name><operator>.</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>null_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>non_null_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>non_empty_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>empty_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>range_no</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slot_idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_bins</name> <init>= <expr><name><name>stats</name><operator>-&gt;</operator><name>attr</name><operator>-&gt;</operator><name>attstattarget</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num_hist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name>	   <modifier>*</modifier></type><name>lengths</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RangeBound</name> <modifier>*</modifier></type><name>lowers</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>uppers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>total_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Allocate memory to hold range bounds and lengths of the sample ranges. */</comment>
	<expr_stmt><expr><name>lowers</name> <operator>=</operator> <operator>(</operator><name>RangeBound</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RangeBound</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>samplerows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>uppers</name> <operator>=</operator> <operator>(</operator><name>RangeBound</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RangeBound</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>samplerows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lengths</name> <operator>=</operator> <operator>(</operator><name>float8</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float8</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>samplerows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Loop over the sample ranges. */</comment>
	<for>for <control>(<init><expr><name>range_no</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>range_no</name> <operator>&lt;</operator> <name>samplerows</name></expr>;</condition> <incr><expr><name>range_no</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>isnull</name></decl>,
					<decl><type ref="prev"/><name>empty</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RangeType</name>  <modifier>*</modifier></type><name>range</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RangeBound</name></type>	<name>lower</name></decl>,
					<decl><type ref="prev"/><name>upper</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>float8</name></type>		<name>length</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>vacuum_delay_point</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>fetchfunc</name><argument_list>(<argument><expr><name>stats</name></expr></argument>, <argument><expr><name>range_no</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* range is null, just count that */</comment>
			<expr_stmt><expr><name>null_cnt</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * XXX: should we ignore wide values, like std_typanalyze does, to
		 * avoid bloating the statistics table?
		 */</comment>
		<expr_stmt><expr><name>total_width</name> <operator>+=</operator> <call><name>VARSIZE_ANY</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Get range and deserialize it for further analysis. */</comment>
		<expr_stmt><expr><name>range</name> <operator>=</operator> <call><name>DatumGetRangeTypeP</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>range_deserialize</name><argument_list>(<argument><expr><name>typcache</name></expr></argument>, <argument><expr><name>range</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lower</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>upper</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>empty</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Remember bounds and length for further usage in histograms */</comment>
			<expr_stmt><expr><name><name>lowers</name><index>[<expr><name>non_empty_cnt</name></expr>]</index></name> <operator>=</operator> <name>lower</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>uppers</name><index>[<expr><name>non_empty_cnt</name></expr>]</index></name> <operator>=</operator> <name>upper</name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>lower</name><operator>.</operator><name>infinite</name></name> <operator>||</operator> <name><name>upper</name><operator>.</operator><name>infinite</name></name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Length of any kind of an infinite range is infinite */</comment>
				<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>get_float8_infinity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>has_subdiff</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * For an ordinary range, use subdiff function between upper
				 * and lower bound values.
				 */</comment>
				<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>DatumGetFloat8</name><argument_list>(<argument><expr><call><name>FunctionCall2Coll</name><argument_list>(
														  <argument><expr><operator>&amp;</operator><name><name>typcache</name><operator>-&gt;</operator><name>rng_subdiff_finfo</name></name></expr></argument>,
														  <argument><expr><name><name>typcache</name><operator>-&gt;</operator><name>rng_collation</name></name></expr></argument>,
														  <argument><expr><name><name>upper</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>lower</name><operator>.</operator><name>val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<comment type="block">/* Use default value of 1.0 if no subdiff is available. */</comment>
				<expr_stmt><expr><name>length</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><name><name>lengths</name><index>[<expr><name>non_empty_cnt</name></expr>]</index></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>non_empty_cnt</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>empty_cnt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>non_null_cnt</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name>slot_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* We can only compute real stats if we found some non-null values. */</comment>
	<if_stmt><if>if <condition>(<expr><name>non_null_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>bound_hist_values</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>length_hist_values</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>pos</name></decl>,
					<decl><type ref="prev"/><name>posfrac</name></decl>,
					<decl><type ref="prev"/><name>delta</name></decl>,
					<decl><type ref="prev"/><name>deltafrac</name></decl>,
					<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_cxt</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>float4</name>	   <modifier>*</modifier></type><name>emptyfrac</name></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stats_valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<comment type="block">/* Do the simple null-frac and width stats */</comment>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stanullfrac</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>null_cnt</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>samplerows</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stawidth</name></name> <operator>=</operator> <name>total_width</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name>non_null_cnt</name></expr>;</expr_stmt>

		<comment type="block">/* Estimate that non-null values are unique */</comment>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stadistinct</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1.0</literal> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name><name>stats</name><operator>-&gt;</operator><name>stanullfrac</name></name><operator>)</operator></expr>;</expr_stmt>

		<comment type="block">/* Must copy the target values into anl_context */</comment>
		<expr_stmt><expr><name>old_cxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>stats</name><operator>-&gt;</operator><name>anl_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Generate a bounds histogram slot entry if there are at least two
		 * values.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>non_empty_cnt</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Sort bound values */</comment>
			<expr_stmt><expr><call><name>qsort_arg</name><argument_list>(<argument><expr><name>lowers</name></expr></argument>, <argument><expr><name>non_empty_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RangeBound</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					  <argument><expr><name>range_bound_qsort_cmp</name></expr></argument>, <argument><expr><name>typcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>qsort_arg</name><argument_list>(<argument><expr><name>uppers</name></expr></argument>, <argument><expr><name>non_empty_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RangeBound</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					  <argument><expr><name>range_bound_qsort_cmp</name></expr></argument>, <argument><expr><name>typcache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>num_hist</name> <operator>=</operator> <name>non_empty_cnt</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>num_hist</name> <operator>&gt;</operator> <name>num_bins</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>num_hist</name> <operator>=</operator> <name>num_bins</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>bound_hist_values</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>num_hist</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * The object of this loop is to construct ranges from first and
			 * last entries in lowers[] and uppers[] along with evenly-spaced
			 * values in between. So the i'th value is a range of lowers[(i *
			 * (nvals - 1)) / (num_hist - 1)] and uppers[(i * (nvals - 1)) /
			 * (num_hist - 1)]. But computing that subscript directly risks
			 * integer overflow when the stats target is more than a couple
			 * thousand.  Instead we add (nvals - 1) / (num_hist - 1) to pos
			 * at each step, tracking the integral and fractional parts of the
			 * sum separately.
			 */</comment>
			<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>non_empty_cnt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>num_hist</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>deltafrac</name> <operator>=</operator> <operator>(</operator><name>non_empty_cnt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><name>num_hist</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>posfrac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_hist</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name><name>bound_hist_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>range_serialize</name><argument_list>(
																	   <argument><expr><name>typcache</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lowers</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>uppers</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>posfrac</name> <operator>+=</operator> <name>deltafrac</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>posfrac</name> <operator>&gt;=</operator> <operator>(</operator><name>num_hist</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* fractional part exceeds 1, carry to integer part */</comment>
					<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>posfrac</name> <operator>-=</operator> <operator>(</operator><name>num_hist</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stakind</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>STATISTIC_KIND_BOUNDS_HISTOGRAM</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stavalues</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>bound_hist_values</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>numvalues</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>num_hist</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>slot_idx</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * Generate a length histogram slot entry if there are at least two
		 * values.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>non_empty_cnt</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Ascending sort of range lengths for further filling of
			 * histogram
			 */</comment>
			<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>, <argument><expr><name>non_empty_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float8</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>float8_qsort_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>num_hist</name> <operator>=</operator> <name>non_empty_cnt</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>num_hist</name> <operator>&gt;</operator> <name>num_bins</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>num_hist</name> <operator>=</operator> <name>num_bins</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>length_hist_values</name> <operator>=</operator> <operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>num_hist</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * The object of this loop is to copy the first and last lengths[]
			 * entries along with evenly-spaced values in between. So the i'th
			 * value is lengths[(i * (nvals - 1)) / (num_hist - 1)]. But
			 * computing that subscript directly risks integer overflow when
			 * the stats target is more than a couple thousand.  Instead we
			 * add (nvals - 1) / (num_hist - 1) to pos at each step, tracking
			 * the integral and fractional parts of the sum separately.
			 */</comment>
			<expr_stmt><expr><name>delta</name> <operator>=</operator> <operator>(</operator><name>non_empty_cnt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>num_hist</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>deltafrac</name> <operator>=</operator> <operator>(</operator><name>non_empty_cnt</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><name>num_hist</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>pos</name> <operator>=</operator> <name>posfrac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_hist</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<expr_stmt><expr><name><name>length_hist_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Float8GetDatum</name><argument_list>(<argument><expr><name><name>lengths</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>posfrac</name> <operator>+=</operator> <name>deltafrac</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>posfrac</name> <operator>&gt;=</operator> <operator>(</operator><name>num_hist</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* fractional part exceeds 1, carry to integer part */</comment>
					<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>posfrac</name> <operator>-=</operator> <operator>(</operator><name>num_hist</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * Even when we don't create the histogram, store an empty array
			 * to mean "no histogram". We can't just leave stavalues NULL,
			 * because get_attstatsslot() errors if you ask for stavalues, and
			 * it's NULL. We'll still store the empty fraction in stanumbers.
			 */</comment>
			<expr_stmt><expr><name>length_hist_values</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>num_hist</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>staop</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>Float8LessOperator</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stavalues</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>length_hist_values</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>numvalues</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>num_hist</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>statypid</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>FLOAT8OID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>statyplen</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float8</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_FLOAT8_BYVAL</name></cpp:ifdef>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>statypbyval</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>statypbyval</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>statypalign</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt>

		<comment type="block">/* Store the fraction of empty ranges */</comment>
		<expr_stmt><expr><name>emptyfrac</name> <operator>=</operator> <operator>(</operator><name>float4</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>float4</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>emptyfrac</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>empty_cnt</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator> <name>non_null_cnt</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stanumbers</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>emptyfrac</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>numnumbers</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stakind</name><index>[<expr><name>slot_idx</name></expr>]</index></name> <operator>=</operator> <name>STATISTIC_KIND_RANGE_LENGTH_HISTOGRAM</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>slot_idx</name><operator>++</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_cxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>null_cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We found only nulls; assume the column is entirely null */</comment>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stats_valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stanullfrac</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stawidth</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>	<comment type="block">/* "unknown" */</comment>
		<expr_stmt><expr><name><name>stats</name><operator>-&gt;</operator><name>stadistinct</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>	<comment type="block">/* "unknown" */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We don't need to bother cleaning up any of our temporary palloc's. The
	 * hashtable should also go away, as it used a child memory context.
	 */</comment>
</block_content>}</block></function>
</unit>
