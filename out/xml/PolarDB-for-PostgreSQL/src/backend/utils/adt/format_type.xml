<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/adt/format_type.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * format_type.c
 *	  Display type names "nicely".
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/format_type.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INT32_LEN</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>printTypmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typname</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>typmod</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typmodout</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * SQL function: format_type(type_oid, typemod)
 *
 * `type_oid' is from pg_type.oid, `typemod' is from
 * pg_attribute.atttypmod. This function will get the type name and
 * format it and the modifier to canonical SQL format, if the type is
 * a standard type. Otherwise you just get pg_type.typname back,
 * double quoted if it contains funny characters or matches a keyword.
 *
 * If typemod is NULL then we are formatting a type name in a context where
 * no typemod is available, eg a function argument or result type.  This
 * yields a slightly different result from specifying typemod = -1 in some
 * cases.  Given typemod = -1 we feel compelled to produce an output that
 * the parser will interpret as having typemod -1, so that pg_dump will
 * produce CREATE TABLE commands that recreate the original state.  But
 * given NULL typemod, we assume that the parser's interpretation of
 * typemod doesn't matter, and so we are willing to output a slightly
 * "prettier" representation of the same type.  For example, type = bpchar
 * and typemod = NULL gets you "character", whereas typemod = -1 gets you
 * "bpchar" --- the former will be interpreted as character(1) by the
 * parser, which does not yield typemod -1.
 *
 * XXX encoding a meaning in typemod = NULL is ugly; it'd have been
 * cleaner to make two functions of one and two arguments respectively.
 * Not worth changing it now, however.
 */</comment>
<function><type><name>Datum</name></type>
<name>format_type</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>type_oid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>typemod</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bits16</name></type>		<name>flags</name> <init>= <expr><name>FORMAT_TYPE_ALLOW_INVALID</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Since this function is not strict, we must test for null args */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>type_oid</name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>typemod</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>typemod</name> <operator>=</operator> <call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>FORMAT_TYPE_TYPEMOD_GIVEN</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>format_type_extended</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * format_type_extended
 *		Generate a possibly-qualified type name.
 *
 * The default behavior is to only qualify if the type is not in the search
 * path, to ignore the given typmod, and to raise an error if a non-existent
 * type_oid is given.
 *
 * The following bits in 'flags' modify the behavior:
 * - FORMAT_TYPE_TYPEMOD_GIVEN
 *			include the typmod in the output (typmod could still be -1 though)
 * - FORMAT_TYPE_ALLOW_INVALID
 *			if the type OID is invalid or unknown, return ??? or such instead
 *			of failing
 * - FORMAT_TYPE_FORCE_QUALIFY
 *			always schema-qualify type names, regardless of search_path
 *
 * Note that TYPEMOD_GIVEN is not interchangeable with "typemod == -1";
 * see the comments above for format_type().
 *
 * Returns a palloc'd string.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>format_type_extended</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_oid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>typemod</name></decl></parameter>, <parameter><decl><type><name>bits16</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>typeform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>array_base_type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>is_array</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>with_typemod</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>type_oid</name> <operator>==</operator> <name>InvalidOid</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FORMAT_TYPE_ALLOW_INVALID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FORMAT_TYPE_ALLOW_INVALID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"???"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>typeform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check if it's a regular (variable length) array type.  Fixed-length
	 * array types such as "name" shouldn't get deconstructed.  As of Postgres
	 * 8.1, rather than checking typlen we check the toast property, and don't
	 * deconstruct "plain storage" array types --- this is because we don't
	 * want to show oidvector as oid[].
	 */</comment>
	<expr_stmt><expr><name>array_base_type</name> <operator>=</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typelem</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>array_base_type</name> <operator>!=</operator> <name>InvalidOid</name> <operator>&amp;&amp;</operator> <name><name>typeform</name><operator>-&gt;</operator><name>typstorage</name></name> <operator>!=</operator> <literal type="char">'p'</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Switch our attention to the array element type */</comment>
		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>array_base_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FORMAT_TYPE_ALLOW_INVALID</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"???[]"</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>typeform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>type_oid</name> <operator>=</operator> <name>array_base_type</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>is_array</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>is_array</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>with_typemod</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FORMAT_TYPE_TYPEMOD_GIVEN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>typemod</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

	<comment type="block">/*
	 * See if we want to special-case the output for certain built-in types.
	 * Note that these special cases should all correspond to special
	 * productions in gram.y, to ensure that the type name will be taken as a
	 * system type, not a user type of the same name.
	 *
	 * If we do not provide a special-case output here, the type name will be
	 * handled the same way as a user type name --- in particular, it will be
	 * double-quoted if it matches any lexer keyword.  This behavior is
	 * essential for some cases, such as types "bit" and "char".
	 */</comment>
	<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>					<comment type="block">/* flag for no special case */</comment>

	<switch>switch <condition>(<expr><name>type_oid</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BITOID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"bit"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FORMAT_TYPE_TYPEMOD_GIVEN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * bit with typmod -1 is not the same as BIT, which means
				 * BIT(1) per SQL spec.  Report it as the quoted typename so
				 * that parser will not assign a bogus typmod.
				 */</comment>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>BOOLOID</name></expr>:</case>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>BPCHAROID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"character"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FORMAT_TYPE_TYPEMOD_GIVEN</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * bpchar with typmod -1 is not the same as CHARACTER, which
				 * means CHARACTER(1) per SQL spec.  Report it as bpchar so
				 * that parser will not assign a bogus typmod.
				 */</comment>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>FLOAT4OID</name></expr>:</case>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"real"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>FLOAT8OID</name></expr>:</case>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"double precision"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>INT2OID</name></expr>:</case>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"smallint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>INT4OID</name></expr>:</case>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>INT8OID</name></expr>:</case>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"bigint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>NUMERICOID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"numeric"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"numeric"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>INTERVALOID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"interval"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"interval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>TIMEOID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"time without time zone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>TIMETZOID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"time with time zone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>TIMESTAMPOID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"timestamp"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"timestamp without time zone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>TIMESTAMPTZOID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"timestamp"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"timestamp with time zone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>VARBITOID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"bit varying"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"bit varying"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>

		<case>case <expr><name>VARCHAROID</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><literal type="string">"character varying"</literal></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"character varying"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Default handling: report the name as it appears in the catalog.
		 * Here, we must qualify the name if it is not visible in the search
		 * path or if caller requests it; and we must double-quote it if it's
		 * not a standard identifier or if it matches any keyword.
		 */</comment>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>typname</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>FORMAT_TYPE_FORCE_QUALIFY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<call><name>TypeIsVisible</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>nspname</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>nspname</name> <operator>=</operator> <call><name>get_namespace_name_or_temp</name><argument_list>(<argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>typname</name> <operator>=</operator> <call><name>NameStr</name><argument_list>(<argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>quote_qualified_identifier</name><argument_list>(<argument><expr><name>nspname</name></expr></argument>, <argument><expr><name>typname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>with_typemod</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>printTypmod</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name><name>typeform</name><operator>-&gt;</operator><name>typmodout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_array</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s[]"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This version is for use within the backend in error messages, etc.
 * One difference is that it will fail for an invalid type.
 *
 * The result is always a palloc'd string.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>format_type_be</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>format_type_extended</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This version returns a name that is always qualified (unless it's one
 * of the SQL-keyword type names, such as TIMESTAMP WITH TIME ZONE).
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>format_type_be_qualified</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_oid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>format_type_extended</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FORMAT_TYPE_FORCE_QUALIFY</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This version allows a nondefault typemod to be specified.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>format_type_with_typemod</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_oid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>typemod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>format_type_extended</name><argument_list>(<argument><expr><name>type_oid</name></expr></argument>, <argument><expr><name>typemod</name></expr></argument>, <argument><expr><name>FORMAT_TYPE_TYPEMOD_GIVEN</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Add typmod decoration to the basic type name
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>printTypmod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typname</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>typmod</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typmodout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

	<comment type="block">/* Shouldn't be called if typmod is -1 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>typmod</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>typmodout</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Default behavior: just print the integer typmod with parens */</comment>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s(%d)"</literal></expr></argument>, <argument><expr><name>typname</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>typmod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* Use the type-specific typmodout procedure */</comment>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>tmstr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>tmstr</name> <operator>=</operator> <call><name>DatumGetCString</name><argument_list>(<argument><expr><call><name>OidFunctionCall1</name><argument_list>(<argument><expr><name>typmodout</name></expr></argument>,
												 <argument><expr><call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>typmod</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>typname</name></expr></argument>, <argument><expr><name>tmstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * type_maximum_size --- determine maximum width of a variable-width column
 *
 * If the max width is indeterminate, return -1.  In particular, we return
 * -1 for any type not known to this routine.  We assume the caller has
 * already determined that the type is a variable-width type, so it's not
 * necessary to look up the type's pg_type tuple here.
 *
 * This may appear unrelated to format_type(), but in fact the two routines
 * share knowledge of the encoding of typmod for different types, so it's
 * convenient to keep them together.  (XXX now that most of this knowledge
 * has been pushed out of format_type into the typmodout functions, it's
 * interesting to wonder if it's worth trying to factor this code too...)
 */</comment>
<function><type><name>int32</name></type>
<name>type_maximum_size</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>type_oid</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>typemod</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>typemod</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name>type_oid</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>BPCHAROID</name></expr>:</case>
		<case>case <expr><name>VARCHAROID</name></expr>:</case>
			<comment type="block">/* typemod includes varlena header */</comment>

			<comment type="block">/* typemod is in characters not bytes */</comment>
			<return>return <expr><operator>(</operator><name>typemod</name> <operator>-</operator> <name>VARHDRSZ</name><operator>)</operator> <operator>*</operator>
				<call><name>pg_encoding_max_length</name><argument_list>(<argument><expr><call><name>GetDatabaseEncoding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
				<operator>+</operator> <name>VARHDRSZ</name></expr>;</return>

		<case>case <expr><name>NUMERICOID</name></expr>:</case>
			<return>return <expr><call><name>numeric_maximum_size</name><argument_list>(<argument><expr><name>typemod</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>VARBITOID</name></expr>:</case>
		<case>case <expr><name>BITOID</name></expr>:</case>
			<comment type="block">/* typemod is the (max) number of bits */</comment>
			<return>return <expr><operator>(</operator><name>typemod</name> <operator>+</operator> <operator>(</operator><name>BITS_PER_BYTE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>BITS_PER_BYTE</name>
				<operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr>;</return>
	</block_content>}</block></switch>

	<comment type="block">/* Unknown type, or unlimited-width type such as 'text' */</comment>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * oidvectortypes			- converts a vector of type OIDs to "typname" list
 */</comment>
<function><type><name>Datum</name></type>
<name>oidvectortypes</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>oidvector</name>  <modifier>*</modifier></type><name>oidArray</name> <init>= <expr><operator>(</operator><name>oidvector</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numargs</name> <init>= <expr><name><name>oidArray</name><operator>-&gt;</operator><name>dim1</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>total</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>left</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>total</name> <operator>=</operator> <literal type="number">20</literal> <operator>*</operator> <name>numargs</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>left</name> <operator>=</operator> <name>total</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>num</name> <operator>&lt;</operator> <name>numargs</name></expr>;</condition> <incr><expr><name>num</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>typename</name> <init>= <expr><call><name>format_type_extended</name><argument_list>(<argument><expr><name><name>oidArray</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
													<argument><expr><name>FORMAT_TYPE_ALLOW_INVALID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>slen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <operator>(</operator><name>slen</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>total</name> <operator>+=</operator> <name>slen</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>repalloc</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>left</name> <operator>+=</operator> <name>slen</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>left</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>left</name> <operator>-=</operator> <name>slen</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
