<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/adt/domains.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * domains.c
 *	  I/O functions for domain types.
 *
 * The output functions for a domain type are just the same ones provided
 * by its underlying base type.  The input functions, however, must be
 * prepared to apply any constraints defined by the type.  So, we create
 * special input functions that invoke the base type's input function
 * and then check the constraints.
 *
 * The overhead required for constraint checking can be high, since examining
 * the catalogs to discover the constraints for a given domain is not cheap.
 * We have three mechanisms for minimizing this cost:
 *	1.  We rely on the typcache to keep up-to-date copies of the constraints.
 *	2.  In a nest of domains, we flatten the checking of all the levels
 *		into just one operation (the typcache does this for us).
 *	3.  If there are CHECK constraints, we cache a standalone ExprContext
 *		to evaluate them in.
 *
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/adt/domains.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/expandeddatum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * structure to cache state across multiple calls
 */</comment>
<typedef>typedef <type><struct>struct <name>DomainIOData</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>domain_type</name></decl>;</decl_stmt>
	<comment type="block">/* Data needed to call base type's input function */</comment>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typiofunc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>typioparam</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type>		<name>typtypmod</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name></type>	<name>proc</name></decl>;</decl_stmt>
	<comment type="block">/* Reference to cached list of constraint items to check */</comment>
	<decl_stmt><decl><type><name>DomainConstraintRef</name></type> <name>constraint_ref</name></decl>;</decl_stmt>
	<comment type="block">/* Context for evaluating CHECK constraints in */</comment>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name></decl>;</decl_stmt>
	<comment type="block">/* Memory context this cache is in */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl>;</decl_stmt>
}</block></struct></type> <name>DomainIOData</name>;</typedef>


<comment type="block">/*
 * domain_state_setup - initialize the cache for a new domain type.
 *
 * Note: we can't re-use the same cache struct for a new domain type,
 * since there's no provision for releasing the DomainConstraintRef.
 * If a call site needs to deal with a new domain type, we just leak
 * the old struct for the duration of the query.
 */</comment>
<function><type><specifier>static</specifier> <name>DomainIOData</name> <modifier>*</modifier></type>
<name>domain_state_setup</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>domainType</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>binary</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DomainIOData</name> <modifier>*</modifier></type><name>my_extra</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>baseType</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>my_extra</name> <operator>=</operator> <operator>(</operator><name>DomainIOData</name> <operator>*</operator><operator>)</operator> <call><name>MemoryContextAlloc</name><argument_list>(<argument><expr><name>mcxt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DomainIOData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Verify that domainType represents a valid domain type.  We need to be
	 * careful here because domain_in and domain_recv can be called from SQL,
	 * possibly with incorrect arguments.  We use lookup_type_cache mainly
	 * because it will throw a clean user-facing error for a bad OID; but also
	 * it can cache the underlying base type info.
	 */</comment>
	<expr_stmt><expr><name>typentry</name> <operator>=</operator> <call><name>lookup_type_cache</name><argument_list>(<argument><expr><name>domainType</name></expr></argument>, <argument><expr><name>TYPECACHE_DOMAIN_BASE_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>typentry</name><operator>-&gt;</operator><name>typtype</name></name> <operator>!=</operator> <name>TYPTYPE_DOMAIN</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_DATATYPE_MISMATCH</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"type %s is not a domain"</literal></expr></argument>,
						<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>domainType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Find out the base type */</comment>
	<expr_stmt><expr><name>baseType</name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>domainBaseType</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_extra</name><operator>-&gt;</operator><name>typtypmod</name></name> <operator>=</operator> <name><name>typentry</name><operator>-&gt;</operator><name>domainBaseTypmod</name></name></expr>;</expr_stmt>

	<comment type="block">/* Look up underlying I/O function */</comment>
	<if_stmt><if>if <condition>(<expr><name>binary</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>getTypeBinaryInputInfo</name><argument_list>(<argument><expr><name>baseType</name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>typiofunc</name></name></expr></argument>,
							   <argument><expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>typioparam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>getTypeInputInfo</name><argument_list>(<argument><expr><name>baseType</name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>typiofunc</name></name></expr></argument>,
						 <argument><expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>typioparam</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>fmgr_info_cxt</name><argument_list>(<argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>typiofunc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>, <argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Look up constraints for domain */</comment>
	<expr_stmt><expr><call><name>InitDomainConstraintRef</name><argument_list>(<argument><expr><name>domainType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>constraint_ref</name></name></expr></argument>, <argument><expr><name>mcxt</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We don't make an ExprContext until needed */</comment>
	<expr_stmt><expr><name><name>my_extra</name><operator>-&gt;</operator><name>econtext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>my_extra</name><operator>-&gt;</operator><name>mcxt</name></name> <operator>=</operator> <name>mcxt</name></expr>;</expr_stmt>

	<comment type="block">/* Mark cache valid */</comment>
	<expr_stmt><expr><name><name>my_extra</name><operator>-&gt;</operator><name>domain_type</name></name> <operator>=</operator> <name>domainType</name></expr>;</expr_stmt>

	<return>return <expr><name>my_extra</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * domain_check_input - apply the cached checks.
 *
 * This is roughly similar to the handling of CoerceToDomain nodes in
 * execExpr*.c, but we execute each constraint separately, rather than
 * compiling them in-line within a larger expression.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>domain_check_input</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isnull</name></decl></parameter>, <parameter><decl><type><name>DomainIOData</name> <modifier>*</modifier></type><name>my_extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExprContext</name> <modifier>*</modifier></type><name>econtext</name> <init>= <expr><name><name>my_extra</name><operator>-&gt;</operator><name>econtext</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure we have up-to-date constraints */</comment>
	<expr_stmt><expr><call><name>UpdateDomainConstraintRef</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>constraint_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>l</argument>, <argument>my_extra-&gt;constraint_ref.constraints</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DomainConstraintState</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><operator>(</operator><name>DomainConstraintState</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<switch>switch <condition>(<expr><name><name>con</name><operator>-&gt;</operator><name>constrainttype</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>DOM_CONSTRAINT_NOTNULL</name></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
							<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NOT_NULL_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"domain %s does not allow null values"</literal></expr></argument>,
									<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>domain_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
							 <call><name>errdatatype</name><argument_list>(<argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>domain_type</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><name>DOM_CONSTRAINT_CHECK</name></expr>:</case>
				<block>{<block_content>
					<comment type="block">/* Make the econtext if we didn't already */</comment>
					<if_stmt><if>if <condition>(<expr><name>econtext</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
					<block>{<block_content>
						<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

						<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>econtext</name> <operator>=</operator> <call><name>CreateStandaloneExprContext</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>my_extra</name><operator>-&gt;</operator><name>econtext</name></name> <operator>=</operator> <name>econtext</name></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>

					<comment type="block">/*
					 * Set up value to be returned by CoerceToDomainValue
					 * nodes.  Unlike in the generic expression case, this
					 * econtext couldn't be shared with anything else, so no
					 * need to save and restore fields.  But we do need to
					 * protect the passed-in value against being changed by
					 * called functions.  (It couldn't be a R/W expanded
					 * object for most uses, but that seems possible for
					 * domain_check().)
					 */</comment>
					<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>domainValue_datum</name></name> <operator>=</operator>
						<call><name>MakeExpandedObjectReadOnly</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>,
												   <argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>constraint_ref</name><operator>.</operator><name>tcache</name><operator>-&gt;</operator><name>typlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>econtext</name><operator>-&gt;</operator><name>domainValue_isNull</name></name> <operator>=</operator> <name>isnull</name></expr>;</expr_stmt>

					<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ExecCheck</name><argument_list>(<argument><expr><name><name>con</name><operator>-&gt;</operator><name>check_exprstate</name></name></expr></argument>, <argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
								<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CHECK_VIOLATION</name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"value for domain %s violates check constraint \"%s\""</literal></expr></argument>,
										<argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>domain_type</name></name></expr></argument>)</argument_list></call></expr></argument>,
										<argument><expr><name><name>con</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>,</operator>
								 <call><name>errdomainconstraint</name><argument_list>(<argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>domain_type</name></name></expr></argument>,
													 <argument><expr><name><name>con</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<break>break;</break>
				</block_content>}</block>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized constraint type: %d"</literal></expr></argument>,
					 <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>con</name><operator>-&gt;</operator><name>constrainttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block>

	<comment type="block">/*
	 * Before exiting, call any shutdown callbacks and reset econtext's
	 * per-tuple memory.  This avoids leaking non-memory resources, if
	 * anything in the expression(s) has any.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>econtext</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ReScanExprContext</name><argument_list>(<argument><expr><name>econtext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * domain_in		- input routine for any domain type.
 */</comment>
<function><type><name>Datum</name></type>
<name>domain_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>domainType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DomainIOData</name> <modifier>*</modifier></type><name>my_extra</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Since domain_in is not strict, we have to check for null inputs. The
	 * typioparam argument should never be null in normal system usage, but it
	 * could be null in a manual invocation --- if so, just return null.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>string</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>domainType</name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We arrange to look up the needed info just once per series of calls,
	 * assuming the domain type doesn't change underneath us (which really
	 * shouldn't happen, but cope if it does).
	 */</comment>
	<expr_stmt><expr><name>my_extra</name> <operator>=</operator> <operator>(</operator><name>DomainIOData</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>my_extra</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>my_extra</name><operator>-&gt;</operator><name>domain_type</name></name> <operator>!=</operator> <name>domainType</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>my_extra</name> <operator>=</operator> <call><name>domain_state_setup</name><argument_list>(<argument><expr><name>domainType</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
									  <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>my_extra</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Invoke the base type's typinput procedure to convert the data.
	 */</comment>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>InputFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>,
							  <argument><expr><name>string</name></expr></argument>,
							  <argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>typioparam</name></name></expr></argument>,
							  <argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>typtypmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Do the necessary checks to ensure it's a valid domain value.
	 */</comment>
	<expr_stmt><expr><call><name>domain_check_input</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>string</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>, <argument><expr><name>my_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>string</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * domain_recv		- binary input routine for any domain type.
 */</comment>
<function><type><name>Datum</name></type>
<name>domain_recv</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type>	<name>buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>domainType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DomainIOData</name> <modifier>*</modifier></type><name>my_extra</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name>value</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Since domain_recv is not strict, we have to check for null inputs. The
	 * typioparam argument should never be null in normal system usage, but it
	 * could be null in a manual invocation --- if so, just return null.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><name>StringInfo</name><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>domainType</name> <operator>=</operator> <call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We arrange to look up the needed info just once per series of calls,
	 * assuming the domain type doesn't change underneath us (which really
	 * shouldn't happen, but cope if it does).
	 */</comment>
	<expr_stmt><expr><name>my_extra</name> <operator>=</operator> <operator>(</operator><name>DomainIOData</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>my_extra</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>my_extra</name><operator>-&gt;</operator><name>domain_type</name></name> <operator>!=</operator> <name>domainType</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>my_extra</name> <operator>=</operator> <call><name>domain_state_setup</name><argument_list>(<argument><expr><name>domainType</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
									  <argument><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_mcxt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>flinfo</name><operator>-&gt;</operator><name>fn_extra</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>my_extra</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Invoke the base type's typreceive procedure to convert the data.
	 */</comment>
	<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>ReceiveFunctionCall</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>my_extra</name><operator>-&gt;</operator><name>proc</name></name></expr></argument>,
								<argument><expr><name>buf</name></expr></argument>,
								<argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>typioparam</name></name></expr></argument>,
								<argument><expr><name><name>my_extra</name><operator>-&gt;</operator><name>typtypmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Do the necessary checks to ensure it's a valid domain value.
	 */</comment>
	<expr_stmt><expr><call><name>domain_check_input</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><operator>(</operator><name>buf</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>, <argument><expr><name>my_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>PG_RETURN_DATUM</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * domain_check - check that a datum satisfies the constraints of a
 * domain.  extra and mcxt can be passed if they are available from,
 * say, a FmgrInfo structure, or they can be NULL, in which case the
 * setup is repeated for each call.
 */</comment>
<function><type><name>void</name></type>
<name>domain_check</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isnull</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>domainType</name></decl></parameter>,
			 <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>mcxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DomainIOData</name> <modifier>*</modifier></type><name>my_extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>mcxt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>mcxt</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We arrange to look up the needed info just once per series of calls,
	 * assuming the domain type doesn't change underneath us (which really
	 * shouldn't happen, but cope if it does).
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>extra</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>my_extra</name> <operator>=</operator> <operator>(</operator><name>DomainIOData</name> <operator>*</operator><operator>)</operator> <operator>*</operator><name>extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>my_extra</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>my_extra</name><operator>-&gt;</operator><name>domain_type</name></name> <operator>!=</operator> <name>domainType</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>my_extra</name> <operator>=</operator> <call><name>domain_state_setup</name><argument_list>(<argument><expr><name>domainType</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>mcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>extra</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>extra</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>my_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Do the necessary checks to ensure it's a valid domain value.
	 */</comment>
	<expr_stmt><expr><call><name>domain_check_input</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>, <argument><expr><name>my_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * errdatatype --- stores schema_name and datatype_name of a datatype
 * within the current errordata.
 */</comment>
<function><type><name>int</name></type>
<name>errdatatype</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>datatypeOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>typtup</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>datatypeOid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>datatypeOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>typtup</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>err_generic_string</name><argument_list>(<argument><expr><name>PG_DIAG_SCHEMA_NAME</name></expr></argument>,
					   <argument><expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name><name>typtup</name><operator>-&gt;</operator><name>typnamespace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>err_generic_string</name><argument_list>(<argument><expr><name>PG_DIAG_DATATYPE_NAME</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>typtup</name><operator>-&gt;</operator><name>typname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* return value does not matter */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * errdomainconstraint --- stores schema_name, datatype_name and
 * constraint_name of a domain-related constraint within the current errordata.
 */</comment>
<function><type><name>int</name></type>
<name>errdomainconstraint</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>datatypeOid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>errdatatype</name><argument_list>(<argument><expr><name>datatypeOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>err_generic_string</name><argument_list>(<argument><expr><name>PG_DIAG_CONSTRAINT_NAME</name></expr></argument>, <argument><expr><name>conname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>					<comment type="block">/* return value does not matter */</comment>
</block_content>}</block></function>
</unit>
