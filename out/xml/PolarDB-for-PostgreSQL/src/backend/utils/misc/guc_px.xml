<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/misc/guc_px.c"><comment type="block">/*--------------------------------------------------------------------
 * guc_px.c
 *
 * Additional PolarDB-PX-specific GUCs are defined in this file, to
 * avoid adding so much stuff to guc.c. This makes it easier to diff
 * and merge with upstream.
 *
 * Portions Copyright (c) 2005-2010, Greenplum inc
 * Portions Copyright (c) 2012-Present Pivotal Software, Inc.
 * Copyright (c) 2000-2009, PostgreSQL Global Development Group
 * Portions Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * IDENTIFICATION
 *	  src/backend/utils/misc/guc_px.c
 *
 *--------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR px */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/syslogger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_disp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_vars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walsender.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>bool</name></type>		<name>px_test_print_direct_dispatch_info</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_debug_cancel_print</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_log_dispatch_stats</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_hashjoin_size_heuristic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_predicate_propagation</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_minmax_optimization</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_multiphase_agg</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_preunique</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_print</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_eager_preunique</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_hashagg_streambottom</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_agg_distinct</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_dqa_pruning</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_eager_dqa_pruning</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_eager_one_phase_agg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_eager_two_phase_agg</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_cte_sharing</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_relsize_collection</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Optimizer related gucs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>polar_enable_px</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_executor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_join</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_enable_window_function</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_subquery</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_cte</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_enable_partition</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_enable_partition_hash</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_relsize_collection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_adaptive_scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_adps_explain_analyze</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_dop_per_node</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_log_failure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_trace_fallback</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_partition_selection_log</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_minidump</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_cost_model</name> <init>= <expr><name>OPTIMIZER_GPDB_CALIBRATED</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_metadata_caching</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_mdcache_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_use_px_allocators</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_opfamily_for_distribution</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_spi_read_all_namespaces</name></decl>;</decl_stmt>
<comment type="block">/* Optimizer debugging GUCs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_query</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_plan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_xform</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_memo_after_exploration</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_memo_after_implementation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_memo_after_optimization</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_job_scheduler</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_expression_properties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_group_properties</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_optimization_context</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_optimization_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_xform_results</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_memo_enforcement</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_required_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_equiv_distr_specs</name></decl>;</decl_stmt>


<comment type="block">/* Optimizer Parallel DML */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_insert_select</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_insert_partition_table</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_insert_dop_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_insert_from_tableless</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_enable_insert_order_sensitive</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_update</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_update_dop_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_remove_update_redundant_motion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_delete</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_delete_dop_num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_remove_delete_redundant_motion</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_remove_superfluous_order</name></decl>;</decl_stmt>



<comment type="block">/* array of xforms disable flags */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name><name>optimizer_xforms</name><index>[<expr><name>OPTIMIZER_XFORMS_COUNT</name></expr>]</index></name> <init>= <expr><block>{<expr><index>[<expr><literal type="number">0</literal> <operator>...</operator> <name>OPTIMIZER_XFORMS_COUNT</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>px_optimizer_search_strategy_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* GUCs to tell Optimizer to enable a physical operator */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_indexjoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_motions_masteronly_queries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_motions</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_motion_broadcast</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_motion_gather</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_motion_redistribute</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_sort</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_materialize</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_partition_propagation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_partition_selection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_outerjoin_rewrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_multiple_distinct_aggs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_direct_dispatch</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_hashjoin_redistribute_broadcast_children</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_broadcast_nestloop_outer_child</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_streaming_material</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_gather_on_segment_for_dml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_assert_maxonerow</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_constant_expression_evaluation</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_outerjoin_to_unionall_rewrite</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_ctas</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_dml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_dml_triggers</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_dml_constraints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_master_only_queries</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_hashjoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_dynamictablescan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_dynamicindexscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_hashagg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_groupagg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_expand_fulljoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_mergejoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_prune_unused_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_seqscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_seqsharescan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_indexscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_indexonlyscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_shareindexscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_dynamicshareindexscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_brinscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_bitmapscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_nestloopjoin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_optimizer_enable_lasj_notin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_optimizer_enable_crossproduct</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_partitionwise_join</name></decl>;</decl_stmt>

<comment type="block">/* Optimizer plan enumeration related GUCs */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enumerate_plans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_sample_plans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_plan_id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_samples_number</name></decl>;</decl_stmt>

<comment type="block">/* Cardinality estimation related GUCs used by the Optimizer */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_extract_dxl_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_extract_dxl_stats_all_nodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_print_missing_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>px_optimizer_damping_factor_filter</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>px_optimizer_damping_factor_join</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>px_optimizer_damping_factor_groupby</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_dpe_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_derive_stats_all_groups</name></decl>;</decl_stmt>

<comment type="block">/* Costing related GUCs used by the Optimizer */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_segments</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_penalize_broadcast_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>px_optimizer_cost_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>px_optimizer_nestloop_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>px_optimizer_sort_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>px_optimizer_share_tablescan_factor</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type>		<name>px_optimizer_share_indexscan_factor</name></decl>;</decl_stmt>

<comment type="block">/* Optimizer hints */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_join_arity_for_associativity_commutativity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_array_expansion_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_join_order_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_join_order</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_cte_inlining_bound</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_optimizer_push_group_by_below_setop_threshold</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_force_multistage_agg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_force_three_stage_scalar_dqa</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_force_expanded_distinct_aggs</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_force_agg_skew_avoidance</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_penalize_skew</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_prune_computed_columns</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_push_requirements_from_consumer_to_producer</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enforce_subplans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_use_external_constant_expression_evaluation_for_ints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_apply_left_outer_to_union_all_disregarding_stats</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_remove_order_below_dml</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_multilevel_partitioning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_optimizer_parallel_union</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_array_constraints</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_cte_inlining</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_space_pruning</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_associativity</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_optimizer_enable_eageragg</name></decl>;</decl_stmt>

<comment type="block">/* POLAR */</comment>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>polar_px_version</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_check_workers</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> 		<name>px_info_debug</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_replay_wait</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_transaction</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_sort_distinct</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_join_prefetch_inner</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_max_workers_number</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>polar_px_ignore_function</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>polar_px_function_oid_array</name></type> <name>px_function_oid_array</name></decl>;</decl_stmt>

<comment type="block">/* Prepare statement, plpgsql function, procedure, csn */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_plan_cache</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_plpgsql</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_procedure</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_prepare_statement</name></decl>;</decl_stmt>

<comment type="block">/* check csn */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_check_csn</name></decl>;</decl_stmt>

<comment type="block">/* Security */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_reject_internal_tcp_conn</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* GUCs for slice table*/</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_max_slices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type>		<name>px_execute_pruned_plan</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* The number of blocks to scan table */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>px_scan_unit_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_scan_unit_bit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Default true. sysattr_len will include PxWorkerIdAttributeNumber */</comment>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_interconnect_udpic_network_enable_ipv6</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_dispatch_async</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_udp_testmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_tcp_testmode</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_remove_redundant_results</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_btbuild</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_btbuild_cic_phase2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> 		<name>px_btbuild_batch_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_btbuild_mem_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>px_btbuild_queue_size</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_cte_shared_scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_tableless_scan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_pre_optimizer_check</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_sethintbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> 		<name>px_allow_strat_seqscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_allow_strat_bitmapscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_allow_sync_seqscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_allow_sync_bitmapscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_allow_pagemode_seqscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_allow_pagemode_bitmapscan</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_left_index_nestloop_join</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>px_enable_result_hash_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type>			<name>px_wait_lock_timeout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* POLAR */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>px_check_polar_cluster_map</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>px_check_polar_px_nodes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>px_assign_polar_px_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>px_check_dispatch_log_stats</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>show_polar_cluster_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>px_check_scan_unit_size</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>px_show_scan_unit_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>px_check_ignore_function</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>px_guc_array_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>px_interconnect_types</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"udpifc"</literal></expr>, <expr><name>INTERCONNECT_TYPE_UDPIFC</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"tcp"</literal></expr>, <expr><name>INTERCONNECT_TYPE_TCP</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>px_interconnect_fc_methods</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"loss"</literal></expr>, <expr><name>INTERCONNECT_FC_METHOD_LOSS</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"capacity"</literal></expr>, <expr><name>INTERCONNECT_FC_METHOD_CAPACITY</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>px_log_verbosity</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"terse"</literal></expr>, <expr><name>PXVARS_VERBOSITY_TERSE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"off"</literal></expr>, <expr><name>PXVARS_VERBOSITY_OFF</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><name>PXVARS_VERBOSITY_VERBOSE</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"debug"</literal></expr>, <expr><name>PXVARS_VERBOSITY_DEBUG</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>px_optimizer_cost_model_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"calibrated"</literal></expr>, <expr><name>OPTIMIZER_GPDB_CALIBRATED</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"polardb"</literal></expr>, <expr><name>OPTIMIZER_POLARDB</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>px_optimizer_join_order_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"query"</literal></expr>, <expr><name>JOIN_ORDER_IN_QUERY</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"greedy"</literal></expr>, <expr><name>JOIN_ORDER_GREEDY_SEARCH</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"exhaustive"</literal></expr>, <expr><name>JOIN_ORDER_EXHAUSTIVE_SEARCH</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"exhaustive2"</literal></expr>, <expr><name>JOIN_ORDER_EXHAUSTIVE2_SEARCH</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>px_optimizer_log_failure_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"all"</literal></expr>, <expr><name>OPTIMIZER_ALL_FAIL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"unexpected"</literal></expr>, <expr><name>OPTIMIZER_UNEXPECTED_FAIL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"expected"</literal></expr>, <expr><name>OPTIMIZER_EXPECTED_FAIL</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>optimizer_minidump_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"onerror"</literal></expr>, <expr><name>OPTIMIZER_MINIDUMP_FAIL</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"always"</literal></expr>, <expr><name>OPTIMIZER_MINIDUMP_ALWAYS</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>config_bool</name></name></type> <name><name>ConfigureNamesBool_px</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_enable_px"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable polar_enable_px."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>polar_enable_px</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_executor"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable px_enable_executor."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_executor</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_full_crc"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sanity check incoming data stream."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_full_crc</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_log_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Emit statistics from the UDP-IC at the end of every statement."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_log_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_cache_future_packets"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Control whether future packets are cached."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name>  <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr> 
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_cache_future_packets</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_enable_aggressive_retry"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable application-level fast-track interconnect retries"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_aggressive_retry</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_log"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log optimizer messages."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>,
		 <expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_log</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_trace_fallback"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print a message at INFO level, whenever PXOPT falls back."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_trace_fallback</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_partition_selection_log"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log optimizer partition selection."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_partition_selection_log</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_query"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints the optimizer's input query expression tree."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_query</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_plan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints the plan expression tree produced by the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_plan</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_xform"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prints optimizer transformation information."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_xform</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_metadata_caching"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables the optimizer to cache and reuse metadata."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_metadata_caching</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_missing_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print columns with missing statistics."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_missing_stats</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_xform_results"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print the input and output of optimizer transformations."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_xform_results</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_memo_after_exploration"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print optimizer memo structure after the exploration phase."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_memo_after_exploration</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_memo_after_implementation"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print optimizer memo structure after the implementation phase."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_memo_after_implementation</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_memo_after_optimization"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print optimizer memo structure after optimization."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_memo_after_optimization</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_job_scheduler"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print the jobs in the scheduler on each job completion."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_job_scheduler</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_expression_properties"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print expression properties."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_expression_properties</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_group_properties"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print group properties."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_group_properties</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_optimization_context"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print the optimization context."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_optimization_context</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_optimization_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print optimization stats."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_optimization_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_memo_enforcement"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print memo enforcement."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_memo_enforcement</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_required_columns"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print required columns."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_required_columns</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_print_equiv_distr_specs"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print equiv distr specs."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_print_equiv_distr_specs</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_extract_dxl_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Extract plan stats in dxl."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_extract_dxl_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_extract_dxl_stats_all_nodes"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Extract plan stats for all physical dxl nodes."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_extract_dxl_stats_all_nodes</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_dpe_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable statistics derivation for partitioned tables with dynamic partition elimination."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_dpe_stats</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_indexjoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable index nested loops join plans in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_indexjoin</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_motions_masteronly_queries"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion operators in the optimizer for queries with no distributed tables."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_motions_masteronly_queries</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_motions"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_motions</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_motion_broadcast"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion Broadcast operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_motion_broadcast</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_motion_gather"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion Gather operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_motion_gather</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_motion_redistribute"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Motion Redistribute operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_motion_redistribute</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_sort"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Sort operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_sort</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_materialize"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Materialize operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_materialize</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_partition_propagation"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Partition Propagation operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_partition_propagation</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_partition_selection"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with Partition Selection operators in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_partition_selection</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_outerjoin_rewrite"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable outer join to inner join rewrite in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_outerjoin_rewrite</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_direct_dispatch"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable direct dispatch in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_direct_dispatch</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_space_pruning"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable space pruning in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_space_pruning</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_master_only_queries"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Process master only queries via the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_master_only_queries</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_hashjoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's use of hash join plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_hashjoin</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_dynamictablescan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's use of plans with dynamic table scan."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_dynamictablescan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_dynamicindexscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's use of plans with dynamic index scan."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_dynamicindexscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_hashagg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables PolarDB Parallel Optimizer to use hash aggregates."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_hashagg</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_groupagg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables PolarDB Parallel Optimizer to use group aggregates."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_groupagg</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_force_agg_skew_avoidance"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Always pick a plan for aggregate distinct that minimizes skew."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_force_agg_skew_avoidance</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_penalize_skew"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Penalize operators with skewed hash redistribute below it."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_penalize_skew</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_multilevel_partitioning"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable optimization of queries on multilevel partitioned tables."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_multilevel_partitioning</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_derive_stats_all_groups"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable stats derivation for all groups after exploration."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_derive_stats_all_groups</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_force_multistage_agg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Force optimizer to always pick multistage aggregates when such a plan alternative is generated."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_force_multistage_agg</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_multiple_distinct_aggs"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with multiple distinct aggregates in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_multiple_distinct_aggs</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_force_expanded_distinct_aggs"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Always pick plans that expand multiple distinct aggregates into join of single distinct aggregate in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_force_expanded_distinct_aggs</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_prune_computed_columns"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prune unused computed columns when pre-processing query"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_prune_computed_columns</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_push_requirements_from_consumer_to_producer"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Optimize CTE producer plan on requirements enforced on top of CTE consumer in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_push_requirements_from_consumer_to_producer</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_seqscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of sequential-scan plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_seqscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_seqsharescan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of sequential-share-scan plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_seqsharescan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,	
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_indexscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of index-scan plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_indexscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_shareindexscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of share index scan plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_shareindexscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_dynamicshareindexscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of partition share index scan plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_dynamicshareindexscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_indexonlyscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of indexonly-scan plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_indexonlyscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_brinscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of brin index-scan plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_brinscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_bitmapscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the planner's use of bitmap-scan plans."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_bitmapscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_hashjoin_redistribute_broadcast_children"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable hash join plans with, Redistribute outer child and Broadcast inner child, in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_hashjoin_redistribute_broadcast_children</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_broadcast_nestloop_outer_child"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable nested loops join plans with replicated outer child in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_broadcast_nestloop_outer_child</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_expand_fulljoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's support of expanding full outer joins using union all."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_expand_fulljoin</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_mergejoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's support of merge joins."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_mergejoin</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_streaming_material"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plans with a streaming material node in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_streaming_material</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_gather_on_segment_for_dml"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable DML optimization by enforcing a non-master gather in the optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_gather_on_segment_for_dml</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enforce_subplans"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enforce correlated execution in the optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enforce_subplans</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_assert_maxonerow"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable Assert MaxOneRow plans to check number of rows at runtime."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_assert_maxonerow</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enumerate_plans"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plan enumeration"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enumerate_plans</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_sample_plans"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plan sampling"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_sample_plans</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_cte_inlining"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable CTE inlining"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_cte_inlining</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,


	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_constant_expression_evaluation"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable constant expression evaluation in the optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_constant_expression_evaluation</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_use_external_constant_expression_evaluation_for_ints"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Use external constant expression evaluation in the optimizer for all integer types"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_use_external_constant_expression_evaluation_for_ints</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_outerjoin_to_unionall_rewrite"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable rewriting Left Outer Join to UnionAll"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_outerjoin_to_unionall_rewrite</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_apply_left_outer_to_union_all_disregarding_stats"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Always apply Left Outer Join to Inner Join UnionAll Left Anti Semi Join without looking at stats."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_apply_left_outer_to_union_all_disregarding_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_ctas"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable CTAS plans in the optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_ctas</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_remove_order_below_dml"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Remove OrderBy below a DML operation"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_remove_order_below_dml</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_dml"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable DML plans in PolarDB Parallel Optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_dml</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_dml_triggers"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Support DML with triggers."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_dml_triggers</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_dml_constraints"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Support DML with CHECK constraints and NOT NULL constraints."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_dml_constraints</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"coredump_on_memerror"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Generate core dump on memory error."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>,
		 <expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>coredump_on_memerror</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_relsize_collection"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables relsize collection when stats are not present. If disabled and stats are not present a default "</literal>
					  <literal type="string">"value is used."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_relsize_collection</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_parallel_union"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable parallel execution for UNION/UNION ALL queries."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_parallel_union</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_array_constraints"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allows the optimizer's constraint framework to derive array constraints."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_array_constraints</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_eageragg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable Eager Agg transform for pushing aggregate below an innerjoin."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_eageragg</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_is_writer"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>PX_WORKER_IDENTITY</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"True in a worker process which can directly update its local database segment."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>,
		 <expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_is_writer</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_execute_pruned_plan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prune plan to discard unwanted plan nodes for each slice before execution"</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>,
		 <expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_execute_pruned_plan</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_print"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable px print query string on px."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_print</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_join"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable px_enable_join."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_join</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_window_function"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable px window function."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_window_function</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_cte"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable px cte."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_cte</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_reject_internal_tcp_connection"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>,
			<expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Permit internal TCP connections to the master."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_reject_internal_tcp_conn</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_force_three_stage_scalar_dqa"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Force optimizer to always pick 3 stage aggregate plan for scalar distinct qualified aggregate."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_force_three_stage_scalar_dqa</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_subquery"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable px_enable_subquery."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_subquery</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_prune_unused_columns"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Prune unused table columns during query optimization."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_prune_unused_columns</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_associativity"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables Join Associativity in optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_associativity</name></expr>,
		<expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<comment type="block">/* POLAR */</comment>
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_check_workers"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable polar px workers for test"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_check_workers</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_info_debug"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable polar parallel query debug info"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_info_debug</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_debug_cancel_print"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Print cancel detail information."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_debug_cancel_print</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_log_dispatch_stats"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>STATS_MONITORING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Writes dispatcher performance statistics to the server log."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_log_dispatch_stats</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>px_check_dispatch_log_stats</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_replay_wait"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable polar PXs wait for replay wal"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr> 
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_replay_wait</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_transaction"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable Polar Parallel Execution in transaction"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr> 
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_transaction</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_plan_cache"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plan cache when using Polar parallel execution"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr> 
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_plan_cache</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_sort_distinct"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable sort distinct when using Polar parallel execution"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr> 
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_sort_distinct</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_join_prefetch_inner"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable join do prefetch inner child to avoid dead lock"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_join_prefetch_inner</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_plpgsql"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
				<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable plpgsql function to use parallel execution"</literal></expr></argument>)</argument_list></call></expr>,
				<expr><name>NULL</name></expr>,
				<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_plpgsql</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_procedure"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
				<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable procedure to use parallel execution"</literal></expr></argument>)</argument_list></call></expr>,
				<expr><name>NULL</name></expr>,
				<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_plpgsql</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_prepare_statement"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
				<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable prepare statment to use parallel execution"</literal></expr></argument>)</argument_list></call></expr>,
				<expr><name>NULL</name></expr>,
				<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_prepare_statement</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_udpic_enable_ipv6"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"enable udpic ipv6"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_udpic_network_enable_ipv6</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_dispatch_async"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"enable dispatch async mode"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_dispatch_async</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_udp_testmode"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable or disable px_enable_udp_testmode"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_udp_testmode</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_tcp_testmode"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable or disable px_enable_tcp_testmode"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_tcp_testmode</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_check_csn"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 	<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable or disable check csn"</literal></expr></argument>)</argument_list></call></expr>,
		 	<expr><name>NULL</name></expr>,
		 	<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_check_csn</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_nestloopjoin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's support of nestloop joins."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_nestloopjoin</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_lasj_notin"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's support of left anti semi join not in."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_lasj_notin</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_enable_crossproduct"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the optimizer's support of left anti semi join."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_enable_crossproduct</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_use_px_allocators"</literal></expr>, <expr><name>PGC_POSTMASTER</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable px_optimizer_use_px_allocators."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_use_px_allocators</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_remove_redundant_results"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Remove redundant results in plan."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_remove_redundant_results</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_test_print_direct_dispatch_info"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"For testing purposes, print information about direct dispatch decisions."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_test_print_direct_dispatch_info</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_sethintbits"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow to set hintbit in PX query"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NO_RESET_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_sethintbits</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_btbuild"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Polar PX enable btree build"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_btbuild</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_cte_shared_scan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"polar enable cte shared scan"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_cte_shared_scan</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_adps"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable dynamic seqscan"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_adaptive_scan</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_adps_explain_analyze"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enable dynamic seqscan explain analyze details"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_adps_explain_analyze</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_partition"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"polar px partition support"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_partition</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_partition_hash"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"polar px partition support"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_partition_hash</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_relsize_collection"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc enables relsize collection when stats are not present. If disabled and stats are not present a default "</literal>
					     <literal type="string">"value is used."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_relsize_collection</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_tableless_scan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"polar enable tableless scan"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_tableless_scan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_allow_strat_seqscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows strat when heap seqscan in PX."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_allow_strat_seqscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_pre_optimizer_check"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"polar enable pre optimizer check"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_pre_optimizer_check</name></expr>,
		<expr><name>true</name></expr>,
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_btbuild_cic_phase2"</literal></expr>, <expr><name>PGC_SIGHUP</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Polar PX enable btree build for cic phase2"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_btbuild_cic_phase2</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_partitionwise_join"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows partition wise join in PX."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_partitionwise_join</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_allow_strat_bitmapscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows strat when heap bitmapscan in PX."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_allow_strat_bitmapscan</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_allow_sync_seqscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows sync when heap seqscan in PX."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_allow_sync_seqscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_allow_sync_bitmapscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows sync when heap bitmapscan in PX."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_allow_sync_bitmapscan</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_allow_pagemode_seqscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows pagemode when heap bitmapscan in PX."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_allow_pagemode_seqscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_allow_pagemode_bitmapscan"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows pagemode when heap bitmapscan in PX."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_allow_pagemode_bitmapscan</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_left_index_nestloop_join"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows px support left outer index nestloop join."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_left_index_nestloop_join</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_result_hash_filter"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows px support hash filter in result"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_result_hash_filter</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_insert_select"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows Insert....select on px."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_insert_select</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_insert_partition_table"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows Insert partition table select on px."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_insert_partition_table</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_insert_from_tableless"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows insert ... from tableless on px."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_insert_from_tableless</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_opfamily_for_distribution"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow to use pg_opfamily for hash redistribute."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_opfamily_for_distribution</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_spi_read_all_namespaces"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allow px workers to read all tables in SPI."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_spi_read_all_namespaces</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_insert_order_sensitive"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows parallel insert need ordered."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_insert_order_sensitive</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_update"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows parallel update."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_update</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_remove_update_redundant_motion"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc remove update redundant motion when update_dop_num == "</literal>
							<literal type="string">"read_dop_num."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_remove_update_redundant_motion</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_delete"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc allows parallel delete."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_delete</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_enable_remove_delete_redundant_motion"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc remove delete redundant motion when delete_dop_num == "</literal>
							<literal type="string">"read_dop_num."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_enable_remove_delete_redundant_motion</name></expr>,
		<expr><name>false</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_remove_superfluous_order"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This guc remove superfluous order"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_remove_superfluous_order</name></expr>,
		<expr><name>true</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<comment type="block">/* End-of-list marker */</comment>
	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>config_real</name></name></type> <name><name>ConfigureNamesReal_px</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_motion_cost_per_row"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_COST</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the planner's estimate of the cost of "</literal>
						 <literal type="string">"moving a row between worker processes."</literal></expr></argument>)</argument_list></call></expr>,
			<macro><name>gettext_noop</name><argument_list>(<argument><literal type="string">"If &gt;0, the planner uses this value -- instead of double the "</literal>
					<literal type="string">"cpu_tuple_cost -- for Motion operator cost estimation."</literal></argument>)</argument_list></macro>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_motion_cost_per_row</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_selectivity_damping_factor"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Factor used in selectivity damping."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Values 1..N, 1 = basic damping, greater values emphasize damping"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_selectivity_damping_factor</name></expr>,
		<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_damping_factor_filter"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"select predicate damping factor in optimizer, 1.0 means no damping"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_damping_factor_filter</name></expr>,
		<expr><literal type="number">0.75</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_damping_factor_join"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"join predicate damping factor in optimizer, 1.0 means no damping"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_damping_factor_join</name></expr>,
		<expr><literal type="number">0.01</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_damping_factor_groupby"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"groupby operator damping factor in optimizer, 1.0 means no damping"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_damping_factor_groupby</name></expr>,
		<expr><literal type="number">0.75</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_cost_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the threshold for plan sampling relative to the cost of best plan, 0.0 means unbounded"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_cost_threshold</name></expr>,
		<expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_nestloop_factor"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the nestloop join cost factor in the optimizer"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_nestloop_factor</name></expr>,
		<expr><literal type="number">1024.0</literal></expr>, <expr><literal type="number">1.0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_sort_factor"</literal></expr>,<expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the sort cost factor in the optimizer, 1.0 means same as default, &gt; 1.0 means more costly than default, &lt; 1.0 means means less costly than default"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_sort_factor</name></expr>,
		<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_share_tablescan_factor"</literal></expr>,<expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the table sharescan cost factor in the optimizer, 1.0 means same as default, &gt; 1.0 means more costly than default, &lt; 1.0 means means less costly than default"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_share_tablescan_factor</name></expr>,
		<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_share_indexscan_factor"</literal></expr>,<expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the share indexscan cost factor in the optimizer, 1.0 means same as default, &gt; 1.0 means more costly than default, &lt; 1.0 means means less costly than default"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_share_indexscan_factor</name></expr>,
		<expr><literal type="number">1.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>DBL_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,


	<comment type="block">/* End-of-list marker */</comment>
	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><literal type="number">0.0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>config_int</name></name></type> <name><name>ConfigureNamesInt_px</name><index>[]</index></name> <init>=
<expr><block>{

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_max_slices"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PRESET_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum slices for a single query"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_max_slices</name></expr>,
		<expr><literal type="number">50</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_qc_port"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>PX_WORKER_IDENTITY</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shows the Master Postmaster port."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"0 for a session's entry process (qDisp)"</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_qc_port</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_session_id"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>CLIENT_CONN_OTHER</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Global ID used to uniquely identify a particular session in an Greenplum Database array"</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>,
		 <expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_session_id</name></expr>,
		<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_dop_per_node"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The degree of parallelism per dbid."</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_dop_per_node</name></expr>,
		<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">128</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_cached_px_workers"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of px workers to cache between statements."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_cached_px_workers</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_worker_connect_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum time (in seconds) allowed for a new worker process to start or a mirror to respond."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"0 indicates 'wait forever'."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_worker_connect_timeout</name></expr>,
		<expr><literal type="number">180</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_max_packet_size"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the max packet size for the Interconnect."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_max_packet_size</name></expr>,
		<expr><name>DEFAULT_PACKET_SIZE</name></expr>, <expr><name>MIN_PACKET_SIZE</name></expr>, <expr><name>MAX_PACKET_SIZE</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_queue_depth"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum size of the receive queue for each connection in the UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		 	<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_queue_depth</name></expr>,
		<expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_snd_queue_depth"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum size of the send queue for each connection in the UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		 	<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_snd_queue_depth</name></expr>,
		<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_timer_period"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the timer period (in ms) for UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		 	<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_timer_period</name></expr>,
		<expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_timer_checking_period"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the timer checking period (in ms) for UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		 	<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_timer_checking_period</name></expr>,
		<expr><literal type="number">20</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_default_rtt"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the default rtt (in ms) for UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		 	<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_default_rtt</name></expr>,
		<expr><literal type="number">20</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_min_rto"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the min rto (in ms) for UDP interconnect"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		 	<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_min_rto</name></expr>,
		<expr><literal type="number">20</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1000</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_transmit_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Timeout (in seconds) on interconnect to transmit a packet"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by Interconnect to timeout packet transmission."</literal></expr></argument>)</argument_list></call></expr>,
		 	<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_transmit_timeout</name></expr>,
		<expr><literal type="number">3600</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">7200</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_min_retries_before_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the min retries before reporting a transmit timeout in the interconnect."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
		 	<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_min_retries_before_timeout</name></expr>,
		<expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_debug_retry_interval"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the interval by retry times to record a debug message for retry."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_debug_retry_interval</name></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4096</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_udp_bufsize_k"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets recv buf size of UDP interconnect, for testing."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_udp_bufsize_k</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">32768</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_udpic_dropseg"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Specifies a segment to which the dropacks, and dropxmit settings will be applied, for testing. (The default is to apply the dropacks and dropxmit settings to all segments)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_udpic_dropseg</name></expr>,
		<expr><name>UNDEF_SEGMENT</name></expr>, <expr><name>UNDEF_SEGMENT</name></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_udpic_dropacks_percent"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the percentage of correctly-received acknowledgment packets to synthetically drop, for testing. (affected by px_interconnect_udpic_dropseg)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_udpic_dropacks_percent</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_udpic_dropxmit_percent"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the percentage of correctly-received data packets to synthetically drop, for testing. (affected by px_interconnect_udpic_dropseg)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_udpic_dropxmit_percent</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_udpic_fault_inject_percent"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the percentage of fault injected into system calls, for testing. (affected by px_interconnect_udpic_dropseg)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_udpic_fault_inject_percent</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_udpic_fault_inject_bitmap"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the bitmap for faults injection, for testing. (affected by px_interconnect_udpic_dropseg)"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_udpic_fault_inject_bitmap</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_setup_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Timeout (in seconds) on interconnect setup that occurs at query start"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Used by Interconnect to timeout the setup of the communication fabric."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_UNIT_S</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>interconnect_setup_timeout</name></expr>,
		<expr><literal type="number">7200</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">7200</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_tcp_listener_backlog"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Size of the listening queue for each TCP interconnect socket"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Cooperate with kernel parameter net.core.somaxconn and net.ipv4.tcp_max_syn_backlog to tune network performance."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_tcp_listener_backlog</name></expr>,
		<expr><literal type="number">128</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65535</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_plan_id"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Choose a plan alternative"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_plan_id</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_samples_number"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the number of plan samples"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_samples_number</name></expr>,
		<expr><literal type="number">1000</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_cte_inlining_bound"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the CTE inlining cutoff"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_cte_inlining_bound</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_segments"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Number of segments to be considered by the optimizer during costing, or 0 to take the actual number of segments."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_segments</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_array_expansion_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Item limit for expansion of arrays in WHERE clause for constraint derivation."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_array_expansion_threshold</name></expr>,
		<expr><literal type="number">100</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_push_group_by_below_setop_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of children setops have to consider pushing group bys below it"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_push_group_by_below_setop_threshold</name></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_join_order_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of join children to use dynamic programming based join ordering algorithm."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_join_order_threshold</name></expr>,
		<expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">12</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_join_arity_for_associativity_commutativity"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of children n-ary-join have without disabling commutativity and associativity transform"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_join_arity_for_associativity_commutativity</name></expr>,
		<expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_penalize_broadcast_threshold"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Maximum number of rows of a relation that can be broadcasted without penalty."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_penalize_broadcast_threshold</name></expr>,
		<expr><literal type="number">100000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_mdcache_size"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the size of MDCache."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_mdcache_size</name></expr>,
		<expr><literal type="number">16384</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_max_workers_number"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the max number of px workers"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_max_workers_number</name></expr>,
		<expr><literal type="number">30</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1024</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_scan_unit_size"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets size of scan unit when using Parallel Execution"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_BLOCKS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_scan_unit_size</name></expr>,
		<expr><literal type="number">512</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1024</literal></expr>,
		<expr><name>px_check_scan_unit_size</name></expr>, <expr><name>NULL</name></expr>, <expr><name>px_show_scan_unit_size</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_max_plan_size"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>RESOURCES_MEM</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum size of a plan to be dispatched."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_KB</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_max_plan_size</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_KILOBYTES</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_btbuild_batch_size"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the batch of a px btbuild index tuples batch."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_btbuild_batch_size</name></expr>,
		<expr><literal type="number">512</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_btbuild_mem_size"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the mem size of a px btbuild index tuples batch."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_btbuild_mem_size</name></expr>,
		<expr><literal type="number">512</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_btbuild_queue_size"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the size of px btbuild index queue."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_btbuild_queue_size</name></expr>,
		<expr><literal type="number">1024</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_wait_lock_timeout"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOCK_MANAGEMENT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum time to wait on a lock held by PX process."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_UNIT_MS</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_wait_lock_timeout</name></expr>,
		<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_insert_dop_num"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the num of px insert dop."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_insert_dop_num</name></expr>,
		<expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">128</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_update_dop_num"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the num of px update dop."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_update_dop_num</name></expr>,
		<expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">128</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_delete_dop_num"</literal></expr>,<expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the num of px delete dop."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_delete_dop_num</name></expr>,
		<expr><literal type="number">6</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">128</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	<comment type="block">/* End-of-list marker */</comment>
	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>config_string</name></name></type> <name><name>ConfigureNamesString_px</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_qc_hostname"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>PX_WORKER_IDENTITY</name></expr>,
		 <expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shows the QC Hostname. Blank when run on the QC"</literal></expr></argument>)</argument_list></call></expr>,
		 <expr><name>NULL</name></expr>,
		 <expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_qc_hostname</name></expr>,
		<expr><literal type="string">""</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_cluster_map"</literal></expr>, <expr><name>PGC_SUSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"polar_cluster_map"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_RESET_ALL</name></expr>, <expr><name>GUC_NO_SHOW_ALL</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>polar_cluster_map</name></expr>,
		<expr><literal type="string">""</literal></expr>,
		<expr><name>px_check_polar_cluster_map</name></expr>, <expr><name>NULL</name></expr>, <expr><name>show_polar_cluster_map</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_nodes"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets px worker nodes, separated by comma"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_LIST_INPUT</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>polar_px_nodes</name></expr>,
		<expr><literal type="string">""</literal></expr>,
		<expr><name>px_check_polar_px_nodes</name></expr>, <expr><name>px_assign_polar_px_nodes</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_search_strategy_path"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_METHOD</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the search strategy used by gp optimizer."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_search_strategy_path</name></expr>,
		<expr><literal type="string">"default"</literal></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_version"</literal></expr>, <expr><name>PGC_INTERNAL</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Show the PolarDB PX version."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>polar_px_version</name></expr>,
		<expr><name>PX_VERSION_STR</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_ignore_function"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>UNGROUPED</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Add the PolarDB PX functions oids that should be ignored."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>NULL</name></expr>,
			<expr><name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_DISALLOW_IN_FILE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>polar_px_ignore_function</name></expr>,
		<expr><literal type="string">"1574,1575,1576,1765,3078,4032"</literal></expr>,
		<expr><name>px_check_ignore_function</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<comment type="block">/* End-of-list marker */</comment>
	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>struct</name> <name>config_enum</name></name></type> <name><name>ConfigureNamesEnum_px</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_type"</literal></expr>, <expr><name>PGC_BACKEND</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the protocol used for inter-node communication."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are \"tcp\" and \"udpifc\"."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_type</name></expr>,
		<expr><name>INTERCONNECT_TYPE_UDPIFC</name></expr>, <expr><name>px_interconnect_types</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_fc_method"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>PX_ARRAY_TUNING</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the flow control method used for UDP interconnect."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are \"capacity\" and \"loss\"."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_fc_method</name></expr>,
		<expr><name>INTERCONNECT_FC_METHOD_LOSS</name></expr>, <expr><name>px_interconnect_fc_methods</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_interconnect_log"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHAT</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the verbosity of logged messages pertaining to connections between worker processes."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are \"off\", \"terse\", \"verbose\" and \"debug\"."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_interconnect_log</name></expr>,
		<expr><name>PXVARS_VERBOSITY_TERSE</name></expr>, <expr><name>px_log_verbosity</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,
	
	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_cost_model"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>DEVELOPER_OPTIONS</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set optimizer cost model."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are calibrated, polardb"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_cost_model</name></expr>,
		<expr><name>OPTIMIZER_GPDB_CALIBRATED</name></expr>, <expr><name>px_optimizer_cost_model_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,	

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_join_order"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>QUERY_TUNING_OTHER</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set optimizer join heuristic model."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are query, greedy, exhaustive and exhaustive2"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_join_order</name></expr>,
		<expr><name>JOIN_ORDER_EXHAUSTIVE_SEARCH</name></expr>, <expr><name>px_optimizer_join_order_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_minidump"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHEN</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Generate optimizer minidump."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are onerror, always"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_minidump</name></expr>,
		<expr><name>OPTIMIZER_MINIDUMP_FAIL</name></expr>, <expr><name>optimizer_minidump_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><literal type="string">"polar_px_optimizer_log_failure"</literal></expr>, <expr><name>PGC_USERSET</name></expr>, <expr><name>LOGGING_WHEN</name></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets which optimizer failures are logged."</literal></expr></argument>)</argument_list></call></expr>,
			<expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Valid values are unexpected, expected, all"</literal></expr></argument>)</argument_list></call></expr>,
			<expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_NOT_IN_SAMPLE</name></expr>
		}</block></expr>,
		<expr><operator>&amp;</operator><name>px_optimizer_log_failure</name></expr>,
		<expr><name>OPTIMIZER_UNEXPECTED_FAIL</name></expr>, <expr><name>px_optimizer_log_failure_options</name></expr>,
		<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>,

	<expr><block>{
		<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>}</block></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>
	}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>px_check_dispatch_log_stats</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>log_parser_stats</name> <operator>||</operator> <name>log_planner_stats</name> <operator>||</operator> <name>log_executor_stats</name> <operator>||</operator> <name>log_statement_stats</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>source</name> <operator>&gt;=</operator> <name>PGC_S_INTERACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot enable \"log_dispatch_stats\" when "</literal>
							<literal type="string">"\"log_statement_stats\", "</literal>
							<literal type="string">"\"log_parser_stats\", \"log_planner_stats\", "</literal>
							<literal type="string">"or \"log_executor_stats\" is true"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<comment type="block">/* source == PGC_S_OVERRIDE means do it anyway, eg at xact abort */</comment>
		<if type="elseif">else if <condition>(<expr><name>source</name> <operator>!=</operator> <name>PGC_S_OVERRIDE</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type>
<name>px_verify_polar_cluster_map_syntax</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>liststring</name></decl></parameter>, <parameter><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>ret_config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rawname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>namelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>config_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>success</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>liststring</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>liststring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Need a modifiable copy of string */</comment>
	<expr_stmt><expr><name>rawname</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>liststring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>rawname</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>out_1</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Parse string into list of identifiers */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SplitIdentifierString</name><argument_list>(<argument><expr><name>rawname</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelist</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* syntax error in name list */</comment>
		<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"px cluster map is invalid, name|ip|port, ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>out_1</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>config</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PxNodeConfigEntry</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>foreach_with_count</name><argument_list>(<argument>lc</argument>, <argument>namelist</argument>, <argument>config_len</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>itemlist</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>itemlc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>rawname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>itemname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ip</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>port</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cport</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>rawname</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>itemname</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>rawname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SplitIdentifierString</name><argument_list>(<argument><expr><name>itemname</name></expr></argument>, <argument><expr><literal type="char">'|'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>itemlist</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* syntax error in name list */</comment>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"px cluster map is invalid %s, name|ip|port, ..."</literal></expr></argument>, <argument><expr><name>rawname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<goto>goto <name>out_2</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>itemlist</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"px cluster map is invalid %s, name|ip|port, ..."</literal></expr></argument>, <argument><expr><name>rawname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<goto>goto <name>out_2</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<macro><name>foreach</name><argument_list>(<argument>itemlc</argument>, <argument>itemlist</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>itemlc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"px cluster map is invalid %s, name|ip|port, ..."</literal></expr></argument>, <argument><expr><name>rawname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<goto>goto <name>out_2</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<expr_stmt><expr><name>name</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name>itemlist</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ip</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name>itemlist</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>port</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>list_nth</name><argument_list>(<argument><expr><name>itemlist</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cport</name> <operator>=</operator> <call><name>pg_atoi</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>cport</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"px cluster map is invalid %s, name|ip|port, ..."</literal></expr></argument>, <argument><expr><name>rawname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<goto>goto <name>out_2</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>config_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>config</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>cport</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hostip</name></name></expr></argument>, <argument><expr><name>ip</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"px cluster map ip:port is duplicate %s:%d"</literal></expr></argument>, <argument><expr><name>ip</name></expr></argument>, <argument><expr><name>cport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>success</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<goto>goto <name>out_2</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><name><name>config</name><index>[<expr><name>config_len</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name>cport</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hostip</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out_2</name>:</label>
		<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>itemlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>itemname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>out_1</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block>

<label><name>out_1</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>namelist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>rawname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rawname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>success</name> <operator>&amp;&amp;</operator> <name>ret_config</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>ret_config</name> <operator>=</operator> <name>config</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name>config</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>config_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>config</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>config</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hostip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><ternary><condition><expr><name>success</name></expr> ?</condition><then> <expr><name>config_len</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>px_check_polar_cluster_map</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>px_verify_polar_cluster_map_syntax</name><argument_list>(<argument><expr><operator>*</operator><name>newval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pxnode_destroyPxNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>px_check_polar_px_nodes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>liststring</name> <init>= <expr><operator>*</operator><name>newval</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rawname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>namelist</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PxNodeConfigEntry</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>config_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>	<modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>liststring</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>liststring</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pxnode_destroyPxNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>config_len</name> <operator>=</operator> <call><name>px_verify_polar_cluster_map_syntax</name><argument_list>(<argument><expr><name>polar_cluster_map</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>config_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"polar_cluster_map is invalid %s"</literal></expr></argument>, <argument><expr><name>polar_cluster_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>out</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>rawname</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>liststring</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SplitIdentifierString</name><argument_list>(<argument><expr><name>rawname</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>namelist</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"polar_px_nodes is invalid, str1|str2, ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>out</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>namelist</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nodename</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>config_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>config</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>config_len</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"polar_px_nodes %s not int polar_cluster_map"</literal></expr></argument>, <argument><expr><name>nodename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<goto>goto <name>out</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

<label><name>out</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>namelist</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>list_free</name><argument_list>(<argument><expr><name>namelist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>rawname</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>rawname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>config</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>config_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>config</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>config</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hostip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pxnode_destroyPxNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* POLAR: reset won't trigger check_hook, do this in assign_hook */</comment>
<function><type><name>void</name></type>
<name>px_assign_polar_px_nodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>newval</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pxnode_destroyPxNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>show_polar_cluster_map</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>polar_cluster_map</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <call><name>superuser</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>polar_cluster_map</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>GeneratePxWorkerNames</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>px_check_scan_unit_size</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>newval</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>*</operator><name>newval</name> <operator>&amp;</operator> <operator>(</operator><operator>*</operator><name>newval</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"scan unit size in blocks, it should be power of 2, min size is 1 block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>*</operator><name>newval</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>px_scan_unit_bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>size</name> <operator>=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>px_scan_unit_bit</name> <operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type>
<name>px_show_scan_unit_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>nbuf</name><index>[<expr><literal type="number">120</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"scan_unit_size: %d, scan_unit_bit: %d"</literal></expr></argument>,
		<argument><expr><name>px_scan_unit_size</name></expr></argument>, <argument><expr><name>px_scan_unit_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>nbuf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>px_check_ignore_function</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>func_oid_list_copy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>px_function_oid_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>newval</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>px_function_oid_array</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>func_oid_list_copy</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><operator>*</operator><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SplitIdentifierString</name><argument_list>(<argument><expr><name>func_oid_list_copy</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>px_function_oid_list</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* syntax error in function oid list */</comment>
		<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"polar px ignore function list is invalid, func1,func2,func3, ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<goto>goto <name>out_result</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>px_function_oid_list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>oid</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>oid</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* syntax error in function oid list */</comment>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"polar px ignore function list is invalid, func1,func2,func3, ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<goto>goto <name>out_result</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>px_function_oid_array</name><operator>.</operator><name>array</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>oid</name></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><name><name>px_function_oid_array</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<label><name>out_result</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>func_oid_list_copy</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>func_oid_list_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>px_function_oid_array</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * For system defined GUC must assign a tag either GUC_PX_NEED_SYNC
 * or GUC_PX_NO_SYNC. We deprecated direct define in guc.c, instead,
 * add into sync_guc_names_array or unsync_guc_names_array.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>sync_guc_names_array</name><index>[]</index></name> <init>=
<expr><block>{
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/px_sync_guc_name.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>unsync_guc_names_array</name><index>[]</index></name> <init>=
<expr><block>{
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/px_unsync_guc_name.h"</cpp:file></cpp:include>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sync_guc_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>unsync_guc_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>px_guc_array_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>namea</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nameb</name> <init>= <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>guc_name_compare</name><argument_list>(<argument><expr><name>namea</name></expr></argument>, <argument><expr><name>nameb</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>px_assign_sync_flag</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>guc_variables</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>predefine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>init</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<comment type="block">/* ordering guc_name_array alphabets */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>sync_guc_num</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sync_guc_names_array</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sync_guc_names_array</name></expr></argument>, <argument><expr><name>sync_guc_num</name></expr></argument>,
		      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>px_guc_array_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>unsync_guc_num</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsync_guc_names_array</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>unsync_guc_names_array</name></expr></argument>, <argument><expr><name>unsync_guc_num</name></expr></argument>,
		      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>px_guc_array_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><name><name>guc_variables</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

		<comment type="block">/* if the sync flags is defined in guc variable, skip it */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>GUC_PX_NEED_SYNC</name> <operator>|</operator> <name>GUC_PX_NO_SYNC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* if the context is defined as internal postmaster sighup, skip it */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>context</name></name> <operator>&lt;=</operator> <name>PGC_SIGHUP</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
		                             <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>sync_guc_names_array</name></expr></argument>,
		                             <argument><expr><name>sync_guc_num</name></expr></argument>,
		                             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
		                             <argument><expr><name>px_guc_array_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>bsearch</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
			                             <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>unsync_guc_names_array</name></expr></argument>,
			                             <argument><expr><name>unsync_guc_num</name></expr></argument>,
			                             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>,
			                             <argument><expr><name>px_guc_array_compare</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/* for predefined guc, we force its name in one array.
			 * for the third-part libraries gucs introduced by customer
			 * we assign unsync flags as default.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name> <operator>&amp;&amp;</operator> <name>predefine</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Neither px_sync_guc_name.h nor "</literal>
							  <literal type="string">"px_unsync_guc_name.h contains "</literal>
							  <literal type="string">"guc name: %s"</literal></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GUC_PX_NO_SYNC</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>GUC_PX_NEED_SYNC</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
