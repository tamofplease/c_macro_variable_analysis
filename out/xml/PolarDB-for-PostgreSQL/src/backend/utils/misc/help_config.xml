<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/misc/help_config.c"><comment type="block">/*-------------------------------------------------------------------------
 * help_config.c
 *
 * Displays available options under grand unified configuration scheme
 *
 * Options whose flag bits are set to GUC_NO_SHOW_ALL, GUC_NOT_IN_SAMPLE,
 * or GUC_DISALLOW_IN_FILE are not displayed, unless the user specifically
 * requests that variable by name
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/utils/misc/help_config.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/help_config.h"</cpp:file></cpp:include>


<comment type="block">/*
 * This union allows us to mix the numerous different types of structs
 * that we are organizing.
 */</comment>
<typedef>typedef <type><union>union
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>config_generic</name></name></type> <name>generic</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>config_bool</name></name></type> <name>_bool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>config_real</name></name></type> <name>real</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>config_int</name></name></type> <name>integer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>config_string</name></name></type> <name>string</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>config_enum</name></name></type> <name>_enum</name></decl>;</decl_stmt>
}</block></union></type> <name>mixedStruct</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>printMixedStruct</name><parameter_list>(<parameter><decl><type><name>mixedStruct</name> <modifier>*</modifier></type><name>structToPrint</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>displayStruct</name><parameter_list>(<parameter><decl><type><name>mixedStruct</name> <modifier>*</modifier></type><name>structToDisplay</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>void</name></type>
<name>GucInfoMain</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>guc_vars</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>numOpts</name></decl>,
				<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<comment type="block">/* Initialize the guc_variables[] array */</comment>
	<expr_stmt><expr><call><name>build_guc_variables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>guc_vars</name> <operator>=</operator> <call><name>get_guc_variables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>numOpts</name> <operator>=</operator> <call><name>GetNumConfigOptions</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOpts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>mixedStruct</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>(</operator><name>mixedStruct</name> <operator>*</operator><operator>)</operator> <name><name>guc_vars</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>displayStruct</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printMixedStruct</name><argument_list>(<argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * This function will return true if the struct passed to it
 * should be displayed to the user.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>displayStruct</name><parameter_list>(<parameter><decl><type><name>mixedStruct</name> <modifier>*</modifier></type><name>structToDisplay</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>!</operator><operator>(</operator><name><name>structToDisplay</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>GUC_NO_SHOW_ALL</name> <operator>|</operator>
											   <name>GUC_NOT_IN_SAMPLE</name> <operator>|</operator>
											   <name>GUC_DISALLOW_IN_FILE</name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * This function prints out the generic struct passed to it. It will print out
 * a different format, depending on what the user wants to see.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>printMixedStruct</name><parameter_list>(<parameter><decl><type><name>mixedStruct</name> <modifier>*</modifier></type><name>structToPrint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\t%s\t%s\t"</literal></expr></argument>,
		   <argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>name</name></name></expr></argument>,
		   <argument><expr><name><name>GucContext_Names</name><index>[<expr><name><name>structToPrint</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>context</name></name></expr>]</index></name></expr></argument>,
		   <argument><expr><call><name>_</name><argument_list>(<argument><expr><name><name>config_group_names</name><index>[<expr><name><name>structToPrint</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>group</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>structToPrint</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>vartype</name></name></expr>)</condition>
	<block>{<block_content>

		<case>case <expr><name>PGC_BOOL</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"BOOLEAN\t%s\t\t\t"</literal></expr></argument>,
				   <argument><expr><ternary><condition><expr><operator>(</operator><name><name>structToPrint</name><operator>-&gt;</operator><name>_bool</name><operator>.</operator><name>reset_val</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>
				   <expr><literal type="string">"FALSE"</literal></expr> </then><else>: <expr><literal type="string">"TRUE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PGC_INT</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"INTEGER\t%d\t%d\t%d\t"</literal></expr></argument>,
				   <argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>integer</name><operator>.</operator><name>reset_val</name></name></expr></argument>,
				   <argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>integer</name><operator>.</operator><name>min</name></name></expr></argument>,
				   <argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>integer</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PGC_REAL</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"REAL\t%g\t%g\t%g\t"</literal></expr></argument>,
				   <argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>real</name><operator>.</operator><name>reset_val</name></name></expr></argument>,
				   <argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>real</name><operator>.</operator><name>min</name></name></expr></argument>,
				   <argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>real</name><operator>.</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PGC_STRING</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"STRING\t%s\t\t\t"</literal></expr></argument>,
				   <argument><expr><ternary><condition><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>boot_val</name></name></expr> ?</condition><then> <expr><name><name>structToPrint</name><operator>-&gt;</operator><name>string</name><operator>.</operator><name>boot_val</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>PGC_ENUM</name></expr>:</case>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ENUM\t%s\t\t\t"</literal></expr></argument>,
				   <argument><expr><call><name>config_enum_lookup_by_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>structToPrint</name><operator>-&gt;</operator><name>_enum</name></name></expr></argument>,
											   <argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>_enum</name><operator>.</operator><name>boot_val</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>

		<default>default:</default>
			<expr_stmt><expr><call><name>write_stderr</name><argument_list>(<argument><expr><literal type="string">"internal error: unrecognized run-time parameter type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\t%s\n"</literal></expr></argument>,
		   <argument><expr><ternary><condition><expr><operator>(</operator><name><name>structToPrint</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>short_desc</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>short_desc</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
		   <argument><expr><ternary><condition><expr><operator>(</operator><name><name>structToPrint</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>long_desc</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><name><name>structToPrint</name><operator>-&gt;</operator><name>generic</name><operator>.</operator><name>long_desc</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
