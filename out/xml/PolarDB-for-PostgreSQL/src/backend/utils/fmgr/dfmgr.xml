<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/fmgr/dfmgr.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dfmgr.c
 *	  Dynamic function manager code.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/utils/fmgr/dfmgr.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dynloader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/dynamic_loader.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>


<comment type="block">/* signatures for PostgreSQL-specific library init/fini functions */</comment>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>PG_init_t</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>PG_fini_t</name>) <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<comment type="block">/* hashtable entry for rendezvous variables */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>char</name></type>		<name><name>varName</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* hash key (must be first) */</comment>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>varValue</name></decl>;</decl_stmt>
}</block></struct></type> <name>rendezvousHashEntry</name>;</typedef>

<comment type="block">/*
 * List of dynamically loaded files (kept in malloc'd memory).
 */</comment>

<typedef>typedef <type><struct>struct <name>df_files</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>df_files</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>		<comment type="block">/* List link */</comment>
	<decl_stmt><decl><type><name>dev_t</name></type>		<name>device</name></decl>;</decl_stmt>			<comment type="block">/* Device file is on */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>					<comment type="block">/* ensures we never again depend on this under
								 * win32 */</comment>
	<decl_stmt><decl><type><name>ino_t</name></type>		<name>inode</name></decl>;</decl_stmt>			<comment type="block">/* Inode number of file */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>handle</name></decl>;</decl_stmt>			<comment type="block">/* a handle for pg_dl* functions */</comment>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>filename</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>	<comment type="block">/* Full pathname of file */</comment>
}</block></struct></type> <name>DynamicFileList</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>DynamicFileList</name> <modifier>*</modifier></type><name>file_list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>DynamicFileList</name> <modifier>*</modifier></type><name>file_tail</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* stat() call under Win32 returns an st_ino field, but it has no meaning */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAME_INODE</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((A).st_ino == (B).inode &amp;&amp; (A).st_dev == (B).device)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAME_INODE</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>false</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>Dynamic_library_path</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>internal_load_library</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>incompatible_module_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>,
						  <parameter><decl><type><specifier>const</specifier> <name>Pg_magic_struct</name> <modifier>*</modifier></type><name>module_magic_data</name></decl></parameter>)</parameter_list> pg_attribute_noreturn<parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>internal_unload_library</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>file_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>expand_dynamic_library_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>check_restricted_library_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>substitute_libpath_macro</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>find_in_dynamic_libpath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Magic structure that module needs to match to be accepted */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>Pg_magic_struct</name></type> <name>magic_data</name> <init>= <expr><name>PG_MODULE_MAGIC_DATA</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * Load the specified dynamic-link library file, and look for a function
 * named funcname in it.
 *
 * If the function is not found, we raise an error if signalNotFound is true,
 * else return (PGFunction) NULL.  Note that errors in loading the library
 * will provoke ereport() regardless of signalNotFound.
 *
 * If filehandle is not NULL, then *filehandle will be set to a handle
 * identifying the library file.  The filehandle can be used with
 * lookup_external_function to lookup additional functions in the same file
 * at less cost than repeating load_external_function.
 */</comment>
<function><type><name>PGFunction</name></type>
<name>load_external_function</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>,
					   <parameter><decl><type><name>bool</name></type> <name>signalNotFound</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>filehandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>lib_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGFunction</name></type>	<name>retval</name></decl>;</decl_stmt>

	<comment type="block">/* Expand the possibly-abbreviated filename to an exact path name */</comment>
	<expr_stmt><expr><name>fullname</name> <operator>=</operator> <call><name>expand_dynamic_library_name</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Load the shared library, unless we already did */</comment>
	<expr_stmt><expr><name>lib_handle</name> <operator>=</operator> <call><name>internal_load_library</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Return handle if caller wants it */</comment>
	<if_stmt><if>if <condition>(<expr><name>filehandle</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>filehandle</name> <operator>=</operator> <name>lib_handle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Look up the function within the library.  According to POSIX dlsym()
	 * should declare its second argument as "const char *", but older
	 * platforms might not, so for the time being we just cast away const.
	 */</comment>
	<expr_stmt><expr><name>retval</name> <operator>=</operator> <operator>(</operator><name>PGFunction</name><operator>)</operator> <call><name>pg_dlsym</name><argument_list>(<argument><expr><name>lib_handle</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>retval</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>signalNotFound</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_FUNCTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find function \"%s\" in file \"%s\""</literal></expr></argument>,
						<argument><expr><name>funcname</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>retval</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This function loads a shlib file without looking up any particular
 * function in it.  If the same shlib has previously been loaded,
 * unload and reload it.
 *
 * When 'restricted' is true, only libraries in the presumed-secure
 * directory $libdir/plugins may be referenced.
 */</comment>
<function><type><name>void</name></type>
<name>load_file</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>restricted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>fullname</name></decl>;</decl_stmt>

	<comment type="block">/* Apply security restriction if requested */</comment>
	<if_stmt><if>if <condition>(<expr><name>restricted</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_restricted_library_name</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Expand the possibly-abbreviated filename to an exact path name */</comment>
	<expr_stmt><expr><name>fullname</name> <operator>=</operator> <call><name>expand_dynamic_library_name</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Unload the library if currently loaded */</comment>
	<expr_stmt><expr><call><name>internal_unload_library</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Load the shared library */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>internal_load_library</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Lookup a function whose library file is already loaded.
 * Return (PGFunction) NULL if not found.
 */</comment>
<function><type><name>PGFunction</name></type>
<name>lookup_external_function</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>filehandle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* as above, cast away const for the time being */</comment>
	<return>return <expr><operator>(</operator><name>PGFunction</name><operator>)</operator> <call><name>pg_dlsym</name><argument_list>(<argument><expr><name>filehandle</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>funcname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Load the specified dynamic-link library file, unless it already is
 * loaded.  Return the pg_dl* handle for the file.
 *
 * Note: libname is expected to be an exact name for the library file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>internal_load_library</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DynamicFileList</name> <modifier>*</modifier></type><name>file_scanner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGModuleMagicFunction</name></type> <name>magic_func</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>load_error</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PG_init_t</name></type>	<name>PG_init</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Scan the list of loaded FILES to see if the file has been loaded.
	 */</comment>
	<for>for <control>(<init><expr><name>file_scanner</name> <operator>=</operator> <name>file_list</name></expr>;</init>
		 <condition><expr><name>file_scanner</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
		 <call><name>strcmp</name><argument_list>(<argument><expr><name>libname</name></expr></argument>, <argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition>
		 <incr><expr><name>file_scanner</name> <operator>=</operator> <name><name>file_scanner</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<empty_stmt>;</empty_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><name>file_scanner</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Check for same files - different paths (ie, symlink or link)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>libname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>error_level</name> <init>= <expr><name>ERROR</name></expr></init></decl>;</decl_stmt>
			
			<comment type="block">/* POLAR: don't ERROR for shared preload libraries */</comment>
			<if_stmt><if>if <condition>(<expr><name>process_shared_preload_libraries_in_progress</name> <operator>&amp;&amp;</operator>
				<name>polar_suppress_preload_error</name> <operator>&amp;&amp;</operator> <name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>error_level</name> <operator>=</operator> <name>WARNING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>error_level</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not access file \"%s\": %m"</literal></expr></argument>,
							<argument><expr><name>libname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<for>for <control>(<init><expr><name>file_scanner</name> <operator>=</operator> <name>file_list</name></expr>;</init>
			 <condition><expr><name>file_scanner</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			 <operator>!</operator><call><name>SAME_INODE</name><argument_list>(<argument><expr><name>stat_buf</name></expr></argument>, <argument><expr><operator>*</operator><name>file_scanner</name></expr></argument>)</argument_list></call></expr>;</condition>
			 <incr><expr><name>file_scanner</name> <operator>=</operator> <name><name>file_scanner</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
			<empty_stmt>;</empty_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>file_scanner</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * File not loaded yet.
		 */</comment>
		<expr_stmt><expr><name>file_scanner</name> <operator>=</operator> <operator>(</operator><name>DynamicFileList</name> <operator>*</operator><operator>)</operator>
			<call><name>malloc</name><argument_list>(<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DynamicFileList</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>libname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>file_scanner</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OUT_OF_MEMORY</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>file_scanner</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>DynamicFileList</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>libname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <name><name>stat_buf</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
		<expr_stmt><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name><name>stat_buf</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>pg_dlopen</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>load_error</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>pg_dlerror</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>file_scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* errcode_for_file_access might not be appropriate here? */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not load library \"%s\": %s"</literal></expr></argument>,
							<argument><expr><name>libname</name></expr></argument>, <argument><expr><name>load_error</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Check the magic function to determine compatibility */</comment>
		<expr_stmt><expr><name>magic_func</name> <operator>=</operator> <operator>(</operator><name>PGModuleMagicFunction</name><operator>)</operator>
			<call><name>pg_dlsym</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>PG_MAGIC_FUNCTION_NAME_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>magic_func</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>Pg_magic_struct</name> <modifier>*</modifier></type><name>magic_data_ptr</name> <init>= <expr><call>(<modifier>*</modifier><name>magic_func</name>) <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>magic_data_ptr</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <name><name>magic_data</name><operator>.</operator><name>len</name></name> <operator>||</operator>
				<call><name>memcmp</name><argument_list>(<argument><expr><name>magic_data_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>magic_data</name></expr></argument>, <argument><expr><name><name>magic_data</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* copy data block before unlinking library */</comment>
				<decl_stmt><decl><type><name>Pg_magic_struct</name></type> <name>module_magic_data</name> <init>= <expr><operator>*</operator><name>magic_data_ptr</name></expr></init></decl>;</decl_stmt>

				<comment type="block">/* try to unlink library */</comment>
				<expr_stmt><expr><call><name>pg_dlclose</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>file_scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* issue suitable complaint */</comment>
				<expr_stmt><expr><call><name>incompatible_module_error</name><argument_list>(<argument><expr><name>libname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>module_magic_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* try to unlink library */</comment>
			<expr_stmt><expr><call><name>pg_dlclose</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>file_scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* complain */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"incompatible library \"%s\": missing magic block"</literal></expr></argument>,
							<argument><expr><name>libname</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Extension libraries are required to use the PG_MODULE_MAGIC macro."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/*
		 * If the library has a _PG_init() function, call it.
		 */</comment>
		<expr_stmt><expr><name>PG_init</name> <operator>=</operator> <operator>(</operator><name>PG_init_t</name><operator>)</operator> <call><name>pg_dlsym</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"_PG_init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>PG_init</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call>(<modifier>*</modifier><name>PG_init</name>) <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* OK to link it into list */</comment>
		<if_stmt><if>if <condition>(<expr><name>file_list</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>file_list</name> <operator>=</operator> <name>file_scanner</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>file_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>file_scanner</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name>file_tail</name> <operator>=</operator> <name>file_scanner</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Report a suitable error for an incompatible magic block.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>incompatible_module_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>,
						  <parameter><decl><type><specifier>const</specifier> <name>Pg_magic_struct</name> <modifier>*</modifier></type><name>module_magic_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>details</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If the version doesn't match, just report that, because the rest of the
	 * block might not even have the fields we expect.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>magic_data</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name><name>module_magic_data</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name><name>library_version</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>library_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>library_version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>,
					 <argument><expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>version</name></name> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>library_version</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>library_version</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>,
					 <argument><expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>version</name></name> <operator>/</operator> <literal type="number">100</literal></expr></argument>,
					 <argument><expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>version</name></name> <operator>%</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"incompatible library \"%s\": version mismatch"</literal></expr></argument>,
						<argument><expr><name>libname</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Server is version %d, library is version %s."</literal></expr></argument>,
						   <argument><expr><name><name>magic_data</name><operator>.</operator><name>version</name></name> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><name>library_version</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Otherwise, spell out which fields don't agree.
	 *
	 * XXX this code has to be adjusted any time the set of fields in a magic
	 * block change!
	 */</comment>
	<expr_stmt><expr><call><name>initStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>funcmaxargs</name></name> <operator>!=</operator> <name><name>magic_data</name><operator>.</operator><name>funcmaxargs</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>details</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>,
						 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server has FUNC_MAX_ARGS = %d, library has %d."</literal></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><name><name>magic_data</name><operator>.</operator><name>funcmaxargs</name></name></expr></argument>,
						 <argument><expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>funcmaxargs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>indexmaxkeys</name></name> <operator>!=</operator> <name><name>magic_data</name><operator>.</operator><name>indexmaxkeys</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>details</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>,
						 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server has INDEX_MAX_KEYS = %d, library has %d."</literal></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><name><name>magic_data</name><operator>.</operator><name>indexmaxkeys</name></name></expr></argument>,
						 <argument><expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>indexmaxkeys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>namedatalen</name></name> <operator>!=</operator> <name><name>magic_data</name><operator>.</operator><name>namedatalen</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>details</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>,
						 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server has NAMEDATALEN = %d, library has %d."</literal></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><name><name>magic_data</name><operator>.</operator><name>namedatalen</name></name></expr></argument>,
						 <argument><expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>namedatalen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>float4byval</name></name> <operator>!=</operator> <name><name>magic_data</name><operator>.</operator><name>float4byval</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>details</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>,
						 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server has FLOAT4PASSBYVAL = %s, library has %s."</literal></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><ternary><condition><expr><name><name>magic_data</name><operator>.</operator><name>float4byval</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
						 <argument><expr><ternary><condition><expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>float4byval</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>float8byval</name></name> <operator>!=</operator> <name><name>magic_data</name><operator>.</operator><name>float8byval</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>details</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>,
						 <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Server has FLOAT8PASSBYVAL = %s, library has %s."</literal></expr></argument>)</argument_list></call></expr></argument>,
						 <argument><expr><ternary><condition><expr><name><name>magic_data</name><operator>.</operator><name>float8byval</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
						 <argument><expr><ternary><condition><expr><name><name>module_magic_data</name><operator>-&gt;</operator><name>float8byval</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>details</name><operator>.</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><operator>&amp;</operator><name>details</name></expr></argument>,
							   <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Magic block has unexpected length or padding difference."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"incompatible library \"%s\": magic block mismatch"</literal></expr></argument>,
					<argument><expr><name>libname</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail_internal</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>details</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Unload the specified dynamic-link library file, if it is loaded.
 *
 * Note: libname is expected to be an exact name for the library file.
 *
 * XXX for the moment, this is disabled, resulting in LOAD of an already-loaded
 * library always being a no-op.  We might re-enable it someday if we can
 * convince ourselves we have safe protocols for un-hooking from hook function
 * pointers, releasing custom GUC variables, and perhaps other things that
 * are definitely unsafe currently.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>internal_unload_library</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>libname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>NOT_USED</name></cpp:ifdef>
	<decl_stmt><decl><type><name>DynamicFileList</name> <modifier>*</modifier></type><name>file_scanner</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>prv</name></decl>,
			   <decl><type ref="prev"><modifier>*</modifier></type><name>nxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PG_fini_t</name></type>	<name>PG_fini</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We need to do stat() in order to determine whether this is the same
	 * file as a previously loaded file; it's also handy so as to give a good
	 * error message if bogus file name given.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>libname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not access file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>libname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We have to zap all entries in the list that match on either filename or
	 * inode, else internal_load_library() will still think it's present.
	 */</comment>
	<expr_stmt><expr><name>prv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>file_scanner</name> <operator>=</operator> <name>file_list</name></expr>;</init> <condition><expr><name>file_scanner</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>file_scanner</name> <operator>=</operator> <name>nxt</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>nxt</name> <operator>=</operator> <name><name>file_scanner</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>libname</name></expr></argument>, <argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
			<call><name>SAME_INODE</name><argument_list>(<argument><expr><name>stat_buf</name></expr></argument>, <argument><expr><operator>*</operator><name>file_scanner</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>prv</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>prv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>nxt</name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>file_list</name> <operator>=</operator> <name>nxt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<comment type="block">/*
			 * If the library has a _PG_fini() function, call it.
			 */</comment>
			<expr_stmt><expr><name>PG_fini</name> <operator>=</operator> <operator>(</operator><name>PG_fini_t</name><operator>)</operator> <call><name>pg_dlsym</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><literal type="string">"_PG_fini"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>PG_fini</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call>(<modifier>*</modifier><name>PG_fini</name>) <argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>clear_external_function_hash</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pg_dlclose</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>file_scanner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* prv does not change */</comment>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>prv</name> <operator>=</operator> <name>file_scanner</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* NOT_USED */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>file_exists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><ternary><condition><expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>false</name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>errno</name> <operator>==</operator> <name>ENOENT</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>ENOTDIR</name> <operator>||</operator> <name>errno</name> <operator>==</operator> <name>EACCES</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not access file \"%s\": %m"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Example format: ".so" */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>DLSUFFIX</name></cpp:ifndef>
<cpp:error>#<cpp:directive>error</cpp:directive> <cpp:literal>"DLSUFFIX must be defined to compile this file."</cpp:literal></cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 * If name contains a slash, check if the file exists, if so return
 * the name.  Else (no slash) try to expand using search path (see
 * find_in_dynamic_libpath below); if that works, return the fully
 * expanded file name.  If the previous failed, append DLSUFFIX and
 * try again.  If all fails, just return the original name.
 *
 * The result will always be freshly palloc'd.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>expand_dynamic_library_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>have_slash</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>full</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>have_slash</name> <operator>=</operator> <operator>(</operator><call><name>first_dir_separator</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_slash</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>full</name> <operator>=</operator> <call><name>find_in_dynamic_libpath</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>full</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>full</name> <operator>=</operator> <call><name>substitute_libpath_macro</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>full</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>new</name> <operator>=</operator> <call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DLSUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>have_slash</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>full</name> <operator>=</operator> <call><name>find_in_dynamic_libpath</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>full</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>full</name> <operator>=</operator> <call><name>substitute_libpath_macro</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>full</name></expr>;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * If we can't find the file, just return the string as-is. The ensuing
	 * load attempt will fail and report a suitable message.
	 */</comment>
	<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check a restricted library name.  It must begin with "$libdir/plugins/"
 * and there must not be any directory separators after that (this is
 * sufficient to prevent ".." style attacks).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>check_restricted_library_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"$libdir/plugins/"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>first_dir_separator</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"access to library \"%s\" is not allowed"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Substitute for any macros appearing in the given string.
 * Result is always freshly palloc'd.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>substitute_libpath_macro</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sep_ptr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Currently, we only recognize $libdir at the start of the string */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>sep_ptr</name> <operator>=</operator> <call><name>first_dir_separator</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>sep_ptr</name> <operator>=</operator> <name>name</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"$libdir"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sep_ptr</name> <operator>-</operator> <name>name</name> <operator>||</operator>
		<call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"$libdir"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"$libdir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_NAME</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid macro name in dynamic library path: %s"</literal></expr></argument>,
						<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>pkglib_path</name></expr></argument>, <argument><expr><name>sep_ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Search for a file called 'basename' in the colon-separated search
 * path Dynamic_library_path.  If the file is found, the full file name
 * is returned in freshly palloc'd memory.  If the file is not found,
 * return NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>find_in_dynamic_libpath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>basename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type>		<name>baselen</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><name>basename</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><call><name>first_dir_separator</name><argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AssertState</name><argument_list>(<argument><expr><name>Dynamic_library_path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>Dynamic_library_path</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>baselen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>size_t</name></type>		<name>len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>piece</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>mangled</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>full</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>piece</name> <operator>=</operator> <call><name>first_path_var_separator</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>piece</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_NAME</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"zero-length component in parameter \"dynamic_library_path\""</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>piece</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>len</name> <operator>=</operator> <name>piece</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><name>piece</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>piece</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mangled</name> <operator>=</operator> <call><name>substitute_libpath_macro</name><argument_list>(<argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>piece</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>canonicalize_path</name><argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* only absolute paths */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_absolute_path</name><argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_NAME</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"component in parameter \"dynamic_library_path\" is not an absolute path"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>full</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>baselen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>full</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>mangled</name></expr></argument>, <argument><expr><name>basename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>mangled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG3</name></expr></argument>, <argument><expr><literal type="string">"find_in_dynamic_libpath: trying \"%s\""</literal></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>file_exists</name><argument_list>(<argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>full</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Find (or create) a rendezvous variable that one dynamically
 * loaded library can use to meet up with another.
 *
 * On the first call of this function for a particular varName,
 * a "rendezvous variable" is created with the given name.
 * The value of the variable is a void pointer (initially set to NULL).
 * Subsequent calls with the same varName just return the address of
 * the existing variable.  Once created, a rendezvous variable lasts
 * for the life of the process.
 *
 * Dynamically loaded libraries can use rendezvous variables
 * to find each other and share information: they just need to agree
 * on the variable name and the data it will point to.
 */</comment>
<function><type><name>void</name>	  <modifier>*</modifier><modifier>*</modifier></type>
<name>find_rendezvous_variable</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>rendezvousHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>rendezvousHashEntry</name> <modifier>*</modifier></type><name>hentry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<comment type="block">/* Create a hashtable if we haven't already done so in this process */</comment>
	<if_stmt><if>if <condition>(<expr><name>rendezvousHash</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>ctl</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <name>NAMEDATALEN</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>rendezvousHashEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name>rendezvousHash</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Rendezvous variable hash"</literal></expr></argument>,
									 <argument><expr><literal type="number">16</literal></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>ctl</name></expr></argument>,
									 <argument><expr><name>HASH_ELEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Find or create the hashtable entry for this varName */</comment>
	<expr_stmt><expr><name>hentry</name> <operator>=</operator> <operator>(</operator><name>rendezvousHashEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>rendezvousHash</name></expr></argument>,
												 <argument><expr><name>varName</name></expr></argument>,
												 <argument><expr><name>HASH_ENTER</name></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize to NULL if first time */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>hentry</name><operator>-&gt;</operator><name>varValue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>hentry</name><operator>-&gt;</operator><name>varValue</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Estimate the amount of space needed to serialize the list of libraries
 * we have loaded.
 */</comment>
<function><type><name>Size</name></type>
<name>EstimateLibraryStateSpace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DynamicFileList</name> <modifier>*</modifier></type><name>file_scanner</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>file_scanner</name> <operator>=</operator> <name>file_list</name></expr>;</init>
		 <condition><expr><name>file_scanner</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
		 <incr><expr><name>file_scanner</name> <operator>=</operator> <name><name>file_scanner</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Serialize the list of libraries we have loaded to a chunk of memory.
 */</comment>
<function><type><name>void</name></type>
<name>SerializeLibraryState</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>maxsize</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start_address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DynamicFileList</name> <modifier>*</modifier></type><name>file_scanner</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>file_scanner</name> <operator>=</operator> <name>file_list</name></expr>;</init>
		 <condition><expr><name>file_scanner</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
		 <incr><expr><name>file_scanner</name> <operator>=</operator> <name><name>file_scanner</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Size</name></type>		<name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name>start_address</name></expr></argument>, <argument><expr><name><name>file_scanner</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>maxsize</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;</operator> <name>maxsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>maxsize</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>start_address</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>start_address</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Load every library the serializing backend had loaded.
 */</comment>
<function><type><name>void</name></type>
<name>RestoreLibraryState</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>start_address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<while>while <condition>(<expr><operator>*</operator><name>start_address</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>internal_load_library</name><argument_list>(<argument><expr><name>start_address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>start_address</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>start_address</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>
</unit>
