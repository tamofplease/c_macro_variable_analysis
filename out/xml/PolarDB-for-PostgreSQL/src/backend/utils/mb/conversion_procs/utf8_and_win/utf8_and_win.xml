<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/utils/mb/conversion_procs/utf8_and_win/utf8_and_win.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 *	  WIN &lt;--&gt; UTF8
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *	  src/backend/utils/mb/conversion_procs/utf8_and_win/utf8_and_win.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win1250.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win1251.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win1252.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win1253.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win1254.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win1255.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win1256.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win1257.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win1258.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win866.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/utf8_to_win874.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win1250_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win1251_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win1252_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win1253_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win1254_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win1255_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win1256_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win1257_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win866_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win874_to_utf8.map"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../Unicode/win1258_to_utf8.map"</cpp:file></cpp:include>

<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>win_to_utf8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>utf8_to_win</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/* ----------
 * conv_proc(
 *		INTEGER,	-- source encoding id
 *		INTEGER,	-- destination encoding id
 *		CSTRING,	-- source string (null terminated C string)
 *		CSTRING,	-- destination string (null terminated C string)
 *		INTEGER		-- source string length
 * ) returns VOID;
 * ----------
 */</comment>

<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>pg_enc</name></type>		<name>encoding</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>pg_mb_radix_tree</name> <modifier>*</modifier></type><name>map1</name></decl>;</decl_stmt>	<comment type="block">/* to UTF8 map name */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>pg_mb_radix_tree</name> <modifier>*</modifier></type><name>map2</name></decl>;</decl_stmt>	<comment type="block">/* from UTF8 map name */</comment>
}</block></struct></type> <name>pg_conv_map</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>pg_conv_map</name></type> <name><name>maps</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><name>PG_WIN866</name></expr>, <expr><operator>&amp;</operator><name>win866_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win866_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN874</name></expr>, <expr><operator>&amp;</operator><name>win874_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win874_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1250</name></expr>, <expr><operator>&amp;</operator><name>win1250_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win1250_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1251</name></expr>, <expr><operator>&amp;</operator><name>win1251_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win1251_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1252</name></expr>, <expr><operator>&amp;</operator><name>win1252_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win1252_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1253</name></expr>, <expr><operator>&amp;</operator><name>win1253_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win1253_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1254</name></expr>, <expr><operator>&amp;</operator><name>win1254_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win1254_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1255</name></expr>, <expr><operator>&amp;</operator><name>win1255_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win1255_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1256</name></expr>, <expr><operator>&amp;</operator><name>win1256_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win1256_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1257</name></expr>, <expr><operator>&amp;</operator><name>win1257_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win1257_from_unicode_tree</name></expr>}</block></expr>,
	<expr><block>{<expr><name>PG_WIN1258</name></expr>, <expr><operator>&amp;</operator><name>win1258_to_unicode_tree</name></expr>, <expr><operator>&amp;</operator><name>win1258_from_unicode_tree</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Datum</name></type>
<name>win_to_utf8</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>encoding</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ENCODING_CONVERSION_ARGS</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>PG_UTF8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>encoding</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LocalToUtf</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,
					   <argument><expr><name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>map1</name></expr></argument>,
					   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
					   <argument><expr><name>NULL</name></expr></argument>,
					   <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected encoding ID %d for WIN character sets"</literal></expr></argument>,
					<argument><expr><name>encoding</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>utf8_to_win</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>encoding</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>len</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CHECK_ENCODING_CONVERSION_ARGS</name><argument_list>(<argument><expr><name>PG_UTF8</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>maps</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>encoding</name> <operator>==</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>encoding</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>UtfToLocal</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>,
					   <argument><expr><name><name>maps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>map2</name></expr></argument>,
					   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
					   <argument><expr><name>NULL</name></expr></argument>,
					   <argument><expr><name>encoding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected encoding ID %d for WIN character sets"</literal></expr></argument>,
					<argument><expr><name>encoding</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
