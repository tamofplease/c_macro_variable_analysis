<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/transam/polar_checkpoint_ringbuf.c"><comment type="block">/*-------------------------------------------------------------------------
 * polar_checkpoint_ringbuf.c
 *      checkpoint ringbuf for parallel replay in standby mode.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *      src/backend/access/transam/polar_checkpoint_ringbuf.c
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_checkpoint_ringbuf.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>polar_checkpoint_ringbuf_init</name><parameter_list>(<parameter><decl><type><name>polar_checkpoint_ringbuf_t</name> <modifier>*</modifier></type><name>ringbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ringbuf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_POLAR_CHECKPOINT_RINGBUF</name></expr></argument>, <argument><expr><literal type="string">"checkpoint_ringbuf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LWTRANCHE_POLAR_CHECKPOINT_RINGBUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Remove extra checkpoints in the stash checkpoint array
 *
 * It will remove the ckpt array head utill there is only one ckpt whose redo_lsn
 * is less than bg_replayed_lsn.
 */</comment>
<function><type><name>void</name></type>
<name>polar_checkpoint_ringbuf_shrink</name><parameter_list>(<parameter><decl><type><name>polar_checkpoint_ringbuf_t</name> <modifier>*</modifier></type><name>ringbuf</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>replayed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ringbuf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ringbuf</name><operator>-&gt;</operator><name>checkpoints</name><index>[<expr><operator>(</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>POLAR_CHECKPOINT_RINGBUF_CAPACITY</name></expr>]</index></name><operator>.</operator><name>redo</name> <operator>&gt;</operator> <name>replayed</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ringbuf</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <operator>(</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>POLAR_CHECKPOINT_RINGBUF_CAPACITY</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Insert a checkpoint at the tail of the stash checkpoint array
 * The redo of checkpoints in the ringbuf must be incremental.
 *
 * It will evict a ckpt if the array is full.
 */</comment>
<function><type><name>void</name></type>
<name>polar_checkpoint_ringbuf_insert</name><parameter_list>(<parameter><decl><type><name>polar_checkpoint_ringbuf_t</name> <modifier>*</modifier></type><name>ringbuf</name></decl></parameter>,
                                <parameter><decl><type><name>XLogRecPtr</name></type> <name>checkpointRecPtr</name></decl></parameter>,
                                <parameter><decl><type><name>XLogRecPtr</name></type> <name>checkpointEndPtr</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>CheckPoint</name> <modifier>*</modifier></type><name>checkpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>target</name></decl>, <decl><type ref="prev"/><name>tail</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ringbuf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>(</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>POLAR_CHECKPOINT_RINGBUF_CAPACITY</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ringbuf</name><operator>-&gt;</operator><name>checkpoints</name><index>[<expr><name>tail</name></expr>]</index></name><operator>.</operator><name>redo</name> <operator>&gt;</operator> <name><name>checkpoint</name><operator>-&gt;</operator><name>redo</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"%s: ignore the checkpoint whose redo is less than the tail."</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Evict a checkpoint if the array is full. Current eviction strategy is to
	 * evict the last ckpt.
	 *
	 * TODO: A better strategy is to evict a ckpt to keep the redo distance
	 * between every two adjacent ckpts balanced. But it also incurs extra
	 * ckpt copy overhead. It's a tradeoff here.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name>POLAR_CHECKPOINT_RINGBUF_CAPACITY</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Assign the checkpoint to the target posistion */</comment>
	<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>(</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>head</name></name> <operator>+</operator> <name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator> <operator>%</operator> <name>POLAR_CHECKPOINT_RINGBUF_CAPACITY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ringbuf</name><operator>-&gt;</operator><name>recptrs</name><index>[<expr><name>target</name></expr>]</index></name> <operator>=</operator> <name>checkpointRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ringbuf</name><operator>-&gt;</operator><name>endptrs</name><index>[<expr><name>target</name></expr>]</index></name> <operator>=</operator> <name>checkpointEndPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ringbuf</name><operator>-&gt;</operator><name>checkpoints</name><index>[<expr><name>target</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>checkpoint</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get the first ckpt from the stashed ckpt array
 *
 * if the ckpt array is empty, it will set the checkpointRecPtr as NULL
 *
 * When size is not 0, it is guaranteed to return a ckpt whose redo is smaller
 * than bg_replayed_lsn, because the redo of the first read ckpt is the starting
 * point of bg_replayed_lsn. And subsequent operations will always retain a ckpt
 * whose redo is smaller than the bg_replayed_lsn.
 */</comment>
<function><type><name>void</name></type>
<name>polar_checkpoint_ringbuf_front</name><parameter_list>(<parameter><decl><type><name>polar_checkpoint_ringbuf_t</name> <modifier>*</modifier></type><name>ringbuf</name></decl></parameter>,
                               <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>checkpointRecPtr</name></decl></parameter>,
                               <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>checkpointEndPtr</name></decl></parameter>,
                               <parameter><decl><type><name>CheckPoint</name> <modifier>*</modifier></type><name>checkpoint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>head</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ringbuf</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ringbuf</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>ringbuf</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>checkpointRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>checkpointRecPtr</name> <operator>=</operator> <name><name>ringbuf</name><operator>-&gt;</operator><name>recptrs</name><index>[<expr><name>head</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>checkpointEndPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>checkpointEndPtr</name> <operator>=</operator> <name><name>ringbuf</name><operator>-&gt;</operator><name>endptrs</name><index>[<expr><name>head</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>checkpoint</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>checkpoint</name> <operator>=</operator> <name><name>ringbuf</name><operator>-&gt;</operator><name>checkpoints</name><index>[<expr><name>head</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ringbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
		<if_stmt><if>if <condition>(<expr><name>checkpointRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>checkpointRecPtr</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>checkpointEndPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>checkpointEndPtr</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>checkpoint</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>checkpoint</name> <operator>=</operator> <operator>(</operator><name>CheckPoint</name><operator>)</operator> <block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
