<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/transam/polar_csn_mvcc_vars.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_csn_mvcc_vars.h
 *	  polar csn mvcc related share global vars
 *
 * Portions Copyright (c) 2021, Alibaba Group Holding Limited
 * Portions Copyright (c) 1996-2021, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * IDENTIFICATION
 *
 * src/include/access/polar_mvccvars.h
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_csn_mvcc_vars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/transam.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>polar_csn_mvcc_var_cache</name> <modifier>*</modifier></type><name>polar_shmem_csn_mvcc_var_cache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>polar_csn_mvcc_var_cache_shmem_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* TODO: should align? by guangang.gg */</comment>
    <expr_stmt><expr><name>polar_shmem_csn_mvcc_var_cache</name> <operator>=</operator> <operator>(</operator><name>polar_csn_mvcc_var_cache</name> <operator>*</operator><operator>)</operator>
		<call><name>ShmemAlloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>polar_shmem_csn_mvcc_var_cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>polar_shmem_csn_mvcc_var_cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>polar_shmem_csn_mvcc_var_cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_shmem_csn_mvcc_var_cache</name><operator>-&gt;</operator><name>polar_oldest_active_xid</name></name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_shmem_csn_mvcc_var_cache</name><operator>-&gt;</operator><name>polar_next_csn</name></name></expr></argument>, <argument><expr><name>InvalidCommitSeqNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_shmem_csn_mvcc_var_cache</name><operator>-&gt;</operator><name>polar_latest_completed_xid</name></name></expr></argument>, <argument><expr><name>InvalidTransactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Only used for test */</comment>
<function><type><name>void</name></type> <name>polar_csn_mvcc_var_cache_set</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>oldest_active_xid</name></decl></parameter>, <parameter><decl><type><name>CommitSeqNo</name></type> <name>next_csn</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>latest_completed_xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_shmem_csn_mvcc_var_cache</name><operator>-&gt;</operator><name>polar_oldest_active_xid</name></name></expr></argument>, <argument><expr><name>oldest_active_xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_shmem_csn_mvcc_var_cache</name><operator>-&gt;</operator><name>polar_next_csn</name></name></expr></argument>, <argument><expr><name>next_csn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_shmem_csn_mvcc_var_cache</name><operator>-&gt;</operator><name>polar_latest_completed_xid</name></name></expr></argument>, <argument><expr><name>latest_completed_xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
