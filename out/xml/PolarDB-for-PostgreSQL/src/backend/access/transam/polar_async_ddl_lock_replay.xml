<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/transam/polar_async_ddl_lock_replay.c"><comment type="block">/*-------------------------------------------------------------------------
 * polar_async_ddl_lock_replay.c
 *      async ddl lock replay routines.
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *      src/backend/access/transam/polar_async_ddl_lock_replay.c
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_async_ddl_lock_replay.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/startup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walreceiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/standby.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timeout.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>got_sighup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>shutdown_requested</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>update_ptr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> <comment type="block">/* if true, update lock ptr and wait shorter */</comment>

<decl_stmt><decl><type><name>bool</name></type>	<name>polar_enable_async_ddl_lock_replay</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>		<name>polar_async_ddl_lock_replay_worker_num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>	<name>polar_enable_async_ddl_lock_replay_unit_test</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>polar_async_ddl_lock_replay_ctl_t</name> <modifier>*</modifier></type><name>polar_async_ddl_lock_replay_ctl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>polar_pending_tx_tbl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>polar_pending_lock_tbl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>polar_async_ddl_lock_replay_worker_t</name> <modifier>*</modifier></type><name>MyWorker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* bgworker routines */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>register_async_ddl_lock_replay_worker</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>terminate_async_ddl_lock_replay_worker</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>worker_sighup_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>worker_sigterm_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>worker_sigusr1_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>worker_quit_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_async_ddl_lock_replay_worker_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_create_pending_tx_tbl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_create_pending_lock_tbl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>polar_pending_tx</name> <modifier>*</modifier></type><name>polar_get_oldest_idle_tx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>polar_pending_tx</name> <modifier>*</modifier></type><name>polar_get_oldest_tx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_get_one_lock</name><parameter_list>(<parameter><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>,
								<parameter><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,
								<parameter><decl><type><name>bool</name></type> <name>dontWait</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_release_one_pending_lock</name><parameter_list>(<parameter><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>,
										   <parameter><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_remove_released_tx_and_update_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>Size</name></type>
<name>polar_async_ddl_lock_replay_shmem_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>polar_enable_async_ddl_lock_replay</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>polar_async_ddl_lock_replay_ctl_t</name></expr></argument>, <argument><expr><name>workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_async_ddl_lock_replay_worker_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
					<argument><expr><name>polar_async_ddl_lock_replay_worker_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>terminate_async_ddl_lock_replay_worker</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>TerminateBackgroundWorker</name><argument_list>(<argument><expr><operator>(</operator><name>BackgroundWorkerHandle</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>working</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_init_async_ddl_lock_replay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_allow_async_ddl_lock_replay</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>polar_async_ddl_lock_replay_ctl</name> <operator>=</operator> <operator>(</operator><name>polar_async_ddl_lock_replay_ctl_t</name> <operator>*</operator><operator>)</operator>
					<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"async ddl lock replay control"</literal></expr></argument>, 
							<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>polar_async_ddl_lock_replay_ctl_t</name></expr></argument>, <argument><expr><name>workers</name></expr></argument>)</argument_list></call> <operator>+</operator> 
							<call><name>mul_size</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_async_ddl_lock_replay_worker_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,
									 <argument><expr><name>polar_async_ddl_lock_replay_worker_num</name></expr></argument>)</argument_list></call></expr></argument>, 
							<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_create_pending_tx_tbl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_create_pending_lock_tbl</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>working</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <name>polar_pending_tx_tbl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>locks</name></name> <operator>=</operator> <name>polar_pending_lock_tbl</name></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>polar_async_ddl_lock_replay_worker_num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>working</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cur_tx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>head</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_POLAR_PENDING_LOCK_TBL</name></expr></argument>, <argument><expr><literal type="string">"async ddl lock replay lock table lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>lock_tbl_lock</name></name></expr></argument>, <argument><expr><name>LWTRANCHE_POLAR_PENDING_LOCK_TBL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_POLAR_PENDING_TX_TBL</name></expr></argument>, <argument><expr><literal type="string">"async ddl lock replay transaction table lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>, <argument><expr><name>LWTRANCHE_POLAR_PENDING_TX_TBL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_POLAR_ASYNC_LOCK_WORKER</name></expr></argument>, <argument><expr><literal type="string">"async ddl lock replay async worker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_POLAR_ASYNC_LOCK_TX</name></expr></argument>, <argument><expr><literal type="string">"async ddl lock replay async transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Register async ddl lock replay worker.
 *
 * Return true if RegisterDynamicBackgroundWorker return true, otherwise return false
 * which most likely means max_worker_processes is not enough.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>register_async_ddl_lock_replay_worker</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BackgroundWorker</name></type> <name>worker</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_async_ddl_lock_replay_worker_handle_t</name> <modifier>*</modifier></type><name>worker_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackgroundWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_PostmasterStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_restart_time</name></name> <operator>=</operator> <name>BGW_NEVER_RESTART</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><literal type="string">"polar_async_ddl_lock_replay_worker_main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><name>POLAR_ASYNC_DDL_LOCK_REPLAY_WORKER_NAME</name><literal type="string">" %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>bgw_type</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><name>POLAR_ASYNC_DDL_LOCK_REPLAY_WORKER_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_main_arg</name></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>.</operator><name>bgw_notify_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RegisterDynamicBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><operator>(</operator><name>BackgroundWorkerHandle</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>worker_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>handle</name><operator>.</operator><name>slot</name></name> <operator>=</operator> <name><name>worker_handle</name><operator>-&gt;</operator><name>slot</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name><name>handle</name><operator>.</operator><name>generation</name></name> <operator>=</operator> <name><name>worker_handle</name><operator>-&gt;</operator><name>generation</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>worker_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>polar_enable_debug</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_RESOURCES</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not register async ddl lock replay process"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"You may need to increase max_worker_processes."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: worker try to own a transaction.
 *
 * Get an oldest transaction from pending table, and try to own this transaction.
 * Once owned, no other worker will touch this transaction. Only startup and this
 * worker will mark it release, and remove this transaction.
 */</comment>
<function><type><name>polar_pending_tx</name> <modifier>*</modifier></type>
<name>polar_own_pending_tx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>polar_get_oldest_idle_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>tx</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>tx</name><operator>-&gt;</operator><name>worker</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* recheck */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>tx</name><operator>-&gt;</operator><name>worker</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>NULL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* POLAR: we put new transaction to list head */</comment>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>worker</name></name> <operator>=</operator> <name>MyWorker</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>MyWorker</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_TX_WITH_LOCK</name><argument_list>(<argument><expr><literal type="string">"worker: own transaction success!"</literal></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>tx</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: worker try to get an oldest transaction.
 *
 * Get an oldest transaction from this worker.
 */</comment>
<function><type><name>polar_pending_tx</name> <modifier>*</modifier></type>
<name>polar_get_oldest_tx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>oldest_tx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tx</name> <operator>=</operator> <name><name>MyWorker</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldest_tx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>tx</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>oldest_tx</name> <operator>&amp;&amp;</operator> <name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>oldest_tx</name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>oldest_tx</name> <operator>&amp;&amp;</operator> <name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name> <operator>&amp;&amp;</operator>
			<name><name>oldest_tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>&gt;</operator> <name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>oldest_tx</name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>tx</name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>oldest_tx</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: try to get locks of transaction one by one.
 *
 * Once failed, skip the rest and return.
 */</comment>
<function><type><name>void</name></type>
<name>polar_get_lock_by_tx</name><parameter_list>(<parameter><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dontWait</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>lock</name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>cur_tx</name></name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>lock</name> <operator>&amp;&amp;</operator> <call><name>polar_get_one_lock</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>dontWait</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* POLAR: the lock must be got here, move to next lock */</comment>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name><operator>-&gt;</operator><name>last_ptr</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* all got, mark transaction's last_ptr InvalidXLogRecPtr */</comment>
			<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>cur_tx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return;</return>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lock</name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<comment type="block">/* under unit test, we get one lock every time */</comment>
		<if_stmt><if>if <condition>(<expr><name>polar_enable_async_ddl_lock_replay_unit_test</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>cur_tx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: try to get one lock if not got
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_get_one_lock</name><parameter_list>(<parameter><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>,
				   <parameter><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>,
				   <parameter><decl><type><name>bool</name></type> <name>dontWait</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name></type> <name>locktag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LockAcquireResult</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>POLAR_PENDING_LOCK_GOT</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>POLAR_PENDING_LOCK_GETTING</name></expr>;</expr_stmt>
	<comment type="block">/* set receipt time, to cancel long query by max_standby_archive_delay */</comment>
	<expr_stmt><expr><call><name>polar_set_receipt_time</name><argument_list>(<argument><expr><name><name>lock</name><operator>-&gt;</operator><name>rtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* try to get lock */</comment>
	<expr_stmt><expr><call><name>SET_LOCKTAG_RELATION</name><argument_list>(<argument><expr><name>locktag</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>dbOid</name></name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>relOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>LockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>dontWait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>LOCKACQUIRE_NOT_AVAIL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* get failed, reset it */</comment>
		<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>POLAR_PENDING_LOCK_IDLE</name></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* we got the lock, mark it */</comment>
		<expr_stmt><expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>POLAR_PENDING_LOCK_GOT</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_TX_WITH_LOCK</name><argument_list>(<argument><expr><literal type="string">"worker: got lock success!"</literal></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>update_ptr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: try to release one lock if got
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_release_one_pending_lock</name><parameter_list>(<parameter><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>,
							   <parameter><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name></type> <name>locktag</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SET_LOCKTAG_RELATION</name><argument_list>(<argument><expr><name>locktag</name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>dbOid</name></name></expr></argument>, <argument><expr><name><name>lock</name><operator>-&gt;</operator><name>relOid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="block">/* if got, release the lock */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>lock</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>POLAR_PENDING_LOCK_GOT</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>LockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name>locktag</name></expr></argument>, <argument><expr><name>AccessExclusiveLock</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_LOCK</name><argument_list>(<argument><expr><literal type="string">"worker: lock state error!"</literal></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_TX_WITH_LOCK</name><argument_list>(<argument><expr><literal type="string">"worker: release lock success!"</literal></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: remove released transaction and update ptr.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_remove_released_tx_and_update_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx_del</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx_it</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>lock_next</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tx</name> <operator>=</operator> <name><name>MyWorker</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>tx</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tx_del</name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tx</name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

		<comment type="block">/* this tx is still in use */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>tx_del</name><operator>-&gt;</operator><name>commit_state</name></name> <operator>==</operator> <name>POLAR_PENDING_TX_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>MyWorker</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>tx_del</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>tx_it</name> <operator>=</operator> <name><name>MyWorker</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>tx_it</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>tx_it</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>tx_del</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>tx_it</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>tx_it</name> <operator>=</operator> <name><name>tx_it</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			</block_content>}</block></while>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>update_ptr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<comment type="block">/* release all locks got in this tx */</comment>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx_del</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lock</name> <operator>=</operator> <name><name>tx_del</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>lock</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_release_one_pending_lock</name><argument_list>(<argument><expr><name>tx_del</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lock_next</name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>lock_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>polar_pending_lock_tbl</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>lock_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lock</name> <operator>=</operator> <name>lock_next</name></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx_del</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* remove the transaction, we log it first */</comment>
		<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_TX</name><argument_list>(<argument><expr><literal type="string">"worker: remove transaction success!"</literal></expr></argument>, <argument><expr><name>tx_del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>polar_pending_tx_tbl</name></expr></argument>, <argument><expr><name>tx_del</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<if_stmt><if>if <condition>(<expr><name>update_ptr</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Update apply lsn, and notice wal recevier */</comment>
		<expr_stmt><expr><call><name>polar_async_update_last_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WalRcvForceReply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_release_all_pending_tx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>cur_tx</name></name> <operator>=</operator> <name><name>MyWorker</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name><name>MyWorker</name><operator>-&gt;</operator><name>cur_tx</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>cur_tx</name><operator>-&gt;</operator><name>commit_state</name></name> <operator>=</operator> <name>POLAR_PENDING_TX_RELEASED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>cur_tx</name></name> <operator>=</operator> <name><name>MyWorker</name><operator>-&gt;</operator><name>cur_tx</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_remove_released_tx_and_update_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_async_ddl_lock_replay_worker_init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>InRecovery</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>standbyState</name> <operator>=</operator> <name>STANDBY_SNAPSHOT_READY</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>MyWorker</name> <operator>=</operator> <operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyWorker</name><operator>-&gt;</operator><name>working</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>MyWorker</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LWTRANCHE_POLAR_ASYNC_LOCK_WORKER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Main Loop for this worker
 * 1. own a new transaction
 * 2. get lock nonblocking until failed for every transaction
 * 3. remove released transaction and updata ptr
 * 4. get an oldest transaction
 * 5. block getting the lock, if got, nonblocking get next one until failed
 * 6. remove released transaction and updata ptr
 * 7. wait_latch(timeout)
 */</comment>
<function><type><name>void</name></type>
<name>polar_async_ddl_lock_replay_worker_main</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>main_arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>worker_sighup_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* set flag to read config file */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>worker_sigterm_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* shutdown */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGQUIT</name></expr></argument>, <argument><expr><name>worker_quit_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* hard crash time */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGUSR1</name></expr></argument>, <argument><expr><name>worker_sigusr1_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Reset some signals that are accepted by postmaster but not here
	 */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTTIN</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTTOU</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGCONT</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGWINCH</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RegisterTimeout</name><argument_list>(<argument><expr><name>STANDBY_DEADLOCK_TIMEOUT</name></expr></argument>, <argument><expr><name>StandbyDeadLockHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterTimeout</name><argument_list>(<argument><expr><name>STANDBY_TIMEOUT</name></expr></argument>, <argument><expr><name>StandbyTimeoutHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterTimeout</name><argument_list>(<argument><expr><name>STANDBY_LOCK_TIMEOUT</name></expr></argument>, <argument><expr><name>StandbyLockTimeoutHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* We allow SIGQUIT (quickdie) at all times */</comment>
	<expr_stmt><expr><call><name>sigdelset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>BlockSig</name></expr></argument>, <argument><expr><name>SIGQUIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>CurrentResourceOwner</name> <operator>=</operator> <call><name>ResourceOwnerCreate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"polar async ddl lock replay worker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar async ddl lock replay worker %d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_async_ddl_lock_replay_worker_init</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>update_ptr</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>got_sighup</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>got_sighup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ProcessConfigFile</name><argument_list>(<argument><expr><name>PGC_SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>shutdown_requested</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_release_all_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/*
			 * From here on, elog(ERROR) should end with exit(1), not send
			 * control back to the sigsetjmp block above
			 */</comment>
			<expr_stmt><expr><name>ExitOnAnyError</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<comment type="block">/* Normal exit from the bgwriter is here */</comment>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* done */</comment>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>polar_own_pending_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>polar_remove_released_tx_and_update_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>polar_get_oldest_tx</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>tx</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>polar_get_lock_by_tx</name><argument_list>(<argument><expr><name>tx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>polar_remove_released_tx_and_update_ptr</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>tx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>,
					   <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
					   <argument><expr><ternary><condition><expr><name>update_ptr</name></expr> ?</condition><then> <expr><literal type="number">50</literal></expr> </then><else>: <expr><literal type="number">500</literal></expr></else></ternary></expr></argument> <comment type="block">/* ms */</comment>, <argument><expr><name>WAIT_EVENT_ASYNC_DDL_LOCK_REPLAY_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: init the pending transaction table.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_create_pending_tx_tbl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>hash_ctl</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Initialize the hash table for tracking the pending locks
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TransactionId</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_pending_tx</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_pending_tx_tbl</name> <operator>=</operator> <call><name>ShmemInitHash</name><argument_list>(<argument><expr><literal type="string">"polar async ddl lock replay pending entries"</literal></expr></argument>,
									<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>,
									<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: init the pending lock table.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_create_pending_lock_tbl</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type>		<name>hash_ctl</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Initialize the hash table for tracking the pending locks
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hash_ctl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XLogRecPtr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hash_ctl</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_pending_lock</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>polar_pending_lock_tbl</name> <operator>=</operator> <call><name>ShmemInitHash</name><argument_list>(<argument><expr><literal type="string">"polar async ddl lock replay pending locks"</literal></expr></argument>,
									<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>,
									<argument><expr><operator>&amp;</operator><name>hash_ctl</name></expr></argument>,
									<argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_BLOBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: Launch all async ddl lock replay workers and init each meta info.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_launch_async_ddl_lock_replay_workers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_allow_async_ddl_lock_replay</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>polar_async_ddl_lock_replay_worker_num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* start worker */</comment>
		<if_stmt><if>if<condition>(<expr><call><name>register_async_ddl_lock_replay_worker</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"start polar async ddl lock replay worker %d started"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>working</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_stop_async_ddl_lock_replay_workers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_allow_async_ddl_lock_replay</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"stop all polar async ddl lock replay worker."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>polar_async_ddl_lock_replay_worker_num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>terminate_async_ddl_lock_replay_worker</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar async ddl lock replay worker %d stopped"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>working</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: add lock to pending table, and record the last_ptr, rtime.
 *
 * We will add this lock into lock_tbl and tx_tbl,
 * to store, track lock by transaction.
 */</comment>
<function><type><name>void</name></type>
<name>polar_add_lock_to_pending_tbl</name><parameter_list>(<parameter><decl><type><name>xl_standby_lock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>last_ptr</name></decl></parameter>, <parameter><decl><type><name>TimestampTz</name></type> <name>rtime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>newlock</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>lock_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>newlock</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>polar_pending_lock_tbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_ptr</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>newlock</name><operator>-&gt;</operator><name>xid</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>xid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newlock</name><operator>-&gt;</operator><name>dbOid</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>dbOid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newlock</name><operator>-&gt;</operator><name>relOid</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>relOid</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>newlock</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>=</operator> <name>last_ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newlock</name><operator>-&gt;</operator><name>rtime</name></name> <operator>=</operator> <name>rtime</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newlock</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>POLAR_PENDING_LOCK_IDLE</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>newlock</name><operator>-&gt;</operator><name>tx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newlock</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_LOCK</name><argument_list>(<argument><expr><literal type="string">"startup: add lock twice!"</literal></expr></argument>, <argument><expr><name>newlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>lock_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>lock_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>polar_pending_tx_tbl</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>newlock</name><operator>-&gt;</operator><name>tx</name></name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>xid</name></name> <operator>=</operator> <name><name>lock</name><operator>-&gt;</operator><name>xid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>commit_state</name></name> <operator>=</operator> <name>POLAR_PENDING_TX_UNKNOWN</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>newlock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>newlock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>cur_lock</name></name> <operator>=</operator> <name>newlock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>=</operator> <name>last_ptr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>worker</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LWTRANCHE_POLAR_ASYNC_LOCK_TX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_TX_WITH_LOCK</name><argument_list>(<argument><expr><literal type="string">"startup: add lock with new transaction success!"</literal></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>newlock</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>newlock</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>=</operator> <name>last_ptr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_TX_WITH_LOCK</name><argument_list>(<argument><expr><literal type="string">"startup: add lock success!"</literal></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: release lock by xid. Actually it releases transaction and it's locks.
 * 
 * Only mark release here. The actual release part is in
 * polar_async_ddl_lock_replay_worker_main, contains two operation,
 * release the lock if got, and remove it.
 */</comment>
<function><type><name>void</name></type>
<name>polar_async_ddl_lock_replay_release_one_tx</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>polar_pending_tx_tbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xid</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>tx</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>commit_state</name></name> <operator>=</operator> <name>POLAR_PENDING_TX_RELEASED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_TX_WITH_LOCK</name><argument_list>(<argument><expr><literal type="string">"startup: mark release transaction!"</literal></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: release all locks.
 */</comment>
<function><type><name>void</name></type>
<name>polar_async_ddl_lock_replay_release_all_tx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"startup: mark release all lock!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>polar_pending_tx_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>tx</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* regard them as commited */</comment>
		<expr_stmt><expr><name><name>tx</name><operator>-&gt;</operator><name>commit_state</name></name> <operator>=</operator> <name>POLAR_PENDING_TX_RELEASED</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_ASYNC_DDL_LOCK_REPLAY_LOG_TX_WITH_LOCK</name><argument_list>(<argument><expr><literal type="string">"startup: mark release lock!"</literal></expr></argument>, <argument><expr><name>tx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_allow_async_ddl_lock_replay</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_async_ddl_lock_replay_unit_test</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>polar_enable_async_ddl_lock_replay</name> <operator>&amp;&amp;</operator> 
			<operator>(</operator><name>polar_async_ddl_lock_replay_worker_num</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>polar_in_replica_mode</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
		<name>polar_enable_async_ddl_lock_replay</name> <operator>&amp;&amp;</operator>
		<operator>(</operator><name>polar_async_ddl_lock_replay_worker_num</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: get the oldest record order by last_ptr.
 *
 * It will return a oldest idle lock to the caller. If none, return NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>polar_pending_tx</name> <modifier>*</modifier></type>
<name>polar_get_oldest_idle_tx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name>  <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name>  <modifier>*</modifier></type><name>oldest_tx</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldest_tx</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>polar_pending_tx_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>tx</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name> <operator>&amp;&amp;</operator> <name><name>tx</name><operator>-&gt;</operator><name>worker</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			<name>oldest_tx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>oldest_tx</name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name> <operator>&amp;&amp;</operator> <name><name>tx</name><operator>-&gt;</operator><name>worker</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			<name><name>oldest_tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>&gt;</operator> <name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>oldest_tx</name> <operator>=</operator> <name>tx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>oldest_tx</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: get the oldest last_ptr in pending transaction table, which is oldest lock ptr.
 *
 * If none, return InvalidXLogRecPtr, means there is no active lock need to get.
 */</comment>
<function><type><name>XLogRecPtr</name></type>
<name>polar_get_async_ddl_lock_replay_oldest_ptr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name>  <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>oldest</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>oldest</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>polar_pending_tx_tbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>tx</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name> <operator>&amp;&amp;</operator> <name>oldest</name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>oldest</name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name> <operator>&amp;&amp;</operator> <name>oldest</name> <operator>&gt;</operator> <name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>oldest</name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>oldest</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: return true if this xid's lock is already requested,
 * and not all lock are got.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_async_ddl_lock_replay_tx_is_replaying</name><parameter_list>(<parameter><decl><type><name>TransactionId</name></type> <name>xid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>tx</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tx</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>polar_pending_tx_tbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xid</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
		<comment type="block">/* it got lock to replay, should wait here */</comment>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <name><name>tx</name><operator>-&gt;</operator><name>last_ptr</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: return true if this lock is already requested.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_async_ddl_lock_replay_lock_is_replaying</name><parameter_list>(<parameter><decl><type><name>xl_standby_lock</name> <modifier>*</modifier></type><name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_tx</name> <modifier>*</modifier></type><name>pending_tx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_pending_lock</name> <modifier>*</modifier></type><name>pending_lock</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pending_tx</name> <operator>=</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>polar_pending_tx_tbl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lock</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>pending_lock</name> <operator>=</operator> <name><name>pending_tx</name><operator>-&gt;</operator><name>head</name></name></expr>;</init> <condition><expr><name>pending_lock</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>pending_lock</name> <operator>=</operator> <name><name>pending_lock</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>pending_lock</name><operator>-&gt;</operator><name>dbOid</name></name> <operator>==</operator> <name><name>lock</name><operator>-&gt;</operator><name>dbOid</name></name> <operator>&amp;&amp;</operator> <name><name>pending_lock</name><operator>-&gt;</operator><name>relOid</name></name> <operator>==</operator> <name><name>lock</name><operator>-&gt;</operator><name>relOid</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pending_tx</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>polar_async_ddl_lock_replay_ctl</name><operator>-&gt;</operator><name>tx_tbl_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>polar_async_ddl_lock_replay_worker_t</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>polar_async_ddl_lock_replay_get_myworker</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name>MyWorker</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Signal handler for SIGTERM */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>worker_sigterm_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>shutdown_requested</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* Signal handler for SIGHUP */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>worker_sighup_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>got_sighup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* SIGUSR1: used for latch wakeups */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>worker_sigusr1_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>latch_sigusr1_handler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>worker_quit_handler</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>_exit</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
