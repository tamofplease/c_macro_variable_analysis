<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/index/amvalidate.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * amvalidate.c
 *	  Support routines for index access methods' amvalidate functions.
 *
 * Copyright (c) 2016-2018, PostgreSQL Global Development Group
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/index/amvalidate.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/amvalidate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_operator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_coerce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * identify_opfamily_groups() returns a List of OpFamilyOpFuncGroup structs,
 * one for each combination of lefttype/righttype present in the family's
 * operator and support function lists.  If amopstrategy K is present for
 * this datatype combination, we set bit 1 &lt;&lt; K in operatorset, and similarly
 * for the support functions.  With uint64 fields we can handle operator and
 * function numbers up to 63, which is plenty for the foreseeable future.
 *
 * The given CatCLists are expected to represent a single opfamily fetched
 * from the AMOPSTRATEGY and AMPROCNUM caches, so that they will be in
 * order by those caches' second and third cache keys, namely the datatypes.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>identify_opfamily_groups</name><parameter_list>(<parameter><decl><type><name>CatCList</name> <modifier>*</modifier></type><name>oprlist</name></decl></parameter>, <parameter><decl><type><name>CatCList</name> <modifier>*</modifier></type><name>proclist</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OpFamilyOpFuncGroup</name> <modifier>*</modifier></type><name>thisgroup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_amop</name></type> <name>oprform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_amproc</name></type> <name>procform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>io</name></decl>,
				<decl><type ref="prev"/><name>ip</name></decl>;</decl_stmt>

	<comment type="block">/* We need the lists to be ordered; should be true in normal operation */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>oprlist</name><operator>-&gt;</operator><name>ordered</name></name> <operator>||</operator> <operator>!</operator><name><name>proclist</name><operator>-&gt;</operator><name>ordered</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cannot validate operator family without ordered data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Advance through the lists concurrently.  Thanks to the ordering, we
	 * should see all operators and functions of a given datatype pair
	 * consecutively.
	 */</comment>
	<expr_stmt><expr><name>thisgroup</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>io</name> <operator>=</operator> <name>ip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>io</name> <operator>&lt;</operator> <name><name>oprlist</name><operator>-&gt;</operator><name>n_members</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>oprform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_amop</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oprlist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>io</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>io</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>oprform</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>&lt;</operator> <name><name>proclist</name><operator>-&gt;</operator><name>n_members</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>procform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_amproc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proclist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>ip</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>procform</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<while>while <condition>(<expr><name>oprform</name> <operator>||</operator> <name>procform</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>oprform</name> <operator>&amp;&amp;</operator> <name>thisgroup</name> <operator>&amp;&amp;</operator>
			<name><name>oprform</name><operator>-&gt;</operator><name>amoplefttype</name></name> <operator>==</operator> <name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name> <operator>&amp;&amp;</operator>
			<name><name>oprform</name><operator>-&gt;</operator><name>amoprighttype</name></name> <operator>==</operator> <name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Operator belongs to current group; include it and advance */</comment>

			<comment type="block">/* Ignore strategy numbers outside supported range */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>operatorset</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>oprform</name><operator>-&gt;</operator><name>amopstrategy</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>io</name> <operator>&lt;</operator> <name><name>oprlist</name><operator>-&gt;</operator><name>n_members</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>oprform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_amop</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>oprlist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>io</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>io</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>oprform</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>procform</name> <operator>&amp;&amp;</operator> <name>thisgroup</name> <operator>&amp;&amp;</operator>
			<name><name>procform</name><operator>-&gt;</operator><name>amproclefttype</name></name> <operator>==</operator> <name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name> <operator>&amp;&amp;</operator>
			<name><name>procform</name><operator>-&gt;</operator><name>amprocrighttype</name></name> <operator>==</operator> <name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Procedure belongs to current group; include it and advance */</comment>

			<comment type="block">/* Ignore function numbers outside supported range */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>functionset</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name>uint64</name><operator>)</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>procform</name><operator>-&gt;</operator><name>amprocnum</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>ip</name> <operator>&lt;</operator> <name><name>proclist</name><operator>-&gt;</operator><name>n_members</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>procform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_amproc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>proclist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>ip</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ip</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name>procform</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Time for a new group */</comment>
		<expr_stmt><expr><name>thisgroup</name> <operator>=</operator> <operator>(</operator><name>OpFamilyOpFuncGroup</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>OpFamilyOpFuncGroup</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>oprform</name> <operator>&amp;&amp;</operator>
			<operator>(</operator><operator>!</operator><name>procform</name> <operator>||</operator>
			 <operator>(</operator><name><name>oprform</name><operator>-&gt;</operator><name>amoplefttype</name></name> <operator>&lt;</operator> <name><name>procform</name><operator>-&gt;</operator><name>amproclefttype</name></name> <operator>||</operator>
			  <operator>(</operator><name><name>oprform</name><operator>-&gt;</operator><name>amoplefttype</name></name> <operator>==</operator> <name><name>procform</name><operator>-&gt;</operator><name>amproclefttype</name></name> <operator>&amp;&amp;</operator>
			   <name><name>oprform</name><operator>-&gt;</operator><name>amoprighttype</name></name> <operator>&lt;</operator> <name><name>procform</name><operator>-&gt;</operator><name>amprocrighttype</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name> <operator>=</operator> <name><name>oprform</name><operator>-&gt;</operator><name>amoplefttype</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name> <operator>=</operator> <name><name>oprform</name><operator>-&gt;</operator><name>amoprighttype</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>lefttype</name></name> <operator>=</operator> <name><name>procform</name><operator>-&gt;</operator><name>amproclefttype</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>righttype</name></name> <operator>=</operator> <name><name>procform</name><operator>-&gt;</operator><name>amprocrighttype</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
		<expr_stmt><expr><name><name>thisgroup</name><operator>-&gt;</operator><name>operatorset</name></name> <operator>=</operator> <name><name>thisgroup</name><operator>-&gt;</operator><name>functionset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>thisgroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Validate the signature (argument and result types) of an opclass support
 * function.  Return true if OK, false if not.
 *
 * The "..." represents maxargs argument-type OIDs.  If "exact" is true, they
 * must match the function arg types exactly, else only binary-coercibly.
 * In any case the function result type must match restype exactly.
 */</comment>
<function><type><name>bool</name></type>
<name>check_amproc_signature</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>funcid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>restype</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>exact</name></decl></parameter>,
					   <parameter><decl><type><name>int</name></type> <name>minargs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxargs</name></decl></parameter>,<parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_proc</name></type> <name>procform</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type>		<name>ap</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>PROCOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for function %u"</literal></expr></argument>, <argument><expr><name>funcid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>procform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_proc</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>procform</name><operator>-&gt;</operator><name>prorettype</name></name> <operator>!=</operator> <name>restype</name> <operator>||</operator> <name><name>procform</name><operator>-&gt;</operator><name>proretset</name></name> <operator>||</operator>
		<name><name>procform</name><operator>-&gt;</operator><name>pronargs</name></name> <operator>&lt;</operator> <name>minargs</name> <operator>||</operator> <name><name>procform</name><operator>-&gt;</operator><name>pronargs</name></name> <operator>&gt;</operator> <name>maxargs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>maxargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxargs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>argtype</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>Oid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>procform</name><operator>-&gt;</operator><name>pronargs</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><ternary><condition><expr><name>exact</name></expr> ?</condition><then> <expr><operator>(</operator><name>argtype</name> <operator>!=</operator> <name><name>procform</name><operator>-&gt;</operator><name>proargtypes</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> </then><else>:
			<expr><operator>!</operator><call><name>IsBinaryCoercible</name><argument_list>(<argument><expr><name>argtype</name></expr></argument>, <argument><expr><name><name>procform</name><operator>-&gt;</operator><name>proargtypes</name><operator>.</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Validate the signature (argument and result types) of an opclass operator.
 * Return true if OK, false if not.
 *
 * Currently, we can hard-wire this as accepting only binary operators.  Also,
 * we can insist on exact type matches, since the given lefttype/righttype
 * come from pg_amop and should always match the operator exactly.
 */</comment>
<function><type><name>bool</name></type>
<name>check_amop_signature</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opno</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>restype</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>lefttype</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>righttype</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_operator</name></type> <name>opform</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>OPEROID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>	<comment type="block">/* shouldn't happen */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for operator %u"</literal></expr></argument>, <argument><expr><name>opno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>opform</name> <operator>=</operator> <operator>(</operator><name>Form_pg_operator</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>opform</name><operator>-&gt;</operator><name>oprresult</name></name> <operator>!=</operator> <name>restype</name> <operator>||</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprkind</name></name> <operator>!=</operator> <literal type="char">'b'</literal> <operator>||</operator>
		<name><name>opform</name><operator>-&gt;</operator><name>oprleft</name></name> <operator>!=</operator> <name>lefttype</name> <operator>||</operator> <name><name>opform</name><operator>-&gt;</operator><name>oprright</name></name> <operator>!=</operator> <name>righttype</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Is the datatype a legitimate input type for the btree opfamily?
 */</comment>
<function><type><name>bool</name></type>
<name>opfamily_can_sort_type</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>opfamilyoid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>datatypeoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CatCList</name>   <modifier>*</modifier></type><name>opclist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * We search through all btree opclasses to see if one matches.  This is a
	 * bit inefficient but there is no better index available.  It also saves
	 * making an explicit check that the opfamily belongs to btree.
	 */</comment>
	<expr_stmt><expr><name>opclist</name> <operator>=</operator> <call><name>SearchSysCacheList1</name><argument_list>(<argument><expr><name>CLAAMNAMENSP</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>BTREE_AM_OID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opclist</name><operator>-&gt;</operator><name>n_members</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>classtup</name> <init>= <expr><operator>&amp;</operator><name><name>opclist</name><operator>-&gt;</operator><name>members</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>tuple</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_opclass</name></type> <name>classform</name> <init>= <expr><operator>(</operator><name>Form_pg_opclass</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>classtup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>classform</name><operator>-&gt;</operator><name>opcfamily</name></name> <operator>==</operator> <name>opfamilyoid</name> <operator>&amp;&amp;</operator>
			<name><name>classform</name><operator>-&gt;</operator><name>opcintype</name></name> <operator>==</operator> <name>datatypeoid</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ReleaseCatCacheList</name><argument_list>(<argument><expr><name>opclist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
