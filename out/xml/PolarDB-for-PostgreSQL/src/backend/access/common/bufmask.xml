<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/common/bufmask.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * bufmask.c
 *	  Routines for buffer masking. Used to mask certain bits
 *	  in a page which can be different when the WAL is generated
 *	  and when the WAL is applied.
 *
 * Portions Copyright (c) 2016-2018, PostgreSQL Global Development Group
 *
 * Contains common routines required for masking a page.
 *
 * IDENTIFICATION
 *	  src/backend/storage/buffer/bufmask.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/bufmask.h"</cpp:file></cpp:include>

<comment type="block">/*
 * mask_page_lsn
 *
 * In consistency checks, the LSN of the two pages compared will likely be
 * different because of concurrent operations when the WAL is generated and
 * the state of the page when WAL is applied. Also, mask out checksum as
 * masking anything else on page means checksum is not going to match as well.
 */</comment>
<function><type><name>void</name></type>
<name>mask_page_lsn_and_checksum</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PageHeader</name></type>	<name>phdr</name> <init>= <expr><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PageXLogRecPtrSet</name><argument_list>(<argument><expr><name><name>phdr</name><operator>-&gt;</operator><name>pd_lsn</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint64</name><operator>)</operator> <name>MASK_MARKER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>phdr</name><operator>-&gt;</operator><name>pd_checksum</name></name> <operator>=</operator> <name>MASK_MARKER</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * mask_page_hint_bits
 *
 * Mask hint bits in PageHeader. We want to ignore differences in hint bits,
 * since they can be set without emitting any WAL.
 */</comment>
<function><type><name>void</name></type>
<name>mask_page_hint_bits</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PageHeader</name></type>	<name>phdr</name> <init>= <expr><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Ignore prune_xid (it's like a hint-bit) */</comment>
	<expr_stmt><expr><name><name>phdr</name><operator>-&gt;</operator><name>pd_prune_xid</name></name> <operator>=</operator> <name>MASK_MARKER</name></expr>;</expr_stmt>

	<comment type="block">/* Ignore PD_PAGE_FULL and PD_HAS_FREE_LINES flags, they are just hints. */</comment>
	<expr_stmt><expr><call><name>PageClearFull</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PageClearHasFreeLinePointers</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * During replay, if the page LSN has advanced past our XLOG record's LSN,
	 * we don't mark the page all-visible. See heap_xlog_visible() for
	 * details.
	 */</comment>
	<expr_stmt><expr><call><name>PageClearAllVisible</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * mask_unused_space
 *
 * Mask the unused space of a page between pd_lower and pd_upper.
 */</comment>
<function><type><name>void</name></type>
<name>mask_unused_space</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>pd_lower</name> <init>= <expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_lower</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pd_upper</name> <init>= <expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_upper</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>pd_special</name> <init>= <expr><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_special</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Sanity check */</comment>
	<if_stmt><if>if <condition>(<expr><name>pd_lower</name> <operator>&gt;</operator> <name>pd_upper</name> <operator>||</operator> <name>pd_special</name> <operator>&lt;</operator> <name>pd_upper</name> <operator>||</operator>
		<name><name>pd_lower</name> <argument_list type="generic">&lt; <argument><expr><name>SizeOfPageHeaderData</name> <operator>||</operator> <name>pd_special</name></expr></argument> &gt;</argument_list></name> <name>BLCKSZ</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid page pd_lower %u pd_upper %u pd_special %u\n"</literal></expr></argument>,
			 <argument><expr><name>pd_lower</name></expr></argument>, <argument><expr><name>pd_upper</name></expr></argument>, <argument><expr><name>pd_special</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>page</name> <operator>+</operator> <name>pd_lower</name></expr></argument>, <argument><expr><name>MASK_MARKER</name></expr></argument>, <argument><expr><name>pd_upper</name> <operator>-</operator> <name>pd_lower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * mask_lp_flags
 *
 * In some index AMs, line pointer flags can be modified in master without
 * emitting any WAL record.
 */</comment>
<function><type><name>void</name></type>
<name>mask_lp_flags</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OffsetNumber</name></type> <name>offnum</name></decl>,
				<decl><type ref="prev"/><name>maxoff</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>maxoff</name> <operator>=</operator> <call><name>PageGetMaxOffsetNumber</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>offnum</name> <operator>=</operator> <name>FirstOffsetNumber</name></expr>;</init>
		 <condition><expr><name>offnum</name> <operator>&lt;=</operator> <name>maxoff</name></expr>;</condition>
		 <incr><expr><name>offnum</name> <operator>=</operator> <call><name>OffsetNumberNext</name><argument_list>(<argument><expr><name>offnum</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ItemId</name></type>		<name>itemId</name> <init>= <expr><call><name>PageGetItemId</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><name>offnum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>ItemIdIsUsed</name><argument_list>(<argument><expr><name>itemId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>itemId</name><operator>-&gt;</operator><name>lp_flags</name></name> <operator>=</operator> <name>LP_UNUSED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * mask_page_content
 *
 * In some index AMs, the contents of deleted pages need to be almost
 * completely ignored.
 */</comment>
<function><type><name>void</name></type>
<name>mask_page_content</name><parameter_list>(<parameter><decl><type><name>Page</name></type> <name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Mask Page Content */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>page</name> <operator>+</operator> <name>SizeOfPageHeaderData</name></expr></argument>, <argument><expr><name>MASK_MARKER</name></expr></argument>,
		   <argument><expr><name>BLCKSZ</name> <operator>-</operator> <name>SizeOfPageHeaderData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Mask pd_lower and pd_upper */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_lower</name></expr></argument>, <argument><expr><name>MASK_MARKER</name></expr></argument>,
		   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>PageHeader</name><operator>)</operator> <name>page</name><operator>)</operator><operator>-&gt;</operator><name>pd_upper</name></expr></argument>, <argument><expr><name>MASK_MARKER</name></expr></argument>,
		   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
