<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/logindex/polar_logindex_iterator.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_logindex_iterator.c
 *  
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *    src/backend/access/logindex/polar_logindex_iterator.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/relfilenode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/palloc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UINT32_ACCESS_ONCE</name><parameter_list>(<parameter><type><name>var</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>((uint32)(*((volatile uint32 *)&amp;(var))))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>log_index_get_table_data</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_mem_table_t</name>  <modifier>*</modifier><modifier>*</modifier></type><name>mem_table</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>log_index_set_start_order</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>log_index_page_lsn_t</name> <modifier>*</modifier></type>
<name>log_index_tbl_stack_next_item</name><parameter_list>(<parameter><decl><type><name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>uint16</name> <modifier>*</modifier></type><name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_page_lsn_t</name>      <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>item_size</name></name> <operator>==</operator> <name>LOG_INDEX_PAGE_STACK_ITEM_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_index_page_lsn_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>idx</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>item_size</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>iter_pos</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>item_size</name></name></expr>;</expr_stmt>

	<return>return <expr><name>item</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>log_index_tbl_stack_pop_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_page_lsn_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>idx</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>stack</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>iter_pos</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>iter_pos</name></name> <operator>==</operator> <name><name>item</name><operator>-&gt;</operator><name>item_size</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>prev_lsn</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>lsn</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>lsn</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>lsn</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>iter_pos</name></name><operator>--</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>iter_pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_tbl_stack_release</name><parameter_list>(<parameter><decl><type><name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_page_lsn_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type>
<name>log_index_iter_push_tbl_stack</name><parameter_list>(<parameter><decl><type><name>log_index_page_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type><name>tbl_stack</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_index_tbl_stack_lsn_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tbl_stack</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>tbl_stack</name></expr>;</expr_stmt>
	<return>return <expr><name>tbl_stack</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_pop_tbl_stack</name><parameter_list>(<parameter><decl><type><name>log_index_page_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type><name>tbl_stack</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>tbl_stack</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>tbl_stack</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_index_tbl_stack_release</name><argument_list>(<argument><expr><name>tbl_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tbl_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_stack_release</name><parameter_list>(<parameter><decl><type><name>log_index_page_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type><name>tbl_stack</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>tbl_stack</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>log_index_tbl_stack_release</name><argument_list>(<argument><expr><name>tbl_stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>tbl_stack</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_index_pop_tbl_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tbl_stack</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>BufferTag</name> <modifier>*</modifier></type>
<name>log_index_get_seg_page_tag</name><parameter_list>(<parameter><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>log_seg_id_t</name></type> <name>seg_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_item_seg_t</name>  <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>log_index_item_seg</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_seg_id_t</name></type>    <name>head_seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_head_t</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>seg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>head_seg</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>head_seg</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>log_index_item_head</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>head_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>head</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>&amp;</operator><name><name>head</name><operator>-&gt;</operator><name>tag</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>XLogRecPtr</name></type>
<name>log_index_get_seg_prev_lsn</name><parameter_list>(<parameter><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
						   <parameter><decl><type><name>log_seg_id_t</name></type> <name>seg_id</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_item_seg_t</name>  <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>log_index_item_seg</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_seg_id_t</name></type>    <name>head_seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_seg_id_t</name></type>    <name>prev_seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_head_t</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>seg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>head_seg</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>head_seg</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>head_seg</name> <operator>==</operator> <name>seg_id</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>log_index_item_head</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name><name>head</name><operator>-&gt;</operator><name>prev_page_lsn</name></name></expr>;</return></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return <expr><call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>prev_seg</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>prev_seg</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_seg</name> <operator>==</operator> <name><name>seg</name><operator>-&gt;</operator><name>head_seg</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>log_index_item_head</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>prev_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>head</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name><name>head</name><operator>-&gt;</operator><name>number</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>log_index_item_seg</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>prev_seg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>seg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name><name>seg</name><operator>-&gt;</operator><name>number</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_page_iterate_push_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>,
								<parameter><decl><type><name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name></decl></parameter>,
								<parameter><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
								<parameter><decl><type><name>log_seg_id_t</name></type> <name>seg_id</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>prev_correct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_page_lsn_t</name> <modifier>*</modifier></type><name>stack_item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16_t</name></type>             <name>stack_idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_head_t</name> <modifier>*</modifier></type><name>head</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_seg_t</name> <modifier>*</modifier></type><name>seg</name> <init>= <expr><call><name>log_index_item_seg</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_seg_id_t</name></type>   <name>head_seg</name> <init>= <expr><name><name>seg</name><operator>-&gt;</operator><name>head_seg</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>head_seg</name> <operator>==</operator> <name>seg_id</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>log_index_item_head</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>head</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>seg</name><operator>-&gt;</operator><name>number</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>head</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>
			</then><else>: <expr><call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prev_correct</name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>iter_prev_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>prev_correct</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>min_lsn</name></name> <operator>&amp;&amp;</operator> <name>l</name> <operator>&lt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>iter_max_lsn</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * Push lsn only when previous page lsn is in this table.
			 * Otherwise the table contains previous page lsn is not flushed
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prev_correct</name> <operator>==</operator> <name>false</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_HOLLOW</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Check previous lsn failed and there exists hollow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>stack_item</name> <operator>=</operator> <call><name>log_index_tbl_stack_next_item</name><argument_list>(<argument><expr><name>stack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stack_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>stack_item</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>=</operator> <call><name>log_index_get_seg_prev_lsn</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>head</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>LOG_INDEX_COPY_SEG_INFO</name><argument_list>(<argument><expr><name>stack_item</name></expr></argument>, <argument><expr><name>stack_idx</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>LOG_INDEX_COPY_SEG_INFO</name><argument_list>(<argument><expr><name>stack_item</name></expr></argument>, <argument><expr><name>stack_idx</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>min_lsn</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>min_lsn</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If previous lsn page check failed and no need to search forward
			 * the table which contains previous page lsn is not flushed.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name>prev_correct</name> <operator>==</operator> <name>false</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_HOLLOW</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"There exists hollow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_iterate_table_data</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>log_item_head_t</name> <modifier>*</modifier></type><name>item_head</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_item_seg_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_seg_id_t</name></type>    <name>item_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type><name>tbl_stack</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_page_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>lsn_stack</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>prev_correct</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>item_head</name><operator>-&gt;</operator><name>number</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_LOG_LOGINDEX_TABLE_INFO</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The page's log index should be in this table,but we did't found it"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>prev_correct</name> <operator>=</operator> <ternary><condition><expr><name><name>iter</name><operator>-&gt;</operator><name>iter_prev_lsn</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>log_index_iter_push_tbl_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tbl_stack</name> <operator>=</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>tbl_stack</name><operator>-&gt;</operator><name>prev_page_lsn</name></name> <operator>=</operator> <name><name>item_head</name><operator>-&gt;</operator><name>prev_page_lsn</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name>item_id</name> <operator>=</operator> <name><name>item_head</name><operator>-&gt;</operator><name>tail_seg</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>item_id</name> <operator>!=</operator> <name>LOG_INDEX_TBL_INVALID_SEG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>log_index_item_seg</name><argument_list>(
				   <argument><expr><name>table</name></expr></argument>,
				   <argument><expr><name>item_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Compare pointer address to check whether it's head
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>item</name> <operator>==</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>item_head</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>item</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>item</name><operator>-&gt;</operator><name>number</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>POLAR_LOG_LOGINDEX_TABLE_INFO</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"There should be one more log index segment in this table"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>


		<expr_stmt><expr><call><name>log_index_page_iterate_push_lsn</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>tbl_stack</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>item_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev_correct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>item_id</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>prev_seg</name></name></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>log_index_page_iterate_push_lsn</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>tbl_stack</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>item_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev_correct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOG_INDEX_SUPPORT_NO_PREVIOUS_LSN</name></cpp:ifndef>

	<if_stmt><if>if <condition>(<expr><name><name>item_head</name><operator>-&gt;</operator><name>prev_page_lsn</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_push_tbl_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_item_head_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>log_index_tbl_find</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>min_lsn</name> <init>= <expr><call><name>LOG_INDEX_SEG_MIN_LSN</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>max_lsn</name> <init>= <expr><call><name>log_index_item_max_lsn</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>log_index_page_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>lsn_stack</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>log_index_tbl_stack_lsn_t</name> <modifier>*</modifier></type><name>prev_stack</name> <init>= <expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>prev_stack</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>prev_stack</name><operator>-&gt;</operator><name>prev_page_lsn</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter_prev_lsn</name></name> <operator>=</operator> <name><name>prev_stack</name><operator>-&gt;</operator><name>prev_page_lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/*
		 * If item's min_lsn larger than iter-&gt;max_lsn then we search forward
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>min_lsn</name> <operator>&gt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>max_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>max_lsn</name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>min_lsn</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * 1. Push lsn in set [iter-&gt;min_lsn, iter-&gt;iter_max_lsn]
		 * 2. If previous page lsn is set, we need to check it's in this table
		 * 3. Update iter-&gt;iter_max_lsn to avoid push overlap value
		 */</comment>
		<expr_stmt><expr><call><name>log_index_iterate_table_data</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter_max_lsn</name></name> <operator>=</operator> <name>max_lsn</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>log_index_table_in_range</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_ACTIVE</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>min_lsn</name></name> <operator>&gt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>max_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>max_lsn</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>min_lsn</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>log_idx_table_id_t</name></type>
<name>log_index_push_mem_tbl_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>               <name>mid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name>     <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_idx_table_id_t</name></type>  <name>tid</name> <init>= <expr><name><name>iter</name><operator>-&gt;</operator><name>max_idx_table_id</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>                <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>                <name>hash_lock_held</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><call><name>polar_trace_logindex</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><name>POLAR_LOG_BUFFER_TAG_FORMAT</name><literal type="string">" search mem from tid=%ld"</literal></expr></argument>,
												  <argument><expr><call><name>POLAR_LOG_BUFFER_TAG</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call><operator>,</operator>
										   <call><name>errhidestmt</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>,</operator>
										   <call><name>errhidecontext</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>tid</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>logindex_snapshot</name><operator>-&gt;</operator><name>mem_tbl_size</name></name></expr>;</expr_stmt>

	<comment type="block">/* Care about &gt; or &gt;= */</comment>
	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type>     <name>state</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LWLock</name>     <modifier>*</modifier></type><name>table_lock</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>table_lock</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>table_lock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_ACTIVE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>LOG_INDEX_HASH_LOCK</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>hash_lock_held</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We seach from big to small.If tid is different
		 * then this memory table data is changed
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>!=</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name> <operator>&amp;&amp;</operator> <name>tid</name> <operator>==</operator> <call><name>LOG_INDEX_MEM_TBL_TID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>LOG_INDEX_MEM_TBL_STATE_FREE</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>log_index_table_in_range</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>log_index_push_tbl_lsn</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>tid</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>hash_lock_held</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>LOG_INDEX_HASH_LOCK</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>hash_lock_held</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>table_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_PREV_ID</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><operator>!</operator><name>done</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name><operator>)</operator></expr>)</condition>;</do>

	<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>==</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>tid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>log_idx_table_id_t</name></type>
<name>log_index_next_search_file_tid</name><parameter_list>(<parameter><decl><type><name>log_idx_table_id_t</name></type> <name>prev_idx_tid</name></decl></parameter>, <parameter><decl><type><name>log_index_meta_t</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>hollow</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_idx_table_id_t</name></type> <name>tid</name></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>hollow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * The tid is the last searched memory table id, so we search file table from tid-1.
	 * If tid is UINT64_MAX, then we search from saved max table id.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>prev_idx_tid</name> <operator>==</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>meta</name><operator>-&gt;</operator><name>max_idx_table_id</name></name></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>tid</name> <operator>=</operator> <name>prev_idx_tid</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>==</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>LOG_INDEX_TABLE_INVALID_ID</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>&gt;</operator> <name><name>meta</name><operator>-&gt;</operator><name>max_idx_table_id</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If destinated table id is larger than max saved table id,then destinated
			 * table is not saved
			 */</comment>
			<expr_stmt><expr><operator>*</operator><name>hollow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<return>return <expr><name>LOG_INDEX_TABLE_INVALID_ID</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>tid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>log_index_check_hollow_table</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>,
							 <parameter><decl><type><name>log_idx_table_id_t</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>log_index_meta_t</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LOG_INDEX_COPY_META</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>max_idx_table_id</name></name> <operator>&lt;</operator> <name>tid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LOG_INDEX_IO_LOCK</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>log_index_get_meta</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>logindex_snapshot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>logindex_snapshot</name><operator>-&gt;</operator><name>meta</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_index_meta_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to get logindex meta from storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LOG_INDEX_IO_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>max_idx_table_id</name></name> <operator>&lt;</operator> <name>tid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_HOLLOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_HOLLOW</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>log_index_check_bloom_not_exists</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_idx_table_id_t</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_file_table_bloom_t</name> <modifier>*</modifier></type><name>bloom</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>bloom_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bloom_filter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>not_exists</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bloom_data</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>LOG_INDEX_FILE_TBL_BLOOM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Notice: We will acquire LOG_INDEX_BLOOM_LRU_LOCK in log_index_get_tbl_bloom function */</comment>
	<expr_stmt><expr><name>bloom</name> <operator>=</operator> <call><name>log_index_get_tbl_bloom</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * POLAR: a bloom page contains 2 table(t1, t2) logindex info, for
	 * logindex table when we read t1 bloom data, maybe t2 bloom data
	 * is still zero page, so we need force invalid bloom cache, and try again
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>bloom</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>==</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LOG_INDEX_BLOOM_LRU_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_logindex_invalid_bloom_cache</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bloom</name> <operator>=</operator> <call><name>log_index_get_tbl_bloom</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>bloom_data</name></expr></argument>, <argument><expr><name>bloom</name></expr></argument>, <argument><expr><name>LOG_INDEX_FILE_TBL_BLOOM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LOG_INDEX_BLOOM_LRU_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tid</name> <operator>!=</operator> <name><name>bloom_data</name><operator>-&gt;</operator><name>idx_table_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Failed to get logindex bloom data,dest_tid %lu, got %lu"</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name><name>bloom_data</name><operator>-&gt;</operator><name>idx_table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>bloom_data</name><operator>-&gt;</operator><name>max_lsn</name></name> <operator>&lt;</operator> <name><name>iter</name><operator>-&gt;</operator><name>min_lsn</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt>

		<comment type="block">/* We did not check tag from this bloom table, so return false directly, which means it may exists */</comment>
		<expr_stmt><expr><name>not_exists</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>bloom_init_struct</name><argument_list>(<argument><expr><name><name>bloom_data</name><operator>-&gt;</operator><name>bloom_bytes</name></name></expr></argument>, <argument><expr><name><name>bloom_data</name><operator>-&gt;</operator><name>buf_size</name></name></expr></argument>,
								   <argument><expr><name>LOG_INDEX_BLOOM_ELEMS_NUM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>not_exists</name> <operator>=</operator> <call><name>bloom_lacks_element</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>tag</name></name><operator>)</operator></expr></argument>,
										 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferTag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>bloom_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>not_exists</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_push_file_tbl_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_idx_table_id_t</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_meta_t</name></type> <name>meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_file_segment_t</name>  <modifier>*</modifier></type><name>min_seg</name> <init>= <expr><operator>&amp;</operator><name><name>meta</name><operator>.</operator><name>min_segment_info</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>log_index_check_hollow_table</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create page iter because of logindex table hollow, and tid is %ld"</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><call><name>polar_trace_logindex</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><name>POLAR_LOG_BUFFER_TAG_FORMAT</name><literal type="string">" search file from tid=%ld"</literal></expr></argument>,
												  <argument><expr><call><name>POLAR_LOG_BUFFER_TAG</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errhidestmt</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errhidecontext</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<while>while <condition>(<expr><name>tid</name> <operator>!=</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name> <operator>&amp;&amp;</operator>
			<name>tid</name> <operator>&gt;=</operator> <name><name>min_seg</name><operator>-&gt;</operator><name>min_idx_table_id</name></name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>tid</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>logindex_snapshot</name><operator>-&gt;</operator><name>mem_tbl_size</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>mem_table</name> <init>= <expr><call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LWLock</name> <modifier>*</modifier></type><name>table_lock</name> <init>= <expr><call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>mem_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>pushed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Try to push data if this table is already readed in the shared memory table */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>LWLockConditionalAcquire</name><argument_list>(<argument><expr><name>table_lock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>mem_table</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_FLUSHED</name><operator>)</operator>
					<operator>&amp;&amp;</operator> <operator>(</operator><name>tid</name> <operator>==</operator> <call><name>LOG_INDEX_MEM_TBL_TID</name><argument_list>(<argument><expr><name>mem_table</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>log_index_push_tbl_lsn</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mem_table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>pushed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>table_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* If this table does not in shared memory,then we check whether this tag exists in this table from bloom data */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pushed</name> <operator>&amp;&amp;</operator>
				<operator>!</operator><call><name>log_index_check_bloom_not_exists</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* The mem_table will not be NULL if we read this table data from memory table */</comment>
			<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>log_index_read_table</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>table</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Failed to read table which id is %ld"</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><call><name>log_index_push_tbl_lsn</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * If mem_table is not NULL, then this table is returned with mem_table's lock.
			 * So we have to release its lock
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>mem_table</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>mem_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>tid</name><operator>--</operator></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>log_index_page_iter_t</name></type>
<name>polar_logindex_create_page_iterator</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>min_lsn</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>max_lsn</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>before_promote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_idx_table_id_t</name></type>        <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>         <name>oldcontext</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>max_lsn</name> <operator>&gt;</operator> <name>min_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><call><name>polar_logindex_memory_context</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Large enough to save lsn which comes from one table */</comment>
	<expr_stmt><expr><name>iter</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_index_page_iter_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>tag</name></name><operator>)</operator></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferTag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>max_lsn</name></name> <operator>=</operator> <name>max_lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>min_lsn</name></name> <operator>=</operator> <name>min_lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter_prev_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>iter_max_lsn</name></name> <operator>=</operator> <name>max_lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>lsn_stack</name><operator>.</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_HASH_PAGE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FORWARD</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>lsn_info</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>before_promote</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>log_index_promoted_info_t</name> <modifier>*</modifier></type><name>promote_info</name> <init>= <expr><operator>&amp;</operator><name><name>logindex_snapshot</name><operator>-&gt;</operator><name>promoted_info</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>max_lsn</name> <operator>&gt;=</operator> <name><name>promote_info</name><operator>-&gt;</operator><name>old_rw_max_inserted_lsn</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"The max lsn %lX for page iterator should not be larger than max lsn %lX generated by old rw"</literal></expr></argument>,
				 <argument><expr><name>max_lsn</name></expr></argument>, <argument><expr><name><name>promote_info</name><operator>-&gt;</operator><name>old_rw_max_inserted_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If create this page iterator for replay during online promote ,then we only search to the max logindex table id
		 * generated by old rw node
		 */</comment>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>max_idx_table_id</name></name> <operator>=</operator> <name><name>promote_info</name><operator>-&gt;</operator><name>old_rw_max_tid</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><name>LOG_INDEX_SNAPSHOT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>max_idx_table_id</name></name> <operator>=</operator> <name><name>logindex_snapshot</name><operator>-&gt;</operator><name>max_idx_table_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><name>LOG_INDEX_SNAPSHOT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>log_index_push_mem_tbl_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>log_index_push_file_tbl_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ITERATE_STATE_CORRUPTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_logindex_release_page_iterator</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>log_index_stack_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>lsn_stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>log_index_lsn_t</name> <modifier>*</modifier></type>
<name>polar_logindex_page_iterator_next</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_index_page_stack_lsn_t</name> <modifier>*</modifier></type><name>stack</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>lsn_stack</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name> <init>= <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>lsn_info</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>got</name> <init>= <expr><call><name>log_index_tbl_stack_pop_lsn</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name>lsn_info</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><operator>!</operator><name>got</name> <operator>&amp;&amp;</operator> <name><name>stack</name><operator>-&gt;</operator><name>head</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>log_index_pop_tbl_stack</name><argument_list>(<argument><expr><name>stack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>got</name> <operator>=</operator> <call><name>log_index_tbl_stack_pop_lsn</name><argument_list>(<argument><expr><name><name>stack</name><operator>-&gt;</operator><name>head</name></name></expr></argument>, <argument><expr><name>lsn_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><ternary><condition><expr><name>got</name></expr> ?</condition><then> <expr><name>lsn_info</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_logindex_page_iterator_end</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>lsn_stack</name><operator>.</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>log_index_iter_state_t</name></type>
<name>polar_logindex_page_iterator_state</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_set_search_table</name><parameter_list>(<parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_idx_table_id_t</name></type> <name>tid</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>idx_table_id</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>&gt;</operator> <name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* If the first table search, */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>last_search_tid</name></name> <operator>==</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt></block_content></block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_BACKWARD</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>&gt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>min_lsn</name></name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>&lt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>idx_table_id</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>!=</operator> <name><name>table</name><operator>-&gt;</operator><name>min_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_BACKWARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>last_search_tid</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>XLogRecPtr</name></type>
<name>log_index_get_order_lsn</name><parameter_list>(<parameter><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_seg_id_t</name></type>    <name>seg_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>           <name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_seg_t</name>  <modifier>*</modifier></type><name>seg</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_item_head_t</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>      <name>lsn</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>order</name> <operator>&gt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>last_order</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>InvalidXLogRecPtr</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * POLAR: To prevent CPU from preloading idx_order[order] before last_order
	 * was loaded. Because the last_order could be restored by other CPU during
	 * preloading idx_order[order] and loading last_order.
	 */</comment>
	<expr_stmt><expr><call><name>pg_read_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The valid order value start from 1 and the array index start from 0
	 */</comment>
	<expr_stmt><expr><name>seg_id</name> <operator>=</operator> <call><name>LOG_INDEX_SEG_ORDER</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>idx_order</name><index>[<expr><name>order</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>LOG_INDEX_ID_ORDER</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>idx_order</name><index>[<expr><name>order</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>seg</name> <operator>=</operator> <call><name>log_index_item_seg</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>seg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>seg</name><operator>-&gt;</operator><name>head_seg</name></name> <operator>==</operator> <name>seg_id</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>head</name> <operator>=</operator> <call><name>log_index_item_head</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name><name>head</name><operator>-&gt;</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lsn</name> <operator>=</operator> <call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>head</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>lsn_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>LOG_INDEX_COPY_LSN_INFO</name><argument_list>(<argument><expr><name>lsn_info</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>idx</name> <operator>&lt;</operator> <name><name>seg</name><operator>-&gt;</operator><name>number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>lsn</name> <operator>=</operator> <call><name>LOG_INDEX_COMBINE_LSN</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>seg</name><operator>-&gt;</operator><name>suffix_lsn</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>lsn_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>LOG_INDEX_COPY_LSN_INFO</name><argument_list>(<argument><expr><name>lsn_info</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>lsn_info</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>prev_lsn</name></name> <operator>=</operator> <call><name>log_index_get_seg_prev_lsn</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lsn_info</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><call><name>log_index_get_seg_page_tag</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>seg_id</name></expr></argument>)</argument_list></call></expr></argument>,
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BufferTag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>lsn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_set_search_start_order</name><parameter_list>(<parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type>      <name>order</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * When check overlap and find no overlapping data, the iterator's mem_table_id will
	 * not be changed, so no need to calc the start order for this table
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>!=</operator> <name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * The last_order points to next index to save data. And saved data length is last_order - 1
	 */</comment>
	<while>while <condition>(<expr><name>order</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>last_order</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>lsn</name> <init>= <expr><call><name>log_index_get_order_lsn</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn</name> <operator>!=</operator> <name>InvalidXLogRecPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>lsn</name> <operator>&gt;=</operator> <name><name>iter</name><operator>-&gt;</operator><name>start_lsn</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>order</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_set_start_order</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table_data</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_BACKWARD</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>table_data</name> <operator>=</operator> <call><name>log_index_get_table_data</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>table</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>log_index_set_search_start_order</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>table_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_search_mem_tbl_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>mid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_idx_table_id_t</name></type>  <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>search_file</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><name>LOG_INDEX_SNAPSHOT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>logindex_snapshot</name><operator>-&gt;</operator><name>max_idx_table_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><name>LOG_INDEX_SNAPSHOT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>tid</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>logindex_snapshot</name><operator>-&gt;</operator><name>mem_tbl_size</name></name></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>state</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LWLock</name> <modifier>*</modifier></type><name>table_lock</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>table_lock</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>table_lock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>tid</name> <operator>!=</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name> <operator>&amp;&amp;</operator> <name>tid</name> <operator>==</operator> <call><name>LOG_INDEX_MEM_TBL_TID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <name>state</name> <operator>!=</operator> <name>LOG_INDEX_MEM_TBL_STATE_FREE</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>LOG_INDEX_MEM_TBL_STATE_ACTIVE</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><name>LOG_INDEX_SNAPSHOT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>log_index_set_search_table</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><name>LOG_INDEX_SNAPSHOT_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>log_index_set_search_table</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name>tid</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>search_file</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>table_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>mid</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL_PREV_ID</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>search_file</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>log_index_set_start_order</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>log_index_search_file_tbl_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_idx_table_id_t</name></type> <name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_meta_t</name></type> <name>meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>            <name>hollow</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_file_segment_t</name>  <modifier>*</modifier></type><name>min_seg</name> <init>= <expr><operator>&amp;</operator><name><name>meta</name><operator>.</operator><name>min_segment_info</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LOG_INDEX_COPY_META</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>&gt;</operator> <name><name>meta</name><operator>.</operator><name>max_lsn</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* If the first table search, */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>last_search_tid</name></name> <operator>==</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FINISHED</name></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>=</operator> <name><name>iter</name><operator>-&gt;</operator><name>last_search_tid</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_BACKWARD</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<return>return ;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>tid</name> <operator>=</operator> <call><name>log_index_next_search_file_tid</name><argument_list>(<argument><expr><name><name>iter</name><operator>-&gt;</operator><name>last_search_tid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hollow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hollow</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_HOLLOW</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to search next tid for lsn iter, and prev tid is %ld"</literal></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>last_search_tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return ;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>tid</name> <operator>!=</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name>
			<operator>&amp;&amp;</operator> <name>tid</name> <operator>&gt;=</operator> <name><name>min_seg</name><operator>-&gt;</operator><name>min_idx_table_id</name></name> <operator>&amp;&amp;</operator> <name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>mem_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table_data</name> <init>= <expr><call><name>log_index_read_table</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>table_data</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Failed to read table which id is %ld"</literal></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>log_index_set_search_table</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>table_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>mem_table</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>mem_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tid</name><operator>--</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>=</operator> <name><name>min_seg</name><operator>-&gt;</operator><name>min_idx_table_id</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_BACKWARD</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>log_index_set_start_order</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>log_index_lsn_iter_t</name></type>
<name>polar_logindex_create_lsn_iterator</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><call><name>polar_logindex_memory_context</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_index_lsn_iter_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>lsn_info</name><operator>.</operator><name>tag</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>tag</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * The valid table id start from 1 and if the iterator start from InvalidXLogRecPtr
	 * then we need to return data from first table
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>lsn</name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>log_index_meta_t</name></type> <name>meta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>log_index_file_segment_t</name>  <modifier>*</modifier></type><name>min_seg</name> <init>= <expr><operator>&amp;</operator><name><name>meta</name><operator>.</operator><name>min_segment_info</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>LOG_INDEX_COPY_META</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>min_seg</name><operator>-&gt;</operator><name>min_idx_table_id</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Incorrect lsn to create log index lsn iterator"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>iter</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>log_idx_table_data_t</name> <modifier>*</modifier></type>
<name>log_index_get_table_data</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_mem_table_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>r_table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>mid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_meta_t</name></type> <name>meta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table_data</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The valid table id start from 1.
	 * And the ring memory table array index start from 0
	 */</comment>
	<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>logindex_snapshot</name><operator>-&gt;</operator><name>mem_tbl_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>LOG_INDEX_MEM_TBL</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>LOG_INDEX_MEM_TBL_TID</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>r_table</name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
		<return>return <expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LOG_INDEX_COPY_META</name><argument_list>(<argument><expr><operator>&amp;</operator><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>&gt;</operator> <name><name>meta</name><operator>.</operator><name>max_idx_table_id</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>table_data</name> <operator>=</operator> <call><name>log_index_read_table</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name></expr></argument>, <argument><expr><name>r_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>table_data</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_HOLLOW</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to read table %ld, and there is hollow"</literal></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>table_data</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>log_index_lsn_iterator_update</name><parameter_list>(<parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<if_stmt><if>if <condition>(<expr><name>table</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>idx</name></name> <operator>==</operator> <name><name>table_data</name><operator>-&gt;</operator><name>last_order</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Switch to next table if we read table data from storage */</comment>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>LOG_INDEX_MEM_TBL_STATE</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>LOG_INDEX_MEM_TBL_STATE_ACTIVE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We update last_order and logindex memory table from active to inactive without lock.
		 * If we check last_order in background process before check memory table state, and startup
		 * insert new lsn and change table state to inactive, then we may lose some items
		 */</comment>
		<decl_stmt><decl><type><name>uint32</name></type> <name>last_order</name> <init>= <expr><call><name>UINT32_ACCESS_ONCE</name><argument_list>(<argument><expr><name><name>table_data</name><operator>-&gt;</operator><name>last_order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>(</operator><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator> <operator>==</operator> <name>table_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>idx</name></name> <operator>==</operator> <name>last_order</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name><operator>++</operator></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>log_index_lsn_t</name> <modifier>*</modifier></type>
<name>polar_logindex_lsn_iterator_next</name><parameter_list>(<parameter><decl><type><name>log_index_snapshot_t</name> <modifier>*</modifier></type><name>logindex_snapshot</name></decl></parameter>, <parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>log_idx_table_data_t</name> <modifier>*</modifier></type><name>table_data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_mem_table_t</name> <modifier>*</modifier></type><name>mem_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>log_index_lsn_t</name> <modifier>*</modifier></type><name>lsn_info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type>   <name>oldcontext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><call><name>polar_logindex_memory_context</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>new_table</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>idx_table_id</name></name> <operator>==</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>ITERATE_STATE_FORWARD</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>last_search_tid</name></name> <operator>=</operator> <name>LOG_INDEX_TABLE_INVALID_ID</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_index_search_mem_tbl_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>ITERATE_STATE_FORWARD</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>log_index_search_file_tbl_lsn</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>iter</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>ITERATE_STATE_BACKWARD</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>new_table</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mem_table</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>(</operator><name>table_data</name> <operator>=</operator> <call><name>log_index_get_table_data</name><argument_list>(<argument><expr><name>logindex_snapshot</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mem_table</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * If table state is ACTIVE and idx equals last_order return InvalidXLogRecPtr
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>log_index_get_order_lsn</name><argument_list>(<argument><expr><name>table_data</name></expr></argument>, <argument><expr><name><name>iter</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>lsn_info</name></name></expr></argument>)</argument_list></call>
					<operator>!=</operator> <name>InvalidXLogRecPtr</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>lsn_info</name> <operator>=</operator> <operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>lsn_info</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>iter</name><operator>-&gt;</operator><name>idx</name></name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>new_table</name> <operator>=</operator> <call><name>log_index_lsn_iterator_update</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>mem_table</name></expr></argument>, <argument><expr><name>table_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/*
			 * If mem_table is not NULL, then table_data is returned with mem_table's lock.
			 * So we have to release its lock
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>mem_table</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>LOG_INDEX_MEM_TBL_LOCK</name><argument_list>(<argument><expr><name>mem_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	while <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>lsn_info</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>new_table</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>lsn_info</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_logindex_release_lsn_iterator</name><parameter_list>(<parameter><decl><type><name>log_index_lsn_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>XLogRecPtr</name></type>
<name>polar_logindex_page_iterator_max_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>max_lsn</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>XLogRecPtr</name></type>
<name>polar_logindex_page_iterator_min_lsn</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>iter</name><operator>-&gt;</operator><name>min_lsn</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>BufferTag</name>  <modifier>*</modifier></type>
<name>polar_logindex_page_iterator_buf_tag</name><parameter_list>(<parameter><decl><type><name>log_index_page_iter_t</name></type> <name>iter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name><name>iter</name><operator>-&gt;</operator><name>tag</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
