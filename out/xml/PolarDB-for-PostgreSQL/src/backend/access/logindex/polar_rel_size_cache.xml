<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/logindex/polar_rel_size_cache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_rel_size_cache.c
 *    
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *           src/backend/access/logindex/polar_rel_size_cache.c
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_logindex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_rel_size_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum
<block>{
	<decl><name>NEXT</name></decl>,
	<decl><name>END</name></decl>
}</block></enum></type> <name>search_state</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REL_SIZE_TABLE_INVALID_ID</name></cpp:macro>       <cpp:value>(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REL_SIZE_TABLE_NEXT_ID</name><parameter_list>(<parameter><type><name>cache</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>LOOP_NEXT_VALUE((id), (cache)-&gt;table_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REL_SIZE_TABLE_PREV_ID</name><parameter_list>(<parameter><type><name>cache</name></type></parameter>, <parameter><type><name>id</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>LOOP_PREV_VALUE(i(id), (cache)-&gt;table_size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REL_TABLE_IN_SHARED_MEM</name><parameter_list>(<parameter><type><name>cache</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(((const char *)(t)) &gt;= &amp;cache-&gt;table_data[0] &amp;&amp; \
												((const char *)(t)) &lt;= &amp;cache-&gt;table_data[cache-&gt;table_size * POLAR_REL_CACHE_TABLE_SIZE - 1])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REL_SIZE_CACHE_TABLE</name><parameter_list>(<parameter><type><name>cache</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>((polar_rel_size_table_t *)(&amp;(cache)-&gt;table_data[(i)*POLAR_REL_CACHE_TABLE_SIZE]))</cpp:value></cpp:define>

<function><type><name>Size</name></type>
<name>polar_rel_size_shmem_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>blocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>blocks</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>size</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>polar_rel_size_cache_data_t</name></expr></argument>, <argument><expr><name>table_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>POLAR_REL_CACHE_TABLE_SIZE</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_rel_size_remove_all</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>DataDir</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>rmtree</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_check_rel_size_dir</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>DataDir</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_validate_dir</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_init_rel_size_table</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>POLAR_REL_CACHE_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <name>tid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>rel_tail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>db_tail</name></name> <operator>=</operator> <name>REL_INFO_TOTAL_SIZE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>min_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>polar_rel_size_cache_t</name></type>
<name>polar_rel_size_shmem_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>blocks</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>cache</name> <operator>=</operator> <operator>(</operator><name>polar_rel_size_cache_t</name><operator>)</operator><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>name</name></expr></argument>,
													<argument><expr><call><name>polar_rel_size_shmem_size</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>polar_rel_size_shmem_size</name><argument_list>(<argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>StrNCpy</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>dir_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>MAX_REL_SIZE_CACHE_DIR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>polar_check_rel_size_dir</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_rel_size_remove_all</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>table_size</name></name> <operator>=</operator> <name>blocks</name></expr>;</expr_stmt>
		<comment type="block">/* Init the first relation size cache table */</comment>
		<expr_stmt><expr><call><name>polar_init_rel_size_table</name><argument_list>(<argument><expr><call><name>REL_SIZE_CACHE_TABLE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>min_tid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_RELATION_SIZE_CACHE</name></expr></argument>, <argument><expr><literal type="string">"polar_rel_size_cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><call><name>POLAR_REL_SIZE_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LWTRANCHE_RELATION_SIZE_CACHE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>cache</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_save_rel_size_table</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>File</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>POLAR_REL_CACHE_TABLE_PATH</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>table</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not open file \"%s\" for write, %m"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>FileWrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>table</name></expr></argument>, <argument><expr><name>POLAR_REL_CACHE_TABLE_SIZE</name></expr></argument>, <argument><expr><name>WAIT_EVENT_REL_SIZE_CACHE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>POLAR_REL_CACHE_TABLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to write file \"%s\", ret=%d, %m"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_table_space_available</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name><name>table</name><operator>-&gt;</operator><name>rel_tail</name></name> <operator>+</operator> <name>size</name> <operator>&lt;</operator> <name><name>table</name><operator>-&gt;</operator><name>db_tail</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_rel_size_table_t</name> <modifier>*</modifier></type>
<name>polar_allocate_table_space</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>active_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>tid</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>active_table</name> <operator>=</operator> <call><name>REL_SIZE_CACHE_TABLE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>active_mid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>active_table</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_table_space_available</name><argument_list>(<argument><expr><name>active_table</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>active_mid</name></name> <operator>=</operator> <call><name>LOOP_NEXT_VALUE</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>active_mid</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>table_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>active_table</name> <operator>=</operator> <call><name>REL_SIZE_CACHE_TABLE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>active_mid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>active_table</name><operator>-&gt;</operator><name>tid</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_save_rel_size_table</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>active_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>polar_init_rel_size_table</name><argument_list>(<argument><expr><name>active_table</name></expr></argument>, <argument><expr><name>tid</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>active_table</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_update_lsn_range</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>min_lsn</name></name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>lsn</name> <operator>&gt;=</operator> <name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_record_db_state</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>spc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>polar_db_state_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>active_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>polar_database_state_t</name></type> <name>db_state</name> <init>=
	<expr><block>{
		<expr><operator>.</operator><name>lsn</name> <operator>=</operator> <name>lsn</name></expr>,
		<expr><operator>.</operator><name>spc</name> <operator>=</operator> <name>spc</name></expr>,
		<expr><operator>.</operator><name>db</name> <operator>=</operator> <name>db</name></expr>,
		<expr><operator>.</operator><name>state</name> <operator>=</operator> <name>state</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>active_table</name> <operator>=</operator> <call><name>polar_allocate_table_space</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_database_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>active_table</name><operator>-&gt;</operator><name>db_tail</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_database_state_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_table</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db_state</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_database_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>active_table</name><operator>-&gt;</operator><name>db_tail</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_update_lsn_range</name><argument_list>(<argument><expr><name>active_table</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_enable_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar_record_db_state lsn=%lX,spc=%d,db=%d,state=%d"</literal></expr></argument>,
			 <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>spc</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_record_db_state_with_lock</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>spc</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>polar_db_state_t</name></type> <name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_REL_SIZE_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_record_db_state</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>spc</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_REL_SIZE_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_record_rel_size</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>RelFileNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ForkNumber</name></type> <name>fork</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>rel_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>active_table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>polar_relation_size_t</name></type> <name>rel</name> <init>=
	<expr><block>{
		<expr><operator>.</operator><name>lsn</name> <operator>=</operator> <name>lsn</name></expr>,
		<expr><operator>.</operator><name>node</name> <operator>=</operator> <operator>*</operator><name>node</name></expr>,
		<expr><operator>.</operator><name>fork</name> <operator>=</operator> <name>fork</name></expr>,
		<expr><operator>.</operator><name>rel_size</name> <operator>=</operator> <name>rel_size</name></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>active_table</name> <operator>=</operator> <call><name>polar_allocate_table_space</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_relation_size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>active_table</name><operator>-&gt;</operator><name>rel_tail</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>active_table</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_relation_size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>active_table</name><operator>-&gt;</operator><name>rel_tail</name></name> <operator>=</operator> <name>pos</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_relation_size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_update_lsn_range</name><argument_list>(<argument><expr><name>active_table</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>polar_enable_debug</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"polar_record_rel_size lsn=%lX,spc=%d,db=%d,rel=%d,fork=%d,rel_size=%d"</literal></expr></argument>,
			 <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>relNode</name></name></expr></argument>, <argument><expr><name><name>node</name><operator>-&gt;</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name>fork</name></expr></argument>, <argument><expr><name>rel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_record_rel_size_with_lock</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>RelFileNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ForkNumber</name></type> <name>fork</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>rel_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_REL_SIZE_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>polar_record_rel_size</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>node</name></expr></argument>, <argument><expr><name>fork</name></expr></argument>, <argument><expr><name>rel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_REL_SIZE_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Search database's state according to spec and db, final state will
 * be restored into result. POLAR_DB_NOTFOUND will be set inside result
 * when none of the databases matched.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_search_db_state</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>spc</name></decl></parameter>,
					  <parameter><decl><type><name>Oid</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>polar_rel_search_result_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_database_state_t</name></type> <name>db_state</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>db_tail</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>POLAR_DB_NOTFOUND</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>REL_INFO_TOTAL_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>db_state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_database_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Relation size cache record the end lsn of XLOG record, while logindex
		 * record the start lsn of XLOG record
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>db_state</name><operator>.</operator><name>lsn</name></name> <operator>&lt;=</operator> <name>lsn</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>db_state</name><operator>.</operator><name>db</name></name> <operator>==</operator> <name>db</name> <operator>&amp;&amp;</operator> <name><name>db_state</name><operator>.</operator><name>spc</name></name> <operator>==</operator> <name>spc</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lsn</name></name> <operator>=</operator> <name><name>db_state</name><operator>.</operator><name>lsn</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name><name>db_state</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>pos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_database_state_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>search_state</name></type>
<name>polar_search_truncate_info</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
						   <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>polar_rel_search_result_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_relation_size_t</name></type> <name>rel</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>rel_tail</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>table</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>pos</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_relation_size_t</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_relation_size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Relation size cache record the end lsn of XLOG record, while logindex
		 * record the start lsn of XLOG record
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>.</operator><name>lsn</name></name> <operator>&lt;=</operator> <name>lsn</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>END</name></expr>;</return></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>RelFileNodeEquals</name><argument_list>(<argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name><name>rel</name><operator>.</operator><name>node</name></name></expr></argument>)</argument_list></call>
				<operator>&amp;&amp;</operator> <name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name> <operator>==</operator> <name><name>rel</name><operator>.</operator><name>fork</name></name> <operator>&amp;&amp;</operator> <name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name> <operator>&gt;=</operator> <name><name>rel</name><operator>.</operator><name>rel_size</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lsn</name></name> <operator>=</operator> <name><name>rel</name><operator>.</operator><name>lsn</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>POLAR_DB_BLOCK_TRUNCATED</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>rel</name><operator>.</operator><name>rel_size</name></name></expr>;</expr_stmt>

			<return>return <expr><name>END</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>pos</name> <operator>-=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>polar_relation_size_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><ternary><condition><expr><name><name>table</name><operator>-&gt;</operator><name>tid</name></name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>min_tid</name></name></expr> ?</condition><then> <expr><name>NEXT</name></expr> </then><else>: <expr><name>END</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>search_state</name></type>
<name>polar_check_table_rel_size</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>,
						   <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>polar_rel_search_result_t</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>lsn</name> <operator>&gt;</operator> <name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>END</name></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>POLAR_DB_NOTFOUND</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_search_db_state</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>spcNode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name><operator>.</operator><name>dbNode</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>POLAR_DB_NEW</name></expr>:</case>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>result</name><operator>-&gt;</operator><name>ignore_error</name></name> <operator>&amp;&amp;</operator> <name>lsn</name> <operator>&lt;</operator> <name><name>result</name><operator>-&gt;</operator><name>lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Got unpexected value from relation size cache, check to replay "</literal> <name>POLAR_LOG_BUFFER_TAG_FORMAT</name> <literal type="string">" lsn=%lX, but it's created when lsn=%lX"</literal></expr></argument>, <argument><expr><call><name>POLAR_LOG_BUFFER_TAG</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return>return <expr><call><name>polar_search_truncate_info</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>POLAR_DB_NOTFOUND</name></expr>:</case>
			<return>return <expr><call><name>polar_search_truncate_info</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>

		<case>case <expr><name>POLAR_DB_DROPED</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>result</name><operator>-&gt;</operator><name>ignore_error</name></name> <operator>&amp;&amp;</operator> <name>lsn</name> <operator>&gt;=</operator> <name><name>result</name><operator>-&gt;</operator><name>lsn</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Got unexpected value from relation size cache, check to replay "</literal> <name>POLAR_LOG_BUFFER_TAG_FORMAT</name> <literal type="string">" lsn=%lX, but it's dropped when lsn=%lX"</literal></expr></argument>, <argument><expr><call><name>POLAR_LOG_BUFFER_TAG</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return>return <expr><name>END</name></expr>;</return>

		<default>default:</default>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>END</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_rel_size_table_t</name> <modifier>*</modifier></type>
<name>polar_get_rel_size_table</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>mid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>File</name></type> <name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>tid</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name><name>cache</name><operator>-&gt;</operator><name>table_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>REL_SIZE_CACHE_TABLE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>table</name><operator>-&gt;</operator><name>tid</name></name> <operator>==</operator> <name>tid</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>table</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>POLAR_REL_CACHE_TABLE_PATH</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>PathNameOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Could not open file \"%s\" for read, %m"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>POLAR_REL_CACHE_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>table</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Unable to allocate memory which size is %d"</literal></expr></argument>, <argument><expr><name>POLAR_REL_CACHE_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>FileRead</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>table</name></expr></argument>, <argument><expr><name>POLAR_REL_CACHE_TABLE_SIZE</name></expr></argument>, <argument><expr><name>WAIT_EVENT_REL_SIZE_CACHE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>POLAR_REL_CACHE_TABLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"Failed to read from file \"%s\", ret=%d,%m"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>table</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether the lsn is suitable for the block or not and restore
 * the right start lsn for replaying into lsn_changed.
 * This is just internal function, caller should consider function
 * polar_check_rel_block_valid_only and polar_check_rel_block_valid_and_lsn.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_check_rel_block_valid_internal</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
									 <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>lsn_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_rel_search_result_t</name></type> <name>result</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>POLAR_DB_NOTFOUND</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>.</operator><name>lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>lsn_changed</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>result</name><operator>.</operator><name>ignore_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>result</name><operator>.</operator><name>ignore_error</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>REL_SIZE_CACHE_TABLE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>active_mid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<while>while <condition>(<expr><name>table</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>polar_check_table_rel_size</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>END</name>
				<operator>&amp;&amp;</operator> <name><name>table</name><operator>-&gt;</operator><name>tid</name></name> <operator>&gt;</operator> <name><name>cache</name><operator>-&gt;</operator><name>min_tid</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint64</name></type> <name>tid</name> <init>= <expr><name><name>table</name><operator>-&gt;</operator><name>tid</name></name></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * Call pfree if table is not in shared memory
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>REL_TABLE_IN_SHARED_MEM</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>polar_get_rel_size_table</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>tid</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>REL_TABLE_IN_SHARED_MEM</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>result</name><operator>.</operator><name>state</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>POLAR_DB_NOTFOUND</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>lsn_changed</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>lsn_changed</name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return>return <expr><name>true</name></expr>;</return>

		<case>case <expr><name>POLAR_DB_NEW</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>lsn_changed</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>lsn_changed</name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return>return <expr><name>true</name></expr>;</return>

		<case>case <expr><name>POLAR_DB_DROPED</name></expr>:</case>
		<case>case <expr><name>POLAR_DB_BLOCK_TRUNCATED</name></expr>:</case>
			<if_stmt><if>if <condition>(<expr><name>lsn_changed</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>lsn_changed</name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<return>return <expr><name>false</name></expr>;</return>

		<default>default:</default>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Got unexpected state=%d when check block valid"</literal></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block">/*
 * Only check whether the lsn is suitable for the block or not.
 * Usually, the caller make sure that the block will be modified
 * by record pointed by lsn.
 * Allow two cases for PANIC error:
 * (1) The lsn is lower than lsn of database's XLOG_DBASE_CREATE record.
 * (2) The lsn is higher than lsn of database's XLOG_DBASE_DROP record.
 *
 * Must acquire cache lock before call this function.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_check_rel_block_valid_only</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>polar_check_rel_block_valid_internal</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether the lsn is suitable for the block or not and restore
 * the right start lsn for replaying into lsn_changed.
 * It is not like polar_check_rel_block_valid_only, there is no cases for
 * PANIC error. Becase it can return right start lsn when the parameter lsn
 * is not suitable for the block.
 *
 * Must acquire cache lock before call this function.
 */</comment>
<function><type><name>bool</name></type>
<name>polar_check_rel_block_valid_and_lsn</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
									<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>lsn_changed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>polar_check_rel_block_valid_internal</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>lsn_changed</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_unlink_rel_size_table</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>POLAR_REL_CACHE_TABLE_PATH</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>polar_unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"Could not remove file \"%s\":%m"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_truncate_rel_size_cache</name><parameter_list>(<parameter><decl><type><name>polar_rel_size_cache_t</name></type> <name>cache</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>max_tid</name></decl>, <decl><type ref="prev"/><name>tid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_rel_size_table_t</name> <modifier>*</modifier></type><name>table</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Truncate relation size cache from %lX"</literal></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>POLAR_REL_SIZE_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>REL_SIZE_CACHE_TABLE</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>active_mid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>max_tid</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>tid</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tid</name> <operator>=</operator> <name><name>cache</name><operator>-&gt;</operator><name>min_tid</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>tid</name> <operator>&lt;</operator> <name>max_tid</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>tbl_max_lsn</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>polar_get_rel_size_table</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tbl_max_lsn</name> <operator>=</operator> <name><name>table</name><operator>-&gt;</operator><name>max_lsn</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>REL_TABLE_IN_SHARED_MEM</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>lsn</name> <operator>&gt;=</operator> <name>tbl_max_lsn</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>REL_TABLE_IN_SHARED_MEM</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>POLAR_REL_CACHE_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>polar_unlink_rel_size_table</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>min_tid</name></name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>tid</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>POLAR_REL_SIZE_CACHE_LOCK</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
