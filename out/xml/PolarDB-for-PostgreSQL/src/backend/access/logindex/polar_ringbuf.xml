<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/logindex/polar_ringbuf.c"><comment type="block">/*----------------------------------------------------------------------------------------
 *
 * polar_ringbuf.c
 *   polar ring buffer interface routines.
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *    src/backend/access/logindex/polar_ringbuf.c
 * ---------------------------------------------------------------------------------------
 */</comment>

<comment type="block">/*
 * Principal entry points:
 *
 * polar_ringbuf_pkt_reserve() -- Reserve space from ring buffer for future write.
 *          And this function should be protected by exclusive lock.
 *
 * polar_ringbuf_pkt_write() -- Write packet data to reserved space and it's safe for multi process
 *          to write different packet
 *
 * polar_ringbuf_new_ref() -- Create new ring buffer reference
 *
 * polar_ringbuf_read_next_pkt() -- Read data from ring buffer sequentially
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_ringbuf.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_bitpos.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_ringbuf_update_pread</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RINGBUF_REF_MATCH</name><parameter_list>(<parameter><type><name>ref</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((ref)-&gt;slot &gt;= 0 &amp;&amp; (ref)-&gt;slot &lt; POLAR_RINGBUF_MAX_SLOT \
	 &amp;&amp; (ref)-&gt;rbuf-&gt;slot[(ref)-&gt;slot].ref_num == (ref)-&gt;ref_num)</cpp:value></cpp:define>

<comment type="block">/*
 * Initialize ring buffer from allocated memory.
 */</comment>
<function><type><name>polar_ringbuf_t</name></type>
<name>polar_ringbuf_init</name><parameter_list>(<parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tranche_id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trache_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name> <init>= <expr><operator>(</operator><name>polar_ringbuf_t</name><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>tranche_id</name></expr></argument>, <argument><expr><name>trache_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>tranche_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>pread</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>pwrite</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_ringbuf_slot_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>POLAR_RINGBUF_MAX_SLOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>len</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>polar_ringbuf_data_t</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>occupied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<return>return <expr><name>rbuf</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Create new reference for ring buffer and return true on success
 */</comment>
<function><type><name>bool</name></type>
<name>polar_ringbuf_new_ref</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strong</name></decl></parameter>,
					  <parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>ref_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>unoccupied</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>succeed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"create reference for %s"</literal></expr></argument>, <argument><expr><name>ref_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>unoccupied</name> <operator>=</operator> <operator>~</operator><operator>(</operator><name><name>rbuf</name><operator>-&gt;</operator><name>occupied</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>POLAR_BIT_LEAST_POS</name><argument_list>(<argument><expr><name>unoccupied</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* The position start from 1 */</comment>
	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>POLAR_RINGBUF_MAX_SLOT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_BIT_OCCUPY</name><argument_list>(<argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>strong</name> <operator>=</operator> <name>strong</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pread</name> <operator>=</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>pread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>visit</name> <operator>=</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>min_visit</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_num</name> <operator>=</operator> <operator>++</operator><name><name>rbuf</name><operator>-&gt;</operator><name>ref_num</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name></name> <operator>=</operator> <name>rbuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>ref_num</name></name> <operator>=</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_num</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>strong</name></name> <operator>=</operator> <name>strong</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>ref_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_name</name></expr></argument>, <argument><expr><name>ref_name</name></expr></argument>, <argument><expr><name>POLAR_RINGBUF_MAX_REF_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ref_name</name><index>[<expr><name>POLAR_RINGBUF_MAX_REF_NAME</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ref_name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>ref_name</name></name></expr></argument>, <argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>succeed</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>succeed</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * release ring buffer reference
 */</comment>
<function><type><name>void</name></type>
<name>polar_ringbuf_release_ref</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>rbuf</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return ;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RINGBUF_REF_MATCH</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_BIT_RELEASE_OCCUPIED</name><argument_list>(<argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_ringbuf_slot_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>polar_ringbuf_update_pread</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * The callback function to do auto release reference
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_ringbuf_auto_release</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>(</operator><name>polar_ringbuf_ref_t</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>polar_ringbuf_release_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Register auto release for the reference
 * It will be released automatically when proc_exit
 */</comment>
<function><type><name>void</name></type>
<name>polar_ringbuf_auto_release_ref</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* check whether it is able to register a before_shmem_exit callback */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>polar_check_before_shmem_exit</name><argument_list>(<argument><expr><name>polar_ringbuf_auto_release</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator><name>ref</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>before_shmem_exit</name><argument_list>(<argument><expr><name>polar_ringbuf_auto_release</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Get strong reference from weak reference
 */</comment>
<function><type><name>bool</name></type>
<name>polar_ringbuf_get_ref</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>got</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * The strong reference property is changed in the same process,
	 * and it's safe to use shared lock
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RINGBUF_REF_MATCH</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>strong</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>got</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>got</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether it's valid reference
 */</comment>
<function><type><name>bool</name></type>
<name>polar_ringbuf_valid_ref</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name> <operator>||</operator> <operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>RINGBUF_REF_MATCH</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Change strong reference to weak reference
 */</comment>
<function><type><name>bool</name></type>
<name>polar_ringbuf_clear_ref</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>cleared</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * The strong reference property is changed in the same process,
	 * and it's safe to use shared lock
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>RINGBUF_REF_MATCH</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>strong</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cleared</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>cleared</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * The reference read packet sequentially.
 * Support read from the offset of packet
 */</comment>
<function><type><name>ssize_t</name></type>
<name>polar_ringbuf_read_next_pkt</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>todo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>split</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pktlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>pread</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>pktlen</name> <operator>=</operator> <call><name>polar_ringbuf_pkt_len</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>offset</name> <operator>&gt;=</operator> <name>pktlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <name>pktlen</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>len</name> <operator>=</operator> <name>pktlen</name> <operator>-</operator> <name>offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <name>POLAR_RINGBUF_PKTHDRSIZE</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>%</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>todo</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>split</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>idx</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>rbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>idx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>split</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>split</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>split</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write packet data and the idx is the start position of the packet.
 * Support write from the offset of packet.
 */</comment>
<function><type><name>ssize_t</name></type>
<name>polar_ringbuf_pkt_write</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint8</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>size_t</name></type> <name>todo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>split</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pktlen</name> <init>= <expr><call><name>polar_ringbuf_pkt_len</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;=</operator> <name>pktlen</name> <operator>||</operator> <operator>(</operator><name>offset</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <name>pktlen</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>idx</name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <name>POLAR_RINGBUF_PKTHDRSIZE</name> <operator>+</operator> <name>offset</name><operator>)</operator> <operator>%</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>split</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>idx</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>rbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>idx</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>todo</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>split</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>split</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>split</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>todo</name> <operator>-=</operator> <name>split</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>idx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>todo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>len</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Update the ring buffer least read position and to get more free space
 */</comment>
<function><type><name>bool</name></type>
<name>polar_ringbuf_update_pread</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>min_slot</name> <init>= <expr><name>POLAR_RINGBUF_MAX_SLOT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>min_visit</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>   <name>updated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>occupied</name> <init>= <expr><name><name>rbuf</name><operator>-&gt;</operator><name>occupied</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>occupied</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_BIT_LEAST_POS</name><argument_list>(<argument><expr><name>occupied</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>min_visit</name> <operator>&gt;</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>visit</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>min_visit</name> <operator>=</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>visit</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>min_slot</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>POLAR_BIT_CLEAR_LEAST</name><argument_list>(<argument><expr><name>occupied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>min_slot</name> <operator>!=</operator> <name>POLAR_RINGBUF_MAX_SLOT</name> <operator>&amp;&amp;</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>min_visit</name></name> <operator>!=</operator> <name>min_visit</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>min_visit</name></name> <operator>=</operator> <name>min_visit</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>pread</name></name></expr></argument>, <argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>min_slot</name></expr>]</index></name><operator>.</operator><name>pread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>updated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>updated</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Update the reference's read position
 */</comment>
<function><type><name>void</name></type>
<name>polar_ringbuf_update_ref</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>idx</name> <init>= <expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>pread</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>pktlen</name> <init>= <expr><call><name>polar_ringbuf_pkt_len</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>pread</name> <operator>=</operator> <operator>(</operator><name>idx</name> <operator>+</operator> <name>POLAR_RINGBUF_PKTHDRSIZE</name> <operator>+</operator> <name>pktlen</name><operator>)</operator> <operator>%</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name><name>ref</name><operator>-&gt;</operator><name>slot</name></name></expr>]</index></name><operator>.</operator><name>visit</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * No enouth space to write and eliminate one weak reference with least read position
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_ringbuf_evict_ref</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>evicted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type> <name>min_slot</name> <init>= <expr><name>POLAR_RINGBUF_MAX_SLOT</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>min_visit</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>occupied</name> <init>= <expr><name><name>rbuf</name><operator>-&gt;</operator><name>occupied</name></name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>occupied</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_BIT_LEAST_POS</name><argument_list>(<argument><expr><name>occupied</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>strong</name>
				<operator>&amp;&amp;</operator> <name>min_visit</name> <operator>&gt;</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>visit</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>min_visit</name> <operator>=</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>visit</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>min_slot</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>POLAR_BIT_CLEAR_LEAST</name><argument_list>(<argument><expr><name>occupied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>min_slot</name> <operator>!=</operator> <name>POLAR_RINGBUF_MAX_SLOT</name>
			<operator>&amp;&amp;</operator> <call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>pread</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>min_slot</name></expr>]</index></name><operator>.</operator><name>pread</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"Polar evict slot=%d,name=%s which is weak reference"</literal></expr></argument>, <argument><expr><name>min_slot</name></expr></argument>, <argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>min_slot</name></expr>]</index></name><operator>.</operator><name>ref_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_BIT_RELEASE_OCCUPIED</name><argument_list>(<argument><expr><name><name>rbuf</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>min_slot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>slot</name><index>[<expr><name>min_slot</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>polar_ringbuf_slot_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>evicted</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>evicted</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Update the least read position of the ring buffer to get more space for write
 */</comment>
<function><type><name>void</name></type>
<name>polar_ringbuf_update_keep_data</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>polar_ringbuf_update_pread</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Free up space until free size larger than aimed length
 */</comment>
<function><type><name>void</name></type>
<name>polar_ringbuf_free_up</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>polar_interrupt_callback</name></type> <name>callback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>free_up</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pgstat_report_wait_start</name><argument_list>(<argument><expr><name>WAIT_EVENT_LOGINDEX_QUEUE_SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>free_up</name> <operator>=</operator> <operator>(</operator><call><name>polar_ringbuf_free_size</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>len</name><operator>)</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>free_up</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_ringbuf_update_pread</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call>
					<operator>&amp;&amp;</operator> <operator>!</operator><call><name>polar_ringbuf_evict_ref</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * 1. Try to update reference's pread to get more space
				 * 2. Try to evict weak reference
				 * 3. Otherwise wait for reference to comsume data
				 */</comment>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>callback</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>callback</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>pg_usleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><operator>!</operator><name>free_up</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>pgstat_report_wait_end</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_ringbuf_ref_keep_data</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_ref_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ratio</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>rbuf</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ssize_t</name></type> <name>keep_size</name> <init>= <expr><name><name>rbuf</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <name>ratio</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>updated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><call><name>polar_ringbuf_avail</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>keep_size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>polar_ringbuf_update_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>updated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>updated</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_ringbuf_update_keep_data</name><argument_list>(<argument><expr><name>rbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_ringbuf_reset</name><parameter_list>(<parameter><decl><type><name>polar_ringbuf_t</name></type> <name>rbuf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rbuf</name><operator>-&gt;</operator><name>occupied</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>pread</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_write_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>pwrite</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rbuf</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
