<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/logindex/polar_mini_transaction.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_mini_transaction.c
 *      Polar mini transaction manager
 *
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *     src/backend/access/logindexm/polar_mini_transaction.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * In postgres a XLOG record may include multiple pages. We use mini transaction to keep data structure change in atomic way.
 * Without mini transaction maybe there exists different verions of data page in a structure.
 * The max number of pages in a XLOG record is XLR_MAX_BLOCK_ID and
 * we use coalesced hash to keep page lock during the mini transaction.
 * 1. When we add LSN to logindex  it's mini transaction page lock must be acquired firstly.
 * And the sequence of pages lcok acquisition is the same as redo XLOG for the specific data structure.
 * 2. When search logindex for a page to apply  its mini transaction lock must be acquired if it existsn
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/polar_mini_transaction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogdefs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlogrecord.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/buf_internals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_bitpos.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>proc_occupied_mini_trans_t</name>
<block>{
	<decl_stmt><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>acquired_lock</name><index>[<expr><name>MINI_TRANSACTION_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>proc_occupied_mini_trans_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>proc_occupied_mini_trans_t</name></type> <name>proc_occupied_mini_trans</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINI_TRANS_IS_OCCUPIED</name><parameter_list>(<parameter><type><name>trans</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>POLAR_BIT_IS_OCCUPIED((trans)-&gt;occupied, (key))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINI_TRANS_OCCUPY</name><parameter_list>(<parameter><type><name>trans</name></type></parameter>, <parameter><type><name>key</name></type></parameter>)</parameter_list></cpp:macro>                  <cpp:value>(POLAR_BIT_OCCUPY((trans)-&gt;occupied, (key)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINI_TRANSACTION_LOCK</name><parameter_list>(<parameter><type><name>trans</name></type></parameter>)</parameter_list></cpp:macro>                   <cpp:value>(&amp;(trans)-&gt;lock[0].lock)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINI_TRANSACTION_TABLE_LOCK</name><parameter_list>(<parameter><type><name>trans</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(&amp;(trans)-&gt;lock[1+(k)].lock)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mini_trans_init</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mini_trans_info_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><name>MINI_TRANSACTION_TABLE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_LOGINDEX_MINI_TRANSACTION</name></expr></argument>, <argument><expr><literal type="string">"logindex_mini_transaction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LWTRANCHE_LOGINDEX_MINI_TRANSACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name>LWTRANCHE_LOGINDEX_MINI_TRANSACTION_TBL</name></expr></argument>, <argument><expr><literal type="string">"logindex_mini_transaction_tbl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MINI_TRANSACTION_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_TABLE_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LWTRANCHE_LOGINDEX_MINI_TRANSACTION_TBL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>Size</name></type>
<name>polar_logindex_mini_trans_shmem_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>CACHELINEALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mini_trans_data_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>mini_trans_t</name></type>
<name>polar_logindex_mini_trans_shmem_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mini_trans_t</name></type> <name>mini_trans</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><name>MINI_TRANSACTION_TABLE_SIZE</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CHAR_BIT</name></expr></argument>,
					 <argument><expr><literal type="string">"MINI_TRANSACTION_TABLE_SIZE is larger than 64bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>StaticAssertStmt</name><argument_list>(<argument><expr><name>MINI_TRANSACTION_TABLE_SIZE</name> <operator>&gt;</operator> <name>XLR_MAX_BLOCK_ID</name></expr></argument>,
					 <argument><expr><literal type="string">"MINI_TRANSACTION_TABLE_SIZE is smaller than XLR_MAX_BLOCK_ID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>mini_trans</name> <operator>=</operator> <operator>(</operator><name>mini_trans_t</name><operator>)</operator><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>polar_logindex_mini_trans_shmem_size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>mini_trans_init</name><argument_list>(<argument><expr><name>mini_trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><name>mini_trans</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_logindex_abort_mini_transaction</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_page_lock_t</name></type> <name>l</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name> <operator>==</operator> <name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <name>MINI_TRANSACTION_TABLE_SIZE</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>acquired_lock</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>polar_logindex_mini_trans_unlock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>polar_logindex_mini_trans_start</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name> <operator>||</operator> <name><name>trans</name><operator>-&gt;</operator><name>started</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The previous lsn %ld is not end, started=%d"</literal></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>started</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>
<name>mini_trans_set_info</name><parameter_list>(<parameter><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>INIT_BUFFERTAG</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>rnode</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>forkNum</name></name></expr></argument>, <argument><expr><name><name>tag</name><operator>-&gt;</operator><name>blockNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><operator>-&gt;</operator><name>refcount</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_page_lock_t</name></type>
<name>mini_trans_insert_tag</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>trans</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name> <operator>||</operator> <name><name>trans</name><operator>-&gt;</operator><name>started</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The mini transaction lsn is not set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name>MINI_TRANSACTION_TABLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The mini transaction key is incorrect %d"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MINI_TRANS_IS_OCCUPIED</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MINI_TRANS_OCCUPY</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mini_trans_set_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>key</name></expr>]</index></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>key</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><name>MINI_TRANSACTION_TABLE_SIZE</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>

		<comment type="block">/* Find the first empty bucket */</comment>
		<while>while <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MINI_TRANS_IS_OCCUPIED</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<break>break;</break></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* The table is full, terminate unsuccessfully */</comment>
		<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>MINI_TRANS_OCCUPY</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>mini_trans_set_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Find the last node in the chain and point to it */</comment>
		<expr_stmt><expr><name>it</name> <operator>=</operator> <operator>&amp;</operator><name><name>info</name><index>[<expr><name>key</name></expr>]</index></name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>it</name> <operator>=</operator> <operator>&amp;</operator><name><name>info</name><index>[<expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

		<expr_stmt><expr><name><name>it</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

		<return>return <expr><name>i</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_page_lock_t</name></type>
<name>mini_trans_find</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>trans</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name> <operator>||</operator> <name><name>trans</name><operator>-&gt;</operator><name>started</name></name> <operator>==</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The mini transaction lsn is not set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>MINI_TRANS_IS_OCCUPIED</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>key</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>i</name> <init>= <expr><name>key</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>it</name> <init>= <expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>MINI_TRANS_IS_OCCUPIED</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>BUFFERTAGS_EQUAL</name><argument_list>(<argument><expr><operator>*</operator><name>tag</name></expr></argument>, <argument><expr><name><name>it</name><operator>-&gt;</operator><name>tag</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>POLAR_INVALID_PAGE_LOCK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>polar_page_lock_t</name></type>
<name>mini_trans_increase_ref</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>trans</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>mini_trans_find</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>POLAR_INVALID_PAGE_LOCK</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>it</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>it</name> <operator>=</operator> <operator>&amp;</operator><name><name>info</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_atomic_add_fetch_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>refcount</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>polar_page_lock_t</name></type>
<name>polar_logindex_mini_trans_cond_key_lock</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>key</name></decl></parameter>,
										<parameter><decl><type><name>LWLockMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_page_lock_t</name></type> <name>l</name> <init>= <expr><name>POLAR_INVALID_PAGE_LOCK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LWLock</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>started</name></name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>mini_trans_increase_ref</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>POLAR_INVALID_PAGE_LOCK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>MINI_TRANSACTION_TABLE_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>lsn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>lsn</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name> <operator>=</operator> <name>trans</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name> <operator>==</operator> <name>trans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>acquired_lock</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>polar_page_lock_t</name></type>
<name>polar_logindex_mini_trans_cond_lock</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>,
									<parameter><decl><type><name>LWLockMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>key</name> <init>= <expr><call><name>MINI_TRANSACTION_HASH_PAGE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>polar_logindex_mini_trans_cond_key_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>XLogRecPtr</name></type>
<name>polar_logindex_mini_trans_key_find</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>lsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>started</name></name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name> <operator>!=</operator> <name>InvalidXLogRecPtr</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>mini_trans_find</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>POLAR_INVALID_PAGE_LOCK</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>lsn</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>lsn</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>XLogRecPtr</name></type>
<name>polar_logindex_mini_trans_find</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>key</name> <init>= <expr><call><name>MINI_TRANSACTION_HASH_PAGE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>polar_logindex_mini_trans_key_find</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>polar_page_lock_t</name></type>
<name>polar_logindex_mini_trans_key_lock</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>key</name></decl></parameter>,
								   <parameter><decl><type><name>LWLockMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>polar_page_lock_t</name></type> <name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LWLock</name> <modifier>*</modifier></type><name>lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>mini_trans_increase_ref</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>POLAR_INVALID_PAGE_LOCK</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>MINI_TRANSACTION_TABLE_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>lsn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>lsn</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>mini_trans_insert_tag</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>POLAR_INVALID_PAGE_LOCK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name>MINI_TRANSACTION_TABLE_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>lsn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>lsn</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>lock</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>lock</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name> <operator>=</operator> <name>trans</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>trans</name> <operator>==</operator> <name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>acquired_lock</name><index>[<expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>polar_page_lock_t</name></type>
<name>polar_logindex_mini_trans_lock</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>BufferTag</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>, <parameter><decl><type><name>LWLockMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>key</name> <init>= <expr><call><name>MINI_TRANSACTION_HASH_PAGE</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>l</name> <init>= <expr><call><name>polar_logindex_mini_trans_key_lock</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>POLAR_INVALID_PAGE_LOCK</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The mini transaction hash table is full"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>l</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_logindex_mini_trans_unlock</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>polar_page_lock_t</name></type> <name>l</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>trans</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl> ;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>POLAR_INVALID_PAGE_LOCK</name> <operator>||</operator> <name>l</name> <operator>&gt;</operator> <name>MINI_TRANSACTION_TABLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The mini transaction hash slot value is incorrect"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>l</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>trans</name> <operator>!=</operator> <name><name>proc_occupied_mini_trans</name><operator>.</operator><name>trans</name></name> <operator>||</operator> <operator>!</operator><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>acquired_lock</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"Unlock mini transaction lock %d, but it's not acquired"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_TABLE_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MINI_TRANS_IS_OCCUPIED</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call>
			<operator>||</operator> <call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The mini transaction hash slot state is incorrect, occupied=%ld, refcount is 0"</literal></expr></argument>,
							   <argument><expr><call><name>MINI_TRANS_IS_OCCUPIED</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_atomic_sub_fetch_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>proc_occupied_mini_trans</name><operator>.</operator><name>acquired_lock</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>polar_logindex_mini_trans_end</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>mini_trans_info_t</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name><name>trans</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>occupied</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>unlock_all</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name> <operator>!=</operator> <name>lsn</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The previous lsn %ld is not finished"</literal></expr></argument>, <argument><expr><name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>started</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>unlock_all</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>occupied</name> <operator>=</operator> <name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>occupied</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Get position of the lowest bit */</comment>
			<expr_stmt><expr><call><name>POLAR_BIT_LEAST_POS</name><argument_list>(<argument><expr><name>occupied</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>refcount</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>unlock_all</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Clear the lowest bit */</comment>
			<expr_stmt><expr><call><name>POLAR_BIT_CLEAR_LEAST</name><argument_list>(<argument><expr><name>occupied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>

		<comment type="block">/* Release mini transaction lock and wait page lock to be released */</comment>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><call><name>MINI_TRANSACTION_LOCK</name><argument_list>(<argument><expr><name>trans</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	while <condition>(<expr><operator>!</operator><name>unlock_all</name></expr>)</condition>;</do>

	<comment type="block">/* Clear all occupied lock */</comment>
	<while>while <condition>(<expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>POLAR_BIT_LEAST_POS</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>info</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mini_trans_info_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>POLAR_BIT_CLEAR_LEAST</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>occupied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_logindex_mini_trans_set_page_added</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>polar_page_lock_t</name></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>lock</name> <operator>==</operator> <name>POLAR_INVALID_PAGE_LOCK</name> <operator>||</operator> <name>lock</name> <operator>&gt;</operator> <name>MINI_TRANSACTION_TABLE_SIZE</name>
			<operator>||</operator> <operator>!</operator><call><name>MINI_TRANS_IS_OCCUPIED</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The mini transaction hash slot value is incorrect"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>lock</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>trans</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>added</name> <operator>==</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>trans</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>added</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>polar_logindex_mini_trans_get_page_added</name><parameter_list>(<parameter><decl><type><name>mini_trans_t</name></type> <name>trans</name></decl></parameter>, <parameter><decl><type><name>polar_page_lock_t</name></type> <name>lock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>i</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>lock</name> <operator>==</operator> <name>POLAR_INVALID_PAGE_LOCK</name> <operator>||</operator> <name>lock</name> <operator>&gt;</operator> <name>MINI_TRANSACTION_TABLE_SIZE</name>
			<operator>||</operator> <operator>!</operator><call><name>MINI_TRANS_IS_OCCUPIED</name><argument_list>(<argument><expr><name>trans</name></expr></argument>, <argument><expr><name>lock</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The mini transaction hash slot value is incorrect"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>lock</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><name><name>trans</name><operator>-&gt;</operator><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>added</name></expr>;</return>
</block_content>}</block></function>
</unit>
