<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/rmgrdesc/xlogdesc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * xlogdesc.c
 *	  rmgr descriptor routines for access/transam/xlog.c
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/rmgrdesc/xlogdesc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xlog_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_control.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufpage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<comment type="block">/*
 * GUC support
 */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>wal_level_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"minimal"</literal></expr>, <expr><name>WAL_LEVEL_MINIMAL</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"replica"</literal></expr>, <expr><name>WAL_LEVEL_REPLICA</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"archive"</literal></expr>, <expr><name>WAL_LEVEL_REPLICA</name></expr>, <expr><name>true</name></expr>}</block></expr>,	<comment type="block">/* deprecated */</comment>
	<expr><block>{<expr><literal type="string">"hot_standby"</literal></expr>, <expr><name>WAL_LEVEL_REPLICA</name></expr>, <expr><name>true</name></expr>}</block></expr>,	<comment type="block">/* deprecated */</comment>
	<expr><block>{<expr><literal type="string">"logical"</literal></expr>, <expr><name>WAL_LEVEL_LOGICAL</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>xlog_desc</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_CHECKPOINT_SHUTDOWN</name> <operator>||</operator>
		<name>info</name> <operator>==</operator> <name>XLOG_CHECKPOINT_ONLINE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CheckPoint</name> <modifier>*</modifier></type><name>checkpoint</name> <init>= <expr><operator>(</operator><name>CheckPoint</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"redo %X/%X; "</literal>
						 <literal type="string">"tli %u; prev tli %u; fpw %s; xid %u:%u; oid %u; multi %u; offset %u; "</literal>
						 <literal type="string">"oldest xid %u in DB %u; oldest multi %u in DB %u; "</literal>
						 <literal type="string">"oldest/newest commit timestamp xid: %u/%u; "</literal>
						 <literal type="string">"oldest running xid %u; %s"</literal></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>checkpoint</name><operator>-&gt;</operator><name>redo</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>checkpoint</name><operator>-&gt;</operator><name>redo</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>ThisTimeLineID</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>PrevTimeLineID</name></name></expr></argument>,
						 <argument><expr><ternary><condition><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>fullPageWrites</name></name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>nextXidEpoch</name></name></expr></argument>, <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>nextXid</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>nextOid</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>nextMulti</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>nextMultiOffset</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>oldestXid</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>oldestXidDB</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>oldestMulti</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>oldestMultiDB</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>oldestCommitTsXid</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>newestCommitTsXid</name></name></expr></argument>,
						 <argument><expr><name><name>checkpoint</name><operator>-&gt;</operator><name>oldestActiveXid</name></name></expr></argument>,
						 <argument><expr><ternary><condition><expr><operator>(</operator><name>info</name> <operator>==</operator> <name>XLOG_CHECKPOINT_SHUTDOWN</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"shutdown"</literal></expr> </then><else>: <expr><literal type="string">"online"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_NEXTOID</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type>			<name>nextOid</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>nextOid</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>nextOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_RESTORE_POINT</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_restore_point</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>xl_restore_point</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>rp_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_FPI</name> <operator>||</operator> <name>info</name> <operator>==</operator> <name>XLOG_FPI_FOR_HINT</name> <operator>||</operator>
			 <name>info</name> <operator>==</operator> <name>XLOG_FPI_MULTI</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* no further information to print */</comment>
	</block_content>}</block></if>
	<comment type="block">/* POLAR: print fullpage_no */</comment>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_FPSI</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint64</name></type>	<name>fullpage_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<comment type="block">/* get fullpage_no from record */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fullpage_no</name></expr></argument>, <argument><expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><name>fullpage_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_BACKUP_END</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>startpoint</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>startpoint</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XLogRecPtr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%X/%X"</literal></expr></argument>,
						 <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>startpoint</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>startpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_PARAMETER_CHANGE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_parameter_change</name></type> <name>xlrec</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>wal_level_str</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xlrec</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xl_parameter_change</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Find a string representation for wal_level */</comment>
		<expr_stmt><expr><name>wal_level_str</name> <operator>=</operator> <literal type="string">"?"</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>entry</name> <operator>=</operator> <name>wal_level_options</name></expr>;</init> <condition><expr><name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr>;</condition> <incr><expr><name>entry</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name><name>xlrec</name><operator>.</operator><name>wal_level</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>wal_level_str</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"max_connections=%d max_worker_processes=%d "</literal>
						 <literal type="string">"max_prepared_xacts=%d max_locks_per_xact=%d "</literal>
						 <literal type="string">"wal_level=%s wal_log_hints=%s "</literal>
						 <literal type="string">"track_commit_timestamp=%s"</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>.</operator><name>MaxConnections</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>.</operator><name>max_worker_processes</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>.</operator><name>max_prepared_xacts</name></name></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>.</operator><name>max_locks_per_xact</name></name></expr></argument>,
						 <argument><expr><name>wal_level_str</name></expr></argument>,
						 <argument><expr><ternary><condition><expr><name><name>xlrec</name><operator>.</operator><name>wal_log_hints</name></name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>,
						 <argument><expr><ternary><condition><expr><name><name>xlrec</name><operator>.</operator><name>track_commit_timestamp</name></name></expr> ?</condition><then> <expr><literal type="string">"on"</literal></expr> </then><else>: <expr><literal type="string">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_FPW_CHANGE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>fpw</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fpw</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><ternary><condition><expr><name>fpw</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_END_OF_RECOVERY</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>xl_end_of_recovery</name></type> <name>xlrec</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>xlrec</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>xl_end_of_recovery</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"tli %u; prev tli %u; time %s"</literal></expr></argument>,
						 <argument><expr><name><name>xlrec</name><operator>.</operator><name>ThisTimeLineID</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>.</operator><name>PrevTimeLineID</name></name></expr></argument>,
						 <argument><expr><call><name>timestamptz_to_str</name><argument_list>(<argument><expr><name><name>xlrec</name><operator>.</operator><name>end_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<comment type="block">/* POLAR csnlog */</comment>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_CSNLOG_ZEROPAGE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>pageno</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pageno</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"zero page %d"</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>info</name> <operator>==</operator> <name>XLOG_CSNLOG_TRUNCATE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>pageno</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pageno</name></expr></argument>, <argument><expr><name>rec</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"truncate page %d"</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* POLAR end */</comment>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>xlog_identify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XLOG_CHECKPOINT_SHUTDOWN</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"CHECKPOINT_SHUTDOWN"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_CHECKPOINT_ONLINE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"CHECKPOINT_ONLINE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_NOOP</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"NOOP"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_NEXTOID</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"NEXTOID"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SWITCH</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"SWITCH"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_BACKUP_END</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"BACKUP_END"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_PARAMETER_CHANGE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"PARAMETER_CHANGE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_RESTORE_POINT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"RESTORE_POINT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_FPW_CHANGE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"FPW_CHANGE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_END_OF_RECOVERY</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"END_OF_RECOVERY"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_FPI</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"FPI"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_FPI_FOR_HINT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"FPI_FOR_HINT"</literal></expr>;</expr_stmt>
			<break>break;</break>

		<case>case <expr><name>XLOG_FPSI</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"FPSI"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<comment type="block">/* POLAR csn */</comment>
		<case>case <expr><name>XLOG_CSNLOG_ZEROPAGE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"ZERO_CSN_PAGE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_CSNLOG_TRUNCATE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"TRUNCATE_CSN_PAGE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<comment type="block">/* POLAR end */</comment>

		<case>case <expr><name>XLOG_FPI_MULTI</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"FPI_MULTI"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>
</unit>
