<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/access/rmgrdesc/spgdesc.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * spgdesc.c
 *	  rmgr descriptor routines for access/spgist/spgxlog.c
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/access/rmgrdesc/spgdesc.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/spgxlog.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>spg_desc</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>XLogReaderState</name> <modifier>*</modifier></type><name>record</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>rec</name> <init>= <expr><call><name>XLogRecGetData</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>info</name> <init>= <expr><call><name>XLogRecGetInfo</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>info</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XLOG_SPGIST_CREATE_INDEX</name></expr>:</case>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_ADD_LEAF</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>spgxlogAddLeaf</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>spgxlogAddLeaf</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"add leaf to page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"; off %u; headoff %u; parentoff %u"</literal></expr></argument>,
								 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>offnumLeaf</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>offnumHeadLeaf</name></name></expr></argument>,
								 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>offnumParent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>newPage</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" (newpage)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>storesNulls</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" (nulls)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_MOVE_LEAFS</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%u leafs"</literal></expr></argument>,
							 <argument><expr><operator>(</operator><operator>(</operator><name>spgxlogMoveLeafs</name> <operator>*</operator><operator>)</operator> <name>rec</name><operator>)</operator><operator>-&gt;</operator><name>nMoves</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_ADD_NODE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"off %u"</literal></expr></argument>,
							 <argument><expr><operator>(</operator><operator>(</operator><name>spgxlogAddNode</name> <operator>*</operator><operator>)</operator> <name>rec</name><operator>)</operator><operator>-&gt;</operator><name>offnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_SPLIT_TUPLE</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"prefix off: %u, postfix off: %u (same %d, new %d)"</literal></expr></argument>,
							 <argument><expr><operator>(</operator><operator>(</operator><name>spgxlogSplitTuple</name> <operator>*</operator><operator>)</operator> <name>rec</name><operator>)</operator><operator>-&gt;</operator><name>offnumPrefix</name></expr></argument>,
							 <argument><expr><operator>(</operator><operator>(</operator><name>spgxlogSplitTuple</name> <operator>*</operator><operator>)</operator> <name>rec</name><operator>)</operator><operator>-&gt;</operator><name>offnumPostfix</name></expr></argument>,
							 <argument><expr><operator>(</operator><operator>(</operator><name>spgxlogSplitTuple</name> <operator>*</operator><operator>)</operator> <name>rec</name><operator>)</operator><operator>-&gt;</operator><name>postfixBlkSame</name></expr></argument>,
							 <argument><expr><operator>(</operator><operator>(</operator><name>spgxlogSplitTuple</name> <operator>*</operator><operator>)</operator> <name>rec</name><operator>)</operator><operator>-&gt;</operator><name>newPage</name></expr></argument>
				)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_PICKSPLIT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>spgxlogPickSplit</name> <modifier>*</modifier></type><name>xlrec</name> <init>= <expr><operator>(</operator><name>spgxlogPickSplit</name> <operator>*</operator><operator>)</operator> <name>rec</name></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"ndel %u; nins %u"</literal></expr></argument>,
								 <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>nDelete</name></name></expr></argument>, <argument><expr><name><name>xlrec</name><operator>-&gt;</operator><name>nInsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>innerIsParent</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" (innerIsParent)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>xlrec</name><operator>-&gt;</operator><name>isRootSplit</name></name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" (isRootSplit)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_VACUUM_LEAF</name></expr>:</case>
			<comment type="block">/* no further information */</comment>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_VACUUM_ROOT</name></expr>:</case>
			<comment type="block">/* no further information */</comment>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_VACUUM_REDIRECT</name></expr>:</case>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"newest XID %u"</literal></expr></argument>,
							 <argument><expr><operator>(</operator><operator>(</operator><name>spgxlogVacuumRedirect</name> <operator>*</operator><operator>)</operator> <name>rec</name><operator>)</operator><operator>-&gt;</operator><name>newestRedirectXid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>spg_identify</name><parameter_list>(<parameter><decl><type><name>uint8</name></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>info</name> <operator>&amp;</operator> <operator>~</operator><name>XLR_INFO_MASK</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>XLOG_SPGIST_CREATE_INDEX</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"CREATE_INDEX"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_ADD_LEAF</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"ADD_LEAF"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_MOVE_LEAFS</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"MOVE_LEAFS"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_ADD_NODE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"ADD_NODE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_SPLIT_TUPLE</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"SPLIT_TUPLE"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_PICKSPLIT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"PICKSPLIT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_VACUUM_LEAF</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"VACUUM_LEAF"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_VACUUM_ROOT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"VACUUM_ROOT"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>XLOG_SPGIST_VACUUM_REDIRECT</name></expr>:</case>
			<expr_stmt><expr><name>id</name> <operator>=</operator> <literal type="string">"VACUUM_REDIRECT"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><name>id</name></expr>;</return>
</block_content>}</block></function>
</unit>
