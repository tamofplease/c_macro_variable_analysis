<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/replication/polar_priority_replication.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * polar_priority_replication.c
 *
 * Polar priority replication
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 *	  src/backend/replication/polar_priority_replication.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/polar_priority_replication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/syncrep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walsender.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walsender_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pmsignal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ps_status.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POLAR_PRI_REP_VALID_MODE</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((mode) == POLAR_PRI_REP_WAIT_FLUSH)</cpp:value></cpp:define>

<comment type="block">/* POLAR GUCs */</comment>
<decl_stmt><decl><type><name>int</name></type>			<name>polar_priority_replication_mode</name> <init>= <expr><name>POLAR_PRI_REP_OFF</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type>		<name>polar_priority_replication_force_wait</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>polar_high_priority_replication_standby_names</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>polar_low_priority_replication_standby_names</name></decl>;</decl_stmt>

<comment type="block">/* POLAR: priority replication helper function */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_exist_high_priority_replication_walsender</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>polar_priority_replication_waiter_need_wait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>polar_priority_replication_get_oldest_rec_ptr</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>priRepPtr</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>polar_priority_replication_wait_for_lsn</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>	<name>am_low_pri_walsender</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* 
	 * for physical replication, only low priority walsender should wait 
	 * for high priority walsender.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>am_low_pri_walsender</name> <operator>=</operator> <name><name>MyWalSnd</name><operator>-&gt;</operator><name>is_low_priority_replication_standby</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>am_low_pri_walsender</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>polar_priority_replication_walsender_wait_for_lsn</name><argument_list>(<argument><expr><name>POLAR_PRI_REP_WAIT_FLUSH</name></expr></argument>, <argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_priority_replication_walsender_wait_for_lsn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>new_status</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>old_status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type>		<name>sleeptime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>priority_replication_required</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_PRI_REP_VALID_MODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>priority_replication_required</name> <operator>=</operator> 
		<operator>(</operator><call><name>POLAR_PRI_REP_ENABLE</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>WalSndCtl</name><operator>-&gt;</operator><name>high_priority_replication_standbys_defined</name></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>priority_replication_required</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>SHMQueueIsDetached</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>MyProc</name><operator>-&gt;</operator><name>syncRepLinks</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>WalSndCtl</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>MyProc</name><operator>-&gt;</operator><name>syncRepState</name></name> <operator>==</operator> <name>SYNC_REP_NOT_WAITING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Check that the standby hasn't already replied. Unlikely race
	 * condition but we'll be fetching that cache line anyway so it's likely
	 * to be a low cost check.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>lsn</name> <operator>&lt;=</operator> <name><name>WalSndCtl</name><operator>-&gt;</operator><name>lsn</name><index>[<expr><name>mode</name></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Set our waitLSN so WALSender will know when to wake us, and add
	 * ourselves to the queue.
	 */</comment>
	<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>waitLSN</name></name> <operator>=</operator> <name>lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>syncRepState</name></name> <operator>=</operator> <name>SYNC_REP_WAITING</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SyncRepQueueInsert</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>SyncRepQueueIsOrderedByLSN</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Alter ps display to show waiting for pri rep. */</comment>
	<if_stmt><if>if <condition>(<expr><name>update_process_title</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>old_status</name> <operator>=</operator> <call><name>get_ps_display</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>new_status</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>old_status</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>new_status</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" waiting for %X/%X"</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>set_ps_display</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>new_status</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <comment type="block">/* truncate off " waiting ..." */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Wait for specified LSN to be confirmed.
	 *
	 * Each proc has its own wait latch, so we perform a normal latch
	 * check/wait loop here.
	 */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="block">/* Must reset the latch before testing state. */</comment>
		<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Acquiring the lock is not needed, the latch ensures proper
		 * barriers. If it looks like we're done, we must really be done,
		 * because once walsender changes the state to SYNC_REP_WAIT_COMPLETE,
		 * it will never update it again, so we can't be seeing a stale value
		 * in that case.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>MyProc</name><operator>-&gt;</operator><name>syncRepState</name></name> <operator>==</operator> <name>SYNC_REP_WAIT_COMPLETE</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="block">/* Exit the loop first, we will process these signals later */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PostmasterIsAlive</name><argument_list>()</argument_list></call> <operator>||</operator> <name>ProcDiePending</name> <operator>||</operator> <name>QueryCancelPending</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SyncRepCancelWait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>polar_priority_replication_waiter_need_wait</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SyncRepCancelWait</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>polar_wal_snd_normal_check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>sleeptime</name> <operator>=</operator> <call><name>polar_wal_snd_compute_sleep_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>, <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>, <argument><expr><name>sleeptime</name></expr></argument>,
				  <argument><expr><name>WAIT_EVENT_SYNC_REP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * High Pri Rep WalSender has checked our LSN and has removed us from 
	 * queue. Clean up state and leave.  It's OK to reset these shared memory 
	 * fields without holding SyncRepLock, because any walsenders will ignore 
	 * us anyway when we're not on the queue.  We need a read barrier to make 
	 * sure we see the changes to the queue link (this might be unnecessary 
	 * without assertions, but better safe than sorry).
	 */</comment>
	<expr_stmt><expr><call><name>pg_read_barrier</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>SHMQueueIsDetached</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>MyProc</name><operator>-&gt;</operator><name>syncRepLinks</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>syncRepState</name></name> <operator>=</operator> <name>SYNC_REP_NOT_WAITING</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>MyProc</name><operator>-&gt;</operator><name>waitLSN</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>new_status</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Reset ps display */</comment>
		<expr_stmt><expr><call><name>set_ps_display</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>new_status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* 
	 * POLAR: different from syncrep.c for normal backend, in priority replication,
	 * we should kill the walsender if required, otherwise it will send some data 
	 * that shouldn't be sent.
	 * We must guarantee to exit the waiting queue before killing this walsender 
	 * process, so we check interrupts and postmaster death here.
	 */</comment>

	<comment type="block">/*no cover begin*/</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PostmasterIsAlive</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<comment type="block">/*no cover end*/</comment>

	<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>polar_priority_replication_release_waiters</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>WalSndCtlData</name> <modifier>*</modifier></type><name>walsndctl</name> <init>= <expr><name>WalSndCtl</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>flushPtr</name> <init>= <expr><name><name>MyWalSnd</name><operator>-&gt;</operator><name>flush</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>priRepPtr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>am_high_pri_walsender</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>mode</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If we are stil starting up, still running base backup or the current 
	 * flush position is still invalid, then leave quickly.  Streaming or 
	 * stopping WAL senders are allowed to release waiters.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>MyWalSnd</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>WALSNDSTATE_STREAMING</name> <operator>&amp;&amp;</operator>
		 <name><name>MyWalSnd</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>WALSNDSTATE_STOPPING</name><operator>)</operator> <operator>||</operator>
		<call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name>flushPtr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* 
	 * If am not a high priority walsender, i can do nothing.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>am_high_pri_walsender</name> <operator>=</operator> <name><name>MyWalSnd</name><operator>-&gt;</operator><name>is_high_priority_replication_standby</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>WalSndCtl</name><operator>-&gt;</operator><name>priority_replication_mode</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>am_high_pri_walsender</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>priRepPtr</name> <operator>=</operator> <name>flushPtr</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>POLAR_PRI_REP_ALL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>polar_priority_replication_get_oldest_rec_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>priRepPtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<comment type="block">/*
	 * Set the lsn first so that when we wake backends they will release up to
	 * this location.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>MyWalSnd</name><operator>-&gt;</operator><name>is_high_priority_replication_standby</name></name> <operator>&amp;&amp;</operator>
		<name><name>walsndctl</name><operator>-&gt;</operator><name>lsn</name><index>[<expr><name>POLAR_PRI_REP_WAIT_FLUSH</name></expr>]</index></name> <operator>&lt;</operator> <name>priRepPtr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>walsndctl</name><operator>-&gt;</operator><name>lsn</name><index>[<expr><name>POLAR_PRI_REP_WAIT_FLUSH</name></expr>]</index></name> <operator>=</operator> <name>priRepPtr</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SyncRepWakeQueue</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>POLAR_PRI_REP_WAIT_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: for priority replication, return true if exist high priority
 * replication standbys. 
 * This function *must* be called with SyncRepLock in both shared or
 * exclusive mode.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>polar_exist_high_priority_replication_walsender</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>WalSnd</name> <modifier>*</modifier></type><name>walsnd</name></decl>;</decl_stmt>	<comment type="block">/* Use volatile pointer to prevent code
								 * rearrangement */</comment>
	
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>POLAR_PRI_REP_VALID_MODE</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_wal_senders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>	<name>is_high_pri</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WalSndState</name></type> <name>state</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>pid</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>walsnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>WalSndCtl</name><operator>-&gt;</operator><name>walsnds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walsnd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>walsnd</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>walsnd</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walsnd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>is_high_pri</name> <operator>=</operator> <name><name>walsnd</name><operator>-&gt;</operator><name>is_high_priority_replication_standby</name></name></expr>;</expr_stmt>

		<comment type="block">/* Must be active */</comment>
		<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*no cover begin*/</comment>
		<comment type="block">/* Must be streaming or stopping */</comment>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>WALSNDSTATE_STREAMING</name> <operator>&amp;&amp;</operator>
			<name>state</name> <operator>!=</operator> <name>WALSNDSTATE_STOPPING</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="block">/*no cover end*/</comment>

		<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>POLAR_PRI_REP_WAIT_FLUSH</name> <operator>&amp;&amp;</operator> <name>is_high_pri</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> 
<name>polar_priority_replication_waiter_need_wait</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>	<name>need_wait</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>	<name>am_low_pri_walsender</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>need_wait</name> <operator>=</operator> <name><name>WalSndCtl</name><operator>-&gt;</operator><name>priority_replication_force_wait</name></name> <operator>||</operator>
				<call><name>polar_exist_high_priority_replication_walsender</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>am_low_pri_walsender</name> <operator>=</operator> <name><name>MyWalSnd</name><operator>-&gt;</operator><name>is_low_priority_replication_standby</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>need_wait</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* 
	 * POLAR: for priority replication, we can't wake up a subset of standby 
	 * that's been removed from polar_low_priority_replication_standby_names. 
	 * so they need to jump out of the waiting loop by themself.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>POLAR_PRI_REP_WAIT_FLUSH</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>am_low_pri_walsender</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: priority replication ALL mode, fetch oldest XLogRecPtr for
 * priority replication.
 * This function *must* be called with SyncRepLock in both shared or
 * exclusive mode.
 */</comment> 
<function><type><specifier>static</specifier> <name>void</name></type>
<name>polar_priority_replication_get_oldest_rec_ptr</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>priRepPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>WalSnd</name> <modifier>*</modifier></type><name>walsnd</name></decl>;</decl_stmt>	<comment type="block">/* Use volatile pointer to prevent code
								 * rearrangement */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_wal_senders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>	<name>is_high_pri</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WalSndState</name></type> <name>state</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>pid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>flushPtr</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>walsnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>WalSndCtl</name><operator>-&gt;</operator><name>walsnds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walsnd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>walsnd</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>walsnd</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>flushPtr</name> <operator>=</operator> <name><name>walsnd</name><operator>-&gt;</operator><name>flush</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walsnd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>is_high_pri</name> <operator>=</operator> <name><name>walsnd</name><operator>-&gt;</operator><name>is_high_priority_replication_standby</name></name></expr>;</expr_stmt>

		<comment type="block">/* Must be active */</comment>
		<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*no cover begin*/</comment>
		<comment type="block">/* Must be streaming or stopping */</comment>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>WALSNDSTATE_STREAMING</name> <operator>&amp;&amp;</operator>
			<name>state</name> <operator>!=</operator> <name>WALSNDSTATE_STOPPING</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>is_high_pri</name> <operator>&amp;&amp;</operator> <name>flushPtr</name> <operator>&lt;</operator> <operator>*</operator><name>priRepPtr</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>priRepPtr</name> <operator>=</operator> <name>flushPtr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<comment type="block">/*no cover end*/</comment>
	</block_content>}</block></for>

</block_content>}</block></function>

<comment type="block">/*
 * POLAR: update priority replication walsender's type.
 * Mark a walsender weather it's a high/low priority replication walsender.
 * This function *must not* called with SyncRepLock.
 */</comment> 
<function><type><name>void</name></type>
<name>polar_priority_replication_update_walsender_type</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>		<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>WalSnd</name> <modifier>*</modifier></type><name>walsnd</name></decl>;</decl_stmt>	<comment type="block">/* Use volatile pointer to prevent code
								 * rearrangement */</comment>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_wal_senders</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>WalSndState</name></type> <name>state</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>pid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>is_high_pri</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name>is_low_pri</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>walsnd</name> <operator>=</operator> <operator>&amp;</operator><name><name>WalSndCtl</name><operator>-&gt;</operator><name>walsnds</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walsnd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pid</name> <operator>=</operator> <name><name>walsnd</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>state</name> <operator>=</operator> <name><name>walsnd</name><operator>-&gt;</operator><name>state</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>walsnd</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Must be active */</comment>
		<if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/*no cover begin*/</comment>
		<comment type="block">/* Must be streaming or stopping */</comment>
		<if_stmt><if>if <condition>(<expr><name>state</name> <operator>!=</operator> <name>WALSNDSTATE_STREAMING</name> <operator>&amp;&amp;</operator>
			<name>state</name> <operator>!=</operator> <name>WALSNDSTATE_STOPPING</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<comment type="block">/*no cover end*/</comment>
		
		<expr_stmt><expr><call><name>polar_walsender_parse_attrs</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_high_pri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>is_low_pri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>walsnd</name><operator>-&gt;</operator><name>is_low_priority_replication_standby</name></name> <operator>=</operator> <name>is_low_pri</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>walsnd</name><operator>-&gt;</operator><name>is_high_priority_replication_standby</name></name> <operator>=</operator> <name>is_high_pri</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: called by checkpointer, It's safe to check the current value
 * without the lock, because it's only ever updated by one process. But we
 * must take the lock to change it.
 */</comment> 
<function><type><name>void</name></type>
<name>polar_priority_replication_update_priority_replication_force_wait</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>polar_priority_replication_force_wait</name> <operator>!=</operator> <name><name>WalSndCtl</name><operator>-&gt;</operator><name>priority_replication_force_wait</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>WalSndCtl</name><operator>-&gt;</operator><name>priority_replication_force_wait</name></name> <operator>=</operator> <name>polar_priority_replication_force_wait</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: called by checkpointer, It's safe to check the current value
 * without the lock, because it's only ever updated by one process. But we
 * must take the lock to change it.
 */</comment> 
<function><type><name>void</name></type>
<name>polar_priority_replication_update_high_priority_replication_standbys_defined</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>	
	<decl_stmt><decl><type><name>bool</name></type>	<name>high_pri_rep_standbys_defined</name> <init>= <expr><call><name>POLAR_HIGH_PRI_REP_STANDBYS_DEFINED</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>high_pri_rep_standbys_defined</name> <operator>!=</operator> <name><name>WalSndCtl</name><operator>-&gt;</operator><name>high_priority_replication_standbys_defined</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>high_pri_rep_standbys_defined</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SyncRepWakeQueue</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>POLAR_PRI_REP_WAIT_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>WalSndCtl</name><operator>-&gt;</operator><name>high_priority_replication_standbys_defined</name></name> <operator>=</operator> <name>high_pri_rep_standbys_defined</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: called by checkpointer, It's safe to check the current value
 * without the lock, because it's only ever updated by one process. But we
 * must take the lock to change it.
 */</comment> 
<function><type><name>void</name></type>
<name>polar_priority_replication_update_low_priority_replication_standbys_defined</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>	<name>low_pri_rep_standbys_defined</name> <init>= <expr><call><name>POLAR_LOW_PRI_REP_STANDBYS_DEFINED</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>low_pri_rep_standbys_defined</name> <operator>!=</operator> <name><name>WalSndCtl</name><operator>-&gt;</operator><name>low_priority_replication_standbys_defined</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* 
		 * POLAR: We can't wake up a subset that's been removed from low priority,
		 * but we can wake them all up.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>low_pri_rep_standbys_defined</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SyncRepWakeQueue</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>POLAR_PRI_REP_WAIT_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>WalSndCtl</name><operator>-&gt;</operator><name>low_priority_replication_standbys_defined</name></name> <operator>=</operator> <name>low_pri_rep_standbys_defined</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR: called by checkpointer, It's safe to check the current value
 * without the lock, because it's only ever updated by one process. But we
 * must take the lock to change it.
 */</comment> 
<function><type><name>void</name></type>
<name>polar_priority_replication_update_priority_replication_mode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>priority_replication_mode</name> <init>= <expr><name>polar_priority_replication_mode</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>priority_replication_mode</name> <operator>!=</operator> <name><name>WalSndCtl</name><operator>-&gt;</operator><name>priority_replication_mode</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>priority_replication_mode</name> <operator>==</operator> <name>POLAR_PRI_REP_OFF</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>SyncRepWakeQueue</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>POLAR_PRI_REP_WAIT_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
		<expr_stmt><expr><name><name>WalSndCtl</name><operator>-&gt;</operator><name>priority_replication_mode</name></name> <operator>=</operator> <name>priority_replication_mode</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>SyncRepLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function></unit>
