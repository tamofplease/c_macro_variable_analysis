<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/replication/logical/launcher.c"><comment type="block">/*-------------------------------------------------------------------------
 * launcher.c
 *	   PostgreSQL logical replication worker launcher process
 *
 * Copyright (c) 2016-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/replication/logical/launcher.c
 *
 * NOTES
 *	  This module contains the logical replication worker launcher which
 *	  uses the background worker infrastructure to start the logical
 *	  replication workers for every enabled subscription.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_subscription.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_subscription_rel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqsignal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/bgworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/fork_process.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/logicallauncher.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/logicalworker.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/slot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walreceiver.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/worker_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procsignal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pg_lsn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/polar_coredump.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/ps_status.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timeout.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<comment type="block">/* max sleep time between cycles (3min) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NAPTIME_PER_CYCLE</name></cpp:macro> <cpp:value>180000L</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type>			<name>max_logical_replication_workers</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type>			<name>max_sync_workers_per_subscription</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>MyLogicalRepWorker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>LogicalRepCtxStruct</name>
<block>{
	<comment type="block">/* Supervisor process. */</comment>
	<decl_stmt><decl><type><name>pid_t</name></type>		<name>launcher_pid</name></decl>;</decl_stmt>

	<comment type="block">/* Background workers. */</comment>
	<decl_stmt><decl><type><name>LogicalRepWorker</name></type> <name><name>workers</name><index>[<expr><name>FLEXIBLE_ARRAY_MEMBER</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>LogicalRepCtxStruct</name>;</typedef>

<decl_stmt><decl><type><name>LogicalRepCtxStruct</name> <modifier>*</modifier></type><name>LogicalRepCtx</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>LogicalRepWorkerId</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type>			<name>subid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>relid</name></decl>;</decl_stmt>
}</block></struct></type> <name>LogicalRepWorkerId</name>;</typedef>

<typedef>typedef <type><struct>struct <name>StopWorkersData</name>
<block>{
	<decl_stmt><decl><type><name>int</name></type>			<name>nestDepth</name></decl>;</decl_stmt>		<comment type="block">/* Sub-transaction nest level */</comment>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>workers</name></decl>;</decl_stmt>		<comment type="block">/* List of LogicalRepWorkerId */</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>StopWorkersData</name></name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt> <comment type="block">/* This need not be an immediate
									 * subtransaction parent */</comment>
}</block></struct></type> <name>StopWorkersData</name>;</typedef>


<comment type="block">/*
 * Stack of StopWorkersData elements. Each stack element contains the workers
 * to be stopped for that subtransaction.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>StopWorkersData</name> <modifier>*</modifier></type><name>on_commit_stop_workers</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ApplyLauncherWakeup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logicalrep_launcher_onexit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logicalrep_worker_onexit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logicalrep_worker_detach</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logicalrep_worker_cleanup</name><parameter_list>(<parameter><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>worker</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Flags set by signal handlers */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>sig_atomic_t</name></type> <name>got_SIGHUP</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>on_commit_launcher_wakeup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>Datum</name></type>		<name>pg_stat_get_subscription</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Load the list of subscriptions.
 *
 * Only the fields interesting for worker start/stop functions are filled for
 * each subscription.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>get_subscription_list</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type>	<name>rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapScanDesc</name></type> <name>scan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>resultcxt</name></decl>;</decl_stmt>

	<comment type="block">/* This is the context that we will allocate our output data in */</comment>
	<expr_stmt><expr><name>resultcxt</name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Start a transaction so we can access pg_database, and get a snapshot.
	 * We don't have a use for the snapshot itself, but we're interested in
	 * the secondary effect that it sets RecentGlobalXmin.  (This is critical
	 * for anything that reads heap pages, because HOT may decide to prune
	 * them even if the process doesn't attempt to modify any tuples.)
	 */</comment>
	<expr_stmt><expr><call><name>StartTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>GetTransactionSnapshot</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>rel</name> <operator>=</operator> <call><name>heap_open</name><argument_list>(<argument><expr><name>SubscriptionRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>scan</name> <operator>=</operator> <call><name>heap_beginscan_catalog</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name> <operator>=</operator> <call><name>heap_getnext</name><argument_list>(<argument><expr><name>scan</name></expr></argument>, <argument><expr><name>ForwardScanDirection</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_subscription</name></type> <name>subform</name> <init>= <expr><operator>(</operator><name>Form_pg_subscription</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Subscription</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * Allocate our results in the caller's context, not the
		 * transaction's. We do this inside the loop, and restore the original
		 * context at the end, so that leaky things like heap_getnext() are
		 * not called in a potentially long-lived context.
		 */</comment>
		<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>resultcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>(</operator><name>Subscription</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Subscription</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>oid</name></name> <operator>=</operator> <call><name>HeapTupleGetOid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name><name>subform</name><operator>-&gt;</operator><name>subdbid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>owner</name></name> <operator>=</operator> <name><name>subform</name><operator>-&gt;</operator><name>subowner</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>enabled</name></name> <operator>=</operator> <name><name>subform</name><operator>-&gt;</operator><name>subenabled</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>subform</name><operator>-&gt;</operator><name>subname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* We don't fill fields we are not interested in. */</comment>

		<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>heap_endscan</name><argument_list>(<argument><expr><name>scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>heap_close</name><argument_list>(<argument><expr><name>rel</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CommitTransactionCommand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Wait for a background worker to start up and attach to the shmem context.
 *
 * This is only needed for cleaning up the shared memory in case the worker
 * fails to attach.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>WaitForReplicationWorkerAttach</name><parameter_list>(<parameter><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>worker</name></decl></parameter>,
							   <parameter><decl><type><name>uint16</name></type> <name>generation</name></decl></parameter>,
							   <parameter><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BgwHandleStatus</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rc</name></decl>;</decl_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>pid_t</name></type>		<name>pid</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Worker either died or has started; no need to do anything. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>worker</name><operator>-&gt;</operator><name>in_use</name></name> <operator>||</operator> <name><name>worker</name><operator>-&gt;</operator><name>proc</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Check if worker has died before attaching, and clean up after it. */</comment>
		<expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>GetBackgroundWorkerPid</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>BGWH_STOPPED</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Ensure that this was indeed the worker we waited for. */</comment>
			<if_stmt><if>if <condition>(<expr><name>generation</name> <operator>==</operator> <name><name>worker</name><operator>-&gt;</operator><name>generation</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logicalrep_worker_cleanup</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We need timeout because we generally don't get notified via latch
		 * about the worker attach.  But we don't expect to have to wait long.
		 */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>,
					   <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
					   <argument><expr><literal type="number">10L</literal></expr></argument>, <argument><expr><name>WAIT_EVENT_BGWORKER_STARTUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* emergency bailout if postmaster has died */</comment>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_LATCH_SET</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Walks the workers array and searches for one that matches given
 * subscription id and relid.
 */</comment>
<function><type><name>LogicalRepWorker</name> <modifier>*</modifier></type>
<name>logicalrep_worker_find</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>subid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>only_running</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LWLockHeldByMe</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Search for attached worker for a given subscription id. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_logical_replication_workers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name><name>w</name><operator>-&gt;</operator><name>subid</name></name> <operator>==</operator> <name>subid</name> <operator>&amp;&amp;</operator> <name><name>w</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>relid</name> <operator>&amp;&amp;</operator>
			<operator>(</operator><operator>!</operator><name>only_running</name> <operator>||</operator> <name><name>w</name><operator>-&gt;</operator><name>proc</name></name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Similar to logicalrep_worker_find(), but returns list of all workers for
 * the subscription, instead just one.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>logicalrep_workers_find</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>subid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>only_running</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>res</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LWLockHeldByMe</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Search for attached worker for a given subscription id. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_logical_replication_workers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <name><name>w</name><operator>-&gt;</operator><name>subid</name></name> <operator>==</operator> <name>subid</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>only_running</name> <operator>||</operator> <name><name>w</name><operator>-&gt;</operator><name>proc</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Start new apply background worker, if possible.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_worker_launch</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>dbid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>subid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>subname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>userid</name></decl></parameter>,
						 <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BackgroundWorker</name></type> <name>bgw</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>BackgroundWorkerHandle</name> <modifier>*</modifier></type><name>bgw_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>generation</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nsyncworkers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>now</name></decl>;</decl_stmt>
	<comment type="block">/* POLAR: count replication workers available */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>polar_logical_repworker_available</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="block">/* POLAR: end */</comment>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"starting logical replication worker for subscription \"%s\""</literal></expr></argument>,
					<argument><expr><name>subname</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Report this after the initial starting message for consistency. */</comment>
	<if_stmt><if>if <condition>(<expr><name>max_replication_slots</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIGURATION_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot start logical replication workers when max_replication_slots = 0"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * We need to do the modification of the shared memory under lock so that
	 * we have consistent view.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry</name>:</label>
	<comment type="block">/* Find unused worker slot. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_logical_replication_workers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>worker</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>slot</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* POLAR: count replication workers available */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_logical_replication_workers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>polar_logical_repworker_available</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<comment type="block">/* POLAR: end */</comment>

	<expr_stmt><expr><name>nsyncworkers</name> <operator>=</operator> <call><name>logicalrep_sync_worker_count</name><argument_list>(<argument><expr><name>subid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we didn't find a free slot, try to do garbage collection.  The
	 * reason we do this is because if some worker failed to start up and its
	 * parent has crashed while waiting, the in_use state was never cleared.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>worker</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>nsyncworkers</name> <operator>&gt;=</operator> <name>max_sync_workers_per_subscription</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type>		<name>did_cleanup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_logical_replication_workers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * If the worker was marked in use but didn't manage to attach in
			 * time, clean it up.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>w</name><operator>-&gt;</operator><name>proc</name></name> <operator>&amp;&amp;</operator>
				<call><name>TimestampDifferenceExceeds</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>launch_time</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>,
										   <argument><expr><name>wal_receiver_timeout</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
					 <argument><expr><literal type="string">"logical replication worker for subscription %u took too long to start; canceled"</literal></expr></argument>,
					 <argument><expr><name><name>w</name><operator>-&gt;</operator><name>subid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><call><name>logicalrep_worker_cleanup</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>did_cleanup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<if_stmt><if>if <condition>(<expr><name>did_cleanup</name></expr>)</condition><block type="pseudo"><block_content>
			<goto>goto <name>retry</name>;</goto></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If we reached the sync worker limit per subscription, just exit
	 * silently as we might get here because of an otherwise harmless race
	 * condition.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>nsyncworkers</name> <operator>&gt;=</operator> <name>max_sync_workers_per_subscription</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * However if there are no more free worker slots, inform user about it
	 * before exiting.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>worker</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIGURATION_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of logical replication worker slots"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"You might need to increase max_logical_replication_workers."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * POLAR: limit the maximum num of replication workers request by
	 * non-super users
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>polar_logical_repl_workers_reserved_for_superuser</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<name>polar_logical_repworker_available</name> <operator>&lt;=</operator> <name>polar_logical_repl_workers_reserved_for_superuser</name> <operator>&amp;&amp;</operator>
		<operator>!</operator><name><name>MyProc</name><operator>-&gt;</operator><name>issuper</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIGURATION_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of logical replication worker slots requested by non_super users"</literal>
				 <literal type="string">"current polar_logical_repworker_available :%d, polar_logical_repl_workers_reserved_for_superuser:"</literal>
				 <literal type="string">" %d"</literal></expr></argument>, <argument><expr><name>polar_logical_repworker_available</name></expr></argument>, <argument><expr><name>polar_logical_repl_workers_reserved_for_superuser</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="block">/* POLAR: end */</comment>

	<comment type="block">/* Prepare the worker slot. */</comment>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>launch_time</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>generation</name></name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>dbid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>userid</name></name> <operator>=</operator> <name>userid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>subid</name></name> <operator>=</operator> <name>subid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>relid</name></name> <operator>=</operator> <name>relid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>relstate</name></name> <operator>=</operator> <name>SUBREL_STATE_UNKNOWN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>relstate_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>last_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TIMESTAMP_NOBEGIN</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>last_send_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TIMESTAMP_NOBEGIN</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>last_recv_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>reply_lsn</name></name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>TIMESTAMP_NOBEGIN</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>reply_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Before releasing lock, remember generation for future identification. */</comment>
	<expr_stmt><expr><name>generation</name> <operator>=</operator> <name><name>worker</name><operator>-&gt;</operator><name>generation</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Register the new dynamic worker. */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bgw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bgw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name> <operator>|</operator>
		<name>BGWORKER_BACKEND_DATABASE_CONNECTION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_RecoveryFinished</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>bgw</name><operator>.</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>bgw</name><operator>.</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"ApplyWorkerMain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>bgw</name><operator>.</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>,
				 <argument><expr><literal type="string">"logical replication worker for subscription %u sync %u"</literal></expr></argument>, <argument><expr><name>subid</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>bgw</name><operator>.</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>,
				 <argument><expr><literal type="string">"logical replication worker for subscription %u"</literal></expr></argument>, <argument><expr><name>subid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>bgw</name><operator>.</operator><name>bgw_type</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"logical replication worker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_restart_time</name></name> <operator>=</operator> <name>BGW_NEVER_RESTART</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_notify_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_main_arg</name></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RegisterDynamicBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bgw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bgw_handle</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Failed to start worker, so clean up the worker slot. */</comment>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>generation</name> <operator>==</operator> <name><name>worker</name><operator>-&gt;</operator><name>generation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logicalrep_worker_cleanup</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_CONFIGURATION_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"out of background worker slots"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"You might need to increase max_worker_processes."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Now wait until it attaches. */</comment>
	<expr_stmt><expr><call><name>WaitForReplicationWorkerAttach</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><name>generation</name></expr></argument>, <argument><expr><name>bgw_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Stop the logical replication worker for subid/relid, if any, and wait until
 * it detaches from the slot.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_worker_stop</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>subid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>worker</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>generation</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>worker</name> <operator>=</operator> <call><name>logicalrep_worker_find</name><argument_list>(<argument><expr><name>subid</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* No worker, nothing to do. */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>worker</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Remember which generation was our worker so we can check if what we see
	 * is still the same one.
	 */</comment>
	<expr_stmt><expr><name>generation</name> <operator>=</operator> <name><name>worker</name><operator>-&gt;</operator><name>generation</name></name></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we found a worker but it does not have proc set then it is still
	 * starting up; wait for it to finish starting and then kill it.
	 */</comment>
	<while>while <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>in_use</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>worker</name><operator>-&gt;</operator><name>proc</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>rc</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Wait a bit --- we don't expect to have to wait long. */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>,
					   <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
					   <argument><expr><literal type="number">10L</literal></expr></argument>, <argument><expr><name>WAIT_EVENT_BGWORKER_STARTUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* emergency bailout if postmaster has died */</comment>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_LATCH_SET</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Recheck worker status. */</comment>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Check whether the worker slot is no longer used, which would mean
		 * that the worker has exited, or whether the worker generation is
		 * different, meaning that a different worker has taken the slot.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>worker</name><operator>-&gt;</operator><name>in_use</name></name> <operator>||</operator> <name><name>worker</name><operator>-&gt;</operator><name>generation</name></name> <operator>!=</operator> <name>generation</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Worker has assigned proc, so it has started. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>-&gt;</operator><name>proc</name></name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Now terminate the worker ... */</comment>
	<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>worker</name><operator>-&gt;</operator><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ... and wait for it to die. */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>rc</name></decl>;</decl_stmt>

		<comment type="block">/* is it gone? */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>worker</name><operator>-&gt;</operator><name>proc</name></name> <operator>||</operator> <name><name>worker</name><operator>-&gt;</operator><name>generation</name></name> <operator>!=</operator> <name>generation</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Wait a bit --- we don't expect to have to wait long. */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>,
					   <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
					   <argument><expr><literal type="number">10L</literal></expr></argument>, <argument><expr><name>WAIT_EVENT_BGWORKER_SHUTDOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* emergency bailout if postmaster has died */</comment>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_LATCH_SET</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Request worker for specified sub/rel to be stopped on commit.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_worker_stop_at_commit</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>subid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>nestDepth</name> <init>= <expr><call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LogicalRepWorkerId</name> <modifier>*</modifier></type><name>wid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldctx</name></decl>;</decl_stmt>

	<comment type="block">/* Make sure we store the info in context that survives until commit. */</comment>
	<expr_stmt><expr><name>oldctx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check that previous transactions were properly cleaned up. */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>on_commit_stop_workers</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		   <name>nestDepth</name> <operator>&gt;=</operator> <name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>nestDepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Push a new stack element if we don't already have one for the current
	 * nestDepth.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>on_commit_stop_workers</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<name>nestDepth</name> <operator>&gt;</operator> <name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>nestDepth</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StopWorkersData</name> <modifier>*</modifier></type><name>newdata</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StopWorkersData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>newdata</name><operator>-&gt;</operator><name>nestDepth</name></name> <operator>=</operator> <name>nestDepth</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newdata</name><operator>-&gt;</operator><name>workers</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newdata</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name>on_commit_stop_workers</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>on_commit_stop_workers</name> <operator>=</operator> <name>newdata</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Finally add a new worker into the worker list of the current
	 * subtransaction.
	 */</comment>
	<expr_stmt><expr><name>wid</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LogicalRepWorkerId</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wid</name><operator>-&gt;</operator><name>subid</name></name> <operator>=</operator> <name>subid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wid</name><operator>-&gt;</operator><name>relid</name></name> <operator>=</operator> <name>relid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>workers</name></name> <operator>=</operator>
		<call><name>lappend</name><argument_list>(<argument><expr><name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>workers</name></name></expr></argument>, <argument><expr><name>wid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Wake up (using latch) any logical replication worker for specified sub/rel.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_worker_wakeup</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>subid</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>worker</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>worker</name> <operator>=</operator> <call><name>logicalrep_worker_find</name><argument_list>(<argument><expr><name>subid</name></expr></argument>, <argument><expr><name>relid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>worker</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logicalrep_worker_wakeup_ptr</name><argument_list>(<argument><expr><name>worker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Wake up (using latch) the specified logical replication worker.
 *
 * Caller must hold lock, else worker-&gt;proc could change under us.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_worker_wakeup_ptr</name><parameter_list>(<parameter><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>worker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LWLockHeldByMe</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>proc</name><operator>-&gt;</operator><name>procLatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Attach to a slot.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_worker_attach</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Block concurrent access. */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>slot</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>slot</name> <operator>&lt;</operator> <name>max_logical_replication_workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>MyLogicalRepWorker</name> <operator>=</operator> <operator>&amp;</operator><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>slot</name></expr>]</index></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>MyLogicalRepWorker</name><operator>-&gt;</operator><name>in_use</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"logical replication worker slot %d is empty, cannot attach"</literal></expr></argument>,
						<argument><expr><name>slot</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>MyLogicalRepWorker</name><operator>-&gt;</operator><name>proc</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"logical replication worker slot %d is already used by "</literal>
						<literal type="string">"another worker, cannot attach"</literal></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>MyLogicalRepWorker</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>MyProc</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>before_shmem_exit</name><argument_list>(<argument><expr><name>logicalrep_worker_onexit</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Detach the worker (cleans up the worker info).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_worker_detach</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Block concurrent access. */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>logicalrep_worker_cleanup</name><argument_list>(<argument><expr><name>MyLogicalRepWorker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Clean up worker info.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_worker_cleanup</name><parameter_list>(<parameter><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>worker</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LWLockHeldByMeInMode</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>in_use</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>dbid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>userid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>subid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>worker</name><operator>-&gt;</operator><name>relid</name></name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Cleanup function for logical replication launcher.
 *
 * Called on logical replication launcher exit.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_launcher_onexit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>launcher_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Cleanup function.
 *
 * Called on logical replication worker exit.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_worker_onexit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Disconnect gracefully from the remote side. */</comment>
	<if_stmt><if>if <condition>(<expr><name>wrconn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>walrcv_disconnect</name><argument_list>(<argument><expr><name>wrconn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>logicalrep_worker_detach</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ApplyLauncherWakeup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* SIGHUP: set flag to reload configuration at next convenient time */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_launcher_sighup</name><parameter_list>(<parameter><decl><type><name>SIGNAL_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>got_SIGHUP</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<comment type="block">/* Waken anything waiting on the process latch */</comment>
	<expr_stmt><expr><call><name>SetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>save_errno</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Count the number of registered (not necessarily running) sync workers
 * for a subscription.
 */</comment>
<function><type><name>int</name></type>
<name>logicalrep_sync_worker_count</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>subid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>LWLockHeldByMe</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Search for attached worker for a given subscription id. */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_logical_replication_workers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>w</name> <init>= <expr><operator>&amp;</operator><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>w</name><operator>-&gt;</operator><name>subid</name></name> <operator>==</operator> <name>subid</name> <operator>&amp;&amp;</operator> <call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>res</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ApplyLauncherShmemSize
 *		Compute space needed for replication launcher shared memory
 */</comment>
<function><type><name>Size</name></type>
<name>ApplyLauncherShmemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type>		<name>size</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Need the fixed struct and the array of LogicalRepWorker.
	 */</comment>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LogicalRepCtxStruct</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>mul_size</name><argument_list>(<argument><expr><name>max_logical_replication_workers</name></expr></argument>,
								   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LogicalRepWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * ApplyLauncherRegister
 *		Register a background worker running the logical replication launcher.
 */</comment>
<function><type><name>void</name></type>
<name>ApplyLauncherRegister</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>BackgroundWorker</name></type> <name>bgw</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>max_logical_replication_workers</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bgw</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bgw</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_flags</name></name> <operator>=</operator> <name>BGWORKER_SHMEM_ACCESS</name> <operator>|</operator>
		<name>BGWORKER_BACKEND_DATABASE_CONNECTION</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_start_time</name></name> <operator>=</operator> <name>BgWorkerStart_RecoveryFinished</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>bgw</name><operator>.</operator><name>bgw_library_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>bgw</name><operator>.</operator><name>bgw_function_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>, <argument><expr><literal type="string">"ApplyLauncherMain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>bgw</name><operator>.</operator><name>bgw_name</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>,
			 <argument><expr><literal type="string">"logical replication launcher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>bgw</name><operator>.</operator><name>bgw_type</name></name></expr></argument>, <argument><expr><name>BGW_MAXLEN</name></expr></argument>,
			 <argument><expr><literal type="string">"logical replication launcher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_restart_time</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_notify_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>bgw</name><operator>.</operator><name>bgw_main_arg</name></name> <operator>=</operator> <operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>RegisterBackgroundWorker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bgw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * ApplyLauncherShmemInit
 *		Allocate and initialize replication launcher shared memory
 */</comment>
<function><type><name>void</name></type>
<name>ApplyLauncherShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>LogicalRepCtx</name> <operator>=</operator> <operator>(</operator><name>LogicalRepCtxStruct</name> <operator>*</operator><operator>)</operator>
		<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Logical Replication Launcher Data"</literal></expr></argument>,
						<argument><expr><call><name>ApplyLauncherShmemSize</name><argument_list>()</argument_list></call></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>slot</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>LogicalRepCtx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>ApplyLauncherShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Initialize memory and spin locks for each worker slot. */</comment>
		<for>for <control>(<init><expr><name>slot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>slot</name> <operator>&lt;</operator> <name>max_logical_replication_workers</name></expr>;</condition> <incr><expr><name>slot</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><operator>&amp;</operator><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>slot</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>worker</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LogicalRepWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>worker</name><operator>-&gt;</operator><name>relmutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Check whether current transaction has manipulated logical replication
 * workers.
 */</comment>
<function><type><name>bool</name></type>
<name>XactManipulatesLogicalReplicationWorkers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><name>on_commit_stop_workers</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Wakeup the launcher on commit if requested.
 */</comment>
<function><type><name>void</name></type>
<name>AtEOXact_ApplyLauncher</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>)</parameter_list>
<block>{<block_content>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>on_commit_stop_workers</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		   <operator>(</operator><name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>nestDepth</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>
			<name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>isCommit</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>on_commit_stop_workers</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>workers</name> <init>= <expr><name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>workers</name></name></expr></init></decl>;</decl_stmt>

			<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>workers</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>LogicalRepWorkerId</name> <modifier>*</modifier></type><name>wid</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><call><name>logicalrep_worker_stop</name><argument_list>(<argument><expr><name><name>wid</name><operator>-&gt;</operator><name>subid</name></name></expr></argument>, <argument><expr><name><name>wid</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>on_commit_launcher_wakeup</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ApplyLauncherWakeup</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * No need to pfree on_commit_stop_workers.  It was allocated in
	 * transaction memory context, which is going to be cleaned soon.
	 */</comment>
	<expr_stmt><expr><name>on_commit_stop_workers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>on_commit_launcher_wakeup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * On commit, merge the current on_commit_stop_workers list into the
 * immediate parent, if present.
 * On rollback, discard the current on_commit_stop_workers list.
 * Pop out the stack.
 */</comment>
<function><type><name>void</name></type>
<name>AtEOSubXact_ApplyLauncher</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>isCommit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nestDepth</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StopWorkersData</name> <modifier>*</modifier></type><name>parent</name></decl>;</decl_stmt>

	<comment type="block">/* Exit immediately if there's no work to do at this level. */</comment>
	<if_stmt><if>if <condition>(<expr><name>on_commit_stop_workers</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
		<name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>nestDepth</name></name> <operator>&lt;</operator> <name>nestDepth</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>nestDepth</name></name> <operator>==</operator> <name>nestDepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>parent</name> <operator>=</operator> <name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>isCommit</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If the upper stack element is not an immediate parent
		 * subtransaction, just decrement the notional nesting depth without
		 * doing any real work.  Else, we need to merge the current workers
		 * list into the parent.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>parent</name> <operator>||</operator> <name><name>parent</name><operator>-&gt;</operator><name>nestDepth</name></name> <operator>&lt;</operator> <name>nestDepth</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>nestDepth</name></name><operator>--</operator></expr>;</expr_stmt>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>parent</name><operator>-&gt;</operator><name>workers</name></name> <operator>=</operator>
			<call><name>list_concat</name><argument_list>(<argument><expr><name><name>parent</name><operator>-&gt;</operator><name>workers</name></name></expr></argument>, <argument><expr><name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * Abandon everything that was done at this nesting level.  Explicitly
		 * free memory to avoid a transaction-lifespan leak.
		 */</comment>
		<expr_stmt><expr><call><name>list_free_deep</name><argument_list>(<argument><expr><name><name>on_commit_stop_workers</name><operator>-&gt;</operator><name>workers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="block">/*
	 * We have taken care of the current subtransaction workers list for both
	 * abort or commit. So we are ready to pop the stack.
	 */</comment>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>on_commit_stop_workers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>on_commit_stop_workers</name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Request wakeup of the launcher on commit of the transaction.
 *
 * This is used to send launcher signal to stop sleeping and process the
 * subscriptions when current transaction commits. Should be used when new
 * tuple was added to the pg_subscription catalog.
*/</comment>
<function><type><name>void</name></type>
<name>ApplyLauncherWakeupAtCommit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>on_commit_launcher_wakeup</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>on_commit_launcher_wakeup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>ApplyLauncherWakeup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>launcher_pid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>launcher_pid</name></name></expr></argument>, <argument><expr><name>SIGUSR1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Main loop for the apply launcher process.
 */</comment>
<function><type><name>void</name></type>
<name>ApplyLauncherMain</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>main_arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TimestampTz</name></type> <name>last_start_time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"logical replication launcher started"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>before_shmem_exit</name><argument_list>(<argument><expr><name>logicalrep_launcher_onexit</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>launcher_pid</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>launcher_pid</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>

	<comment type="block">/* Establish signal handlers. */</comment>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>logicalrep_launcher_sighup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>die</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* POLAR : register for coredump print */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_WIN32</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGILL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGILL</name></expr></argument>, <argument><expr><name>polar_program_error_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGSEGV</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGSEGV</name></expr></argument>, <argument><expr><name>polar_program_error_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SIGBUS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pqsignal</name><argument_list>(<argument><expr><name>SIGBUS</name></expr></argument>, <argument><expr><name>polar_program_error_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="block">/* _WIN32 */</comment>
	<comment type="block">/* POLAR: end */</comment>

	<expr_stmt><expr><call><name>BackgroundWorkerUnblockSignals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Establish connection to nailed catalogs (we only ever access
	 * pg_subscription).
	 */</comment>
	<expr_stmt><expr><call><name>BackgroundWorkerInitializeConnection</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Enter main loop */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>rc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>sublist</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>subctx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldctx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>TimestampTz</name></type> <name>now</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name></type>		<name>wait_time</name> <init>= <expr><name>DEFAULT_NAPTIME_PER_CYCLE</name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Limit the start retry to once a wal_retrieve_retry_interval */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>TimestampDifferenceExceeds</name><argument_list>(<argument><expr><name>last_start_time</name></expr></argument>, <argument><expr><name>now</name></expr></argument>,
									   <argument><expr><name>wal_retrieve_retry_interval</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Use temporary context for the database list and worker info. */</comment>
			<expr_stmt><expr><name>subctx</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>TopMemoryContext</name></expr></argument>,
										   <argument><expr><literal type="string">"Logical Replication Launcher sublist"</literal></expr></argument>,
										   <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>oldctx</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>subctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* search for subscriptions to start or stop. */</comment>
			<expr_stmt><expr><name>sublist</name> <operator>=</operator> <call><name>get_subscription_list</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Start the missing workers for enabled subscriptions. */</comment>
			<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>sublist</argument>)</argument_list></macro>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Subscription</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><operator>(</operator><name>Subscription</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>LogicalRepWorker</name> <modifier>*</modifier></type><name>w</name></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sub</name><operator>-&gt;</operator><name>enabled</name></name></expr>)</condition><block type="pseudo"><block_content>
					<continue>continue;</continue></block_content></block></if></if_stmt>

				<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>logicalrep_worker_find</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>last_start_time</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <name>wal_retrieve_retry_interval</name></expr>;</expr_stmt>

					<expr_stmt><expr><call><name>logicalrep_worker_launch</name><argument_list>(<argument><expr><name><name>sub</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>oid</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
											 <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>owner</name></name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block>

			<comment type="block">/* Switch back to original memory context. */</comment>
			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/* Clean the temporary memory. */</comment>
			<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>subctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * The wait in previous cycle was interrupted in less than
			 * wal_retrieve_retry_interval since last worker was started, this
			 * usually means crash of the worker, so we should retry in
			 * wal_retrieve_retry_interval again.
			 */</comment>
			<expr_stmt><expr><name>wait_time</name> <operator>=</operator> <name>wal_retrieve_retry_interval</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* Wait for more work. */</comment>
		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>,
					   <argument><expr><name>WL_LATCH_SET</name> <operator>|</operator> <name>WL_TIMEOUT</name> <operator>|</operator> <name>WL_POSTMASTER_DEATH</name></expr></argument>,
					   <argument><expr><name>wait_time</name></expr></argument>,
					   <argument><expr><name>WAIT_EVENT_LOGICAL_LAUNCHER_MAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* emergency bailout if postmaster has died */</comment>
		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_POSTMASTER_DEATH</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>proc_exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&amp;</operator> <name>WL_LATCH_SET</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ResetLatch</name><argument_list>(<argument><expr><name>MyLatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name>got_SIGHUP</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>got_SIGHUP</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ProcessConfigFile</name><argument_list>(<argument><expr><name>PGC_SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/* Not reachable */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Is current process the logical replication launcher?
 */</comment>
<function><type><name>bool</name></type>
<name>IsLogicalLauncher</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>launcher_pid</name></name> <operator>==</operator> <name>MyProcPid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Returns state of the subscriptions.
 */</comment>
<function><type><name>Datum</name></type>
<name>pg_stat_get_subscription</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_STAT_GET_SUBSCRIPTION_COLS</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>subid</name> <init>= <expr><ternary><condition><expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>InvalidOid</name></expr> </then><else>: <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>rsinfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>per_query_ctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcontext</name></decl>;</decl_stmt>

	<comment type="block">/* check to see if caller supports us returning a tuplestore */</comment>
	<if_stmt><if>if <condition>(<expr><name>rsinfo</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>rsinfo</name></expr></argument>, <argument><expr><name>ReturnSetInfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"set-valued function called in context that cannot accept a set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rsinfo</name><operator>-&gt;</operator><name>allowedModes</name></name> <operator>&amp;</operator> <name>SFRM_Materialize</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"materialize mode required, but it is not "</literal> \
						<literal type="string">"allowed in this context"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Build a tuple descriptor for our result type */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TYPEFUNC_COMPOSITE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"return type must be a row type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>per_query_ctx</name> <operator>=</operator> <name><name>rsinfo</name><operator>-&gt;</operator><name>econtext</name><operator>-&gt;</operator><name>ecxt_per_query_memory</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>per_query_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>tupstore</name> <operator>=</operator> <call><name>tuplestore_begin_heap</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>work_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupstore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rsinfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>tupdesc</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Make sure we get consistent view of the workers. */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_logical_replication_workers</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/* for each row */</comment>
		<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>PG_STAT_GET_SUBSCRIPTION_COLS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type>		<name><name>nulls</name><index>[<expr><name>PG_STAT_GET_SUBSCRIPTION_COLS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>worker_pid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LogicalRepWorker</name></type> <name>worker</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>worker</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>LogicalRepCtx</name><operator>-&gt;</operator><name>workers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LogicalRepWorker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>worker</name><operator>.</operator><name>proc</name></name> <operator>||</operator> <operator>!</operator><call><name>IsBackendPid</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>subid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>worker</name><operator>.</operator><name>subid</name></name> <operator>!=</operator> <name>subid</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>worker_pid</name> <operator>=</operator> <name><name>worker</name><operator>.</operator><name>proc</name><operator>-&gt;</operator><name>pid</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>subid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>relid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>worker_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>last_lsn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>LSNGetDatum</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>last_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>.</operator><name>last_send_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>last_send_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>.</operator><name>last_recv_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>last_recv_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>XLogRecPtrIsInvalid</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>reply_lsn</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call><name>LSNGetDatum</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>reply_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>worker</name><operator>.</operator><name>reply_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <call><name>TimestampTzGetDatum</name><argument_list>(<argument><expr><name><name>worker</name><operator>.</operator><name>reply_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If only a single subscription was requested, and we found it,
		 * break.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>subid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>LogicalRepWorkerLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* clean up and return the tuplestore */</comment>
	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
