<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/replication/logical/proto.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * proto.c
 *		logical replication protocol functions
 *
 * Copyright (c) 2015-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *		src/backend/replication/logical/proto.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/sysattr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/logicalproto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Protocol message flags.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGICALREP_IS_REPLICA_IDENTITY</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUNCATE_CASCADE</name></cpp:macro>		<cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRUNCATE_RESTART_SEQS</name></cpp:macro>	<cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logicalrep_write_attrs</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logicalrep_write_tuple</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
					   <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logicalrep_read_attrs</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LogicalRepRelation</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logicalrep_read_tuple</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LogicalRepTupleData</name> <modifier>*</modifier></type><name>tuple</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>logicalrep_write_namespace</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nspid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logicalrep_read_namespace</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Write BEGIN to the output stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_write_begin</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>ReorderBufferTXN</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* BEGIN */</comment>

	<comment type="block">/* fixed fields */</comment>
	<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>final_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>commit_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read transaction BEGIN from the stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_read_begin</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LogicalRepBeginData</name> <modifier>*</modifier></type><name>begin_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* read fields */</comment>
	<expr_stmt><expr><name><name>begin_data</name><operator>-&gt;</operator><name>final_lsn</name></name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>begin_data</name><operator>-&gt;</operator><name>final_lsn</name></name> <operator>==</operator> <name>InvalidXLogRecPtr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"final_lsn not set in begin message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>begin_data</name><operator>-&gt;</operator><name>committime</name></name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>begin_data</name><operator>-&gt;</operator><name>xid</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Write COMMIT to the output stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_write_commit</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>ReorderBufferTXN</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>,
						<parameter><decl><type><name>XLogRecPtr</name></type> <name>commit_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* sending COMMIT */</comment>

	<comment type="block">/* send the flags field (unused for now) */</comment>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send fields */</comment>
	<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>commit_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>end_lsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>txn</name><operator>-&gt;</operator><name>commit_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read transaction COMMIT from the stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_read_commit</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LogicalRepCommitData</name> <modifier>*</modifier></type><name>commit_data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* read flags (unused for now) */</comment>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>flags</name> <init>= <expr><call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized flags %u in commit message"</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* read fields */</comment>
	<expr_stmt><expr><name><name>commit_data</name><operator>-&gt;</operator><name>commit_lsn</name></name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>commit_data</name><operator>-&gt;</operator><name>end_lsn</name></name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>commit_data</name><operator>-&gt;</operator><name>committime</name></name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Write ORIGIN to the output stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_write_origin</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>origin</name></decl></parameter>,
						<parameter><decl><type><name>XLogRecPtr</name></type> <name>origin_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* ORIGIN */</comment>

	<comment type="block">/* fixed fields */</comment>
	<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>origin_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* origin string */</comment>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read ORIGIN from the output stream.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>logicalrep_read_origin</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>origin_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* fixed fields */</comment>
	<expr_stmt><expr><operator>*</operator><name>origin_lsn</name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* return origin */</comment>
	<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pq_getmsgstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write INSERT to the output stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_write_insert</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>newtuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* action INSERT */</comment>

	<comment type="block">/* use Oid as relation identifier */</comment>
	<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* new tuple follows */</comment>
	<expr_stmt><expr><call><name>logicalrep_write_tuple</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>newtuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read INSERT from stream.
 *
 * Fills the new tuple.
 */</comment>
<function><type><name>LogicalRepRelId</name></type>
<name>logicalrep_read_insert</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LogicalRepTupleData</name> <modifier>*</modifier></type><name>newtup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name>action</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LogicalRepRelId</name></type> <name>relid</name></decl>;</decl_stmt>

	<comment type="block">/* read the relation id */</comment>
	<expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <literal type="char">'N'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"expected new tuple but got %d"</literal></expr></argument>,
			 <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>logicalrep_read_tuple</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>relid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write UPDATE to the output stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_write_update</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>oldtuple</name></decl></parameter>,
						<parameter><decl><type><name>HeapTuple</name></type> <name>newtuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'U'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* action UPDATE */</comment>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>==</operator> <name>REPLICA_IDENTITY_DEFAULT</name> <operator>||</operator>
		   <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>==</operator> <name>REPLICA_IDENTITY_FULL</name> <operator>||</operator>
		   <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>==</operator> <name>REPLICA_IDENTITY_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* use Oid as relation identifier */</comment>
	<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>oldtuple</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>==</operator> <name>REPLICA_IDENTITY_FULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>	<comment type="block">/* old tuple follows */</comment>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>	<comment type="block">/* old key follows */</comment>
		<expr_stmt><expr><call><name>logicalrep_write_tuple</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>oldtuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* new tuple follows */</comment>
	<expr_stmt><expr><call><name>logicalrep_write_tuple</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>newtuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read UPDATE from stream.
 */</comment>
<function><type><name>LogicalRepRelId</name></type>
<name>logicalrep_read_update</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>has_oldtuple</name></decl></parameter>,
					   <parameter><decl><type><name>LogicalRepTupleData</name> <modifier>*</modifier></type><name>oldtup</name></decl></parameter>,
					   <parameter><decl><type><name>LogicalRepTupleData</name> <modifier>*</modifier></type><name>newtup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name>action</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LogicalRepRelId</name></type> <name>relid</name></decl>;</decl_stmt>

	<comment type="block">/* read the relation id */</comment>
	<expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* read and verify action */</comment>
	<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name>action</name> <operator>!=</operator> <literal type="char">'O'</literal> <operator>&amp;&amp;</operator> <name>action</name> <operator>!=</operator> <literal type="char">'N'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"expected action 'N', 'O' or 'K', got %c"</literal></expr></argument>,
			 <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* check for old tuple */</comment>
	<if_stmt><if>if <condition>(<expr><name>action</name> <operator>==</operator> <literal type="char">'K'</literal> <operator>||</operator> <name>action</name> <operator>==</operator> <literal type="char">'O'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logicalrep_read_tuple</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>has_oldtuple</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>has_oldtuple</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/* check for new  tuple */</comment>
	<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <literal type="char">'N'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"expected action 'N', got %c"</literal></expr></argument>,
			 <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>logicalrep_read_tuple</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>newtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>relid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write DELETE to the output stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_write_delete</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>oldtuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>==</operator> <name>REPLICA_IDENTITY_DEFAULT</name> <operator>||</operator>
		   <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>==</operator> <name>REPLICA_IDENTITY_FULL</name> <operator>||</operator>
		   <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>==</operator> <name>REPLICA_IDENTITY_INDEX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* action DELETE */</comment>

	<comment type="block">/* use Oid as relation identifier */</comment>
	<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>==</operator> <name>REPLICA_IDENTITY_FULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>	<comment type="block">/* old tuple follows */</comment>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'K'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>	<comment type="block">/* old key follows */</comment>

	<expr_stmt><expr><call><name>logicalrep_write_tuple</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>, <argument><expr><name>oldtuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read DELETE from stream.
 *
 * Fills the old tuple.
 */</comment>
<function><type><name>LogicalRepRelId</name></type>
<name>logicalrep_read_delete</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LogicalRepTupleData</name> <modifier>*</modifier></type><name>oldtup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name>action</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LogicalRepRelId</name></type> <name>relid</name></decl>;</decl_stmt>

	<comment type="block">/* read the relation id */</comment>
	<expr_stmt><expr><name>relid</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* read and verify action */</comment>
	<expr_stmt><expr><name>action</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>action</name> <operator>!=</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name>action</name> <operator>!=</operator> <literal type="char">'O'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"expected action 'O' or 'K', got %c"</literal></expr></argument>, <argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>logicalrep_read_tuple</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>oldtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>relid</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write TRUNCATE to the output stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_write_truncate</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>,
						  <parameter><decl><type><name>int</name></type> <name>nrelids</name></decl></parameter>,
						  <parameter><decl><type><name>Oid</name></type> <name><name>relids</name><index>[]</index></name></decl></parameter>,
						  <parameter><decl><type><name>bool</name></type> <name>cascade</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>restart_seqs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* action TRUNCATE */</comment>

	<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>nrelids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* encode and send truncate flags */</comment>
	<if_stmt><if>if <condition>(<expr><name>cascade</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TRUNCATE_CASCADE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>restart_seqs</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>TRUNCATE_RESTART_SEQS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>pq_sendint8</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrelids</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>relids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Read TRUNCATE from stream.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>logicalrep_read_truncate</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>,
						 <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>cascade</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>restart_seqs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nrelids</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>relids</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint8</name></type>		<name>flags</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>nrelids</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* read and decode truncate flags */</comment>
	<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>cascade</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRUNCATE_CASCADE</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>restart_seqs</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>TRUNCATE_RESTART_SEQS</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nrelids</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name>relids</name> <operator>=</operator> <call><name>lappend_oid</name><argument_list>(<argument><expr><name>relids</name></expr></argument>, <argument><expr><call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><name>relids</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write relation description to the output stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_write_rel</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* sending RELATION */</comment>

	<comment type="block">/* use Oid as relation identifier */</comment>
	<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send qualified relation name */</comment>
	<expr_stmt><expr><call><name>logicalrep_write_namespace</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>RelationGetNamespace</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>relname</name> <operator>=</operator> <call><name>RelationGetRelationName</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>relname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send replica identity */</comment>
	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send the attribute info */</comment>
	<expr_stmt><expr><call><name>logicalrep_write_attrs</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read the relation info from stream and return as LogicalRepRelation.
 */</comment>
<function><type><name>LogicalRepRelation</name> <modifier>*</modifier></type>
<name>logicalrep_read_rel</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LogicalRepRelation</name> <modifier>*</modifier></type><name>rel</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LogicalRepRelation</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>remoteid</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Read relation name from stream */</comment>
	<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>nspname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>logicalrep_read_namespace</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>relname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pq_getmsgstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Read the replica identity. */</comment>
	<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>replident</name></name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Get attribute description */</comment>
	<expr_stmt><expr><call><name>logicalrep_read_attrs</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>rel</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Write type info to the output stream.
 *
 * This function will always write base type info.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_write_typ</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>typoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>basetypoid</name> <init>= <expr><call><name>getBaseType</name><argument_list>(<argument><expr><name>typoid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>tup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>typtup</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'Y'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>		<comment type="block">/* sending TYPE */</comment>

	<expr_stmt><expr><name>tup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>basetypoid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name>basetypoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>typtup</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* use Oid as relation identifier */</comment>
	<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>typoid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send qualified type name */</comment>
	<expr_stmt><expr><call><name>logicalrep_write_namespace</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>typtup</name><operator>-&gt;</operator><name>typnamespace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>typtup</name><operator>-&gt;</operator><name>typname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>tup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read type info from the output stream.
 */</comment>
<function><type><name>void</name></type>
<name>logicalrep_read_typ</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LogicalRepTyp</name> <modifier>*</modifier></type><name>ltyp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>ltyp</name><operator>-&gt;</operator><name>remoteid</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Read type name from stream */</comment>
	<expr_stmt><expr><name><name>ltyp</name><operator>-&gt;</operator><name>nspname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>logicalrep_read_namespace</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ltyp</name><operator>-&gt;</operator><name>typname</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pq_getmsgstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Write a tuple to the outputstream, in the most efficient format possible.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_write_tuple</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>		<name><name>values</name><index>[<expr><name>MaxTupleAttributeNumber</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name><name>isnull</name><index>[<expr><name>MaxTupleAttributeNumber</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>nliveatts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>nliveatts</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>pq_sendint16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>nliveatts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* try to allocate enough memory from the get-go */</comment>
	<expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>t_len</name></name> <operator>+</operator>
					  <name>nliveatts</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Write the values */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>HeapTuple</name></type>	<name>typtup</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_type</name></type> <name>typclass</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>outputstr</name></decl>;</decl_stmt>

		<comment type="block">/* skip dropped columns */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>isnull</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* null column */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attlen</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>VARATT_IS_EXTERNAL_ONDISK</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* unchanged toast column */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>typtup</name> <operator>=</operator> <call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>TYPEOID</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>typtup</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for type %u"</literal></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>typclass</name> <operator>=</operator> <operator>(</operator><name>Form_pg_type</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>typtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 'text' data follows */</comment>

		<expr_stmt><expr><name>outputstr</name> <operator>=</operator> <call><name>OidOutputFunctionCall</name><argument_list>(<argument><expr><name><name>typclass</name><operator>-&gt;</operator><name>typoutput</name></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pq_sendcountedtext</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>outputstr</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>outputstr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>outputstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>typtup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Read tuple in remote format from stream.
 *
 * The returned tuple points into the input stringinfo.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_read_tuple</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LogicalRepTupleData</name> <modifier>*</modifier></type><name>tuple</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name></decl>;</decl_stmt>

	<comment type="block">/* Get number of attributes */</comment>
	<expr_stmt><expr><name>natts</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>changed</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>changed</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Read the data */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type>		<name>kind</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>kind</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>kind</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><literal type="char">'n'</literal></expr>:</case>			<comment type="block">/* null */</comment>
				<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>changed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'u'</literal></expr>:</case>			<comment type="block">/* unchanged column */</comment>
				<comment type="block">/* we don't receive the value of an unchanged column */</comment>
				<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case>			<comment type="block">/* text formatted value */</comment>
				<block>{<block_content>
					<decl_stmt><decl><type><name>int</name></type>			<name>len</name></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>changed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

					<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* read length */</comment>

					<comment type="block">/* and data */</comment>
					<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>pq_copymsgbytes</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name><name>tuple</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				</block_content>}</block>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unrecognized data representation type '%c'"</literal></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block">/*
 * Write relation attributes to the stream.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_write_attrs</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>desc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint16</name></type>		<name>nliveatts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>idattrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>replidentfull</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* send number of live attributes */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>
		<expr_stmt><expr><name>nliveatts</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>pq_sendint16</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>nliveatts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* fetch bitmap of REPLICATION IDENTITY attributes */</comment>
	<expr_stmt><expr><name>replidentfull</name> <operator>=</operator> <operator>(</operator><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relreplident</name></name> <operator>==</operator> <name>REPLICA_IDENTITY_FULL</name><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>replidentfull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>idattrs</name> <operator>=</operator> <call><name>RelationGetIndexAttrBitmap</name><argument_list>(<argument><expr><name>rel</name></expr></argument>,
											 <argument><expr><name>INDEX_ATTR_BITMAP_IDENTITY_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* send the attributes */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>att</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>desc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint8</name></type>		<name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>att</name><operator>-&gt;</operator><name>attisdropped</name></name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="block">/* REPLICA IDENTITY FULL means all columns are sent as part of key. */</comment>
		<if_stmt><if>if <condition>(<expr><name>replidentfull</name> <operator>||</operator>
			<call><name>bms_is_member</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>attnum</name></name> <operator>-</operator> <name>FirstLowInvalidHeapAttributeNumber</name></expr></argument>,
						  <argument><expr><name>idattrs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>LOGICALREP_IS_REPLICA_IDENTITY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* attribute name */</comment>
		<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><call><name>NameStr</name><argument_list>(<argument><expr><name><name>att</name><operator>-&gt;</operator><name>attname</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* attribute type id */</comment>
		<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>att</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* attribute mode */</comment>
		<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>att</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name>idattrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read relation attribute names from the stream.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_read_attrs</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>LogicalRepRelation</name> <modifier>*</modifier></type><name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>natts</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	  <modifier>*</modifier><modifier>*</modifier></type><name>attnames</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>atttyps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name>  <modifier>*</modifier></type><name>attkeys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>natts</name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>attnames</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>atttyps</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>natts</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* read the attributes */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>natts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint8</name></type>		<name>flags</name></decl>;</decl_stmt>

		<comment type="block">/* Check for replica identity column */</comment>
		<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>pq_getmsgbyte</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>LOGICALREP_IS_REPLICA_IDENTITY</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>attkeys</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name>attkeys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* attribute name */</comment>
		<expr_stmt><expr><name><name>attnames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><call><name>pq_getmsgstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* attribute type id */</comment>
		<expr_stmt><expr><name><name>atttyps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Oid</name><operator>)</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* we ignore attribute mode for now */</comment>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>attnames</name></name> <operator>=</operator> <name>attnames</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>atttyps</name></name> <operator>=</operator> <name>atttyps</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>attkeys</name></name> <operator>=</operator> <name>attkeys</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rel</name><operator>-&gt;</operator><name>natts</name></name> <operator>=</operator> <name>natts</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Write the namespace name or empty string for pg_catalog (to save space).
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logicalrep_write_namespace</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>nspid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>nspid</name> <operator>==</operator> <name>PG_CATALOG_NAMESPACE</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pq_sendbyte</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>nspname</name> <init>= <expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name>nspid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>nspname</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"cache lookup failed for namespace %u"</literal></expr></argument>,
				 <argument><expr><name>nspid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>pq_sendstring</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>nspname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Read the namespace name while treating empty string as pg_catalog.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>logicalrep_read_namespace</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nspname</name> <init>= <expr><call><name>pq_getmsgstring</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>nspname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nspname</name> <operator>=</operator> <literal type="string">"pg_catalog"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>nspname</name></expr>;</return>
</block_content>}</block></function>
</unit>
