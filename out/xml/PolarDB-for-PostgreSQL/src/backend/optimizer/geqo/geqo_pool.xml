<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/optimizer/geqo/geqo_pool.c"><comment type="block">/*------------------------------------------------------------------------
 *
 * geqo_pool.c
 *	  Genetic Algorithm (GA) pool stuff
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/backend/optimizer/geqo/geqo_pool.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/* contributed by:
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
   *  Martin Utesch				 * Institute of Automatic Control	   *
   =							 = University of Mining and Technology =
   *  utesch@aut.tu-freiberg.de  * Freiberg, Germany				   *
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
 */</comment>

<comment type="block">/* -- parts of this are adapted from D. Whitley's Genitor algorithm -- */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_pool.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_recombination.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>int</name></type>	<name>compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * alloc_pool
 *		allocates memory for GA pool
 */</comment>
<function><type><name>Pool</name> <modifier>*</modifier></type>
<name>alloc_pool</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pool_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Pool</name>	   <modifier>*</modifier></type><name>new_pool</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>chromo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* pool */</comment>
	<expr_stmt><expr><name>new_pool</name> <operator>=</operator> <operator>(</operator><name>Pool</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Pool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_pool</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>pool_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>new_pool</name><operator>-&gt;</operator><name>string_length</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>string_length</name></expr>;</expr_stmt>

	<comment type="block">/* all chromosome */</comment>
	<expr_stmt><expr><name><name>new_pool</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>(</operator><name>Chromosome</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>pool_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Chromosome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* all gene */</comment>
	<expr_stmt><expr><name>chromo</name> <operator>=</operator> <operator>(</operator><name>Chromosome</name> <operator>*</operator><operator>)</operator> <name><name>new_pool</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt> <comment type="block">/* vector of all chromos */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pool_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>chromo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name> <operator>=</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>string_length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Gene</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<return>return <expr><name>new_pool</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * free_pool
 *		deallocates memory for GA pool
 */</comment>
<function><type><name>void</name></type>
<name>free_pool</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>chromo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<comment type="block">/* all gene */</comment>
	<expr_stmt><expr><name>chromo</name> <operator>=</operator> <operator>(</operator><name>Chromosome</name> <operator>*</operator><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt> <comment type="block">/* vector of all chromos */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>chromo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="block">/* all chromosome */</comment>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* pool */</comment>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * random_init_pool
 *		initialize genetic pool
 */</comment>
<function><type><name>void</name></type>
<name>random_init_pool</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>chromo</name> <init>= <expr><operator>(</operator><name>Chromosome</name> <operator>*</operator><operator>)</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>bad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We immediately discard any invalid individuals (those that geqo_eval
	 * returns DBL_MAX for), thereby not wasting pool space on them.
	 *
	 * If we fail to make any valid individuals after 10000 tries, give up;
	 * this probably means something is broken, and we shouldn't just let
	 * ourselves get stuck in an infinite loop.
	 */</comment>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>init_tour</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>chromo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>worth</name> <operator>=</operator> <call><name>geqo_eval</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>chromo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr></argument>,
										<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>worth</name> <operator>&lt;</operator> <name>DBL_MAX</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>bad</name><operator>++</operator></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bad</name> <operator>&gt;=</operator> <literal type="number">10000</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"geqo failed to make a valid plan"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>GEQO_DEBUG</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>bad</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"%d invalid tours found while selecting %d pool entries"</literal></expr></argument>,
			 <argument><expr><name>bad</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block">/*
 * sort_pool
 *	 sorts input pool according to worth, from smallest to largest
 *
 *	 maybe you have to change compare() for different ordering ...
 */</comment>
<function><type><name>void</name></type>
<name>sort_pool</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>pool</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Chromosome</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * compare
 *	 qsort comparison function for sort_pool
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Chromosome</name> <modifier>*</modifier></type><name>chromo1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Chromosome</name> <operator>*</operator><operator>)</operator> <name>arg1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>Chromosome</name> <modifier>*</modifier></type><name>chromo2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>Chromosome</name> <operator>*</operator><operator>)</operator> <name>arg2</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>chromo1</name><operator>-&gt;</operator><name>worth</name></name> <operator>==</operator> <name><name>chromo2</name><operator>-&gt;</operator><name>worth</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><name><name>chromo1</name><operator>-&gt;</operator><name>worth</name></name> <operator>&gt;</operator> <name><name>chromo2</name><operator>-&gt;</operator><name>worth</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block">/* alloc_chromo
 *	  allocates a chromosome and string space
 */</comment>
<function><type><name>Chromosome</name> <modifier>*</modifier></type>
<name>alloc_chromo</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>string_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>chromo</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>chromo</name> <operator>=</operator> <operator>(</operator><name>Chromosome</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Chromosome</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>chromo</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <operator>(</operator><name>Gene</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><operator>(</operator><name>string_length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Gene</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>chromo</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* free_chromo
 *	  deallocates a chromosome and string space
 */</comment>
<function><type><name>void</name></type>
<name>free_chromo</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>chromo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>chromo</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>chromo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/* spread_chromo
 *	 inserts a new chromosome into the pool, displacing worst gene in pool
 *	 assumes best-&gt;worst = smallest-&gt;largest
 */</comment>
<function><type><name>void</name></type>
<name>spread_chromo</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Chromosome</name> <modifier>*</modifier></type><name>chromo</name></decl></parameter>, <parameter><decl><type><name>Pool</name> <modifier>*</modifier></type><name>pool</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>top</name></decl>,
				<decl><type ref="prev"/><name>mid</name></decl>,
				<decl><type ref="prev"/><name>bot</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>,
				<decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Chromosome</name></type>	<name>swap_chromo</name></decl>,
				<decl><type ref="prev"/><name>tmp_chromo</name></decl>;</decl_stmt>

	<comment type="block">/* new chromo is so bad we can't use it */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>chromo</name><operator>-&gt;</operator><name>worth</name></name> <operator>&gt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>worth</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="block">/* do a binary search to find the index of the new chromo */</comment>

	<expr_stmt><expr><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>mid</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>bot</name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* these 4 cases find a new location */</comment>

		<if_stmt><if>if <condition>(<expr><name><name>chromo</name><operator>-&gt;</operator><name>worth</name></name> <operator>&lt;=</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>worth</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>index</name> <operator>=</operator> <name>top</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>chromo</name><operator>-&gt;</operator><name>worth</name></name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>worth</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>index</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>chromo</name><operator>-&gt;</operator><name>worth</name></name> <operator>==</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>bot</name></expr>]</index></name><operator>.</operator><name>worth</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>index</name> <operator>=</operator> <name>bot</name></expr>;</expr_stmt></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name>bot</name> <operator>-</operator> <name>top</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>index</name> <operator>=</operator> <name>bot</name></expr>;</expr_stmt></block_content></block></if>


		<comment type="block">/*
		 * these 2 cases move the search indices since a new location has not
		 * yet been found.
		 */</comment>

		<if type="elseif">else if <condition>(<expr><name><name>chromo</name><operator>-&gt;</operator><name>worth</name></name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>mid</name></expr>]</index></name><operator>.</operator><name>worth</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>bot</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>top</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>bot</name> <operator>-</operator> <name>top</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>						<comment type="block">/* (chromo-&gt;worth &gt; pool-&gt;data[mid].worth) */</comment>
			<expr_stmt><expr><name>top</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mid</name> <operator>=</operator> <name>top</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>bot</name> <operator>-</operator> <name>top</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>							<comment type="block">/* ... while */</comment>

	<comment type="block">/* now we have index for chromo */</comment>

	<comment type="block">/*
	 * move every gene from index on down one position to make room for chromo
	 */</comment>

	<comment type="block">/*
	 * copy new gene into pool storage; always replace worst gene in pool
	 */</comment>

	<expr_stmt><expr><call><name>geqo_copy</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chromo</name></expr></argument>, <argument><expr><name><name>pool</name><operator>-&gt;</operator><name>string_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>swap_chromo</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>swap_chromo</name><operator>.</operator><name>worth</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>pool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>worth</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>index</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pool</name><operator>-&gt;</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tmp_chromo</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tmp_chromo</name><operator>.</operator><name>worth</name></name> <operator>=</operator> <name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>worth</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>string</name> <operator>=</operator> <name><name>swap_chromo</name><operator>.</operator><name>string</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>worth</name> <operator>=</operator> <name><name>swap_chromo</name><operator>.</operator><name>worth</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>swap_chromo</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name><name>tmp_chromo</name><operator>.</operator><name>string</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>swap_chromo</name><operator>.</operator><name>worth</name></name> <operator>=</operator> <name><name>tmp_chromo</name><operator>.</operator><name>worth</name></name></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
