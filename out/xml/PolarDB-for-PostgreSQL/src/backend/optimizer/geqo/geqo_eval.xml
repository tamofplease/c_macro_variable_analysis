<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/optimizer/geqo/geqo_eval.c"><comment type="block">/*------------------------------------------------------------------------
 *
 * geqo_eval.c
 *	  Routines to evaluate query trees
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/backend/optimizer/geqo/geqo_eval.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<comment type="block">/* contributed by:
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
   *  Martin Utesch				 * Institute of Automatic Control	   *
   =							 = University of Mining and Technology =
   *  utesch@aut.tu-freiberg.de  * Freiberg, Germany				   *
   =*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=*=
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/joininfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/pathnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>


<comment type="block">/* A "clump" of already-joined relations within gimme_tree */</comment>
<typedef>typedef <type><struct>struct
<block>{
	<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>joinrel</name></decl>;</decl_stmt>		<comment type="block">/* joinrel for the set of relations */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>size</name></decl>;</decl_stmt>			<comment type="block">/* number of input relations in clump */</comment>
}</block></struct></type> <name>Clump</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type><name>merge_clump</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clumps</name></decl></parameter>, <parameter><decl><type><name>Clump</name> <modifier>*</modifier></type><name>new_clump</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>num_gene</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>desirable_join</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
			   <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>outer_rel</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>inner_rel</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * geqo_eval
 *
 * Returns cost of a query tree as an individual of the population.
 *
 * If no legal join order can be extracted from the proposed tour,
 * returns DBL_MAX.
 */</comment>
<function><type><name>Cost</name></type>
<name>geqo_eval</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>tour</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_gene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>mycontext</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldcxt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>joinrel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Cost</name></type>		<name>fitness</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>savelength</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>HTAB</name></name> <modifier>*</modifier></type><name>savehash</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Create a private memory context that will hold all temp storage
	 * allocated inside gimme_tree().
	 *
	 * Since geqo_eval() will be called many times, we can't afford to let all
	 * that memory go unreclaimed until end of statement.  Note we make the
	 * temp context a child of the planner's normal context, so that it will
	 * be freed even if we abort via ereport(ERROR).
	 */</comment>
	<expr_stmt><expr><name>mycontext</name> <operator>=</operator> <call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
									  <argument><expr><literal type="string">"GEQO"</literal></expr></argument>,
									  <argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>oldcxt</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>mycontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * gimme_tree will add entries to root-&gt;join_rel_list, which may or may
	 * not already contain some entries.  The newly added entries will be
	 * recycled by the MemoryContextDelete below, so we must ensure that the
	 * list is restored to its former state before exiting.  We can do this by
	 * truncating the list to its original length.  NOTE this assumes that any
	 * added entries are appended at the end!
	 *
	 * We also must take care not to mess up the outer join_rel_hash, if there
	 * is one.  We can do this by just temporarily setting the link to NULL.
	 * (If we are dealing with enough join rels, which we very likely are, a
	 * new hash table will get built and used locally.)
	 *
	 * join_rel_level[] shouldn't be in use, so just Assert it isn't.
	 */</comment>
	<expr_stmt><expr><name>savelength</name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>join_rel_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>savehash</name> <operator>=</operator> <name><name>root</name><operator>-&gt;</operator><name>join_rel_hash</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>join_rel_level</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_rel_hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/* construct the best path for the given combination of relations */</comment>
	<expr_stmt><expr><name>joinrel</name> <operator>=</operator> <call><name>gimme_tree</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>tour</name></expr></argument>, <argument><expr><name>num_gene</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * compute fitness, if we found a valid join
	 *
	 * XXX geqo does not currently support optimization for partial result
	 * retrieval, nor do we take any cognizance of possible use of
	 * parameterized paths --- how to fix?
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>joinrel</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Path</name>	   <modifier>*</modifier></type><name>best_path</name> <init>= <expr><name><name>joinrel</name><operator>-&gt;</operator><name>cheapest_total_path</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>fitness</name> <operator>=</operator> <name><name>best_path</name><operator>-&gt;</operator><name>total_cost</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>fitness</name> <operator>=</operator> <name>DBL_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="block">/*
	 * Restore join_rel_list to its former state, and put back original
	 * hashtable if any.
	 */</comment>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_rel_list</name></name> <operator>=</operator> <call><name>list_truncate</name><argument_list>(<argument><expr><name><name>root</name><operator>-&gt;</operator><name>join_rel_list</name></name></expr></argument>,
										<argument><expr><name>savelength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_rel_hash</name></name> <operator>=</operator> <name>savehash</name></expr>;</expr_stmt>

	<comment type="block">/* release all the memory acquired within gimme_tree */</comment>
	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldcxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>MemoryContextDelete</name><argument_list>(<argument><expr><name>mycontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>fitness</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * gimme_tree
 *	  Form planner estimates for a join tree constructed in the specified
 *	  order.
 *
 *	 'tour' is the proposed join order, of length 'num_gene'
 *
 * Returns a new join relation whose cheapest path is the best plan for
 * this join order.  NB: will return NULL if join order is invalid and
 * we can't modify it into a valid order.
 *
 * The original implementation of this routine always joined in the specified
 * order, and so could only build left-sided plans (and right-sided and
 * mixtures, as a byproduct of the fact that make_join_rel() is symmetric).
 * It could never produce a "bushy" plan.  This had a couple of big problems,
 * of which the worst was that there are situations involving join order
 * restrictions where the only valid plans are bushy.
 *
 * The present implementation takes the given tour as a guideline, but
 * postpones joins that are illegal or seem unsuitable according to some
 * heuristic rules.  This allows correct bushy plans to be generated at need,
 * and as a nice side-effect it seems to materially improve the quality of the
 * generated plans.  Note however that since it's just a heuristic, it can
 * still fail in some cases.  (In particular, we might clump together
 * relations that actually mustn't be joined yet due to LATERAL restrictions;
 * since there's no provision for un-clumping, this must lead to failure.)
 */</comment>
<function><type><name>RelOptInfo</name> <modifier>*</modifier></type>
<name>gimme_tree</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Gene</name> <modifier>*</modifier></type><name>tour</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_gene</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GeqoPrivateData</name> <modifier>*</modifier></type><name>private</name> <init>= <expr><operator>(</operator><name>GeqoPrivateData</name> <operator>*</operator><operator>)</operator> <name><name>root</name><operator>-&gt;</operator><name>join_search_private</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>clumps</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>rel_count</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sometimes, a relation can't yet be joined to others due to heuristics
	 * or actual semantic restrictions.  We maintain a list of "clumps" of
	 * successfully joined relations, with larger clumps at the front. Each
	 * new relation from the tour is added to the first clump it can be joined
	 * to; if there is none then it becomes a new clump of its own. When we
	 * enlarge an existing clump we check to see if it can now be merged with
	 * any other clumps.  After the tour is all scanned, we forget about the
	 * heuristics and try to forcibly join any remaining clumps.  If we are
	 * unable to merge all the clumps into one, fail.
	 */</comment>
	<expr_stmt><expr><name>clumps</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>rel_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>rel_count</name> <operator>&lt;</operator> <name>num_gene</name></expr>;</condition> <incr><expr><name>rel_count</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>cur_rel_index</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>cur_rel</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Clump</name>	   <modifier>*</modifier></type><name>cur_clump</name></decl>;</decl_stmt>

		<comment type="block">/* Get the next input relation */</comment>
		<expr_stmt><expr><name>cur_rel_index</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>tour</name><index>[<expr><name>rel_count</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur_rel</name> <operator>=</operator> <operator>(</operator><name>RelOptInfo</name> <operator>*</operator><operator>)</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>initial_rels</name></name></expr></argument>,
										  <argument><expr><name>cur_rel_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Make it into a single-rel clump */</comment>
		<expr_stmt><expr><name>cur_clump</name> <operator>=</operator> <operator>(</operator><name>Clump</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Clump</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cur_clump</name><operator>-&gt;</operator><name>joinrel</name></name> <operator>=</operator> <name>cur_rel</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cur_clump</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/* Merge it into the clumps list, using only desirable joins */</comment>
		<expr_stmt><expr><name>clumps</name> <operator>=</operator> <call><name>merge_clump</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>clumps</name></expr></argument>, <argument><expr><name>cur_clump</name></expr></argument>, <argument><expr><name>num_gene</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>clumps</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Force-join the remaining clumps in some legal order */</comment>
		<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>fclumps</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>fclumps</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>clumps</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Clump</name>	   <modifier>*</modifier></type><name>clump</name> <init>= <expr><operator>(</operator><name>Clump</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>fclumps</name> <operator>=</operator> <call><name>merge_clump</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>fclumps</name></expr></argument>, <argument><expr><name>clump</name></expr></argument>, <argument><expr><name>num_gene</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
		<expr_stmt><expr><name>clumps</name> <operator>=</operator> <name>fclumps</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Did we succeed in forming a single join relation? */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>clumps</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><operator>(</operator><operator>(</operator><name>Clump</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>clumps</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>joinrel</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Merge a "clump" into the list of existing clumps for gimme_tree.
 *
 * We try to merge the clump into some existing clump, and repeat if
 * successful.  When no more merging is possible, insert the clump
 * into the list, preserving the list ordering rule (namely, that
 * clumps of larger size appear earlier).
 *
 * If force is true, merge anywhere a join is legal, even if it causes
 * a cartesian join to be performed.  When force is false, do only
 * "desirable" joins.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>merge_clump</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>clumps</name></decl></parameter>, <parameter><decl><type><name>Clump</name> <modifier>*</modifier></type><name>new_clump</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_gene</name></decl></parameter>,
			<parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>prev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<comment type="block">/* Look for a clump that new_clump can join to */</comment>
	<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>clumps</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Clump</name>	   <modifier>*</modifier></type><name>old_clump</name> <init>= <expr><operator>(</operator><name>Clump</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>force</name> <operator>||</operator>
			<call><name>desirable_join</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>old_clump</name><operator>-&gt;</operator><name>joinrel</name></name></expr></argument>, <argument><expr><name><name>new_clump</name><operator>-&gt;</operator><name>joinrel</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>joinrel</name></decl>;</decl_stmt>

			<comment type="block">/*
			 * Construct a RelOptInfo representing the join of these two input
			 * relations.  Note that we expect the joinrel not to exist in
			 * root-&gt;join_rel_list yet, and so the paths constructed for it
			 * will only include the ones we want.
			 */</comment>
			<expr_stmt><expr><name>joinrel</name> <operator>=</operator> <call><name>make_join_rel</name><argument_list>(<argument><expr><name>root</name></expr></argument>,
									<argument><expr><name><name>old_clump</name><operator>-&gt;</operator><name>joinrel</name></name></expr></argument>,
									<argument><expr><name><name>new_clump</name><operator>-&gt;</operator><name>joinrel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Keep searching if join order is not valid */</comment>
			<if_stmt><if>if <condition>(<expr><name>joinrel</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* Create paths for partitionwise joins. */</comment>
				<expr_stmt><expr><call><name>generate_partitionwise_join_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>joinrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Except for the topmost scan/join rel, consider gathering
				 * partial paths.  We'll do the same for the topmost scan/join
				 * rel once we know the final targetlist (see
				 * grouping_planner).
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>old_clump</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>new_clump</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <name>num_gene</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>generate_gather_paths</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>joinrel</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<comment type="block">/* Find and save the cheapest paths for this joinrel */</comment>
				<expr_stmt><expr><call><name>set_cheapest</name><argument_list>(<argument><expr><name>joinrel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Absorb new clump into old */</comment>
				<expr_stmt><expr><name><name>old_clump</name><operator>-&gt;</operator><name>joinrel</name></name> <operator>=</operator> <name>joinrel</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>old_clump</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name><name>new_clump</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>new_clump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/* Remove old_clump from list */</comment>
				<expr_stmt><expr><name>clumps</name> <operator>=</operator> <call><name>list_delete_cell</name><argument_list>(<argument><expr><name>clumps</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Recursively try to merge the enlarged old_clump with
				 * others.  When no further merge is possible, we'll reinsert
				 * it into the list.
				 */</comment>
				<return>return <expr><call><name>merge_clump</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>clumps</name></expr></argument>, <argument><expr><name>old_clump</name></expr></argument>, <argument><expr><name>num_gene</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>lc</name></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * No merging is possible, so add new_clump as an independent clump, in
	 * proper order according to size.  We can be fast for the common case
	 * where it has size 1 --- it should always go at the end.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>clumps</name> <operator>==</operator> <name>NIL</name> <operator>||</operator> <name><name>new_clump</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>lappend</name><argument_list>(<argument><expr><name>clumps</name></expr></argument>, <argument><expr><name>new_clump</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Check if it belongs at the front */</comment>
	<expr_stmt><expr><name>lc</name> <operator>=</operator> <call><name>list_head</name><argument_list>(<argument><expr><name>clumps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>new_clump</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>Clump</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><call><name>lcons</name><argument_list>(<argument><expr><name>new_clump</name></expr></argument>, <argument><expr><name>clumps</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Else search for the place to insert it */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name>   <modifier>*</modifier></type><name>nxt</name> <init>= <expr><call><name>lnext</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>nxt</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>new_clump</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>Clump</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>nxt</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>size</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>				<comment type="block">/* it belongs after 'lc', before 'nxt' */</comment>
		<expr_stmt><expr><name>lc</name> <operator>=</operator> <name>nxt</name></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>lappend_cell</name><argument_list>(<argument><expr><name>clumps</name></expr></argument>, <argument><expr><name>lc</name></expr></argument>, <argument><expr><name>new_clump</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>clumps</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Heuristics for gimme_tree: do we want to join these two relations?
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>desirable_join</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
			   <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>outer_rel</name></decl></parameter>, <parameter><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>inner_rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Join if there is an applicable join clause, or if there is a join order
	 * restriction forcing these rels to be joined.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>have_relevant_joinclause</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>outer_rel</name></expr></argument>, <argument><expr><name>inner_rel</name></expr></argument>)</argument_list></call> <operator>||</operator>
		<call><name>have_join_order_restriction</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>outer_rel</name></expr></argument>, <argument><expr><name>inner_rel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="block">/* Otherwise postpone the join till later. */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
