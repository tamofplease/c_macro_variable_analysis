<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/optimizer/geqo/geqo_random.c"><comment type="block">/*------------------------------------------------------------------------
 *
 * geqo_random.c
 *	   random number generator
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * src/backend/optimizer/geqo/geqo_random.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/geqo_random.h"</cpp:file></cpp:include>


<function><type><name>void</name></type>
<name>geqo_set_seed</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GeqoPrivateData</name> <modifier>*</modifier></type><name>private</name> <init>= <expr><operator>(</operator><name>GeqoPrivateData</name> <operator>*</operator><operator>)</operator> <name><name>root</name><operator>-&gt;</operator><name>join_search_private</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * XXX. This seeding algorithm could certainly be improved - but it is not
	 * critical to do so.
	 */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>,
		   <argument><expr><operator>&amp;</operator><name>seed</name></expr></argument>,
		   <argument><expr><call><name>Min</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seed</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>double</name></type>
<name>geqo_rand</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>GeqoPrivateData</name> <modifier>*</modifier></type><name>private</name> <init>= <expr><operator>(</operator><name>GeqoPrivateData</name> <operator>*</operator><operator>)</operator> <name><name>root</name><operator>-&gt;</operator><name>join_search_private</name></name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>pg_erand48</name><argument_list>(<argument><expr><name><name>private</name><operator>-&gt;</operator><name>random_state</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
