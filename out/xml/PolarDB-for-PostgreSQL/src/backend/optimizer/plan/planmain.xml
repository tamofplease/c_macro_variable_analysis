<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/optimizer/plan/planmain.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * planmain.c
 *	  Routines to plan a single query
 *
 * What's in a name, anyway?  The top-level entry point of the planner/
 * optimizer is over in planner.c, not here as you might think from the
 * file name.  But this is the main code for planning a basic join operation,
 * shorn of features like subselects, inheritance, aggregates, grouping,
 * and so on.  (Those are the things planner.c deals with.)
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/optimizer/plan/planmain.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/clauses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/orclauses.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/pathnode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/placeholder.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planmain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/cost.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"px/px_vars.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR px */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<comment type="block">/*
 * query_planner
 *	  Generate a path (that is, a simplified plan) for a basic query,
 *	  which may involve joins but not any fancier features.
 *
 * Since query_planner does not handle the toplevel processing (grouping,
 * sorting, etc) it cannot select the best path by itself.  Instead, it
 * returns the RelOptInfo for the top level of joining, and the caller
 * (grouping_planner) can choose among the surviving paths for the rel.
 *
 * root describes the query to plan
 * tlist is the target list the query should produce
 *		(this is NOT necessarily root-&gt;parse-&gt;targetList!)
 * qp_callback is a function to compute query_pathkeys once it's safe to do so
 * qp_extra is optional extra data to pass to qp_callback
 *
 * Note: the PlannerInfo node also includes a query_pathkeys field, which
 * tells query_planner the sort order that is desired in the final output
 * plan.  This value is *not* available at call time, but is computed by
 * qp_callback once we have completed merging the query's equivalence classes.
 * (We cannot construct canonical pathkeys until that's done.)
 */</comment>
<function><type><name>RelOptInfo</name> <modifier>*</modifier></type>
<name>query_planner</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tlist</name></decl></parameter>,
			  <parameter><decl><type><name>query_pathkeys_callback</name></type> <name>qp_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>qp_extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Query</name>	   <modifier>*</modifier></type><name>parse</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>parse</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name>	   <modifier>*</modifier></type><name>joinlist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>final_rel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Index</name></type>		<name>rti</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type>		<name>total_pages</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If the query has an empty join tree, then it's something easy like
	 * "SELECT 2+2;" or "INSERT ... VALUES()".  Fall through quickly.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>parse</name><operator>-&gt;</operator><name>jointree</name><operator>-&gt;</operator><name>fromlist</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We need a dummy joinrel to describe the empty set of baserels */</comment>
		<expr_stmt><expr><name>final_rel</name> <operator>=</operator> <call><name>build_empty_join_rel</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * If query allows parallelism in general, check whether the quals are
		 * parallel-restricted.  (We need not check final_rel-&gt;reltarget
		 * because it's empty at this point.  Anything parallel-restricted in
		 * the query tlist will be dealt with later.)
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>parallelModeOK</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>final_rel</name><operator>-&gt;</operator><name>consider_parallel</name></name> <operator>=</operator>
				<call><name>is_parallel_safe</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>parse</name><operator>-&gt;</operator><name>jointree</name><operator>-&gt;</operator><name>quals</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* The only path for it is a trivial Result path */</comment>
		<expr_stmt><expr><call><name>add_path</name><argument_list>(<argument><expr><name>final_rel</name></expr></argument>, <argument><expr><operator>(</operator><name>Path</name> <operator>*</operator><operator>)</operator>
				 <call><name>create_result_path</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>final_rel</name></expr></argument>,
									<argument><expr><name><name>final_rel</name><operator>-&gt;</operator><name>reltarget</name></name></expr></argument>,
									<argument><expr><operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <name><name>parse</name><operator>-&gt;</operator><name>jointree</name><operator>-&gt;</operator><name>quals</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Select cheapest path (pretty easy in this case...) */</comment>
		<expr_stmt><expr><call><name>set_cheapest</name><argument_list>(<argument><expr><name>final_rel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * We still are required to call qp_callback, in case it's something
		 * like "SELECT 2+2 ORDER BY 1".
		 */</comment>
		<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>canon_pathkeys</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call>(<modifier>*</modifier><name>qp_callback</name>) <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>qp_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>final_rel</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Init planner lists to empty.
	 *
	 * NOTE: append_rel_list was set up by subquery_planner, so do not touch
	 * here.
	 */</comment>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_rel_list</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_rel_hash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_rel_level</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_cur_level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>canon_pathkeys</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>left_join_clauses</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>right_join_clauses</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>full_join_clauses</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_info_list</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>placeholder_list</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>fkey_list</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>initial_rels</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make a flattened version of the rangetable for faster access (this is
	 * OK because the rangetable won't change any more), and set up an empty
	 * array for indexing base relations.
	 */</comment>
	<expr_stmt><expr><call><name>setup_simple_rel_arrays</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Populate append_rel_array with each AppendRelInfo to allow direct
	 * lookups by child relid.
	 */</comment>
	<expr_stmt><expr><call><name>setup_append_rel_array</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Construct RelOptInfo nodes for all base relations in query, and
	 * indirectly for all appendrel member relations ("other rels").  This
	 * will give us a RelOptInfo for every "simple" (non-join) rel involved in
	 * the query.
	 *
	 * Note: the reason we find the rels by searching the jointree and
	 * appendrel list, rather than just scanning the rangetable, is that the
	 * rangetable may contain RTEs for rels not actively part of the query,
	 * for example views.  We don't want to make RelOptInfos for them.
	 */</comment>
	<expr_stmt><expr><call><name>add_base_rels_to_query</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>parse</name><operator>-&gt;</operator><name>jointree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Examine the targetlist and join tree, adding entries to baserel
	 * targetlists for all referenced Vars, and generating PlaceHolderInfo
	 * entries for all referenced PlaceHolderVars.  Restrict and join clauses
	 * are added to appropriate lists belonging to the mentioned relations. We
	 * also build EquivalenceClasses for provably equivalent expressions. The
	 * SpecialJoinInfo list is also built to hold information about join order
	 * restrictions.  Finally, we form a target joinlist for make_one_rel() to
	 * work from.
	 */</comment>
	<expr_stmt><expr><call><name>build_base_rel_tlists</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>tlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>find_placeholders_in_jointree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>find_lateral_references</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>joinlist</name> <operator>=</operator> <call><name>deconstruct_jointree</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Reconsider any postponed outer-join quals now that we have built up
	 * equivalence classes.  (This could result in further additions or
	 * mergings of classes.)
	 */</comment>
	<expr_stmt><expr><call><name>reconsider_outer_join_clauses</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If we formed any equivalence classes, generate additional restriction
	 * clauses as appropriate.  (Implied join clauses are formed on-the-fly
	 * later.)
	 */</comment>
	<expr_stmt><expr><call><name>generate_base_implied_equalities</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We have completed merging equivalence sets, so it's now possible to
	 * generate pathkeys in canonical form; so compute query_pathkeys and
	 * other pathkeys fields in PlannerInfo.
	 */</comment>
	<expr_stmt><expr><call>(<modifier>*</modifier><name>qp_callback</name>) <argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>qp_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Examine any "placeholder" expressions generated during subquery pullup.
	 * Make sure that the Vars they need are marked as needed at the relevant
	 * join level.  This must be done before join removal because it might
	 * cause Vars or placeholders to be needed above a join when they weren't
	 * so marked before.
	 */</comment>
	<expr_stmt><expr><call><name>fix_placeholder_input_needed_levels</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Remove any useless outer joins.  Ideally this would be done during
	 * jointree preprocessing, but the necessary information isn't available
	 * until we've built baserel data structures and classified qual clauses.
	 */</comment>
	<expr_stmt><expr><name>joinlist</name> <operator>=</operator> <call><name>remove_useless_joins</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>joinlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Also, reduce any semijoins with unique inner rels to plain inner joins.
	 * Likewise, this can't be done until now for lack of needed info.
	 */</comment>
	<expr_stmt><expr><call><name>reduce_unique_semijoins</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Now distribute "placeholders" to base rels as needed.  This has to be
	 * done after join removal because removal could change whether a
	 * placeholder is evaluable at a base rel.
	 */</comment>
	<expr_stmt><expr><call><name>add_placeholders_to_base_rels</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Construct the lateral reference sets now that we have finalized
	 * PlaceHolderVar eval levels.
	 */</comment>
	<expr_stmt><expr><call><name>create_lateral_join_info</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Match foreign keys to equivalence classes and join quals.  This must be
	 * done after finalizing equivalence classes, and it's useful to wait till
	 * after join removal so that we can skip processing foreign keys
	 * involving removed relations.
	 */</comment>
	<expr_stmt><expr><call><name>match_foreign_keys_to_quals</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Look for join OR clauses that we can extract single-relation
	 * restriction OR clauses from.
	 */</comment>
	<expr_stmt><expr><call><name>extract_restriction_or_clauses</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We should now have size estimates for every actual table involved in
	 * the query, and we also know which if any have been deleted from the
	 * query by join removal; so we can compute total_table_pages.
	 *
	 * Note that appendrels are not double-counted here, even though we don't
	 * bother to distinguish RelOptInfos for appendrel parents, because the
	 * parents will still have size zero.
	 *
	 * XXX if a table is self-joined, we will count it once per appearance,
	 * which perhaps is the wrong thing ... but that's not completely clear,
	 * and detecting self-joins here is difficult, so ignore it for now.
	 */</comment>
	<expr_stmt><expr><name>total_pages</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>rti</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>rti</name> <operator>&lt;</operator> <name><name>root</name><operator>-&gt;</operator><name>simple_rel_array_size</name></name></expr>;</condition> <incr><expr><name>rti</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RelOptInfo</name> <modifier>*</modifier></type><name>brel</name> <init>= <expr><name><name>root</name><operator>-&gt;</operator><name>simple_rel_array</name><index>[<expr><name>rti</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>brel</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>brel</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>rti</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* sanity check on array */</comment>

		<if_stmt><if>if <condition>(<expr><call><name>IS_SIMPLE_REL</name><argument_list>(<argument><expr><name>brel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>total_pages</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>brel</name><operator>-&gt;</operator><name>pages</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>total_table_pages</name></name> <operator>=</operator> <name>total_pages</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Ready to do the primary planning.
	 */</comment>
	<expr_stmt><expr><name>final_rel</name> <operator>=</operator> <call><name>make_one_rel</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>joinlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check that we got at least one usable path */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>final_rel</name> <operator>||</operator> <operator>!</operator><name><name>final_rel</name><operator>-&gt;</operator><name>cheapest_total_path</name></name> <operator>||</operator>
		<name><name>final_rel</name><operator>-&gt;</operator><name>cheapest_total_path</name><operator>-&gt;</operator><name>param_info</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed to construct the join relation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>final_rel</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* POLAR px*/</comment>
<comment type="block">/*
 * Default configuration information
 */</comment>
<function><type><name>PlannerConfig</name> <modifier>*</modifier></type><name>DefaultPlannerConfig</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlannerConfig</name> <modifier>*</modifier></type><name>c1</name> <init>= <expr><operator>(</operator><name>PlannerConfig</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PlannerConfig</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>enable_sort</name></name> <operator>=</operator> <name>enable_sort</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>enable_hashagg</name></name> <operator>=</operator> <name>enable_hashagg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>enable_groupagg</name></name> <operator>=</operator> <name>enable_groupagg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>enable_nestloop</name></name> <operator>=</operator> <name>enable_nestloop</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>enable_mergejoin</name></name> <operator>=</operator> <name>enable_mergejoin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>enable_hashjoin</name></name> <operator>=</operator> <name>enable_hashjoin</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_enable_hashjoin_size_heuristic</name></name> <operator>=</operator> <name>px_enable_hashjoin_size_heuristic</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_enable_predicate_propagation</name></name> <operator>=</operator> <name>px_enable_predicate_propagation</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>constraint_exclusion</name></name> <operator>=</operator> <name>constraint_exclusion</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_enable_minmax_optimization</name></name> <operator>=</operator> <name>px_enable_minmax_optimization</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_enable_multiphase_agg</name></name> <operator>=</operator> <name>px_enable_multiphase_agg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_enable_preunique</name></name> <operator>=</operator> <name>px_enable_preunique</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_eager_preunique</name></name> <operator>=</operator> <name>px_eager_preunique</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_hashagg_streambottom</name></name> <operator>=</operator> <name>px_hashagg_streambottom</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_enable_agg_distinct</name></name> <operator>=</operator> <name>px_enable_agg_distinct</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_enable_dqa_pruning</name></name> <operator>=</operator> <name>px_enable_dqa_pruning</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_eager_dqa_pruning</name></name> <operator>=</operator> <name>px_eager_dqa_pruning</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_eager_one_phase_agg</name></name> <operator>=</operator> <name>px_eager_one_phase_agg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_eager_two_phase_agg</name></name> <operator>=</operator> <name>px_eager_two_phase_agg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_enable_sort_distinct</name></name> <operator>=</operator> <name>px_enable_sort_distinct</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_enable_direct_dispatch</name></name> <operator>=</operator> <name>px_enable_direct_dispatch</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>px_cte_sharing</name></name> <operator>=</operator> <name>px_cte_sharing</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>honor_order_by</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>c1</name><operator>-&gt;</operator><name>is_under_subplan</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<return>return <expr><name>c1</name></expr>;</return>
</block_content>}</block></function>
</unit>
