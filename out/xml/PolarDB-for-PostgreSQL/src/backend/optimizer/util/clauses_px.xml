<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/optimizer/util/clauses_px.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * clauses_px.c
 *	  routines to manipulate qualification clauses
 *
 * Portions Copyright (c) 2021, Alibaba Group Holding Limited
 * Portions Copyright (c) 2005-2008, Greenplum inc
 * Portions Copyright (c) 2012-Present VMware, Inc. or its affiliates.
 * Portions Copyright (c) 1996-2019, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/optimizer/util/clauses_px.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<comment type="block">/*
 * POLAR px
 * flatten_join_alias_var_optimizer
 *	  Replace Vars that reference JOIN outputs with references to the original
 *	  relation variables instead.
 */</comment>
<function><type><name>Query</name> <modifier>*</modifier></type>
<name>flatten_join_alias_var_optimizer</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queryLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>queryNew</name> <init>= <expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <call><name>copyObject</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>plc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>targetList</name> <init>= <expr><name><name>queryNew</name><operator>-&gt;</operator><name>targetList</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type> <name>returningList</name> <init>= <expr><name><name>queryNew</name><operator>-&gt;</operator><name>returningList</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>havingQual</name> <init>= <expr><name><name>queryNew</name><operator>-&gt;</operator><name>havingQual</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>limitOffset</name> <init>= <expr><name><name>queryNew</name><operator>-&gt;</operator><name>limitOffset</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>windowClause</name> <init>= <expr><name><name>queryNew</name><operator>-&gt;</operator><name>windowClause</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>limitCount</name> <init>= <expr><name><name>queryNew</name><operator>-&gt;</operator><name>limitCount</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Create a PlannerInfo data structure for this subquery */</comment>
	<decl_stmt><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>PlannerInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>parse</name></name> <operator>=</operator> <name>queryNew</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>query_level</name></name> <operator>=</operator> <name>queryLevel</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name></name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>PlannerGlobal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>boundParams</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>subplans</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>subroots</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>finalrtable</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>relationOids</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>invalItems</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>nParamExec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>transientPlan</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>glob</name><operator>-&gt;</operator><name>nParamExec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>config</name></name> <operator>=</operator> <call><name>DefaultPlannerConfig</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>parent_root</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>planner_cxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>init_plans</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>list_cteplaninfo</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>join_info_list</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>append_rel_list</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>hasJoinRTEs</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>plc</argument>, <argument>queryNew-&gt;rtable</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name> <init>= <expr><operator>(</operator><name>RangeTblEntry</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>plc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rte</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_JOIN</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>root</name><operator>-&gt;</operator><name>hasJoinRTEs</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>IS_OUTER_JOIN</name><argument_list>(<argument><expr><name><name>rte</name><operator>-&gt;</operator><name>jointype</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * Flatten join alias for expression in
	 * 1. targetlist
	 * 2. returningList
	 * 3. having qual
	 * 4. scatterClause
	 * 5. limit offset
	 * 6. limit count
	 *
	 * We flatten the above expressions since these entries may be moved during the query
	 * normalization step before algebrization. In contrast, the planner flattens alias
	 * inside quals to allow predicates involving such vars to be pushed down.
	 *
	 * Here we ignore the flattening of quals due to the following reasons:
	 * 1. we assume that the function will be called before Query-&gt;DXL translation:
	 * 2. the quals never gets moved from old query to the new top-level query in the
	 * query normalization phase before algebrization. In other words, the quals hang of
	 * the same query structure that is now the new derived table.
	 * 3. the algebrizer can resolve the abiquity of join aliases in quals since we maintain
	 * all combinations of &lt;query level, varno, varattno&gt; to DXL-ColId during Query-&gt;DXL translation.
	 *
	 */</comment>

	<if_stmt><if>if <condition>(<expr><name>NIL</name> <operator>!=</operator> <name>targetList</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>queryNew</name><operator>-&gt;</operator><name>targetList</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>flatten_join_alias_vars</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>targetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>targetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NIL</name> <operator>!=</operator> <name>returningList</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>queryNew</name><operator>-&gt;</operator><name>returningList</name></name> <operator>=</operator> <operator>(</operator><name>List</name> <operator>*</operator><operator>)</operator> <call><name>flatten_join_alias_vars</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>returningList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>returningList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>havingQual</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>queryNew</name><operator>-&gt;</operator><name>havingQual</name></name> <operator>=</operator> <call><name>flatten_join_alias_vars</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>havingQual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>havingQual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>limitOffset</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>queryNew</name><operator>-&gt;</operator><name>limitOffset</name></name> <operator>=</operator> <call><name>flatten_join_alias_vars</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>limitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>limitOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NIL</name> <operator>!=</operator> <name><name>queryNew</name><operator>-&gt;</operator><name>windowClause</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>l</name></decl>;</decl_stmt>

		<macro><name>foreach</name> <argument_list>(<argument>l</argument>, <argument>windowClause</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>WindowClause</name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><operator>(</operator><name>WindowClause</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>wc</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>startOffset</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>startOffset</name></name> <operator>=</operator> <call><name>flatten_join_alias_vars</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>startOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>wc</name><operator>-&gt;</operator><name>endOffset</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>wc</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>=</operator> <call><name>flatten_join_alias_vars</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>wc</name><operator>-&gt;</operator><name>endOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>limitCount</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>queryNew</name><operator>-&gt;</operator><name>limitCount</name></name> <operator>=</operator> <call><name>flatten_join_alias_vars</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name>limitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>limitCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <return>return <expr><name>queryNew</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR px
 * fold_constants
 *
 * Recurses into query tree and folds all constant expressions.
 */</comment>
<function><type><name>Query</name> <modifier>*</modifier></type>
<name>fold_constants</name><parameter_list>(<parameter><decl><type><name>PlannerInfo</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>ParamListInfo</name></type> <name>boundParams</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>max_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>eval_const_expressions_context</name></type> <name>context</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>root</name></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>boundParams</name></name> <operator>=</operator> <name>boundParams</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>active_fns</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>	<comment type="block">/* nothing being recursively simplified */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>case_val</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>	<comment type="block">/* no CASE being examined */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>estimate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>	<comment type="block">/* safe transformations only */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>recurse_queries</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <comment type="block">/* recurse into query structures */</comment>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>recurse_sublink_testexpr</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> <comment type="block">/* do not recurse into sublink test expressions */</comment>

	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>max_size</name></name> <operator>=</operator> <name>max_size</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <call><name>query_or_expression_tree_mutator</name>
		<argument_list>(
			<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>q</name></expr></argument>,
			<argument><expr><name>eval_const_expressions_mutator</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name>context</name></expr></argument>,
			<argument><expr><literal type="number">0</literal></expr></argument>
			)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * POLAR px
 * Transform a small array constant to an ArrayExpr.
 *
 * This is used by PXOPT, to transform the array argument of a ScalarArrayExpr
 * into an ArrayExpr. If a ScalarArrayExpr has an ArrayExpr argument, PXOPT can
 * perform some optimizations - partition pruning at least - by first expanding
 * the ArrayExpr into its disjunctive normal form and then deriving constraints
 * based on the elements in the ArrayExpr. It doesn't currently know how to
 * extract elements from an Array const, however, so to enable those
 * optimizations in PXOPT, we convert Array Consts into corresponding
 * ArrayExprs.
 *
 * If the argument is not an array constant return the original Const unmodified.
 * We convert an array const of any size to ArrayExpr. PXOPT can use it to derive
 * statistics.
 */</comment>
<function><type><name>Expr</name> <modifier>*</modifier></type>
<name>transform_array_Const_to_ArrayExpr</name><parameter_list>(<parameter><decl><type><name>Const</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type>			<name>elemtype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type>		<name>elemlen</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>elembyval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name>elemalign</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>nelems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name>	   <modifier>*</modifier></type><name>elems</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name>	   <modifier>*</modifier></type><name>nulls</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name>  <modifier>*</modifier></type><name>ac</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayExpr</name> <modifier>*</modifier></type><name>aexpr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>Const</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Does it look like the right kind of an array Const? */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>constisnull</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>c</name></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* NULL const */</comment>

	<expr_stmt><expr><name>elemtype</name> <operator>=</operator> <call><name>get_element_type</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>consttype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>elemtype</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>c</name></expr>;</return></block_content></block></if></if_stmt>	<comment type="block">/* not an array */</comment>

	<expr_stmt><expr><name>ac</name> <operator>=</operator> <call><name>DatumGetArrayTypeP</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>constvalue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>nelems</name> <operator>=</operator> <call><name>ArrayGetNItems</name><argument_list>(<argument><expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* All set, extract the elements, and an ArrayExpr to hold them. */</comment>
	<expr_stmt><expr><call><name>get_typlenbyvalalign</name><argument_list>(<argument><expr><name>elemtype</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elemlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elembyval</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>elemalign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>ac</name></expr></argument>, <argument><expr><name>elemtype</name></expr></argument>, <argument><expr><name>elemlen</name></expr></argument>, <argument><expr><name>elembyval</name></expr></argument>, <argument><expr><name>elemalign</name></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>elems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nelems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>aexpr</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>ArrayExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aexpr</name><operator>-&gt;</operator><name>array_typeid</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>consttype</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aexpr</name><operator>-&gt;</operator><name>element_typeid</name></name> <operator>=</operator> <name>elemtype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aexpr</name><operator>-&gt;</operator><name>multidims</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>aexpr</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>location</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nelems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>aexpr</name><operator>-&gt;</operator><name>elements</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>aexpr</name><operator>-&gt;</operator><name>elements</name></name></expr></argument>,
								  <argument><expr><call><name>makeConst</name><argument_list>(<argument><expr><name>elemtype</name></expr></argument>,
											<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,
											<argument><expr><name><name>c</name><operator>-&gt;</operator><name>constcollid</name></name></expr></argument>,
											<argument><expr><name>elemlen</name></expr></argument>,
											<argument><expr><name><name>elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
											<argument><expr><name><name>nulls</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
											<argument><expr><name>elembyval</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><operator>(</operator><name>Expr</name> <operator>*</operator><operator>)</operator> <name>aexpr</name></expr>;</return>
</block_content>}</block></function>
</unit>
