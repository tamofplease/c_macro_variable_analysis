<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/port/win32_shmem.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * win32_shmem.c
 *	  Implement shared memory using win32 facilities
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/port/win32_shmem.c
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/dsm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pg_shmem.h"</cpp:file></cpp:include>

<comment type="block">/*
 * Early in a process's life, Windows asynchronously creates threads for the
 * process's "default thread pool"
 * (https://docs.microsoft.com/en-us/windows/desktop/ProcThread/thread-pools).
 * Occasionally, thread creation allocates a stack after
 * PGSharedMemoryReAttach() has released UsedShmemSegAddr and before it has
 * mapped shared memory at UsedShmemSegAddr.  This would cause mapping to fail
 * if the allocator preferred the just-released region for allocating the new
 * thread stack.  We observed such failures in some Windows Server 2016
 * configurations.  To give the system another region to prefer, reserve and
 * release an additional, protective region immediately before reserving or
 * releasing shared memory.  The idea is that, if the allocator handed out
 * REGION1 pages before REGION2 pages at one occasion, it will do so whenever
 * both regions are free.  Windows Server 2016 exhibits that behavior, and a
 * system behaving differently would have less need to protect
 * UsedShmemSegAddr.  The protective region must be at least large enough for
 * one thread stack.  However, ten times as much is less than 2% of the 32-bit
 * address space and is negligible relative to the 64-bit address space.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROTECTIVE_REGION_SIZE</name></cpp:macro> <cpp:value>(10 * WIN32_STACK_RLIMIT)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>ShmemProtectiveRegion</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type>		<name>UsedShmemSegID</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>UsedShmemSegAddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>Size</name></type> <name>UsedShmemSegSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>EnableLockPagesPrivilege</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>pgwin32_SharedMemoryDelete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>shmId</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Generate shared memory segment name. Expand the data directory, to generate
 * an identifier unique for this data directory. Then replace all backslashes
 * with forward slashes, since backslashes aren't permitted in global object names.
 *
 * Store the shared memory segment in the Global\ namespace (requires NT2 TSE or
 * 2000, but that's all we support for other reasons as well), to make sure you can't
 * open two postmasters in different sessions against the same data directory.
 *
 * XXX: What happens with junctions? It's only someone breaking things on purpose,
 *		and this is still better than before, but we might want to do something about
 *		that sometime in the future.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GetSharedMemName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>retptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>bufsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>cp</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>bufsize</name> <operator>=</operator> <call><name>GetFullPathName</name><argument_list>(<argument><expr><name>DataDir</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"could not get size for full pathname of datadir %s: error code %lu"</literal></expr></argument>,
			 <argument><expr><name>DataDir</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>retptr</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bufsize</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* 18 for Global\PostgreSQL: */</comment>
	<if_stmt><if>if <condition>(<expr><name>retptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"could not allocate memory for shared memory name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>retptr</name></expr></argument>, <argument><expr><literal type="string">"Global\\PostgreSQL:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>GetFullPathName</name><argument_list>(<argument><expr><name>DataDir</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>retptr</name> <operator>+</operator> <literal type="number">18</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>r</name> <operator>&gt;</operator> <name>bufsize</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"could not generate full pathname for datadir %s: error code %lu"</literal></expr></argument>,
			 <argument><expr><name>DataDir</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * XXX: Intentionally overwriting the Global\ part here. This was not the
	 * original approach, but putting it in the actual Global\ namespace
	 * causes permission errors in a lot of cases, so we leave it in the
	 * default namespace for now.
	 */</comment>
	<for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>retptr</name></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name>cp</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	<return>return <expr><name>retptr</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * PGSharedMemoryIsInUse
 *
 * Is a previously-existing shmem segment still existing and in use?
 *
 * The point of this exercise is to detect the case where a prior postmaster
 * crashed, but it left child backends that are still running.  Therefore
 * we only care about shmem segments that are associated with the intended
 * DataDir.  This is an important consideration since accidental matches of
 * shmem segment IDs are reasonably common.
 */</comment>
<function><type><name>bool</name></type>
<name>PGSharedMemoryIsInUse</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>id1</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>id2</name></decl></parameter>, <parameter><decl><type><name>PolarShmemType</name></type> <name>polar_shmem_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>szShareMem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>hmap</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>szShareMem</name> <operator>=</operator> <call><name>GetSharedMemName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>hmap</name> <operator>=</operator> <call><name>OpenFileMapping</name><argument_list>(<argument><expr><name>FILE_MAP_READ</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>szShareMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>szShareMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>hmap</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * EnableLockPagesPrivilege
 *
 * Try to acquire SeLockMemoryPrivilege so we can use large pages.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>EnableLockPagesPrivilege</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>hToken</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TOKEN_PRIVILEGES</name></type> <name>tp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LUID</name></type>		<name>luid</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OpenProcessToken</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TOKEN_ADJUST_PRIVILEGES</name> <operator>|</operator> <name>TOKEN_QUERY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hToken</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not enable Lock Pages in Memory user right: error code %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed system call was %s."</literal></expr></argument>, <argument><expr><literal type="string">"OpenProcessToken"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>LookupPrivilegeValue</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SE_LOCK_MEMORY_NAME</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>luid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not enable Lock Pages in Memory user right: error code %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed system call was %s."</literal></expr></argument>, <argument><expr><literal type="string">"LookupPrivilegeValue"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>PrivilegeCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Luid</name> <operator>=</operator> <name>luid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tp</name><operator>.</operator><name>Privileges</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>Attributes</name> <operator>=</operator> <name>SE_PRIVILEGE_ENABLED</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>AdjustTokenPrivileges</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not enable Lock Pages in Memory user right: error code %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed system call was %s."</literal></expr></argument>, <argument><expr><literal type="string">"AdjustTokenPrivileges"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERROR_SUCCESS</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_NOT_ALL_ASSIGNED</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INSUFFICIENT_PRIVILEGE</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not enable Lock Pages in Memory user right"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Assign Lock Pages in Memory user right to the Windows user account which runs PostgreSQL."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>elevel</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not enable Lock Pages in Memory user right: error code %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed system call was %s."</literal></expr></argument>, <argument><expr><literal type="string">"AdjustTokenPrivileges"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FALSE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PGSharedMemoryCreate
 *
 * Create a shared memory segment of the given size and initialize its
 * standard header.
 */</comment>
<function><type><name>PGShmemHeader</name> <modifier>*</modifier></type>
<name>PGSharedMemoryCreate</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>,
					 <parameter><decl><type><name>PGShmemHeader</name> <modifier>*</modifier><modifier>*</modifier></type><name>shim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>memAddress</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGShmemHeader</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>hmap</name></decl>,
				<decl><type ref="prev"/><name>hmap2</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>szShareMem</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>size_high</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>size_low</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SIZE_T</name></type>		<name>largePageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type>		<name>orig_size</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>flProtect</name> <init>= <expr><name>PAGE_READWRITE</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>ShmemProtectiveRegion</name> <operator>=</operator> <call><name>VirtualAlloc</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>PROTECTIVE_REGION_SIZE</name></expr></argument>,
										 <argument><expr><name>MEM_RESERVE</name></expr></argument>, <argument><expr><name>PAGE_NOACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ShmemProtectiveRegion</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"could not reserve memory region: error code %lu"</literal></expr></argument>,
			 <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/* Room for a header? */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGShmemHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>szShareMem</name> <operator>=</operator> <call><name>GetSharedMemName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>UsedShmemSegAddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>huge_pages</name> <operator>==</operator> <name>HUGE_PAGES_ON</name> <operator>||</operator> <name>huge_pages</name> <operator>==</operator> <name>HUGE_PAGES_TRY</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Does the processor support large pages? */</comment>
		<expr_stmt><expr><name>largePageSize</name> <operator>=</operator> <call><name>GetLargePageMinimum</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>largePageSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><ternary><condition><expr><name>huge_pages</name> <operator>==</operator> <name>HUGE_PAGES_ON</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>DEBUG1</name></expr></else></ternary></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"the processor does not support large pages"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"disabling huge pages"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>EnableLockPagesPrivilege</name><argument_list>(<argument><expr><ternary><condition><expr><name>huge_pages</name> <operator>==</operator> <name>HUGE_PAGES_ON</name></expr> ?</condition><then> <expr><name>FATAL</name></expr> </then><else>: <expr><name>DEBUG1</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"disabling huge pages"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Huge pages available and privilege enabled, so turn on */</comment>
			<expr_stmt><expr><name>flProtect</name> <operator>=</operator> <name>PAGE_READWRITE</name> <operator>|</operator> <name>SEC_COMMIT</name> <operator>|</operator> <name>SEC_LARGE_PAGES</name></expr>;</expr_stmt>

			<comment type="block">/* Round size up as appropriate. */</comment>
			<if_stmt><if>if <condition>(<expr><name>size</name> <operator>%</operator> <name>largePageSize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>size</name> <operator>+=</operator> <name>largePageSize</name> <operator>-</operator> <operator>(</operator><name>size</name> <operator>%</operator> <name>largePageSize</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>retry</name>:</label>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_WIN64</name></cpp:ifdef>
	<expr_stmt><expr><name>size_high</name> <operator>=</operator> <name>size</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><name>size_high</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>size_low</name> <operator>=</operator> <operator>(</operator><name>DWORD</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * When recycling a shared memory segment, it may take a short while
	 * before it gets dropped from the global namespace. So re-try after
	 * sleeping for a second, and continue retrying 10 times. (both the 1
	 * second time and the 10 retries are completely arbitrary)
	 */</comment>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<comment type="block">/*
		 * In case CreateFileMapping() doesn't set the error code to 0 on
		 * success
		 */</comment>
		<expr_stmt><expr><call><name>SetLastError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>hmap</name> <operator>=</operator> <call><name>CreateFileMapping</name><argument_list>(<argument><expr><name>INVALID_HANDLE_VALUE</name></expr></argument>,	<comment type="block">/* Use the pagefile */</comment>
								 <argument><expr><name>NULL</name></expr></argument>,	<comment type="block">/* Default security attrs */</comment>
								 <argument><expr><name>flProtect</name></expr></argument>,
								 <argument><expr><name>size_high</name></expr></argument>, <comment type="block">/* Size Upper 32 Bits	*/</comment>
								 <argument><expr><name>size_low</name></expr></argument>,	<comment type="block">/* Size Lower 32 bits */</comment>
								 <argument><expr><name>szShareMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hmap</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_NO_SYSTEM_RESOURCES</name> <operator>&amp;&amp;</operator>
				<name>huge_pages</name> <operator>==</operator> <name>HUGE_PAGES_TRY</name> <operator>&amp;&amp;</operator>
				<operator>(</operator><name>flProtect</name> <operator>&amp;</operator> <name>SEC_LARGE_PAGES</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"CreateFileMapping(%zu) with SEC_LARGE_PAGES failed, "</literal>
					 <literal type="string">"huge pages disabled"</literal></expr></argument>,
					 <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block">/*
				 * Use the original size, not the rounded-up value, when
				 * falling back to non-huge pages.
				 */</comment>
				<expr_stmt><expr><name>size</name> <operator>=</operator> <name>orig_size</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>flProtect</name> <operator>=</operator> <name>PAGE_READWRITE</name></expr>;</expr_stmt>
				<goto>goto <name>retry</name>;</goto>
			</block_content>}</block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create shared memory segment: error code %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed system call was CreateFileMapping(size=%zu, name=%s)."</literal></expr></argument>,
								   <argument><expr><name>size</name></expr></argument>, <argument><expr><name>szShareMem</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If the segment already existed, CreateFileMapping() will return a
		 * handle to the existing one and set ERROR_ALREADY_EXISTS.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>GetLastError</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERROR_ALREADY_EXISTS</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* Close the handle, since we got a valid one
								 * to the previous segment. */</comment>
			<expr_stmt><expr><name>hmap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
		<break>break;</break>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If the last call in the loop still returned ERROR_ALREADY_EXISTS, this
	 * shared memory segment exists and we assume it belongs to somebody else.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hmap</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"pre-existing shared memory block is still in use"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Check if there are any old server processes still running, and terminate them."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>szShareMem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make the handle inheritable
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>DuplicateHandle</name><argument_list>(<argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hmap</name></expr></argument>, <argument><expr><call><name>GetCurrentProcess</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>hmap2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>DUPLICATE_SAME_ACCESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create shared memory segment: error code %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed system call was DuplicateHandle."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="block">/*
	 * Close the old, non-inheritable handle. If this fails we don't really
	 * care.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name>hmap</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not close handle to shared memory: error code %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<comment type="block">/*
	 * Get a pointer to the new shared memory segment. Map the whole segment
	 * at once, and let the system decide on the initial address.
	 */</comment>
	<expr_stmt><expr><name>memAddress</name> <operator>=</operator> <call><name>MapViewOfFileEx</name><argument_list>(<argument><expr><name>hmap2</name></expr></argument>, <argument><expr><name>FILE_MAP_WRITE</name> <operator>|</operator> <name>FILE_MAP_READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>memAddress</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create shared memory segment: error code %lu"</literal></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed system call was MapViewOfFileEx."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



	<comment type="block">/*
	 * OK, we created a new segment.  Mark it as created by this process. The
	 * order of assignments here is critical so that another Postgres process
	 * can't see the header as valid but belonging to an invalid PID!
	 */</comment>
	<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator><name>PGShmemHeader</name> <operator>*</operator><operator>)</operator> <name>memAddress</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>creatorPID</name></name> <operator>=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>PGShmemMagic</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Initialize space allocation status for segment.
	 */</comment>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>totalsize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>freeoffset</name></name> <operator>=</operator> <call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PGShmemHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>dsm_control</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/* Save info for possible future use */</comment>
	<expr_stmt><expr><name>UsedShmemSegAddr</name> <operator>=</operator> <name>memAddress</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>UsedShmemSegSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>UsedShmemSegID</name> <operator>=</operator> <name>hmap2</name></expr>;</expr_stmt>

	<comment type="block">/* Register on-exit routine to delete the new segment */</comment>
	<expr_stmt><expr><call><name>on_shmem_exit</name><argument_list>(<argument><expr><name>pgwin32_SharedMemoryDelete</name></expr></argument>, <argument><expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>hmap2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>shim</name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>
	<return>return <expr><name>hdr</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PGSharedMemoryReAttach
 *
 * This is called during startup of a postmaster child process to re-attach to
 * an already existing shared memory segment, using the handle inherited from
 * the postmaster.
 *
 * ShmemProtectiveRegion, UsedShmemSegID and UsedShmemSegAddr are implicit
 * parameters to this routine.  The caller must have already restored them to
 * the postmaster's values.
 */</comment>
<function><type><name>void</name></type>
<name>PGSharedMemoryReAttach</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PGShmemHeader</name> <modifier>*</modifier></type><name>hdr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>origUsedShmemSegAddr</name> <init>= <expr><name>UsedShmemSegAddr</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ShmemProtectiveRegion</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>IsUnderPostmaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Release memory region reservations made by the postmaster
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name>ShmemProtectiveRegion</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"failed to release reserved memory region (addr=%p): error code %lu"</literal></expr></argument>,
			 <argument><expr><name>ShmemProtectiveRegion</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name>UsedShmemSegAddr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"failed to release reserved memory region (addr=%p): error code %lu"</literal></expr></argument>,
			 <argument><expr><name>UsedShmemSegAddr</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>hdr</name> <operator>=</operator> <operator>(</operator><name>PGShmemHeader</name> <operator>*</operator><operator>)</operator> <call><name>MapViewOfFileEx</name><argument_list>(<argument><expr><name>UsedShmemSegID</name></expr></argument>, <argument><expr><name>FILE_MAP_READ</name> <operator>|</operator> <name>FILE_MAP_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UsedShmemSegAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hdr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"could not reattach to shared memory (key=%p, addr=%p): error code %lu"</literal></expr></argument>,
			 <argument><expr><name>UsedShmemSegID</name></expr></argument>, <argument><expr><name>UsedShmemSegAddr</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>hdr</name> <operator>!=</operator> <name>origUsedShmemSegAddr</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"reattaching to shared memory returned unexpected address (got %p, expected %p)"</literal></expr></argument>,
			 <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>origUsedShmemSegAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>-&gt;</operator><name>magic</name></name> <operator>!=</operator> <name>PGShmemMagic</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"reattaching to shared memory returned non-PostgreSQL memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>dsm_set_control_handle</name><argument_list>(<argument><expr><name><name>hdr</name><operator>-&gt;</operator><name>dsm_control</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>UsedShmemSegAddr</name> <operator>=</operator> <name>hdr</name></expr>;</expr_stmt>		<comment type="block">/* probably redundant */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * PGSharedMemoryNoReAttach
 *
 * This is called during startup of a postmaster child process when we choose
 * *not* to re-attach to the existing shared memory segment.  We must clean up
 * to leave things in the appropriate state.
 *
 * The child process startup logic might or might not call PGSharedMemoryDetach
 * after this; make sure that it will be a no-op if called.
 *
 * ShmemProtectiveRegion, UsedShmemSegID and UsedShmemSegAddr are implicit
 * parameters to this routine.  The caller must have already restored them to
 * the postmaster's values.
 */</comment>
<function><type><name>void</name></type>
<name>PGSharedMemoryNoReAttach</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ShmemProtectiveRegion</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>IsUnderPostmaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Under Windows we will not have mapped the segment, so we don't need to
	 * un-map it.  Just reset UsedShmemSegAddr to show we're not attached.
	 */</comment>
	<expr_stmt><expr><name>UsedShmemSegAddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * We *must* close the inherited shmem segment handle, else Windows will
	 * consider the existence of this process to mean it can't release the
	 * shmem segment yet.  We can now use PGSharedMemoryDetach to do that.
	 */</comment>
	<expr_stmt><expr><call><name>PGSharedMemoryDetach</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * PGSharedMemoryDetach
 *
 * Detach from the shared memory segment, if still attached.  This is not
 * intended to be called explicitly by the process that originally created the
 * segment (it will have an on_shmem_exit callback registered to do that).
 * Rather, this is for subprocesses that have inherited an attachment and want
 * to get rid of it.
 *
 * ShmemProtectiveRegion, UsedShmemSegID and UsedShmemSegAddr are implicit
 * parameters to this routine.
 */</comment>
<function><type><name>void</name></type>
<name>PGSharedMemoryDetach</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Releasing the protective region liberates an unimportant quantity of
	 * address space, but be tidy.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>ShmemProtectiveRegion</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>VirtualFree</name><argument_list>(<argument><expr><name>ShmemProtectiveRegion</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEM_RELEASE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"failed to release reserved memory region (addr=%p): error code %lu"</literal></expr></argument>,
				 <argument><expr><name>ShmemProtectiveRegion</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ShmemProtectiveRegion</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Unmap the view, if it's mapped */</comment>
	<if_stmt><if>if <condition>(<expr><name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>UnmapViewOfFile</name><argument_list>(<argument><expr><name>UsedShmemSegAddr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not unmap view of shared memory: error code %lu"</literal></expr></argument>,
				 <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>UsedShmemSegAddr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* And close the shmem handle, if we have one */</comment>
	<if_stmt><if>if <condition>(<expr><name>UsedShmemSegID</name> <operator>!=</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CloseHandle</name><argument_list>(<argument><expr><name>UsedShmemSegID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not close handle to shared memory: error code %lu"</literal></expr></argument>,
				 <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>UsedShmemSegID</name> <operator>=</operator> <name>INVALID_HANDLE_VALUE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * pgwin32_SharedMemoryDelete
 *
 * Detach from and delete the shared memory segment
 * (called as an on_shmem_exit callback, hence funny argument list)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pgwin32_SharedMemoryDelete</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>shmId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>DatumGetPointer</name><argument_list>(<argument><expr><name>shmId</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>UsedShmemSegID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PGSharedMemoryDetach</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * pgwin32_ReserveSharedMemoryRegion(hChild)
 *
 * Reserve the memory region that will be used for shared memory in a child
 * process. It is called before the child process starts, to make sure the
 * memory is available.
 *
 * Once the child starts, DLLs loading in different order or threads getting
 * scheduled differently may allocate memory which can conflict with the
 * address space we need for our shared memory. By reserving the shared
 * memory region before the child starts, and freeing it only just before we
 * attempt to get access to the shared memory forces these allocations to
 * be given different address ranges that don't conflict.
 *
 * NOTE! This function executes in the postmaster, and should for this
 * reason not use elog(FATAL) since that would take down the postmaster.
 */</comment>
<function><type><name>int</name></type>
<name>pgwin32_ReserveSharedMemoryRegion</name><parameter_list>(<parameter><decl><type><name>HANDLE</name></type> <name>hChild</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name>	   <modifier>*</modifier></type><name>address</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>ShmemProtectiveRegion</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>UsedShmemSegAddr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>UsedShmemSegSize</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ShmemProtectiveRegion */</comment>
	<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>VirtualAllocEx</name><argument_list>(<argument><expr><name>hChild</name></expr></argument>, <argument><expr><name>ShmemProtectiveRegion</name></expr></argument>,
							 <argument><expr><name>PROTECTIVE_REGION_SIZE</name></expr></argument>,
							 <argument><expr><name>MEM_RESERVE</name></expr></argument>, <argument><expr><name>PAGE_NOACCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>address</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Don't use FATAL since we're running in the postmaster */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not reserve shared memory region (addr=%p) for child %p: error code %lu"</literal></expr></argument>,
			 <argument><expr><name>ShmemProtectiveRegion</name></expr></argument>, <argument><expr><name>hChild</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>address</name> <operator>!=</operator> <name>ShmemProtectiveRegion</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Should never happen - in theory if allocation granularity causes
		 * strange effects it could, so check just in case.
		 *
		 * Don't use FATAL since we're running in the postmaster.
		 */</comment>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"reserved shared memory region got incorrect address %p, expected %p"</literal></expr></argument>,
			 <argument><expr><name>address</name></expr></argument>, <argument><expr><name>ShmemProtectiveRegion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* UsedShmemSegAddr */</comment>
	<expr_stmt><expr><name>address</name> <operator>=</operator> <call><name>VirtualAllocEx</name><argument_list>(<argument><expr><name>hChild</name></expr></argument>, <argument><expr><name>UsedShmemSegAddr</name></expr></argument>, <argument><expr><name>UsedShmemSegSize</name></expr></argument>,
							 <argument><expr><name>MEM_RESERVE</name></expr></argument>, <argument><expr><name>PAGE_READWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>address</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"could not reserve shared memory region (addr=%p) for child %p: error code %lu"</literal></expr></argument>,
			 <argument><expr><name>UsedShmemSegAddr</name></expr></argument>, <argument><expr><name>hChild</name></expr></argument>, <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>address</name> <operator>!=</operator> <name>UsedShmemSegAddr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"reserved shared memory region got incorrect address %p, expected %p"</literal></expr></argument>,
			 <argument><expr><name>address</name></expr></argument>, <argument><expr><name>UsedShmemSegAddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
