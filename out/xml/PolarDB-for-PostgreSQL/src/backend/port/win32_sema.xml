<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/port/win32_sema.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * win32_sema.c
 *	  Microsoft Windows Win32 Semaphores Emulation
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/port/win32_sema.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/pg_sema.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name> <modifier>*</modifier></type><name>mySemSet</name></decl>;</decl_stmt>		<comment type="block">/* IDs of sema sets acquired so far */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>numSems</name></decl>;</decl_stmt>			<comment type="block">/* number of sema sets acquired so far */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>	<name>maxSems</name></decl>;</decl_stmt>			<comment type="block">/* allocated size of mySemaSet array */</comment>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseSemaphores</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Report amount of shared memory needed for semaphores
 */</comment>
<function><type><name>Size</name></type>
<name>PGSemaphoreShmemSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxSemas</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* No shared memory needed on Windows */</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PGReserveSemaphores --- initialize semaphore support
 *
 * In the Win32 implementation, we acquire semaphores on-demand; the
 * maxSemas parameter is just used to size the array that keeps track of
 * acquired semas for subsequent releasing.  We use anonymous semaphores
 * so the semaphores are automatically freed when the last referencing
 * process exits.
 */</comment>
<function><type><name>void</name></type>
<name>PGReserveSemaphores</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>maxSemas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>mySemSet</name> <operator>=</operator> <operator>(</operator><name>HANDLE</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>maxSemas</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HANDLE</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>mySemSet</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>numSems</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>maxSems</name> <operator>=</operator> <name>maxSemas</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>on_shmem_exit</name><argument_list>(<argument><expr><name>ReleaseSemaphores</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Release semaphores at shutdown or shmem reinitialization
 *
 * (called as an on_shmem_exit callback, hence funny argument list)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ReleaseSemaphores</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numSems</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>CloseHandle</name><argument_list>(<argument><expr><name><name>mySemSet</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mySemSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreCreate
 *
 * Allocate a PGSemaphore structure with initial count 1
 */</comment>
<function><type><name>PGSemaphore</name></type>
<name>PGSemaphoreCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>cur_handle</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SECURITY_ATTRIBUTES</name></type> <name>sec_attrs</name></decl>;</decl_stmt>

	<comment type="block">/* Can't do this in a backend, because static state is postmaster's */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>IsUnderPostmaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>numSems</name> <operator>&gt;=</operator> <name>maxSems</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>, <argument><expr><literal type="string">"too many semaphores created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_attrs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sec_attrs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sec_attrs</name><operator>.</operator><name>nLength</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>sec_attrs</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sec_attrs</name><operator>.</operator><name>lpSecurityDescriptor</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sec_attrs</name><operator>.</operator><name>bInheritHandle</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

	<comment type="block">/* We don't need a named semaphore */</comment>
	<expr_stmt><expr><name>cur_handle</name> <operator>=</operator> <call><name>CreateSemaphore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sec_attrs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32767</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cur_handle</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Successfully done */</comment>
		<expr_stmt><expr><name><name>mySemSet</name><index>[<expr><name>numSems</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cur_handle</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>PANIC</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create semaphore: error code %lu"</literal></expr></argument>,
						<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return <expr><operator>(</operator><name>PGSemaphore</name><operator>)</operator> <name>cur_handle</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreReset
 *
 * Reset a previously-initialized PGSemaphore to have count 0
 */</comment>
<function><type><name>void</name></type>
<name>PGSemaphoreReset</name><parameter_list>(<parameter><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * There's no direct API for this in Win32, so we have to ratchet the
	 * semaphore down to 0 with repeated trylock's.
	 */</comment>
	<while>while <condition>(<expr><call><name>PGSemaphoreTryLock</name><argument_list>(<argument><expr><name>sema</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		 <comment type="block">/* loop */</comment> <empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreLock
 *
 * Lock a semaphore (decrement count), blocking if count would be &lt; 0.
 * Serve the interrupt if interruptOK is true.
 */</comment>
<function><type><name>void</name></type>
<name>PGSemaphoreLock</name><parameter_list>(<parameter><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name><name>wh</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Note: pgwin32_signal_event should be first to ensure that it will be
	 * reported when multiple events are set.  We want to guarantee that
	 * pending signals are serviced.
	 */</comment>
	<expr_stmt><expr><name><name>wh</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pgwin32_signal_event</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>wh</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>sema</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * As in other implementations of PGSemaphoreLock, we need to check for
	 * cancel/die interrupts each time through the loop.  But here, there is
	 * no hidden magic about whether the syscall will internally service a
	 * signal --- we do that ourselves.
	 */</comment>
	<while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DWORD</name></type>		<name>rc</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>CHECK_FOR_INTERRUPTS</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>WaitForMultipleObjectsEx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>wh</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>INFINITE</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>rc</name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>WAIT_OBJECT_0</name></expr>:</case>
				<comment type="block">/* Signal event is set - we have a signal to deliver */</comment>
				<expr_stmt><expr><call><name>pgwin32_dispatch_queued_signals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>WAIT_OBJECT_0</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>
				<comment type="block">/* We got it! */</comment>
				<expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><name>WAIT_IO_COMPLETION</name></expr>:</case>

				<comment type="block">/*
				 * The system interrupted the wait to execute an I/O
				 * completion routine or asynchronous procedure call in this
				 * thread.  PostgreSQL does not provoke either of these, but
				 * atypical loaded DLLs or even other processes might do so.
				 * Now, resume waiting.
				 */</comment>
				<break>break;</break>
			<case>case <expr><name>WAIT_FAILED</name></expr>:</case>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not lock semaphore: error code %lu"</literal></expr></argument>,
								<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			<default>default:</default>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><literal type="string">"unexpected return code from WaitForMultipleObjectsEx(): %lu"</literal></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</block_content>}</block></switch>
	</block_content>}</block></while>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreUnlock
 *
 * Unlock a semaphore (increment count)
 */</comment>
<function><type><name>void</name></type>
<name>PGSemaphoreUnlock</name><parameter_list>(<parameter><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ReleaseSemaphore</name><argument_list>(<argument><expr><name>sema</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not unlock semaphore: error code %lu"</literal></expr></argument>,
						<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * PGSemaphoreTryLock
 *
 * Lock a semaphore only if able to do so without blocking
 */</comment>
<function><type><name>bool</name></type>
<name>PGSemaphoreTryLock</name><parameter_list>(<parameter><decl><type><name>PGSemaphore</name></type> <name>sema</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>WaitForSingleObject</name><argument_list>(<argument><expr><name>sema</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* We got it! */</comment>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Can't get it */</comment>
		<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EAGAIN</name></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Otherwise we are in trouble */</comment>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not try-lock semaphore: error code %lu"</literal></expr></argument>,
					<argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* keep compiler quiet */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
