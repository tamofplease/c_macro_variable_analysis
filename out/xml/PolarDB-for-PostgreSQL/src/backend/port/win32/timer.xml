<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/port/win32/timer.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * timer.c
 *	  Microsoft Windows Win32 Timer Implementation
 *
 *	  Limitations of this implementation:
 *
 *	  - Does not support interval timer (value-&gt;it_interval)
 *	  - Only supports ITIMER_REAL
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 *
 * IDENTIFICATION
 *	  src/backend/port/win32/timer.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>


<comment type="block">/* Communication area for inter-thread communication */</comment>
<typedef>typedef <type><struct>struct <name>timerCA</name>
<block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>itimerval</name></name></type> <name>value</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HANDLE</name></type>		<name>event</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CRITICAL_SECTION</name></type> <name>crit_sec</name></decl>;</decl_stmt>
}</block></struct></type> <name>timerCA</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>timerCA</name></type> <name>timerCommArea</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HANDLE</name></type> <name>timerThreadHandle</name> <init>= <expr><name>INVALID_HANDLE_VALUE</name></expr></init></decl>;</decl_stmt>


<comment type="block">/* Timer management thread */</comment>
<function><type><specifier>static</specifier> <name>DWORD</name> <name>WINAPI</name></type>
<name>pg_timer_thread</name><parameter_list>(<parameter><decl><type><name>LPVOID</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DWORD</name></type>		<name>waittime</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>param</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>waittime</name> <operator>=</operator> <name>INFINITE</name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type>			<name>r</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>WaitForSingleObjectEx</name><argument_list>(<argument><expr><name><name>timerCommArea</name><operator>.</operator><name>event</name></name></expr></argument>, <argument><expr><name>waittime</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>WAIT_OBJECT_0</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Event signalled from main thread, change the timer */</comment>
			<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timerCommArea</name><operator>.</operator><name>crit_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>timerCommArea</name><operator>.</operator><name>value</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
				<name><name>timerCommArea</name><operator>.</operator><name>value</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_usec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>waittime</name> <operator>=</operator> <name>INFINITE</name></expr>;</expr_stmt></block_content></block></if>	<comment type="block">/* Cancel the interrupt */</comment>
			<else>else
			<block>{<block_content>
				<comment type="block">/* WaitForSingleObjectEx() uses milliseconds, round up */</comment>
				<expr_stmt><expr><name>waittime</name> <operator>=</operator> <operator>(</operator><name><name>timerCommArea</name><operator>.</operator><name>value</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_usec</name></name> <operator>+</operator> <literal type="number">999</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal> <operator>+</operator>
					<name><name>timerCommArea</name><operator>.</operator><name>value</name><operator>.</operator><name>it_value</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<expr_stmt><expr><call><name>ResetEvent</name><argument_list>(<argument><expr><name><name>timerCommArea</name><operator>.</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timerCommArea</name><operator>.</operator><name>crit_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>r</name> <operator>==</operator> <name>WAIT_TIMEOUT</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Timeout expired, signal SIGALRM and turn it off */</comment>
			<expr_stmt><expr><call><name>pg_queue_signal</name><argument_list>(<argument><expr><name>SIGALRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>waittime</name> <operator>=</operator> <name>INFINITE</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Should never happen */</comment>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Win32 setitimer emulation by creating a persistent thread
 * to handle the timer setting and notification upon timeout.
 */</comment>
<function><type><name>int</name></type>
<name>setitimer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>itimerval</name></name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>itimerval</name></name> <modifier>*</modifier></type><name>ovalue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>it_interval</name><operator>.</operator><name>tv_sec</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>value</name><operator>-&gt;</operator><name>it_interval</name><operator>.</operator><name>tv_usec</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>which</name> <operator>==</operator> <name>ITIMER_REAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>timerThreadHandle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* First call in this backend, create event and the timer thread */</comment>
		<expr_stmt><expr><name><name>timerCommArea</name><operator>.</operator><name>event</name></name> <operator>=</operator> <call><name>CreateEvent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>timerCommArea</name><operator>.</operator><name>event</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"could not create timer event: error code %lu"</literal></expr></argument>,
									 <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timerCommArea</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>itimerval</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>InitializeCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timerCommArea</name><operator>.</operator><name>crit_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>timerThreadHandle</name> <operator>=</operator> <call><name>CreateThread</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pg_timer_thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>timerThreadHandle</name> <operator>==</operator> <name>INVALID_HANDLE_VALUE</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errmsg_internal</name><argument_list>(<argument><expr><literal type="string">"could not create timer thread: error code %lu"</literal></expr></argument>,
									 <argument><expr><call><name>GetLastError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Request the timer thread to change settings */</comment>
	<expr_stmt><expr><call><name>EnterCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timerCommArea</name><operator>.</operator><name>crit_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ovalue</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>ovalue</name> <operator>=</operator> <name><name>timerCommArea</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>timerCommArea</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>*</operator><name>value</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LeaveCriticalSection</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>timerCommArea</name><operator>.</operator><name>crit_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetEvent</name><argument_list>(<argument><expr><name><name>timerCommArea</name><operator>.</operator><name>event</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
