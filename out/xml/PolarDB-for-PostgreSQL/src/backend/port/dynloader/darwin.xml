<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/port/dynloader/darwin.c"><comment type="block">/*
 * Dynamic loading support for macOS (Darwin)
 *
 * If dlopen() is available (Darwin 10.3 and later), we just use it.
 * Otherwise we emulate it with the older, now deprecated, NSLinkModule API.
 *
 * src/backend/port/dynloader/darwin.c
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DLOPEN</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;mach-o/dyld.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dynloader.h"</cpp:file></cpp:include>


<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DLOPEN</name></cpp:ifdef>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>pg_dlopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>dlopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>RTLD_NOW</name> <operator>|</operator> <name>RTLD_GLOBAL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_dlclose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PGFunction</name></type>
<name>pg_dlsym</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Do not prepend an underscore: see dlopen(3) */</comment>
	<return>return <expr><call><name>dlsym</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_dlerror</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>dlerror</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>							<comment type="block">/* !HAVE_DLOPEN */</comment>

<comment type="block">/*
 * These routines were taken from the Apache source, but were made
 * available with a PostgreSQL-compatible license.  Kudos Wilfredo
 * SÃ¡nchez &lt;wsanchez@apple.com&gt;.
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <name>NSObjectFileImageReturnCode</name></type> <name>cofiff_result</name> <init>= <expr><name>NSObjectFileImageFailure</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name> <modifier>*</modifier></type>
<name>pg_dlopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NSObjectFileImage</name></type> <name>image</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cofiff_result</name> <operator>=</operator> <call><name>NSCreateObjectFileImageFromFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>cofiff_result</name> <operator>!=</operator> <name>NSObjectFileImageSuccess</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
	<return>return <expr><call><name>NSLinkModule</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>,
						<argument><expr><name>NSLINKMODULE_OPTION_BINDNOW</name> <operator>|</operator>
						<name>NSLINKMODULE_OPTION_RETURN_ON_ERROR</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pg_dlclose</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>NSUnLinkModule</name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>NSUNLINKMODULE_OPTION_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PGFunction</name></type>
<name>pg_dlsym</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>funcname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NSSymbol</name></type> <name>symbol</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>	   <modifier>*</modifier></type><name>symname</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>funcname</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>symname</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>symname</name></expr></argument>, <argument><expr><literal type="string">"_%s"</literal></expr></argument>, <argument><expr><name>funcname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>NSIsSymbolNameDefined</name><argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>symbol</name> <operator>=</operator> <call><name>NSLookupAndBindSymbol</name><argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><name>PGFunction</name><operator>)</operator> <call><name>NSAddressOfSymbol</name><argument_list>(<argument><expr><name>symbol</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>symname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type>
<name>pg_dlerror</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NSLinkEditErrors</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>errorNumber</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errorString</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>cofiff_result</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>NSObjectFileImageSuccess</name></expr>:</case>
			<comment type="block">/* must have failed in NSLinkModule */</comment>
			<expr_stmt><expr><call><name>NSLinkEditError</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errorNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errorString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>errorString</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>errorString</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name>errorString</name> <operator>=</operator> <literal type="string">"unknown link-edit failure"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<break>break;</break>
		<case>case <expr><name>NSObjectFileImageFailure</name></expr>:</case>
			<expr_stmt><expr><name>errorString</name> <operator>=</operator> <literal type="string">"failed to open object file"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NSObjectFileImageInappropriateFile</name></expr>:</case>
			<expr_stmt><expr><name>errorString</name> <operator>=</operator> <literal type="string">"inappropriate object file"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NSObjectFileImageArch</name></expr>:</case>
			<expr_stmt><expr><name>errorString</name> <operator>=</operator> <literal type="string">"object file is for wrong architecture"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NSObjectFileImageFormat</name></expr>:</case>
			<expr_stmt><expr><name>errorString</name> <operator>=</operator> <literal type="string">"object file has wrong format"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><name>NSObjectFileImageAccess</name></expr>:</case>
			<expr_stmt><expr><name>errorString</name> <operator>=</operator> <literal type="string">"insufficient permissions for object file"</literal></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><name>errorString</name> <operator>=</operator> <literal type="string">"unknown failure to open object file"</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>errorString</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>							<comment type="block">/* HAVE_DLOPEN */</comment>
</unit>
