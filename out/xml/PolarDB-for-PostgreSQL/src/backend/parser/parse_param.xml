<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/parser/parse_param.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * parse_param.c
 *	  handle parameters in parser
 *
 * This code covers two cases that are used within the core backend:
 *		* a fixed list of parameters with known types
 *		* an expandable list of parameters whose types can optionally
 *		  be determined from context
 * In both cases, only explicit $n references (ParamRef nodes) are supported.
 *
 * Note that other approaches to parameters are possible using the parser
 * hooks defined in ParseState.
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/parse_param.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_param.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<comment type="block">/* POLAR */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>FixedParamState</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>paramTypes</name></decl>;</decl_stmt>		<comment type="block">/* array of parameter type OIDs */</comment>
	<decl_stmt><decl><type><name>int</name></type>			<name>numParams</name></decl>;</decl_stmt>		<comment type="block">/* number of array entries */</comment>
}</block></struct></type> <name>FixedParamState</name>;</typedef>

<comment type="block">/*
 * In the varparams case, the caller-supplied OID array (if any) can be
 * re-palloc'd larger at need.  A zero array entry means that parameter number
 * hasn't been seen, while UNKNOWNOID means the parameter has been used but
 * its type is not yet known.
 */</comment>
<typedef>typedef <type><struct>struct <name>VarParamState</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name>		  <modifier>*</modifier><modifier>*</modifier></type><name>paramTypes</name></decl>;</decl_stmt>		<comment type="block">/* array of parameter type OIDs */</comment>
	<decl_stmt><decl><type><name>int</name>		  <modifier>*</modifier><modifier>*</modifier></type><name>paramLocation</name></decl>;</decl_stmt>	<comment type="block">/* POLAR: param location */</comment>
	<decl_stmt><decl><type><name>int</name>		   <modifier>*</modifier></type><name>numParams</name></decl>;</decl_stmt>		<comment type="block">/* number of array entries */</comment>
}</block></struct></type> <name>VarParamState</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>fixed_paramref_hook</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>ParamRef</name> <modifier>*</modifier></type><name>pref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>variable_paramref_hook</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>ParamRef</name> <modifier>*</modifier></type><name>pref</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type><name>variable_coerce_param_hook</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>Param</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
						   <parameter><decl><type><name>Oid</name></type> <name>targetTypeId</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>targetTypeMod</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>check_parameter_resolution_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>query_contains_extern_params_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * Set up to process a query containing references to fixed parameters.
 */</comment>
<function><type><name>void</name></type>
<name>parse_fixed_parameters</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>,
					   <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>paramTypes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numParams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FixedParamState</name> <modifier>*</modifier></type><name>parstate</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FixedParamState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name> <operator>=</operator> <name>paramTypes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name> <operator>=</operator> <name>numParams</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_ref_hook_state</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>parstate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_paramref_hook</name></name> <operator>=</operator> <name>fixed_paramref_hook</name></expr>;</expr_stmt>
	<comment type="block">/* no need to use p_coerce_param_hook */</comment>
</block_content>}</block></function>

<comment type="block">/*
 * Set up to process a query containing references to variable parameters.
 */</comment>
<function><type><name>void</name></type>
<name>parse_variable_parameters</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>,
						  <parameter><decl><type><name>Oid</name> <modifier>*</modifier><modifier>*</modifier></type><name>paramTypes</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>paramLocation</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>numParams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VarParamState</name> <modifier>*</modifier></type><name>parstate</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VarParamState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name> <operator>=</operator> <name>paramTypes</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parstate</name><operator>-&gt;</operator><name>paramLocation</name></name> <operator>=</operator> <name>paramLocation</name></expr>;</expr_stmt> <comment type="block">/* POLAR: param location */</comment>
	<expr_stmt><expr><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name> <operator>=</operator> <name>numParams</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_ref_hook_state</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>parstate</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_paramref_hook</name></name> <operator>=</operator> <name>variable_paramref_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pstate</name><operator>-&gt;</operator><name>p_coerce_param_hook</name></name> <operator>=</operator> <name>variable_coerce_param_hook</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Transform a ParamRef using fixed parameter types.
 */</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type>
<name>fixed_paramref_hook</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>ParamRef</name> <modifier>*</modifier></type><name>pref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FixedParamState</name> <modifier>*</modifier></type><name>parstate</name> <init>= <expr><operator>(</operator><name>FixedParamState</name> <operator>*</operator><operator>)</operator> <name><name>pstate</name><operator>-&gt;</operator><name>p_ref_hook_state</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>paramno</name> <init>= <expr><name><name>pref</name><operator>-&gt;</operator><name>number</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Param</name>	   <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

	<comment type="block">/* Check parameter number is valid */</comment>
	<if_stmt><if>if <condition>(<expr><name>paramno</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>paramno</name> <operator>&gt;</operator> <name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name> <operator>||</operator>
		<operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name><index>[<expr><name>paramno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_PARAMETER</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"there is no parameter $%d"</literal></expr></argument>, <argument><expr><name>paramno</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name><name>pref</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>Param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramkind</name></name> <operator>=</operator> <name>PARAM_EXTERN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramid</name></name> <operator>=</operator> <name>paramno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name> <operator>=</operator> <name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name><index>[<expr><name>paramno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramtypmod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramcollid</name></name> <operator>=</operator> <call><name>get_typcollation</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name><name>pref</name><operator>-&gt;</operator><name>location</name></name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>param</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Transform a ParamRef using variable parameter types.
 *
 * The only difference here is we must enlarge the parameter type array
 * as needed.
 */</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type>
<name>variable_paramref_hook</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>ParamRef</name> <modifier>*</modifier></type><name>pref</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VarParamState</name> <modifier>*</modifier></type><name>parstate</name> <init>= <expr><operator>(</operator><name>VarParamState</name> <operator>*</operator><operator>)</operator> <name><name>pstate</name><operator>-&gt;</operator><name>p_ref_hook_state</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>paramno</name> <init>= <expr><name><name>pref</name><operator>-&gt;</operator><name>number</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>pptype</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Param</name>	   <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>

	<comment type="block">/* Check parameter number is in range */</comment>
	<if_stmt><if>if <condition>(<expr><name>paramno</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>paramno</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_PARAMETER</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"there is no parameter $%d"</literal></expr></argument>, <argument><expr><name>paramno</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name><name>pref</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>paramno</name> <operator>&gt;</operator> <operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Need to enlarge param array */</comment>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name></expr></argument>,
													 <argument><expr><name>paramno</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name> <operator>=</operator> <operator>(</operator><name>Oid</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>paramno</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<comment type="block">/* Zero out the previously-unreferenced slots */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name> <operator>+</operator> <operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name></expr></argument>,
			   <argument><expr><literal type="number">0</literal></expr></argument>,
			   <argument><expr><operator>(</operator><name>paramno</name> <operator>-</operator> <operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* POLAR: param location */</comment>
		<if_stmt><if>if <condition>(<expr><name>polar_enable_audit_log_bind_sql_parameter_new</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Need to enlarge param array */</comment>
			<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramLocation</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramLocation</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>repalloc</name><argument_list>(<argument><expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramLocation</name></name></expr></argument>,
														<argument><expr><name>paramno</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramLocation</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><name>paramno</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
			<comment type="block">/* Zero out the previously-unreferenced slots */</comment>
			<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramLocation</name></name> <operator>+</operator> <operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name></expr></argument>,
				<argument><expr><literal type="number">0</literal></expr></argument>,
				<argument><expr><operator>(</operator><name>paramno</name> <operator>-</operator> <operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name> <operator>=</operator> <name>paramno</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* POLAR: param location */</comment>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_audit_log_bind_sql_parameter_new</name></expr>)</condition> 
	<block>{<block_content>
		<expr_stmt><expr><operator>(</operator><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramLocation</name></name><operator>)</operator><index>[<expr><name>paramno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>pref</name><operator>-&gt;</operator><name>location</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Locate param's slot in array */</comment>
	<expr_stmt><expr><name>pptype</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name><operator>)</operator><index>[<expr><name>paramno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>

	<comment type="block">/* If not seen before, initialize to UNKNOWN type */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>pptype</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>pptype</name> <operator>=</operator> <name>UNKNOWNOID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>makeNode</name><argument_list>(<argument><expr><name>Param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramkind</name></name> <operator>=</operator> <name>PARAM_EXTERN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramid</name></name> <operator>=</operator> <name>paramno</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name> <operator>=</operator> <operator>*</operator><name>pptype</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramtypmod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramcollid</name></name> <operator>=</operator> <call><name>get_typcollation</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name><name>pref</name><operator>-&gt;</operator><name>location</name></name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>param</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Coerce a Param to a query-requested datatype, in the varparams case.
 */</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type>
<name>variable_coerce_param_hook</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>Param</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
						   <parameter><decl><type><name>Oid</name></type> <name>targetTypeId</name></decl></parameter>, <parameter><decl><type><name>int32</name></type> <name>targetTypeMod</name></decl></parameter>,
						   <parameter><decl><type><name>int</name></type> <name>location</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>paramkind</name></name> <operator>==</operator> <name>PARAM_EXTERN</name> <operator>&amp;&amp;</operator> <name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name> <operator>==</operator> <name>UNKNOWNOID</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Input is a Param of previously undetermined type, and we want to
		 * update our knowledge of the Param's type.
		 */</comment>
		<decl_stmt><decl><type><name>VarParamState</name> <modifier>*</modifier></type><name>parstate</name> <init>= <expr><operator>(</operator><name>VarParamState</name> <operator>*</operator><operator>)</operator> <name><name>pstate</name><operator>-&gt;</operator><name>p_ref_hook_state</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name>		   <modifier>*</modifier></type><name>paramTypes</name> <init>= <expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>paramno</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>paramid</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>paramno</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>		<comment type="block">/* shouldn't happen, but... */</comment>
			<name>paramno</name> <operator>&gt;</operator> <operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_PARAMETER</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"there is no parameter $%d"</literal></expr></argument>, <argument><expr><name>paramno</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>paramTypes</name><index>[<expr><name>paramno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>UNKNOWNOID</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* We've successfully resolved the type */</comment>
			<expr_stmt><expr><name><name>paramTypes</name><index>[<expr><name>paramno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>targetTypeId</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>paramTypes</name><index>[<expr><name>paramno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>targetTypeId</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* We previously resolved the type, and it matches */</comment>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/* Oops */</comment>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_AMBIGUOUS_PARAMETER</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"inconsistent types deduced for parameter $%d"</literal></expr></argument>,
							<argument><expr><name>paramno</name></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s versus %s"</literal></expr></argument>,
							   <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>paramTypes</name><index>[<expr><name>paramno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
							   <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name>targetTypeId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name> <operator>=</operator> <name>targetTypeId</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Note: it is tempting here to set the Param's paramtypmod to
		 * targetTypeMod, but that is probably unwise because we have no
		 * infrastructure that enforces that the value delivered for a Param
		 * will match any particular typmod.  Leaving it -1 ensures that a
		 * run-time length check/coercion will occur if needed.
		 */</comment>
		<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramtypmod</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

		<comment type="block">/*
		 * This module always sets a Param's collation to be the default for
		 * its datatype.  If that's not what you want, you should be using the
		 * more general parser substitution hooks.
		 */</comment>
		<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>paramcollid</name></name> <operator>=</operator> <call><name>get_typcollation</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Use the leftmost of the param's and coercion's locations */</comment>
		<if_stmt><if>if <condition>(<expr><name>location</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>location</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>location</name> <operator>&lt;</operator> <name><name>param</name><operator>-&gt;</operator><name>location</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <name>location</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>param</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Else signal to proceed with normal coercion */</comment>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check for consistent assignment of variable parameters after completion
 * of parsing with parse_variable_parameters.
 *
 * Note: this code intentionally does not check that all parameter positions
 * were used, nor that all got non-UNKNOWN types assigned.  Caller of parser
 * should enforce that if it's important.
 */</comment>
<function><type><name>void</name></type>
<name>check_variable_parameters</name><parameter_list>(<parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>, <parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>VarParamState</name> <modifier>*</modifier></type><name>parstate</name> <init>= <expr><operator>(</operator><name>VarParamState</name> <operator>*</operator><operator>)</operator> <name><name>pstate</name><operator>-&gt;</operator><name>p_ref_hook_state</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If numParams is zero then no Params were generated, so no work */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>query_tree_walker</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
								 <argument><expr><name>check_parameter_resolution_walker</name></expr></argument>,
								 <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>pstate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Traverse a fully-analyzed tree to verify that parameter symbols
 * match their types.  We need this because some Params might still
 * be UNKNOWN, if there wasn't anything to force their coercion,
 * and yet other instances seen later might have gotten coerced.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>check_parameter_resolution_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>Param</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Param</name>	   <modifier>*</modifier></type><name>param</name> <init>= <expr><operator>(</operator><name>Param</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>paramkind</name></name> <operator>==</operator> <name>PARAM_EXTERN</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>VarParamState</name> <modifier>*</modifier></type><name>parstate</name> <init>= <expr><operator>(</operator><name>VarParamState</name> <operator>*</operator><operator>)</operator> <name><name>pstate</name><operator>-&gt;</operator><name>p_ref_hook_state</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type>			<name>paramno</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>paramid</name></name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>paramno</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <comment type="block">/* shouldn't happen, but... */</comment>
				<name>paramno</name> <operator>&gt;</operator> <operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>numParams</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_UNDEFINED_PARAMETER</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"there is no parameter $%d"</literal></expr></argument>, <argument><expr><name>paramno</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>paramtype</name></name> <operator>!=</operator> <operator>(</operator><operator>*</operator><name><name>parstate</name><operator>-&gt;</operator><name>paramTypes</name></name><operator>)</operator><index>[<expr><name>paramno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
						<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_AMBIGUOUS_PARAMETER</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not determine data type of parameter $%d"</literal></expr></argument>,
								<argument><expr><name>paramno</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>parser_errposition</name><argument_list>(<argument><expr><name>pstate</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>location</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Recurse into RTE subquery or not-yet-planned sublink subquery */</comment>
		<return>return <expr><call><name>query_tree_walker</name><argument_list>(<argument><expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>,
								 <argument><expr><name>check_parameter_resolution_walker</name></expr></argument>,
								 <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>pstate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>expression_tree_walker</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>check_parameter_resolution_walker</name></expr></argument>,
								  <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>pstate</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Check to see if a fully-parsed query tree contains any PARAM_EXTERN Params.
 */</comment>
<function><type><name>bool</name></type>
<name>query_contains_extern_params</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>query_tree_walker</name><argument_list>(<argument><expr><name>query</name></expr></argument>,
							 <argument><expr><name>query_contains_extern_params_walker</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>query_contains_extern_params_walker</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>Param</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Param</name>	   <modifier>*</modifier></type><name>param</name> <init>= <expr><operator>(</operator><name>Param</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>paramkind</name></name> <operator>==</operator> <name>PARAM_EXTERN</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Recurse into RTE subquery or not-yet-planned sublink subquery */</comment>
		<return>return <expr><call><name>query_tree_walker</name><argument_list>(<argument><expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>,
								 <argument><expr><name>query_contains_extern_params_walker</name></expr></argument>,
								 <argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><call><name>expression_tree_walker</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>query_contains_extern_params_walker</name></expr></argument>,
								  <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
