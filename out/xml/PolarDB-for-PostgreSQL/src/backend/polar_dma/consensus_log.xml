<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/consensus_log.c"><comment type="block" format="doxygen">/**
 * consensus_log.c
 * 	Implementation of concensus log writer
 *
 * Copyright (c) 2021, Alibaba Group Holding Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * IDENTIFICATION
 * 	src/backend/polar_dma/consensus_log.c
 *
 *-------------------------------------------------------------------------
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_consensus_c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/file_perm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_dma/polar_dma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_dma/consensus_repl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_dma/consensus_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"polar_dma/consensus_slru.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_crc32c.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/polar_fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>


<typedef>typedef <type><struct>struct <name>ConsensusMetaCtlData</name>
<block>{
	<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> <name>lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ConsensusMetaHeader</name></type> <name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>member_info_array</name><index>[<expr><name>MEMBER_INFO_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> 		<name><name>learner_info_array</name><index>[<expr><name>MEMBER_INFO_MAX_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>member_info_str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> 		<modifier>*</modifier></type><name>learner_info_str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>vfs_mgr</name> <modifier>*</modifier></type><name>vfs_api</name></decl>;</decl_stmt>

}</block></struct></type> <name>ConsensusMetaCtlData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ConsensusLogCtlData</name>
<block>{
	<decl_stmt><decl><type><name>uint64</name></type> 	<name>variable_length_log_next_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> <name>fixed_length_log_lock</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> <name>variable_length_log_lock</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint64</name></type> 	<name>current_term</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> 	<name>term_lock</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint64</name></type>  <name>current_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>  <name>sync_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>last_write_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type> <name>last_write_timeline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>  <name>last_append_term</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 	<name>next_append_term</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>disable_purge</name></decl>;</decl_stmt> <comment type="block">/* disable Consensus Log truncate backward */</comment>
	<decl_stmt><decl><type><name>uint64</name></type>  <name>mock_start_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_rwlock_t</name></type> 	<name>info_lock</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U32_SIMULATION</name></cpp:ifndef> 
	<decl_stmt><decl><type><name>pg_atomic_uint32</name></type>	<name>log_keep_size</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><name>uint32</name></type>	<name>log_keep_size</name></decl>;</decl_stmt> <comment type="block">/* Protected by _info_lock */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>pg_atomic_uint64</name></type> <name>log_reads</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_atomic_uint64</name></type> <name>variable_log_reads</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_atomic_uint64</name></type> <name>log_appends</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_atomic_uint64</name></type> <name>variable_log_appends</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_atomic_uint64</name></type> <name>log_flushes</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_atomic_uint64</name></type> <name>meta_flushes</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_atomic_uint64</name></type> <name>xlog_flush_tries</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_atomic_uint64</name></type> <name>xlog_flush_failed_tries</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_atomic_uint64</name></type> <name>xlog_transit_waits</name></decl>;</decl_stmt>
	}</block> <decl><name>stats</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>ConsensusLogCtlData</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FixedLengthLogIndexToPage</name><parameter_list>(<parameter><type><name>log_index</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((log_index - 1) / FIXED_LENGTH_LOGS_PER_PAGE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FixedLengthLogIndexToEntry</name><parameter_list>(<parameter><type><name>log_index</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((log_index - 1) % FIXED_LENGTH_LOGS_PER_PAGE)</cpp:value></cpp:define>

<comment type="block">/* We store the latest LSN for each group of log index */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXED_LENGTH_LOGS_PER_LSN_GROUP</name></cpp:macro>	<cpp:value>8</cpp:value></cpp:define>	<comment type="block">/* keep this a power of 2 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIXED_LENGTH_LOG_LSNS_PER_PAGE</name></cpp:macro>	<cpp:value>(FIXED_LENGTH_LOGS_PER_PAGE / FIXED_LENGTH_LOGS_PER_LSN_GROUP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetLSNIndex</name><parameter_list>(<parameter><type><name>slotno</name></type></parameter>, <parameter><type><name>logindex</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>((slotno) * FIXED_LENGTH_LOG_LSNS_PER_PAGE + \
	((logindex) % FIXED_LENGTH_LOG_LSNS_PER_PAGE) / FIXED_LENGTH_LOGS_PER_LSN_GROUP )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VariableLengthLogOffsetToPage</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((offset) / CONSENSUS_CC_LOG_PAGE_SIZE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VariableLengthLogOffsetToPos</name><parameter_list>(<parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>((offset) % CONSENSUS_CC_LOG_PAGE_SIZE)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>ConsensusMetaCtlData</name> <modifier>*</modifier></type><name>ConsensusMetaCtl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ConsensusLogCtlData</name> <modifier>*</modifier></type><name>ConsensusLogCtl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>ConsensusSlruCtlData</name></type> <name>ConsensusFixedLengthLogCtlData</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>ConsensusSlruCtlData</name></type> <name>ConsensusVariableLengthLogCtlData</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ConsensusFixedLengthLogCtl</name></cpp:macro>	<cpp:value>(&amp;ConsensusFixedLengthLogCtlData)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ConsensusVariableLengthLogCtl</name></cpp:macro>	<cpp:value>(&amp;ConsensusVariableLengthLogCtlData)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>consensus_log_try_flush_fixed_length_page</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slotno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>consensus_meta_dir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>subdir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>consensus_meta_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>subdir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>consensus_meta_flush_internal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint64</name></type> <name>consensus_log_get_variable_length_offset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>consensus_log_stats_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>log_reads</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>variable_log_reads</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>log_appends</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>variable_log_appends</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>log_flushes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>meta_flushes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>xlog_flush_tries</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>xlog_flush_failed_tries</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pg_atomic_init_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>xlog_transit_waits</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusLogGetStats</name><parameter_list>(<parameter><decl><type><name>ConsensusLogStats</name> <modifier>*</modifier></type><name>log_stats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
	<expr_stmt><expr><name><name>log_stats</name><operator>-&gt;</operator><name>log_reads</name></name> <operator>=</operator>
		<call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>log_reads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_stats</name><operator>-&gt;</operator><name>variable_log_reads</name></name> <operator>=</operator>
		<call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>variable_log_reads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_stats</name><operator>-&gt;</operator><name>log_appends</name></name> <operator>=</operator>
		<call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>log_appends</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_stats</name><operator>-&gt;</operator><name>variable_log_appends</name></name> <operator>=</operator>
		<call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>variable_log_appends</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_stats</name><operator>-&gt;</operator><name>log_flushes</name></name> <operator>=</operator>
		<call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>log_flushes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_stats</name><operator>-&gt;</operator><name>meta_flushes</name></name> <operator>=</operator>
		<call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>meta_flushes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_stats</name><operator>-&gt;</operator><name>xlog_flush_tries</name></name> <operator>=</operator>
		<call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>xlog_flush_tries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_stats</name><operator>-&gt;</operator><name>xlog_flush_failed_tries</name></name> <operator>=</operator>
		<call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>xlog_flush_failed_tries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_stats</name><operator>-&gt;</operator><name>xlog_transit_waits</name></name> <operator>=</operator>
		<call><name>pg_atomic_read_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>xlog_transit_waits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>log_stats</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogStats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusLogGetStatus</name><parameter_list>(<parameter><decl><type><name>ConsensusLogStatus</name> <modifier>*</modifier></type><name>log_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_status</name><operator>-&gt;</operator><name>current_index</name></name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_index</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_status</name><operator>-&gt;</operator><name>sync_index</name></name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>sync_index</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_status</name><operator>-&gt;</operator><name>last_write_lsn</name></name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_lsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_status</name><operator>-&gt;</operator><name>last_write_timeline</name></name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_timeline</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_status</name><operator>-&gt;</operator><name>last_append_term</name></name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_append_term</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_status</name><operator>-&gt;</operator><name>next_append_term</name></name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>next_append_term</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_status</name><operator>-&gt;</operator><name>disable_purge</name></name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>disable_purge</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>log_status</name><operator>-&gt;</operator><name>current_term</name></name> <operator>=</operator> <call><name>ConsensusLOGGetTerm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_status</name><operator>-&gt;</operator><name>variable_length_log_next_offset</name></name> <operator>=</operator>
		<call><name>consensus_log_get_variable_length_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusMetaGetStatus</name><parameter_list>(<parameter><decl><type><name>ConsensusMetaStatus</name> <modifier>*</modifier></type><name>meta_status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta_status</name><operator>-&gt;</operator><name>current_term</name></name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>current_term</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta_status</name><operator>-&gt;</operator><name>vote_for</name></name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vote_for</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta_status</name><operator>-&gt;</operator><name>last_leader_term</name></name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>last_leader_term</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta_status</name><operator>-&gt;</operator><name>last_leader_log_index</name></name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>last_leader_log_index</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta_status</name><operator>-&gt;</operator><name>scan_index</name></name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>scan_index</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta_status</name><operator>-&gt;</operator><name>cluster_id</name></name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cluster_id</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta_status</name><operator>-&gt;</operator><name>commit_index</name></name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>commit_index</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>meta_status</name><operator>-&gt;</operator><name>purge_index</name></name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>purge_index</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Initialization of shared memory for CLOG
 */</comment>
<function><type><name>Size</name></type>
<name>ConsensusLOGShmemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>sz</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>ConsensusSimpleLruShmemSize</name><argument_list>(<argument><expr><name>polar_dma_log_slots</name></expr></argument>,
															 <argument><expr><name>CONSENSUS_LOG_PAGE_SIZE</name></expr></argument>, <argument><expr><name>FIXED_LENGTH_LOG_LSNS_PER_PAGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><call><name>ConsensusSimpleLruShmemSize</name><argument_list>(<argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>CONSENSUS_CC_LOG_PAGE_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogCtlData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusMetaCtlData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>sz</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusLOGShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type>		<name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> 		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_rwlockattr_t</name></type> <name>lock_attr</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_rwlockattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlockattr_setpshared</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>,<argument><expr><name>PTHREAD_PROCESS_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>easy_debug_log</name><argument_list>(<argument><expr><literal type="string">"Shared Memory Init for Consensus Service Log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Initialize our shared state struct */</comment>
	<expr_stmt><expr><name>ConsensusLogCtl</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Shared Consensus Log State"</literal></expr></argument>,
									 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogCtlData</name></expr></argument>)</argument_list></sizeof></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Make sure we zero out the per-backend state */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>ConsensusLogCtl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogCtlData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>consensus_log_stats_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>ConsensusMetaCtl</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Shared Consensus Meta State"</literal></expr></argument>,
									 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusMetaCtlData</name></expr></argument>)</argument_list></sizeof></expr></argument>,
									 <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Make sure we zero out the per-backend state */</comment>
		<expr_stmt><expr><call><name>MemSet</name><argument_list>(<argument><expr><name>ConsensusMetaCtl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusMetaCtlData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>consensus_meta_dir</name><argument_list>(<argument><expr><literal type="string">"polar_dma"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name></name> <operator>=</operator> <call><name>polar_vfs_mgr</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pthread_rwlock_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>ConsensusSlruStatsInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ConsensusSimpleLruInit</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>,
				  <argument><expr><literal type="string">"consensus_log"</literal></expr></argument>, <argument><expr><name>CONSENSUS_LOG_PAGE_SIZE</name></expr></argument>, <argument><expr><name>polar_dma_log_slots</name></expr></argument>,
					<argument><expr><name>FIXED_LENGTH_LOG_LSNS_PER_PAGE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>,
					<argument><expr><name>consensus_log_try_flush_fixed_length_page</name></expr></argument>,
					<argument><expr><literal type="string">"polar_dma/consensus_log"</literal></expr></argument>,
				  <argument><expr><name>polar_enable_shared_storage_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ConsensusSimpleLruInit</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>,
				  <argument><expr><literal type="string">"consensus_cc_log"</literal></expr></argument>, <argument><expr><name>CONSENSUS_CC_LOG_PAGE_SIZE</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>,
					<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					<argument><expr><literal type="string">"polar_dma/consensus_cc_log"</literal></expr></argument>,
				  <argument><expr><name>polar_enable_shared_storage_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * This func must be called ONCE on system install.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>consensus_log_validate_dir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ConsensusSimpleLruValidateDir</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ConsensusSimpleLruValidateDir</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ConsensusLOGStartup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> 	<name>pageno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slotno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>page_header_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 	<name>last_commit_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 	<name>last_log_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>last_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>  <name>last_write_lsn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type> <name>last_write_timeline</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>  <name>last_append_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ConsensusLogEntry</name> <modifier>*</modifier></type><name>log_entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FixedLengthLogPageTrailer</name> <modifier>*</modifier></type><name>page_trailer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>mock_start_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>mock_start_tli</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>mock_start_lsn</name> <init>= <expr><name>InvalidXLogRecPtr</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>consensus_log_validate_dir</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>ConsensusMetaGetInt64</name><argument_list>(<argument><expr><name>CommitIndexMetaKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last_commit_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ConsensusMetaGetInt64</name><argument_list>(<argument><expr><name>MockStartIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mock_start_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ConsensusMetaGetInt64</name><argument_list>(<argument><expr><name>MockStartTLI</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mock_start_tli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ConsensusMetaGetInt64</name><argument_list>(<argument><expr><name>MockStartLSN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mock_start_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>last_commit_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>pageno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>pageno</name> <operator>=</operator> <call><name>FixedLengthLogIndexToPage</name><argument_list>(<argument><expr><name>last_commit_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<do>do
	<block>{<block_content>
		<expr_stmt><expr><name>slotno</name> <operator>=</operator> <call><name>ConsensusSimpleLruReadPage_ReadOnly</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>slotno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>page_header_ptr</name> <operator>=</operator> <name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>page_trailer</name> <operator>=</operator> <operator>(</operator><name>FixedLengthLogPageTrailer</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
				<name>CONSENSUS_LOG_PAGE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FixedLengthLogPageTrailer</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>last_log_index</name> <operator>=</operator> <name>pageno</name> <operator>*</operator> <name>FIXED_LENGTH_LOGS_PER_PAGE</name> <operator>+</operator> <name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_offset</name> <operator>=</operator> <name><name>page_trailer</name><operator>-&gt;</operator><name>end_offset</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>log_entry</name> <operator>=</operator> <operator>(</operator><name>ConsensusLogEntry</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
				<operator>(</operator><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_write_lsn</name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>log_lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_write_timeline</name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>log_timeline</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_append_term</name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>log_term</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>latest_page_number</name></name> <operator>=</operator> <name>pageno</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>pageno</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>==</operator> <name>FIXED_LENGTH_LOGS_PER_PAGE</name></expr>)</condition>;</do>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>latest_page_number</name></name> <operator>=</operator>
		<call><name>VariableLengthLogOffsetToPage</name><argument_list>(<argument><expr><name>last_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_next_offset</name></name> <operator>=</operator> <name>last_offset</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>last_log_index</name> <operator>&gt;=</operator> <name>mock_start_index</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>sync_index</name></name> <operator>=</operator> <name>last_log_index</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_index</name></name> <operator>=</operator> <name>last_log_index</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_lsn</name></name> <operator>=</operator> <name>last_write_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_timeline</name></name> <operator>=</operator> <name>last_write_timeline</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_append_term</name></name> <operator>=</operator> <name>last_append_term</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>mock_start_index</name></name> <operator>=</operator> <name>mock_start_index</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>sync_index</name></name> <operator>=</operator> <ternary><condition><expr><name>mock_start_index</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>mock_start_index</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_index</name></name> <operator>=</operator> <name>mock_start_index</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_lsn</name></name> <operator>=</operator> <name>mock_start_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_timeline</name></name> <operator>=</operator> <operator>(</operator><name>uint32</name><operator>)</operator><name>mock_start_tli</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_append_term</name></name> <operator>=</operator> <name>last_append_term</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>mock_start_index</name></name> <operator>=</operator> <name>mock_start_index</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>last_commit_index</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>last_log_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log startup failed, could not read "</literal>
				<literal type="string">"last committed index %llu from consensus log"</literal></expr></argument>, <argument><expr><name>last_commit_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log startup finished, last_log_index: %llu, last_write_lsn: %X/%X, "</literal>
			<literal type="string">"last_write_timeline: %u, last_append_term: %llu, last_offset: %llu, "</literal>
			<literal type="string">"mock_start_index: %llu, mock_start_lsn: %X/%X, mock_start_timeline: %u"</literal></expr></argument>,
			<argument><expr><name>pageno</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>last_write_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>last_write_lsn</name></expr></argument>,
			<argument><expr><name>last_write_timeline</name></expr></argument>, <argument><expr><name>last_append_term</name></expr></argument>, <argument><expr><name>last_offset</name></expr></argument>,
			<argument><expr><name>mock_start_index</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>mock_start_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>mock_start_lsn</name></expr></argument>,
			<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator><name>mock_start_tli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusLOGNormalPayloadInit</name><parameter_list>(<parameter><decl><type><name>ConsensusLogPayload</name> <modifier>*</modifier></type><name>log_payload</name></decl></parameter>,
		<parameter><decl><type><name>XLogRecPtr</name></type> <name>log_lsn</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name></type> <name>log_timeline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_lsn</name></name> <operator>=</operator> <name>log_lsn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_timeline</name></name> <operator>=</operator> <name>log_timeline</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>consensus_log_append_fixed_length_log</name><parameter_list>(<parameter><decl><type><name>ConsensusLogEntry</name> <modifier>*</modifier></type><name>log_entry</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>mock_start_index</name></decl></parameter>,
		<parameter><decl><type><name>uint64</name></type> <name>last_term</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name></type> <name>last_timeline</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name></type> <name>last_lsn</name></decl></parameter>,
		<parameter><decl><type><name>uint64</name></type> <name>start_offset</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>end_offset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>pageno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>log_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>entryno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slotno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ConsensusLogEntry</name> <modifier>*</modifier></type><name>log_entry_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>page_header_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FixedLengthLogPageTrailer</name> <modifier>*</modifier></type><name>page_trailer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32c</name></type>	<name>crc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> 		<name>ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>log_entry</name><operator>)</operator></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>, <argument><expr><name>log_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>log_entry</name><operator>-&gt;</operator><name>log_crc</name></name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>log_index</name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>log_index</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pageno</name> <operator>=</operator> <call><name>FixedLengthLogIndexToPage</name><argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>entryno</name> <operator>=</operator> <call><name>FixedLengthLogIndexToEntry</name><argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log append fixed entry, log index: %llu, pageno: %llu, entryno :%d"</literal></expr></argument>,
			<argument><expr><name>log_index</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>entryno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* extend new page */</comment>
	<if_stmt><if>if <condition>(<expr><name>entryno</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mock_start_index</name> <operator>==</operator> <name>log_index</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>slotno</name> <operator>=</operator> <call><name>ConsensusSimpleLruZeroPage</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>page_header_ptr</name> <operator>=</operator> <name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>page_trailer</name> <operator>=</operator> <operator>(</operator><name>FixedLengthLogPageTrailer</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
				<name>CONSENSUS_LOG_PAGE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FixedLengthLogPageTrailer</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>page_trailer</name><operator>-&gt;</operator><name>last_term</name></name> <operator>=</operator> <name>last_term</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>page_trailer</name><operator>-&gt;</operator><name>start_lsn</name></name> <operator>=</operator> <name>last_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>page_trailer</name><operator>-&gt;</operator><name>start_timeline</name></name> <operator>=</operator> <name>last_timeline</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>page_trailer</name><operator>-&gt;</operator><name>start_offset</name></name> <operator>=</operator> <name>start_offset</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus fixed length log new page %llu, last_term: %llu, start_lsn: %X/%X, "</literal>
				<literal type="string">"start_timeline: %u, start_offset: %llu"</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>last_term</name></expr></argument>,
				<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>last_lsn</name><operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>last_lsn</name></expr></argument>, <argument><expr><name>last_timeline</name></expr></argument>, <argument><expr><name>start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>

		<expr_stmt><expr><name>slotno</name> <operator>=</operator> <call><name>ConsensusSimpleLruReadPage</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>slotno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"could not read block %llu of consensus log \"%s\""</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>,
					<argument><expr><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>page_header_ptr</name> <operator>=</operator> <name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>page_trailer</name> <operator>=</operator> <operator>(</operator><name>FixedLengthLogPageTrailer</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
				<name>CONSENSUS_LOG_PAGE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FixedLengthLogPageTrailer</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>=</operator> <name>entryno</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>page_trailer</name><operator>-&gt;</operator><name>end_offset</name></name> <operator>=</operator> <name>end_offset</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>log_entry_ptr</name> <operator>=</operator> <operator>(</operator><name>ConsensusLogEntry</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
																			<name>entryno</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>log_entry_ptr</name></expr></argument>, <argument><expr><name>log_entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>consensus_slru_push_dirty</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>slotno</name></expr></argument>,
							<argument><expr><name>entryno</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>||</operator> <name>mock_start_index</name> <operator>==</operator> <name>log_index</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ConsensusSimpleLruWritePage</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, 
							<argument><expr><name>slotno</name></expr></argument>, <argument><expr><operator>(</operator><name>mock_start_index</name> <operator>==</operator> <name>log_index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"could not write block %llu of consensus log \"%s\""</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>,
											<argument><expr><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>consensus_log_append_variable_length_log</name><parameter_list>(
		<parameter><decl><type><name>ConsensusLogPayload</name> <modifier>*</modifier></type><name>log_payload</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>log_index</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>mock_start_index</name></decl></parameter>,
		<parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>, <parameter><decl><type><name>uint32</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>pageno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slotno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>page_leftsize</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cur_pos</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>cc_log_entry</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>log_index_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32c</name></type>	<name>crc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type>		<name>ok</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer</name></name></expr></argument>,
			<argument><expr><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer_size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_next_offset</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pageno</name> <operator>=</operator> <call><name>VariableLengthLogOffsetToPage</name><argument_list>(<argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <call><name>VariableLengthLogOffsetToPos</name><argument_list>(<argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>page_leftsize</name> <operator>=</operator> <name>CONSENSUS_CC_LOG_PAGE_SIZE</name> <operator>-</operator> <name>cur_pos</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<comment type="block">/* not enough free space on current page */</comment>
	<if_stmt><if>if <condition>(<expr><name>page_leftsize</name> <operator>&lt;</operator> <operator>*</operator><name>length</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>pageno</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name>pageno</name> <operator>*</operator> <name>CONSENSUS_CC_LOG_PAGE_SIZE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>page_leftsize</name> <operator>=</operator> <name>CONSENSUS_CC_LOG_PAGE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><name>length</name> <operator>&lt;=</operator> <name>page_leftsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cur_pos</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>log_index</name> <operator>==</operator> <name>mock_start_index</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ConsensusSimpleLruZeroPage</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus variable length log extend new page %llu"</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log append variable length entry, log index: %llu, offset: %d"</literal></expr></argument>,
			<argument><expr><name>log_index</name></expr></argument>, <argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>slotno</name> <operator>=</operator> <call><name>ConsensusSimpleLruReadPage</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slotno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"could not read block %llu of consensus log \"%s\""</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>,
				<argument><expr><name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>cc_log_entry</name> <operator>=</operator> <name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name> <operator>+</operator> <name>cur_pos</name></expr>;</expr_stmt>
	<comment type="block">/* last log index ptr at the page trailer */</comment>
	<expr_stmt><expr><name>log_index_ptr</name> <operator>=</operator> <name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name> <operator>+</operator>
															<name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>szblock</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cc_log_entry</name></expr></argument>, <argument><expr><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cc_log_entry</name> <operator>+</operator> <name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>crc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>log_index_ptr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_index</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>consensus_slru_push_dirty</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>, <argument><expr><name>slotno</name></expr></argument>, <argument><expr><name>cur_pos</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ConsensusSimpleLruWritePage</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>,
							<argument><expr><name>slotno</name></expr></argument>, <argument><expr><operator>(</operator><name>mock_start_index</name> <operator>==</operator> <name>log_index</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"could not write block %llu of consensus log \"%s\""</literal></expr></argument>,
				<argument><expr><name>pageno</name></expr></argument>, <argument><expr><name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_next_offset</name></name> <operator>=</operator> <operator>*</operator><name>offset</name> <operator>+</operator> <operator>*</operator><name>length</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * This func must be called by consensus append thread.
 */</comment>
<function><type><name>bool</name></type> <name>ConsensusLOGAppend</name><parameter_list>(<parameter><decl><type><name>ConsensusLogEntryHeader</name> <modifier>*</modifier></type><name>log_entry_header</name></decl></parameter>,
								<parameter><decl><type><name>ConsensusLogPayload</name> <modifier>*</modifier></type><name>log_payload</name></decl></parameter>, <parameter><decl><type><name>uint64</name><modifier>*</modifier></type> <name>consensus_index</name></decl></parameter>,
								<parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>check_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>log_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>mock_start_index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>last_term</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type> <name>last_timeline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type> <name>current_timeline</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>last_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> 	<name>current_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ConsensusLogEntry</name></type> <name>log_entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> 		<name>ok</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> 		<name>fixed_length</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 		<name>xlog_term</name> <init>= <expr><call><name>ConsensusGetXLogTerm</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 		<name>offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 		<name>end_offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>fixed_length</name> <operator>=</operator> <call><name>CONSENSUS_ENTRY_IS_FIXED</name><argument_list>(<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>log_index</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_index</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>last_term</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_append_term</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>current_lsn</name> <operator>=</operator> <name>last_lsn</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_lsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>current_timeline</name> <operator>=</operator> <name>last_timeline</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_timeline</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>mock_start_index</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>mock_start_index</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name> <operator>&gt;</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>next_append_term</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>next_append_term</name></name> <operator>=</operator> <name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name> <operator>&lt;</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>next_append_term</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* For logger, if it degrade immediately after became leader and 
		 * new leader's log is newer than it, the log term will reverse*/</comment>
		<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log term reversed, current append term: %llu, "</literal>
				<literal type="string">"log term: %llu"</literal></expr></argument>, <argument><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>next_append_term</name></name></expr></argument>, 
				<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>next_append_term</name></name> <operator>=</operator> <name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>op_type</name></name> <operator>==</operator> <name>ConsensusEntryNormalType</name> <operator>&amp;&amp;</operator>
		<name>xlog_term</name> <operator>!=</operator> <name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
		<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>xlog_transit_waits</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log term check failed, current xlog term: %llu, "</literal>
				<literal type="string">"log term: %llu"</literal></expr></argument>, <argument><expr><name>xlog_term</name></expr></argument>, <argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_index</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>log_entry_header</name><operator>-&gt;</operator><name>log_index</name></name> <operator>!=</operator> <name>log_index</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log index check failed, current log index: %llu, "</literal>
				<literal type="string">"entry log index: %llu"</literal></expr></argument>, <argument><expr><name>log_index</name></expr></argument>, <argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>fixed_length</name> <operator>&amp;&amp;</operator> <name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_lsn</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>current_lsn</name> <operator>=</operator> <name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>current_timeline</name> <operator>=</operator> <name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_timeline</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>check_lsn</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>current_lsn</name> <operator>!=</operator> <name>InvalidXLogRecPtr</name> <operator>&amp;&amp;</operator>
				<operator>!</operator><call><name>consensus_check_physical_flush_lsn</name><argument_list>(<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr></argument>,
					<argument><expr><name>current_lsn</name></expr></argument>, <argument><expr><name>current_timeline</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Timeout for wait WAL flush at %X/%X, current term: %llu"</literal></expr></argument>,
								<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name>current_lsn</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>current_lsn</name></expr></argument>,
								<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>log_appends</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_index</name></name> <operator>=</operator> <name>log_index</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fixed_length</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>length</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
		<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>variable_log_appends</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>consensus_log_append_variable_length_log</name><argument_list>(<argument><expr><name>log_payload</name></expr></argument>, <argument><expr><name>log_index</name></expr></argument>, <argument><expr><name>mock_start_index</name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>log_entry</name><operator>.</operator><name>variable_offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>log_entry</name><operator>.</operator><name>variable_length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>end_offset</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name>length</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>end_offset</name> <operator>=</operator> <call><name>consensus_log_get_variable_length_offset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>log_entry</name><operator>.</operator><name>variable_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>log_entry</name><operator>.</operator><name>variable_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fixed_length</name> <operator>||</operator> <name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_lsn</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>log_entry</name><operator>.</operator><name>log_lsn</name></name> <operator>=</operator> <name>current_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>log_entry</name><operator>.</operator><name>log_timeline</name></name> <operator>=</operator> <name>current_timeline</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name><name>log_entry</name><operator>.</operator><name>log_lsn</name></name> <operator>=</operator> <name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>log_entry</name><operator>.</operator><name>log_timeline</name></name> <operator>=</operator> <name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_timeline</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><name><name>log_entry</name><operator>.</operator><name>header</name></name> <operator>=</operator> <operator>*</operator><name>log_entry_header</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>consensus_log_append_fixed_length_log</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_entry</name></expr></argument>, <argument><expr><name>mock_start_index</name></expr></argument>,
				<argument><expr><name>last_term</name></expr></argument>, <argument><expr><name>last_timeline</name></expr></argument>, <argument><expr><name>last_lsn</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>end_offset</name></expr></argument>, <argument><expr><name>flush</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>consensus_index</name> <operator>=</operator> <name>log_index</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_index</name></name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>flush</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>sync_index</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>fixed_length</name> <operator>&amp;&amp;</operator> <name><name>log_entry</name><operator>.</operator><name>log_lsn</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_lsn</name></name> <operator>=</operator> <name>current_lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_timeline</name></name> <operator>=</operator> <name>current_timeline</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_append_term</name></name> <operator>=</operator> <name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"consensus log append success, term: %llu, log index: %llu, "</literal>
			<literal type="string">"log type: %d, lsn: %X/%X, timeline: %u"</literal></expr></argument>, <argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr></argument>,
			<argument><expr><name>log_index</name></expr></argument>, <argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>log_entry</name><operator>.</operator><name>log_lsn</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>log_entry</name><operator>.</operator><name>log_lsn</name></name></expr></argument>,
			<argument><expr><name><name>log_entry</name><operator>.</operator><name>log_timeline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ConsensusLOGFlush</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>pageno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> 	<name>ok</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 	<name>sync_index</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type>	<name>last_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TimeLineID</name></type> 	<name>last_timeline</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_ASSERT_CHECKING</name></cpp:ifdef>
	<expr_stmt><expr><name>last_lsn</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_lsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>last_timeline</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_timeline</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>last_lsn</name> <operator>==</operator> <name>InvalidXLogRecPtr</name> <operator>||</operator>
			<call><name>consensus_check_physical_flush_lsn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>last_lsn</name></expr></argument>, <argument><expr><name>last_timeline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>log_flushes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>ConsensusSimpleLruFlush</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>sync_index</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>sync_index</name></name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log flush %s, synced log index: %llu"</literal></expr></argument>,
			<argument><expr><ternary><condition><expr><name>ok</name></expr> ?</condition><then> <expr><literal type="string">"sucess"</literal></expr> </then><else>: <expr><literal type="string">"failed"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>sync_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Note: for variable length log entry, caller must free the buffer manually
 */</comment>
<function><type><name>bool</name></type> <name>ConsensusLOGRead</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>log_index</name></decl></parameter>,
											<parameter><decl><type><name>ConsensusLogEntryHeader</name> <modifier>*</modifier></type><name>log_entry_header</name></decl></parameter>,
											<parameter><decl><type><name>ConsensusLogPayload</name> <modifier>*</modifier></type><name>log_payload</name></decl></parameter>,
											<parameter><decl><type><name>bool</name></type> <name>fixed_payload</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>pageno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>entryno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slotno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ConsensusLogEntry</name> <modifier>*</modifier></type><name>log_entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32c</name></type>	<name>crc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>log_index</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>log_index</name> <operator>&gt;=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_index</name></name> <operator>||</operator> 
		<name>log_index</name> <operator>&lt;</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>mock_start_index</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>log_reads</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>pageno</name> <operator>=</operator> <call><name>FixedLengthLogIndexToPage</name><argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>entryno</name> <operator>=</operator> <call><name>FixedLengthLogIndexToEntry</name><argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>slotno</name> <operator>=</operator> <call><name>ConsensusSimpleLruReadPage_ReadOnly</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slotno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Could not read block %llu of consensus log \"%s\" for log index: %llu"</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>,
									 <argument><expr><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>, <argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>log_entry</name> <operator>=</operator> <operator>(</operator><name>ConsensusLogEntry</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name> <operator>+</operator>
									<name>entryno</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>log_entry_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>log_entry</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntryHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>fixed_payload</name> <operator>||</operator> <call><name>CONSENSUS_ENTRY_IS_FIXED</name><argument_list>(<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_lsn</name></name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>log_lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_timeline</name></name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>log_timeline</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log read fixed log entry success, term: %llu, log index: %llu, "</literal>
			<literal type="string">"log type: %d, lsn: %X/%X, timeline: %u"</literal></expr></argument>, <argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr></argument>, <argument><expr><name>log_index</name></expr></argument>,
			<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>,
			<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <operator>(</operator><name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_lsn</name></name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,
			<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_lsn</name></name></expr></argument>,
			<argument><expr><name><name>log_payload</name><operator>-&gt;</operator><name>fixed_value</name><operator>.</operator><name>log_timeline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>log_entry</name><operator>)</operator></expr></argument>, <argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>, <argument><expr><name>log_crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>log_entry</name><operator>-&gt;</operator><name>log_crc</name></name> <operator>!=</operator> <name>crc</name></expr>)</condition>
	<block>{<block_content>
			<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Incorrect checksum in log index %llu of consensus log \"%s\""</literal></expr></argument>,
										 <argument><expr><name>log_index</name></expr></argument>, <argument><expr><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fixed_payload</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>CONSENSUS_ENTRY_IS_FIXED</name><argument_list>(<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>page_ptr</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cc_log_entry</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> 	<name>offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type>	<name>length</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type>			<name>cur_pos</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pg_crc32c</name></type>	<name>log_crc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> 		<modifier>*</modifier></type><name>cc_log_buffer</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>cc_log_buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>log_entry</name><operator>-&gt;</operator><name>variable_length</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>cc_log_buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Out of memory while read log entry %llu of consensus log \"%s\""</literal></expr></argument>,
										 <argument><expr><name>log_index</name></expr></argument>, <argument><expr><name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
		<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>variable_log_reads</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>variable_offset</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>variable_length</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pageno</name> <operator>=</operator> <call><name>VariableLengthLogOffsetToPage</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur_pos</name> <operator>=</operator> <call><name>VariableLengthLogOffsetToPos</name><argument_list>(<argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>length</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>log_crc</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>length</name> <operator>&lt;</operator>
					<name>CONSENSUS_CC_LOG_PAGE_SIZE</name> <operator>-</operator> <name>cur_pos</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>slotno</name> <operator>=</operator>  <call><name>ConsensusSimpleLruReadPage_ReadOnly</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>slotno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Could not read block %llu of consensus log \"%s\""</literal></expr></argument>,
							<argument><expr><name>pageno</name></expr></argument>, <argument><expr><name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cc_log_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>page_ptr</name> <operator>=</operator> <name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc_log_entry</name> <operator>=</operator> <name>page_ptr</name> <operator>+</operator> <name>cur_pos</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer_size</name></name> <operator>=</operator> <name>length</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>log_crc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <name>cc_log_buffer</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>cc_log_entry</name></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>log_crc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>log_crc</name></expr></argument>, <argument><expr><name>cc_log_entry</name> <operator>+</operator> <name>length</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>log_crc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>log_crc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log read variable log entry success, term: %llu, log index: %llu, "</literal>
				<literal type="string">"log type: %d, length: %d"</literal></expr></argument>, <argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr></argument>, <argument><expr><name>log_index</name></expr></argument>,
				<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>, <argument><expr><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer</name></name></expr></argument>,
								<argument><expr><name><name>log_payload</name><operator>-&gt;</operator><name>variable_value</name><operator>.</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>log_crc</name> <operator>!=</operator> <name>crc</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Incorrect checksum in log index %llu of consensus log \"%s\""</literal></expr></argument>,
							<argument><expr><name>log_index</name></expr></argument>, <argument><expr><name><name>ConsensusVariableLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cc_log_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log read success, term: %llu, log index: %llu, log type: %d"</literal></expr></argument>,
			<argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>log_term</name></name></expr></argument>, <argument><expr><name>log_index</name></expr></argument>, <argument><expr><name><name>log_entry_header</name><operator>-&gt;</operator><name>op_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>consensus_log_get_entry_lsn</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>log_index</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>lsn</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name> <modifier>*</modifier></type><name>tli</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ConsensusLogEntryHeader</name></type> <name>log_entry_header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ConsensusLogPayload</name></type> <name>log_entry_payload</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>log_index</name> <operator>==</operator><literal type="number">0</literal> <operator>||</operator>
			<operator>!</operator><call><name>ConsensusLOGRead</name><argument_list>(<argument><expr><name>log_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_entry_header</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_entry_payload</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>lsn</name> <operator>=</operator> <name>InvalidXLogRecPtr</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>tli</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>lsn</name> <operator>=</operator> <name><name>log_entry_payload</name><operator>.</operator><name>fixed_value</name><operator>.</operator><name>log_lsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>tli</name> <operator>=</operator> <name><name>log_entry_payload</name><operator>.</operator><name>fixed_value</name><operator>.</operator><name>log_timeline</name></name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>consensus_log_get_variable_length_offset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>offset</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_next_offset</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>offset</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * fixed_length_log_lock must be held at entry, and will be held at exit.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>consensus_log_get_page_start_offset</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>pageno</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>start_offset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>slotno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>page_header_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FixedLengthLogPageTrailer</name> <modifier>*</modifier></type><name>page_trailer</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>slotno</name> <operator>=</operator> <call><name>ConsensusSimpleLruReadPage</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slotno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"could not read block %llu of consensus log \"%s\""</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>,
									 <argument><expr><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>page_header_ptr</name> <operator>=</operator> <name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>page_trailer</name> <operator>=</operator> <operator>(</operator><name>FixedLengthLogPageTrailer</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
									<name>CONSENSUS_LOG_PAGE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FixedLengthLogPageTrailer</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>start_offset</name> <operator>=</operator> <name><name>page_trailer</name><operator>-&gt;</operator><name>start_offset</name></name></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ConsensusLOGGetPageLSN</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slotno</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>start_lsn</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>end_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>page_header_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FixedLengthLogPageTrailer</name> <modifier>*</modifier></type><name>page_trailer</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>page_header_ptr</name> <operator>=</operator> <name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>page_trailer</name> <operator>=</operator> <operator>(</operator><name>FixedLengthLogPageTrailer</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
									<name>CONSENSUS_LOG_PAGE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FixedLengthLogPageTrailer</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>start_lsn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>start_lsn</name> <operator>=</operator> <name><name>page_trailer</name><operator>-&gt;</operator><name>start_lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>end_lsn</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ConsensusLogEntry</name> <modifier>*</modifier></type><name>log_entry</name> <init>= <expr><operator>(</operator><name>ConsensusLogEntry</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
						<operator>(</operator><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>*</operator><name>end_lsn</name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>log_lsn</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>consensus_log_try_flush_fixed_length_page</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>slotno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>start_lsn</name></decl>, <decl><type ref="prev"/><name>end_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ConsensusLOGGetPageLSN</name><argument_list>(<argument><expr><name>slotno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_lsn</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end_lsn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>xlog_flush_tries</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>ok</name> <operator>=</operator> <operator>(</operator><name>end_lsn</name> <operator>==</operator> <name>InvalidXLogRecPtr</name><operator>)</operator> <operator>||</operator> <call><name>consensus_check_physical_flush_lsn</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>end_lsn</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>xlog_flush_failed_tries</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * fixed_length_log_lock must be held at entry, and will be held at exit.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>consensus_log_get_page_lsn</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>pageno</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>start_lsn</name></decl></parameter>, <parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>end_lsn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>slotno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>page_header_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FixedLengthLogPageTrailer</name> <modifier>*</modifier></type><name>page_trailer</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>slotno</name> <operator>=</operator> <call><name>ConsensusSimpleLruReadPage</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slotno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"could not read block %llu of consensus log \"%s\""</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>,
									 <argument><expr><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>page_header_ptr</name> <operator>=</operator> <name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>page_trailer</name> <operator>=</operator> <operator>(</operator><name>FixedLengthLogPageTrailer</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
									<name>CONSENSUS_LOG_PAGE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FixedLengthLogPageTrailer</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>start_lsn</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>start_lsn</name> <operator>=</operator> <name><name>page_trailer</name><operator>-&gt;</operator><name>start_lsn</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>end_lsn</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>end_lsn</name> <operator>=</operator> <name><name>page_trailer</name><operator>-&gt;</operator><name>start_lsn</name></name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>ConsensusLogEntry</name> <modifier>*</modifier></type><name>log_entry</name> <init>= <expr><operator>(</operator><name>ConsensusLogEntry</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
					<operator>(</operator><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>*</operator><name>end_lsn</name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>log_lsn</name></name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ConsensusLOGTruncateForward</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>log_index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>cutoffPage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> 	<name>start_offset</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> 	<name>log_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> 	<name>log_keep_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>XLogRecPtr</name></type> <name>start_lsn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type>	<name>commit_index</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>log_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log truncate forward, invalid log index: %llu"</literal></expr></argument>, <argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>commit_index</name> <operator>=</operator> <call><name>ConsensusGetCommitIndex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>log_index</name> <operator>&gt;</operator> <name>commit_index</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log truncate forward, purge log index(%ld) is "</literal>
				<literal type="string">"more than commit index(%ld)"</literal></expr></argument>, <argument><expr><name>log_index</name></expr></argument>, <argument><expr><name>commit_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>commit_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>log_index</name> <operator>=</operator> <name>commit_index</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<return>return;</return></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>log_keep_size</name> <operator>=</operator> <call><name>ConsensusLOGGetKeepSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>log_size</name> <operator>=</operator> <call><name>ConsensusLOGGetLength</name><argument_list>()</argument_list></call> <operator>/</operator> <name>FIXED_LENGTH_LOGS_PER_PAGE</name> <operator>*</operator> 
		<name>CONSENSUS_LOG_PAGE_SIZE</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>log_keep_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>log_size</name> <operator>&lt;=</operator> <name>log_keep_size</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log truncate forward ignore, current log size(MB): %d, "</literal>
				<literal type="string">"log keep size(MB): %d"</literal></expr></argument>, <argument><expr><name>log_size</name></expr></argument>, <argument><expr><name>log_keep_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>log_keep_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint64</name></type> <name>log_keep_index</name> <init>= <expr><call><name>ConsensusLOGGetLastIndex</name><argument_list>()</argument_list></call> <operator>-</operator> 
			<name>log_keep_size</name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>/</operator> <name>CONSENSUS_LOG_PAGE_SIZE</name> <operator>*</operator> <name>FIXED_LENGTH_LOGS_PER_PAGE</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>log_index</name> <operator>=</operator> <ternary><condition><expr><name>log_index</name> <operator>&gt;</operator> <name>log_keep_index</name></expr> ?</condition><then> <expr><name>log_keep_index</name></expr> </then><else>: <expr><name>log_index</name></expr></else></ternary></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>force</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ConsensusMetaSetInt64</name><argument_list>(<argument><expr><name>PurgeIndexMetaKey</name></expr></argument>, <argument><expr><name>log_index</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>ConsensusMetaSetInt64</name><argument_list>(<argument><expr><name>CommitIndexMetaKey</name></expr></argument>, <argument><expr><name>commit_index</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ConsensusMetaFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * The cutoff point is the start of the segment containing log_index. We
	 * pass the *page* containing log_index to ConsensusSimpleLruTruncate.
	 */</comment>
	<expr_stmt><expr><name>cutoffPage</name> <operator>=</operator> <call><name>FixedLengthLogIndexToPage</name><argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log truncate forward, log index: %llu, cutoffPage: %llu"</literal></expr></argument>, <argument><expr><name>log_index</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check to see if there's any files that could be removed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ConsensusSlruScanDirectory</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>,
															<argument><expr><name>ConsensusSlruScanDirCbReportPresenceForward</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cutoffPage</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>					<comment type="block">/* nothing to remove */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Scan shared memory and remove any pages preceding the cutoff page, to
	 * ensure we won't rewrite them later.
	 */</comment>
	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>consensus_log_get_page_lsn</name><argument_list>(<argument><expr><name>cutoffPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_lsn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Consensus get truncate cutoff page start offset failed, "</literal>
				<literal type="string">"log_index: %llu. "</literal></expr></argument>, <argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>consensus_log_get_page_start_offset</name><argument_list>(<argument><expr><name>cutoffPage</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>start_offset</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Consensus get truncate cutoff page lsn failed, "</literal>
				<literal type="string">"log_index: %llu. "</literal></expr></argument>, <argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ConsensusSimpleLruTruncateForward</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ConsensusSetPurgeLSN</name><argument_list>(<argument><expr><name>start_lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Now we can remove the old segment(s) */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ConsensusSlruScanDirectory</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>,
			<argument><expr><name>consensus_slru_scan_dir_callback_delete_cutoff_forward</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cutoffPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cutoffPage</name> <operator>=</operator> <call><name>VariableLengthLogOffsetToPage</name><argument_list>(<argument><expr><name>start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check to see if there's any files that could be removed */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ConsensusSlruScanDirectory</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>,
															<argument><expr><name>ConsensusSlruScanDirCbReportPresenceForward</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cutoffPage</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>					<comment type="block">/* nothing to remove */</comment>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ConsensusSimpleLruTruncateForward</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>variable_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now we can remove the old segment(s) */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ConsensusSlruScanDirectory</name><argument_list>(<argument><expr><name>ConsensusVariableLengthLogCtl</name></expr></argument>,
			<argument><expr><name>consensus_slru_scan_dir_callback_delete_cutoff_forward</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cutoffPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ConsensusLOGTruncateBackward</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>log_index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type>		<name>cutoffPage</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>cutoffEntry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>slotno</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name>		<modifier>*</modifier></type><name>page_header_ptr</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FixedLengthLogPageTrailer</name> <modifier>*</modifier></type><name>page_trailer</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>log_index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log truncate backward, invalid log index: %llu"</literal></expr></argument>, <argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log truncate backward, log index: %llu"</literal></expr></argument>, <argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>disable_purge</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log truncate backward disabled, log_index: %llu."</literal></expr></argument>,
				<argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ConsensusMetaFlush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>cutoffPage</name> <operator>=</operator> <call><name>FixedLengthLogIndexToPage</name><argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cutoffEntry</name> <operator>=</operator> <call><name>FixedLengthLogIndexToEntry</name><argument_list>(<argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ConsensusSimpleLruFlush</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"Consensus log truncate backward flush failed, log_index: %llu."</literal></expr></argument>,
				<argument><expr><name>log_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>slotno</name> <operator>=</operator> <call><name>ConsensusSimpleLruReadPage</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>slotno</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"could not read block %llu of consensus log \"%s\""</literal></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>,
									 <argument><expr><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>Dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* empty the page after cutoffPage */</comment>
	<expr_stmt><expr><call><name>ConsensusSimpleLruTruncateBackward</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>cutoffPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>page_header_ptr</name> <operator>=</operator> <name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>page_buffer</name><index>[<expr><name>slotno</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>page_trailer</name> <operator>=</operator> <operator>(</operator><name>FixedLengthLogPageTrailer</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>page_header_ptr</name> <operator>+</operator>
									<name>CONSENSUS_LOG_PAGE_SIZE</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FixedLengthLogPageTrailer</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>&gt;</operator> <name>cutoffEntry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>page_trailer</name><operator>-&gt;</operator><name>end_entry</name></name> <operator>=</operator> <name>cutoffEntry</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>consensus_slru_push_dirty</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>slotno</name></expr></argument>,
							<argument><expr><name>cutoffEntry</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ConsensusFixedLengthLogCtl</name><operator>-&gt;</operator><name>shared</name><operator>-&gt;</operator><name>latest_page_number</name></name> <operator>=</operator> <name>cutoffPage</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cutoffEntry</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_append_term</name></name> <operator>=</operator> <name><name>page_trailer</name><operator>-&gt;</operator><name>last_term</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_lsn</name></name> <operator>=</operator> <name><name>page_trailer</name><operator>-&gt;</operator><name>start_lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_timeline</name></name> <operator>=</operator> <name><name>page_trailer</name><operator>-&gt;</operator><name>start_timeline</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>ConsensusLogEntry</name> <modifier>*</modifier></type><name>log_entry</name> <init>= <expr><operator>(</operator><name>ConsensusLogEntry</name> <operator>*</operator><operator>)</operator>
			<operator>(</operator><name>page_header_ptr</name> <operator>+</operator> <operator>(</operator><name>cutoffEntry</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusLogEntry</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_append_term</name></name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>log_term</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_lsn</name></name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>log_lsn</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_timeline</name></name> <operator>=</operator> <name><name>log_entry</name><operator>-&gt;</operator><name>log_timeline</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_index</name></name> <operator>=</operator> <name>log_index</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>sync_index</name></name> <operator>=</operator> <name>log_index</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ConsensusSimpleLruWritePage</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>, <argument><expr><name>slotno</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>fixed_length_log_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Now we can remove the new segment(s) */</comment>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ConsensusSlruScanDirectory</name><argument_list>(<argument><expr><name>ConsensusFixedLengthLogCtl</name></expr></argument>,
			<argument><expr><name>consensus_slru_scan_dir_callback_delete_cutoff_backward</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cutoffPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>ConsensusLOGSetDisablePurge</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>disable</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>disable_purge</name></name> <operator>=</operator> <name>disable</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64</name></type>
<name>ConsensusLOGGetLastIndex</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>sync_index</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>sync_index</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>sync_index</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>sync_index</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type>
<name>consensus_set_member_info_array</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>info_array</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>info_str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>info_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name>info_size</name> <operator>&gt;</operator> <name>MEMBER_INFO_MAX_LENGTH</name></expr> ?</condition><then> <expr><name>MEMBER_INFO_MAX_LENGTH</name></expr> </then><else>: <expr><name>info_size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>info_array</name></expr></argument>, <argument><expr><name>info_str</name></expr></argument>, <argument><expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info_array</name><index>[<expr><name>size</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static void
ConsensusLOGLockTermShared(void)
{
	pthread_rwlock_rdlock(&amp;ConsensusLogCtl-&gt;term_lock);
}

static void
ConsensusLOGUnlockTerm(void)
{
	pthread_rwlock_unlock(&amp;ConsensusLogCtl-&gt;term_lock);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type>
<name>ConsensusMetaStartup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stat_buf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32c</name></type>		<name>crc</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>consensus_meta_dir</name><argument_list>(<argument><expr><literal type="string">"polar_dma"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_stat</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stat_buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>stat_buf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"required polar dma directory \"%s\" is not a directory"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_warn_log</name><argument_list>(<argument><expr><literal type="string">"creating missing polar dma directory \"%s\""</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_mkdir</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>pg_dir_create_mode</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Could not create directory \"%s\": %s."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>consensus_meta_file</name><argument_list>(<argument><expr><literal type="string">"polar_dma"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_open</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>PG_BINARY</name></expr></argument>,
																					 <argument><expr><name>pg_file_create_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>ENOENT</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Could not open consensus meta file \"%s\": %s."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_array</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEMBER_INFO_MAX_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_array</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MEMBER_INFO_MAX_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>DMA_META_VERSION</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>easy_info_log</name><argument_list>(<argument><expr><literal type="string">"Consensus meta file \"%s\" doesn't exist, reading as zeroes"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_read</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name></expr></argument>,
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_close</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Could not read from consensus meta file \"%s\" at offset 0: %s."</literal></expr></argument>,
									 <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>DMA_META_VERSION</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_close</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"meta version unmatched \"%s\" ."</literal></expr></argument>,
									 <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>member_info_size</name> <init>= <expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>member_info</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>member_info_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>member_info</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_close</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"out of memory while consensus meta file load."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_read</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>member_info</name></expr></argument>, <argument><expr><name>member_info_size</name></expr></argument>)</argument_list></call> <operator>!=</operator>
									<name>member_info_size</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_close</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Could not read from consensus meta file \"%s\" at offset %u: %s."</literal></expr></argument>,
					<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name> <operator>=</operator> <name>member_info</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>consensus_set_member_info_array</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_array</name></name></expr></argument>,
				<argument><expr><name>member_info</name></expr></argument>, <argument><expr><name>member_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>learner_info_size</name> <init>= <expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>learner_info</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>learner_info</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_close</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"out of memory while consensus meta file load."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_read</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>learner_info</name></expr></argument>, <argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call> <operator>!=</operator>
									<name>learner_info_size</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_close</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Could not read from consensus meta file \"%s\" at offset %u: %s."</literal></expr></argument>,
					<argument><expr><name>path</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name></expr></argument>,
					<argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name> <operator>=</operator> <name>learner_info</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>consensus_set_member_info_array</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_array</name></name></expr></argument>,
				<argument><expr><name>learner_info</name></expr></argument>, <argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


	<if_stmt><if>if <condition>(<expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_close</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Could not close consensus meta file \"%s\": %s."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name><operator>)</operator></expr></argument>,
			<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ConsensusMetaHeader</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></argument>,
				<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></argument>,
				<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>crc</name></name> <operator>!=</operator> <name>crc</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"incorrect checksum in consensus meta file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ConsensusMetaForceChange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>current_term</name></decl></parameter>,
							<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>cluster_info</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>cluster_info_size</name></decl></parameter>,
							<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>learner_info</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>learner_info_size</name></decl></parameter>,
							<parameter><decl><type><name>uint64</name></type> <name>mock_start_index</name></decl></parameter>,
							<parameter><decl><type><name>TimeLineID</name></type> <name>mock_start_tli</name></decl></parameter>,
							<parameter><decl><type><name>XLogRecPtr</name></type> <name>mock_start_lsn</name></decl></parameter>,
							<parameter><decl><type><name>bool</name></type> <name>is_learner</name></decl></parameter>,
							<parameter><decl><type><name>bool</name></type> <name>reset</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>cluster_info</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name> <operator>=</operator> <name>cluster_info_size</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>cluster_info_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></argument>,
					<argument><expr><name>cluster_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></argument>, <argument><expr><name>cluster_info</name></expr></argument>, <argument><expr><name>cluster_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>consensus_set_member_info_array</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_array</name></name></expr></argument>,
					<argument><expr><name>cluster_info</name></expr></argument>, <argument><expr><name>cluster_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>learner_info</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name> <operator>=</operator> <name>learner_info_size</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>learner_info_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></argument>,
					<argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></argument>, <argument><expr><name>learner_info</name></expr></argument>, <argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>consensus_set_member_info_array</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_array</name></name></expr></argument>,
					<argument><expr><name>learner_info</name></expr></argument>, <argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>reset</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vote_for</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>last_leader_term</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>last_leader_log_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>scan_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mock_start_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mock_start_index</name></name> <operator>=</operator> <name>mock_start_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>mock_start_tli</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>mock_start_lsn</name> <operator>!=</operator> <name>InvalidXLogRecPtr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mock_start_tli</name></name> <operator>=</operator> <name>mock_start_tli</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mock_start_lsn</name></name> <operator>=</operator> <name>mock_start_lsn</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>current_term</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>current_term</name></name> <operator>=</operator> <name>current_term</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>is_learner</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>last_leader_term</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>consensus_meta_flush_internal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusMetaSetMemberInfo</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>member_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>member_info_size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name> <operator>=</operator> <name>member_info_size</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>member_info_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>member_info</name> <operator>+</operator> <name>member_info_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></argument>,
				<argument><expr><name>member_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></argument>, <argument><expr><name>member_info</name></expr></argument>, <argument><expr><name>member_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>consensus_set_member_info_array</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_array</name></name></expr></argument>,
				<argument><expr><name>member_info</name></expr></argument>, <argument><expr><name>member_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>consensus_meta_flush_internal</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Consensus meta file write failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>consensus_meta_get_member_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>member_info</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>from_array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>member_info_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>member_info_size</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>member_info_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>member_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>from_array</name> <operator>&amp;&amp;</operator> <name>member_info_size</name> <operator>&gt;</operator> <name>MEMBER_INFO_MAX_LENGTH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>member_info_size</name> <operator>=</operator> <name>MEMBER_INFO_MAX_LENGTH</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>member_info</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>member_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>member_info</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"out of memory while get consensus meta info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>member_info</name></expr></argument>, <argument><expr><ternary><condition><expr><name>from_array</name></expr> ?</condition><then> <expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_array</name></name></expr> </then><else>:
			<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>member_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>member_info_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ConsensusMetaGetMemberInfo</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>member_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>consensus_meta_get_member_info</name><argument_list>(<argument><expr><name>member_info</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ConsensusMetaGetMemberInfoFromArray</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>member_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>consensus_meta_get_member_info</name><argument_list>(<argument><expr><name>member_info</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusMetaSetLearnerInfo</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>learner_info</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>learner_info_size</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name> <operator>=</operator> <name>learner_info_size</name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>learner_info_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>learner_info</name> <operator>+</operator> <name>learner_info_size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></argument>,
				<argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></argument>, <argument><expr><name>learner_info</name></expr></argument>, <argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>consensus_set_member_info_array</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_array</name></name></expr></argument>,
				<argument><expr><name>learner_info</name></expr></argument>, <argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>consensus_meta_flush_internal</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Consensus meta file write failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>consensus_meta_get_learner_info</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>learner_info</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>from_array</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>learner_info_size</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>learner_info_size</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>learner_info_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>learner_info</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>from_array</name> <operator>&amp;&amp;</operator> <name>learner_info_size</name> <operator>&gt;</operator> <name>MEMBER_INFO_MAX_LENGTH</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>learner_info_size</name> <operator>=</operator> <name>MEMBER_INFO_MAX_LENGTH</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>learner_info</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>learner_info</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"out of memory while get consensus meta info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>learner_info</name></expr></argument>, <argument><expr><ternary><condition><expr><name>from_array</name></expr> ?</condition><then> <expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_array</name></name></expr> </then><else>:
			<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>learner_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>learner_info_size</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ConsensusMetaGetLearnerInfo</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>learner_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>consensus_meta_get_learner_info</name><argument_list>(<argument><expr><name>learner_info</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>ConsensusMetaGetLearnerInfoFromArray</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>learner_info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>consensus_meta_get_learner_info</name><argument_list>(<argument><expr><name>learner_info</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ConsensusMetaSetInt64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>CurrentTermMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>current_term</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>VoteForMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vote_for</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>LastLeaderTermMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>last_leader_term</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>LastLeaderIndexMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>last_leader_log_index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>ScanIndexMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>scan_index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>ClusterIdMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cluster_id</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>CommitIndexMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>commit_index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>PurgeIndexMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>purge_index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>MockStartIndex</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mock_start_index</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>MockStartTLI</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mock_start_tli</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>MockStartLSN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mock_start_lsn</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Invalid consensus meta key."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>flush</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>consensus_meta_flush_internal</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Consensus meta file write failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ConsensusMetaGetInt64</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>CurrentTermMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>current_term</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>VoteForMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>vote_for</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>LastLeaderTermMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>last_leader_term</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>LastLeaderIndexMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>last_leader_log_index</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>ScanIndexMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>scan_index</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>ClusterIdMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>cluster_id</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>CommitIndexMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>commit_index</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>PurgeIndexMetaKey</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>purge_index</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>MockStartIndex</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mock_start_index</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>MockStartTLI</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mock_start_tli</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>MockStartLSN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>mock_start_lsn</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"invalid consensus meta key."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>ConsensusMetaFlush</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>ok</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ok</name> <operator>=</operator> <call><name>consensus_meta_flush_internal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ok</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>consensus_meta_flush_internal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> 	<name>meta_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> 	<modifier>*</modifier></type><name>meta_buffer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>	<name><name>path</name><index>[<expr><name>MAXPGPATH</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>		<name>fd</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pg_crc32c</name></type>		<name>crc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>meta_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusMetaHeader</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
				<name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name> <operator>+</operator>
				<name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>INIT_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name><operator>)</operator></expr></argument>,
			<argument><expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ConsensusMetaHeader</name></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></argument>,
				<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>COMP_CRC32C</name><argument_list>(<argument><expr><name>crc</name></expr></argument>, <argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></argument>,
				<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>crc</name></name> <operator>=</operator> <name>crc</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>meta_buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>meta_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>meta_buffer</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"out of memory while consensus meta file flush."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>meta_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusMetaHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>meta_buffer</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusMetaHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>,
				<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>member_info_str</name></name></expr></argument>, <argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>meta_buffer</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ConsensusMetaHeader</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>member_info_size</name></name></expr></argument>,
				<argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>learner_info_str</name></name></expr></argument>, <argument><expr><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>learner_info_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>PG_HAVE_ATOMIC_U64_SIMULATION</name></cpp:ifndef>
	<expr_stmt><expr><call><name>pg_atomic_fetch_add_u64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>stats</name><operator>.</operator><name>meta_flushes</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>consensus_meta_file</name><argument_list>(<argument><expr><literal type="string">"polar_dma"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_open</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>PG_BINARY</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>,
																					 <argument><expr><name>pg_file_create_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fd</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>meta_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Could not open consensus meta file \"%s\""</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_write</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>meta_buffer</name></expr></argument>, <argument><expr><name>meta_size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>meta_size</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOSPC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_close</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>meta_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Could not write to consensus meta file \"%s\" : %s."</literal></expr></argument>,
									 <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>meta_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name><name>ConsensusMetaCtl</name><operator>-&gt;</operator><name>vfs_api</name><operator>-&gt;</operator><name>vfs_close</name></name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>easy_fatal_log</name><argument_list>(<argument><expr><literal type="string">"Could not close consensus meta file \"%s\": %s."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>consensus_meta_dir</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>subdir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_shared_storage_mode</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>polar_path_remove_protocol</name><argument_list>(<argument><expr><name>polar_datadir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>consensus_meta_file</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>subdir</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>polar_enable_shared_storage_mode</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/%s/consensus_meta"</literal></expr></argument>, <argument><expr><call><name>polar_path_remove_protocol</name><argument_list>(<argument><expr><name>polar_datadir</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAXPGPATH</name></expr></argument>, <argument><expr><literal type="string">"%s/consensus_meta"</literal></expr></argument>, <argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusLOGSetTerm</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>term_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>term_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64</name></type>
<name>ConsensusLOGGetTerm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>term</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>term_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>current_term</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>term_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>term</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64</name></type>
<name>ConsensusLOGGetLength</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>purge_index</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ConsensusMetaGetInt64</name><argument_list>(<argument><expr><name>PurgeIndexMetaKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>purge_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>ConsensusLOGGetLastIndex</name><argument_list>()</argument_list></call> <operator>-</operator> <name>purge_index</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusLOGSetLogTerm</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>term</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>next_append_term</name></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64</name></type>
<name>ConsensusLOGGetLogTerm</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>term</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>term</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>next_append_term</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>term</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusLOGGetLastLSN</name><parameter_list>(<parameter><decl><type><name>XLogRecPtr</name> <modifier>*</modifier></type><name>last_write_lsn</name></decl></parameter>, <parameter><decl><type><name>TimeLineID</name> <modifier>*</modifier></type><name>last_write_timeline</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>last_write_lsn</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_lsn</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>last_write_timeline</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>last_write_timeline</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint32</name></type>
<name>ConsensusLOGGetKeepSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PG_HAVE_ATOMIC_U32_SIMULATION</name></cpp:ifdef> 
	<decl_stmt><decl><type><name>uint32</name></type> <name>log_keep_size</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_rdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>log_keep_size</name> <operator>=</operator> <name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>log_keep_size</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>log_keep_size</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<return>return <expr><call><name>pg_atomic_read_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>log_keep_size</name></name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>ConsensusLOGSetKeepSize</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>log_keep_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>PG_HAVE_ATOMIC_U32_SIMULATION</name></cpp:ifdef>
	<expr_stmt><expr><call><name>pthread_rwlock_wrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>log_keep_size</name></name> <operator>=</operator> <name>log_keep_size</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pthread_rwlock_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>info_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr_stmt><expr><call><name>pg_atomic_write_u32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ConsensusLogCtl</name><operator>-&gt;</operator><name>log_keep_size</name></name></expr></argument>, <argument><expr><name>log_keep_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>
</unit>
