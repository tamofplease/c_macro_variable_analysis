<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_message.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_baseth_pool.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_DOING</name></cpp:ifdef>
<decl_stmt><decl><type><name>easy_atomic_t</name></type> <name>easy_debug_uuid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>easy_message_t</name> <modifier>*</modifier></type><name>easy_message_create_nlist</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_message_t</name>          <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>size</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>default_msglen</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// æ°å»ºä¸ä¸ªmessage</comment>
    <expr_stmt><expr><name><name>pool</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_message_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>first_msglen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>input</name> <operator>=</operator> <call><name>easy_buf_create</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>EASY_DEBUG_MAGIC_MESSAGE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>next_read_len</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>client</name></name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>client</name><operator>-&gt;</operator><name>is_ssl</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>EASY_IO_BUFFER_SIZE</name></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EASY_TYPE_MESSAGE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>request_list_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>request_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>all_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>easy_message_t</name> <modifier>*</modifier></type><name>easy_message_create</name><parameter_list>(<parameter><decl><type><name>easy_connection_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>easy_message_create_nlist</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>easy_list_add_tail</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>message_list_node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>message_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><name>m</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * destroyæeasy_message_tå¯¹è±¡
 *
 * @param m - easy_message_tå¯¹è±¡
 */</comment>
<function><type><name>int</name></type> <name>easy_message_destroy</name><parameter_list>(<parameter><decl><type><name>easy_message_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>del</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_request_t</name>          <modifier>*</modifier></type><name>r</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>n</name></decl>;</decl_stmt>

    <comment type="line">// delete from message_list</comment>
    <if_stmt><if>if <condition>(<expr><name>del</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>==</operator> <name>EASY_MESG_DESTROY</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>EASY_OK</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>status</name></name> <operator>=</operator> <name>EASY_MESG_DESTROY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>message_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>easy_atomic_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// server done</comment>
        <macro><name>easy_list_for_each_entry_safe</name><argument_list>(<argument>r</argument>, <argument>n</argument>, <argument>&amp;m-&gt;all_list</argument>, <argument>all_node</argument>)</argument_list></macro> <block>{<block_content>
            <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>all_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>request_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>easy_request_server_done</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>message_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>input</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>easy_buf_destroy</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
        <expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>magic</name></name> <operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>EASY_BREAK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>EASY_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æ°å»ºä¸ä¸ªsession_t
 */</comment>
<function><type><name>easy_session_t</name> <modifier>*</modifier></type><name>easy_session_create</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>asize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_pool_t</name>             <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>hint</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>asize</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>size</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>asize</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// æ°å»ºä¸ä¸ªpool</comment>
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>easy_session_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pool</name> <operator>=</operator> <call><name>easy_pool_create</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><name>hint</name> <operator>&lt;</operator> <name>size</name></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><name>hint</name></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// æ°å»ºä¸ä¸ªmessage</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <operator>(</operator><name>easy_session_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_alloc</name><argument_list>(<argument><expr><name>pool</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_session_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>magic</name></name> <operator>=</operator> <name>EASY_DEBUG_MAGIC_SESSION</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>magic</name></name> <operator>=</operator> <name>EASY_DEBUG_MAGIC_REQUEST</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_DOING</name></cpp:ifdef>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>uuid</name></name> <operator>=</operator> <call><name>easy_atomic_add_return</name><argument_list>(<argument><expr><operator>&amp;</operator><name>easy_debug_uuid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>pool</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>ms</name></name> <operator>=</operator> <operator>(</operator><name>easy_message_session_t</name> <operator>*</operator><operator>)</operator><name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>EASY_TYPE_SESSION</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * destroyæeasy_session_tå¯¹è±¡
 *
 * @param s - easy_session_tå¯¹è±¡
 */</comment>
<function><type><name>void</name></type> <name>easy_session_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>easy_message_t</name>          <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_session_t</name>          <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>s</name> <operator>=</operator> <operator>(</operator><name>easy_session_t</name> <operator>*</operator><operator>)</operator> <name>data</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cleanup</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cleanup</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r</name></name><operator>,</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// å¦æå­å¨</comment>
    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>async</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>m</name> <operator>=</operator> <operator>(</operator><name>easy_message_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>request_list_node</name><operator>.</operator><name>next</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>request_list_node</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_message_destroy</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>EASY_DEBUG_MAGIC</name></cpp:ifdef>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>magic</name></name> <operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>easy_pool_destroy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>easy_session_process</name><parameter_list>(<parameter><decl><type><name>easy_session_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stop</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>stop</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ev_timer_stop</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>timeout_watcher</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>session_list_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_request_client_done</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_atomic_dec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>pool</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// timeout, æoutputéçclearæ</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>EASY_ERROR</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nextb</name></name> <operator>&amp;&amp;</operator> <call><name>easy_list_empty</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nextb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>easy_buf_t</name>              <modifier>*</modifier></type><name>b</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>b2</name></decl>;</decl_stmt>
        <macro><name>easy_list_for_each_entry_safe_reverse</name><argument_list>(<argument>b</argument>, <argument>b2</argument>, <argument>s-&gt;nextb</argument>, <argument>node</argument>)</argument_list></macro> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>args</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>pool</name></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_list_del</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nextb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>process</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>now</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>now</name></name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>c</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>now</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>process</name></name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>r</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>easy_error_log</name><argument_list>(<argument><expr><literal type="string">"session process is null, s = %p\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_session_destroy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>(</operator><ternary><condition><expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>EASY_ERROR</name></expr> </then><else>: <expr><name>ret</name></expr></else></ternary><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
