<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_log.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_log.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;easy_time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/syscall.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_io.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>easy_log_print_pt</name></type>       <name>easy_log_print</name> <init>= <expr><name>easy_log_print_default</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>easy_log_format_pt</name></type>      <name>easy_log_format</name> <init>= <expr><name>easy_log_format_default</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>easy_log_level_t</name></type>        <name>easy_log_level</name> <init>= <expr><name>EASY_LOG_WARN</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**
 * è®¾ç½®logçæå°å½æ°
 */</comment>
<function><type><name>void</name></type>  <name>easy_log_set_print</name><parameter_list>(<parameter><decl><type><name>easy_log_print_pt</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>easy_log_print</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ev_set_syserr_cb</name><argument_list>(<argument><expr><name>easy_log_print</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * è®¾ç½®logçæ ¼å¼å½æ°
 */</comment>
<function><type><name>void</name></type>  <name>easy_log_set_format</name><parameter_list>(<parameter><decl><type><name>easy_log_format_pt</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>easy_log_format</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * å ä¸æ¥å¿
 */</comment>
<function><type><name>void</name></type> <name>easy_log_format_default</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>ev_tstamp</name></type>   <name>oldtime</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>__thread</name> <name>char</name></type>        <name><name>time_str</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ev_tstamp</name></type>                   <name>now</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                         <name>len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>                        <name><name>buffer</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// ä»loopä¸­å</comment>
    <if_stmt><if>if <condition>(<expr><name>easy_baseth_self</name> <operator>&amp;&amp;</operator> <name><name>easy_baseth_self</name><operator>-&gt;</operator><name>loop</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>ev_now</name><argument_list>(<argument><expr><name><name>easy_baseth_self</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">//now = time(NULL);</comment>
        <expr_stmt><expr><name>now</name> <operator>=</operator> <call><name>ev_time</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>oldtime</name> <operator>!=</operator> <name>now</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>time_t</name></type>                  <name>t</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type>               <name>tm</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>oldtime</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator> <name>now</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>easy_localtime</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>time_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lnprintf</name><argument_list>(<argument><expr><name>time_str</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="string">"[%04d-%02d-%02d %02d:%02d:%02d.%06d]"</literal></expr></argument>,
                 <argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,
                 <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>now</name> <operator>-</operator> <name>t</name><operator>)</operator> <operator>*</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// log level</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>level_str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>level</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>EASY_LOG_FATAL</name></expr>:</case>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>level_str</name></expr></argument>, <argument><expr><literal type="string">"[ERROR]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>EASY_LOG_ERROR</name></expr>:</case>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>level_str</name></expr></argument>, <argument><expr><literal type="string">"[ERROR]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>EASY_LOG_WARN</name></expr>:</case>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>level_str</name></expr></argument>, <argument><expr><literal type="string">"[Warning]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>EASY_LOG_INFO</name></expr>:</case>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>level_str</name></expr></argument>, <argument><expr><literal type="string">"[Info]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>EASY_LOG_DEBUG</name></expr>:</case>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>level_str</name></expr></argument>, <argument><expr><literal type="string">"[Debug]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>EASY_LOG_TRACE</name></expr>:</case>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>level_str</name></expr></argument>, <argument><expr><literal type="string">"[Trace]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>level_str</name></expr></argument>, <argument><expr><literal type="string">"[Default]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></switch>

		<comment type="line">// thread id</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tid_str</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>lnprintf</name><argument_list>(<argument><expr><name>tid_str</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%d(%d)"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>syscall</name><argument_list>(<argument><expr><name>__NR_gettid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// print</comment>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>lnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">192</literal></expr></argument>, <argument><expr><literal type="string">"%s %s %s "</literal></expr></argument>, <argument><expr><name>time_str</name></expr></argument>, <argument><expr><name>level_str</name></expr></argument>, <argument><expr><name>tid_str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>va_list</name></type>                 <name>args</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>easy_vsnprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="number">4090</literal> <operator>-</operator> <name>len</name></expr></argument>,  <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// å»ææå'\n'</comment>
    <while>while<condition>(<expr><name><name>buffer</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>--</operator></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>easy_log_print</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * æå°åºæ¥
 */</comment>
<function><type><name>void</name></type> <name>easy_log_print_default</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_ignore</name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>constructor</name><operator>)</operator></expr></argument>)</argument_list> <name>easy_log_start_</name><argument_list>()</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name>                    <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"easy_log_level"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>easy_log_level</name> <operator>=</operator> <operator>(</operator><name>easy_log_level_t</name><operator>)</operator><call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></decl></decl_stmt>

</unit>
