<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/PolarDB-for-PostgreSQL/src/backend/polar_dma/libconsensus/dependency/easy/src/io/easy_file.c"><comment type="block">/*
 * Copyright (c) 2020, Alibaba Group Holding Limited
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>_XOPEN_SOURCE</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro> <cpp:value>600</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sendfile.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_socket.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"easy_log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<function><type><name>easy_file_task_t</name> <modifier>*</modifier></type><name>easy_file_task_create</name><parameter_list>(<parameter><decl><type><name>easy_request_t</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type>             <name>fs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>easy_file_task_t</name>        <modifier>*</modifier></type><name>ft</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>ft</name> <operator>=</operator> <operator>(</operator><name>easy_file_task_t</name> <operator>*</operator><operator>)</operator><call><name>easy_pool_calloc</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>easy_file_task_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ft</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>ft</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>fs</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bufsize</name> <operator>=</operator> <name>EASY_MAX_FILE_BUFFER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <call><name>easy_min</name><argument_list>(<argument><expr><name><name>ft</name><operator>-&gt;</operator><name>count</name></name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>easy_buf_create</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>ms</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>ft</name><operator>-&gt;</operator><name>bufsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name><name>ft</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ft</name><operator>-&gt;</operator><name>b</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name>ft</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_file_task_set</name><parameter_list>(<parameter><decl><type><name>easy_file_task_t</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name><name>ft</name><operator>-&gt;</operator><name>bufsize</name></name> <operator>=</operator> <name>bufsize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <name>args</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>easy_file_task_reset</name><parameter_list>(<parameter><decl><type><name>easy_file_task_t</name> <modifier>*</modifier></type><name>ft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>easy_list_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ft</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name><name>ft</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ft</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <name><name>ft</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>easy_file_buf_t</name> <operator>*</operator><operator>)</operator><name><name>ft</name><operator>-&gt;</operator><name>b</name></name><operator>)</operator><operator>-&gt;</operator><name>flags</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * file_task process
 */</comment>
<comment type="block">/*
int easy_file_task_process(easy_file_task_t *ft)
{
    int64_t                 rc = 0;
    long                    offset = ft-&gt;offset;

    do {
        switch(ft-&gt;type) {
        case EASY_FILE_WRITE:
            rc = pwrite(ft-&gt;fd, ft-&gt;buf, ft-&gt;count, offset);
            break;

        case EASY_FILE_READ:
            rc = pread(ft-&gt;fd, ft-&gt;buf, ft-&gt;count, offset);
            break;

        case EASY_FILE_SENDFILE:
        case EASY_FILE_WILLNEED:
            rc = posix_fadvise(ft-&gt;fd, offset, ft-&gt;count, POSIX_FADV_WILLNEED);
            break;
        }
    } while(rc == -1 &amp;&amp; errno == EINTR);

    // ç»æå¤ç
    if (rc == -1) {
        ft-&gt;ret = (errno &gt; 0) ? -errno : EASY_ERROR;
    } else {
        ft-&gt;ret = rc;
    }

    ft-&gt;done = 1;
    return rc;
}
*/</comment>
</unit>
